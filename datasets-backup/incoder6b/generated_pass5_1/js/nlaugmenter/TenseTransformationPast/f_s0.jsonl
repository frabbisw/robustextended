{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const closestElements = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstElement) < threshold && Math.abs(number - lastElement) < threshold;\n  });\n  return closestElements.length > 1;\n};\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Your code here\n  let groups = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_string = '';\n  let closed_brace_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_brace_count++;\n      open_brace_string += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      closed_brace_count++;\n      closed_brace_string += paren_string[i];\n      if (open_brace_count === closed_brace_count) {\n        groups.push(open_brace_string);\n        open_brace_count = 0;\n        closed_brace_count = 0;\n        open_brace_string = '';\n        closed_brace_string = '';\n      }\n    }\n  }\n  if (open_brace_count > closed_brace_count) {\n    groups.push(open_brace_string);\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any spaces in the input string.\n  >>> countParenGroups('( ) (( )) (( )( ))')\n  4\n  */\nconst countParenGroups = (paren_string) => {\n  // Your code here\n  let groups = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      groups++;\n    } else if (paren_string[i] === ')') {\n      groups--;\n    }\n  }\n  return groups;\n};\n\n/* \n  Your task is to complete the function so that it returns the number of groups in the input string. \n  If the input string does not contain any groups, the function should return 0.\n  Ignore any space", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = string\n  let longestPalindromeLength = string.length\n  let longestPalindromePostfix = ''\n  let longestPalindromePostfixLength = 0\n  let longestPalindromePostfixReverse = ''\n  let longestPalindromePostfixReverseLength = 0\n  let longestPalindromePostfixReverseReverse = ''\n  let longestPalindromePostfixReverseReverseLength = 0\n  let longestPalindromePostfixReverseReverseReverse = ''\n  for(let i = 0; i < string.length; i++){\n    let currentChar = string[i]\n    let currentCharLength = string[i].length\n    let currentCharPostfix = string.substr(i, currentCharLength)\n    let currentCharPostfixLength = currentCharPostfix.length\n    let currentCharPostfixReverse = currentCharPostfix.split('').reverse().join('')\n    let currentCharPostfixReverseLength = currentCharPostfixReverse.length\n    let currentCharPostfixReverseReverse = currentCharPostfixReverse.split('').reverse().join('')\n    let currentCharPostfixReverseReverseLength = currentCharPostfixReverseReverse.length\n    let currentCharPostfixReverseReverseReverse = currentCharPostfixReverseReverse.split('').reverse().join('')\n    if(currentCharLength > longestPalindromeLength){\n      longestPalindrome = currentCharPostfix\n      longestPalindromeLength = currentCharLength\n      longestPalindromePostfix = currentCharPostfixReverse\n      longestPalindromePostfixLength = currentCharPostfixLength\n      longestPalindromePostfixReverse = currentCharPostfixReverseReverse\n      longestPalindromePostfixReverseLength = currentCharPostfixReverseLength\n      longestPalindromePostfixReverseReverse = currentCharPostfixReverseReverseReverse\n      longestPalindromePostfixReverseReverseLength = currentCharPostfixReverseReverseLength\n      longestPalindromePostfixReverseReverseReverse = currentCharPostfixReverseReverseReverse\n    }\n  }\n  return longestPalindrome\n}\n\n/* Test if supplied string is a palindrome\n   Algorithm idea was simple: \n  -If string length is odd, then it must be a palindrome. \n  -If string length is even, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string length is odd, then: \n  -If string length is even, then: \n  -If string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let nextOdd = i % 2 === 0? i + 1 : i;\n    let nextEven = i % 2 === 0? i : i + 1;\n    result.push(nextOdd, nextEven);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the first n words from the given string.\n  \n  For example:\n  firstNWords(\"Hi, my name is John\", 3) == [\"Hi\", \"my\", \"name\"]\n  firstNWords(\"One, two, three, four, five, six\", 6) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst firstNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(0, n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the last n words from the given string.\n  \n  For example:\n  lastNWords(\"Hi, my name is John\", 3) == [\"John\"]\n  lastNWords(\"One, two, three, four, five, six\", 6) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"one\"]\n  */\nconst lastNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(-n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n}\n\n/*\n  You were given a string of words and a number n. Your task was to return \n  the middle n words from the given string.\n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == [\"my\", \"name\"]\n  middleNWords(\"One, two, three, four, five, six\", 6) == [\"four\", \"three\", \"two\", \"one\"]\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest odd integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  if (x === y) {\n    return 0\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y)\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2)\n  }\n  return -1\n}\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You were given two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits2 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits3 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits4 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits5 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits6 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits7 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits8 = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits9 = (x) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sortedArr = arr.sort((a, b) => b - a);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrString = reversedArr.map(num => num.toString()).join('');\n  const reversedArrStringArr = reversedArrString.split('');\n  const reversedArrStringArrReversed = reversedArrStringArr.reverse();\n  const reversedArrStringArrReversedString = reversedArrStringArrReversed.join('');\n  const reversedArrStringArrReversedStringArr = reversedArrStringArrReversedString.split('');\n  const reversedArrStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedString = reversedArrStringArrReversedStringArrReversed.join('');\n  const reversedArrStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedString = reversedArrStringArrReversedStringArrReversedStringArrReversed.join('');\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedString = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversed.join('');\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversed = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr = reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArr.map(num => num.toString()).reverse();\n  const reversedArrStringArrReversedStringArrReversedStringArrReversedStringArrReversedStringArrReversedString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * factorial(i));\n    } else {\n      result.push(sum(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function factorial that took n as a parameter, \n   and returned the factorial of n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   factorial of n was the multiplication of the numbers from 1 to n (1* 2*...* n).\n  Example:\n  factorial(5) == 120\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n};\n\n/* Implement the function sum that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum(2, 5) == 15\n  */\nconst sum = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x + sum(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum2 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum2 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum2(2, 5) == 15\n  */\nconst sum2 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum2(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum3 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum3 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum3(2, 5) == 15\n  */\nconst sum3 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x + sum3(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum4 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum4 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum4(2, 5) == 15\n  */\nconst sum4 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum4(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum5 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum5 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum5(2, 5) == 15\n  */\nconst sum5 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum5(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum6 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum6 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum6(2, 5) == 15\n  */\nconst sum6 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum6(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum7 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum7 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum7(2, 5) == 15\n  */\nconst sum7 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum7(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum8 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum8 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum8(2, 5) == 15\n  */\nconst sum8 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum8(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum9 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum9 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum9(2, 5) == 15\n  */\nconst sum9 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum9(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum10 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum10 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum10(2, 5) == 15\n  */\nconst sum10 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum10(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum11 that took two parameters: \n   a number and a number n, and returned the sum of numbers from 1 to n if n was even or the product of numbers from 1 to n otherwise.\n   n started from 1.\n   sum11 was the addition of the numbers from 1 to n (1+ 2+ 3+.... n).\n  Example:\n  sum11(2, 5) == 15\n  */\nconst sum11 = (x, y) => {\n  if (y === 0 || y === 1) {\n    return y;\n  } else {\n    return x * sum11(x + 1, y - 1);\n  }\n};\n\n/* Implement the function sum12 that took two parameters: \n   a number and a number n, and returned the sum of numbers from ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  If a number was negative, then its first signed digit was negative: \n  e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let count = 0;\n  let lastElement = arr.pop();\n  arr.push(lastElement);\n  for(let i = 0; i < arr.length; i++){\n    count++;\n    arr.splice(0, 1);\n  }\n  if(count === arr.length){\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of integers and returns an array of\n  the even numbers in the array. \n  \n  If the array is empty or contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even numbers, return an empty array.\n  \n  If the array contains only odd numbers, return an empty array.\n  \n  If the array contains both even and odd numbers, return an empty array.\n  \n  If the array contains only even ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('001', '101')\n  '011'\n  */\nconst stringXor2 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor2('001', '101')\n  '011'\n  */\nconst stringXor3 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor3('001', '101')\n  '011'\n  */\nconst stringXor4 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor4('001', '101')\n  '011'\n  */\nconst stringXor5 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor5('001', '101')\n  '011'\n  */\nconst stringXor6 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor6('001', '101')\n  '011'\n  */\nconst stringXor7 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor7('001', '101')\n  '011'\n  */\nconst stringXor8 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor8('001', '101')\n  '011'\n  */\nconst stringXor9 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor9('001', '101')\n  '011'\n  */\nconst stringXor10 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor10('001', '101')\n  '011'\n  */\nconst stringXor11 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor11('001', '101')\n  '011'\n  */\nconst stringXor12 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor12('001', '101')\n  '011'\n  */\nconst stringXor13 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor13('001', '101')\n  '011'\n  */\nconst stringXor14 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor14('001', '101')\n  '011'\n  */\nconst stringXor15 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor15('001', '101')\n  '011'\n  */\nconst stringXor16 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor16('001', '101')\n  '011'\n  */\nconst stringXor17 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input was two strings a and b consisting of 0s and 1s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor17('001', '101')\n  '011'\n  */\nconst stringXor18 = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  swap([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst swap = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  swap([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst swap = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  swap([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst swap = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  swap([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst swap = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  swap([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst swap = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length + odd.length === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform a swap of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of swaps performed.\n   If it was possible to swap elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  swap", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let splitted = test.split(' ');\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 2  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 1  the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, k) => {\n  let result = \"\";\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== k[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given a string s and a number k. \n   You had to delete all the characters in s that was equal to any character in k \n   then checked if the result string was palindrome. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        numOfOddDigits++;\n      }\n    }\n    oddCountArr.push(`the number of odd elements ${numOfOddDigits} the str${lst[i].length} ${numOfOddDigits} of the ${lst[i].length}nput.`);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        numOfEvenDigits++;\n      }\n    }\n    evenCountArr.push(`the number of even elements ${numOfEvenDigits} the str${lst[i].length} ${numOfEvenDigits} of the ${lst[i].length}nput.`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        numOfOddEvenDigits++;\n      }\n    }\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenDigits} the str${lst[i].length} ${numOfOddEvenDigits} of the ${lst[i].length}nput.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        numOfOddEvenDigits++;\n      }\n    }\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenDigits} the str${lst[i].length} ${numOfOddEvenDigits} of the ${lst[i].length}nput.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        numOfOddEvenDigits++;\n      }\n    }\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenDigits} the str${lst[i].length} ${numOfOddEvenDigits} of the ${lst[i].length}nput.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        numOfOddEvenDigits++;\n      }\n    }\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenDigits} the str${lst[i].length} ${numOfOddEvenDigits} of the ${lst[i].length}nput.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\"]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = minIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = maxIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the minimum product of any non-empty sub-array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let product = 1;\n  for (let i = minIndex; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, found the maximum product of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  let product = 1;\n  for (let i = maxIndex; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = minIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = maxIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the minimum product of any non-empty sub-array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let product = 1;\n  for (let i = minIndex; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, found the maximum product of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  let product = 1;\n  for (let i = maxIndex; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = minIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  let sum = 0;\n  for (let i = maxIndex; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, found the minimum product of any non-empty sub-array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  let product = 1;\n  for (let i = minIndex; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, found the maximum product of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -24\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j]? capacity : 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j] > 0) {\n                buckets[i][j] -= 1;\n                count += 1;\n            }\n        }\n    }\n    return count;\n};\n</code>\n<|/ a tags=dynamic-programming,algorithm,javascript,arrays |>\n<| c |>\nI like this solution. Although it does require a lot of memory to store the buckets. But it does solve the problem in O(n^2) time complexity. Thanks!\n<|/ c |>\n<| c |>\nI added a solution without using extra memory to store the buckets.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let buckets = new Array(grid.length).fill(0);\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        buckets[i] += 1;\n      }\n    }\n  }\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (buckets[i] === capacity) {\n        count += 1;\n        buckets[i] = 0;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxFill([\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n  [0, 0, 1, 1],\n  [0, 0, 0, 0],\n  [1, 1, 1, 1],\n  [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n  [0, 0, 0],\n  [0, 0, 0]\n], 5));</code>\n<|/ a tags=dynamic-programming,algorithm,javascript,arrays |>\n<| a tags=dynamic-programming,algorithm,javascript,arrays |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    let buckets = new Array(grid.length).fill(0);\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]) {\n                buckets[i] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (buckets[i] === capacity) {\n                count += 1;\n                buckets[i] = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    let buckets = new Array(grid.length).fill(0);\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]) {\n                buckets[i] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (buckets[i] === capacity) {\n                count += 1;\n                buckets[i] = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5));</code>\n<|/ a tags=dynamic-programming,algorithm,javascript,arrays |>\n<| a tags=dynamic-programming,algorithm,javascript,arrays |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    let buckets = new Array(grid.length).fill(0);\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]) {\n                buckets[i] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (buckets[i] === capacity) {\n                count += 1;\n                buckets[i] = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    let buckets = new Array(grid.length).fill(0);\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]) {\n                buckets[i] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (buckets[i] === capacity) {\n                count += 1;\n                buckets[i] = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5));</code>\n<|/ a tags=dynamic-programming,algorithm,javascript,arrays |>\n<| a tags=dynamic-programming,algorithm,javascript,arrays |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    let buckets = new Array(grid.length).fill(0);\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]) {\n                buckets[i] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (buckets[i] === capacity) {\n                count += 1;\n                buckets[i] = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 2));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      if (oneCount > decCount) {\n        sortedArr.push(arr[i]);\n        oneCount = 0;\n      } else {\n        sortedArr.push(arr[i]);\n        decCount = 0;\n      }\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.slice(0, i));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n  let vowelsCountFromLeftAndRight = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUp = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndUp = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n  let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 17;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 19;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 21;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 22;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 23;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 24;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 25;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 26;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 27;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let isGood = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      isGood = false;\n      break;\n    }\n  }\n  return isGood;\n};\n\n/* You were given a list of strings. Your job was to find the longest string in \n   the list that is a valid expression. \n   For example: \n   ['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n\n  return longest\n}\n\n/**\n * Returns the string with the longest common prefix between the given strings.\n * If no common prefix is found, returns null.\n * \n * >>> commonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonPrefix = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].indexOf(commonPrefix) === 0) {\n      commonPrefix = strings[i]\n    }\n  }\n\n  return commonPrefix\n}\n\n/**\n * Returns the string with the longest common suffix between the given strings.\n * If no common suffix is found, returns null.\n * \n * >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSuffix = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].indexOf(commonSuffix) === strings[i].length - commonSuffix.length) {\n      commonSuffix = strings[i]\n    }\n  }\n\n  return commonSuffix\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstring(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstring(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstring(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstring = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].indexOf(commonSubstring)!== -1) {\n      commonSubstring = strings[i]\n    }\n  }\n\n  return commonSubstring\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', 'b', 'c'])\n  'abc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSubstringIgnoreCase(['a', 'bb', 'ccc', 'dddd'])\n  null\n  */\nconst commonSubstringIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let commonSubstringIgnoreCase = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].toLowerCase().indexOf(commonSubstringIgnoreCase.toLowerCase())!== -1) {\n      commonSubstringIgnoreCase = strings[i]\n    }\n  }\n\n  return commonSubstringIgnoreCase\n}\n\n/**\n * Returns the string with the longest common substring between the given strings.\n * If no common substring is found, returns null.\n * \n * >>> commonSubstringIgnoreCase(['a', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { minimum, minimum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  for (let i = 0; i < k; i++) {\n    let largestIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[largestIndex]) {\n        largestIndex = j;\n      }\n    }\n    result.push(arr[largestIndex]);\n    largest = Math.max(largest, arr[largestIndex]);\n  }\n  return result;\n};\n\nexport { kLargest, kLargest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  for (let i = 0; i < k; i++) {\n    let smallestIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[smallestIndex]) {\n        smallestIndex = j;\n      }\n    }\n    result.push(arr[smallestIndex]);\n    smallest = Math.min(smallest, arr[smallestIndex]);\n  }\n  return result;\n};\n\nexport { kSmallest, kSmallest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k largest and k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [5, 1]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestK = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  let largest = 0;\n  for (let i = 0; i < k; i++) {\n    let smallestIndex = 0;\n    let largestIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[smallestIndex]) {\n        smallestIndex = j;\n      }\n      if (arr[j] > arr[largestIndex]) {\n        largestIndex = j;\n      }\n    }\n    result.push(arr[smallestIndex]);\n    smallest = Math.min(smallest, arr[smallestIndex]);\n    result.push(arr[largestIndex]);\n    largest = Math.max(largest, arr[largestIndex]);\n  }\n  return result;\n};\n\nexport { kSmallestK, kSmallestK2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k smallest and k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestKK = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  let largest = 0;\n  for (let i = 0; i < k; i++) {\n    let smallestIndex = 0;\n    let largestIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[smallestIndex]) {\n        smallestIndex = j;\n      }\n      if (arr[j] > arr[largestIndex]) {\n        largestIndex = j;\n      }\n    }\n    result.push(arr[smallestIndex]);\n    smallest = Math.min(smallest, arr[smallestIndex]);\n    result.push(arr[largestIndex]);\n    largest = Math.max(largest, arr[largestIndex]);\n  }\n  return result;\n};\n\nexport { kSmallestKK, kSmallestKK2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k smallest and k largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [6, 5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  intersection([2, 7, 3, 8, 1, 9, 3, 5]) ==> [3, 5]\n  intersection([3, 5]) ==> [3]\n  intersection([3]) ==> []\n  intersection([]) ==> []\n  */\nconst intersection = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a non-empty ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odds = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    odds.push(next);\n    prev = next;\n  }\n  return odds.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evens = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    evens.push(next);\n    prev = next;\n  }\n  return evens.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evens = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    evens.push(next);\n    prev = next;\n  }\n  return evens.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evens = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    evens.push(next);\n    prev = next;\n  }\n  return evens.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evens = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    evens.push(next);\n    prev = next;\n  }\n  return evens.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evens = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code here\n\n// Write your code ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(' ').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on commas if no commas existed in the text you should split on whitespace\n  \n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello,world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(',').filter(word => word!== ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending or descending order. If list had more than 1 duplicate of the \n   same number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending or descending order. If list had more than 1 duplicate of the \n   same number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  let sorted = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path[i][j] = Math.min(1, path[i][j]);\n    result.push(grid[i][j]);\n  };\n\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= m; j++) {\n      dfs(i, j);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(N * N).fill(0);\n  const result = [];\n\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    path[i][j] = 1;\n    for (let k = j + 1; k <= m; k++) {\n      dfs(i, j + 1);\n      path[i][j] += path[i][k];\n    }\n    path", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(6, 6)\n  6\n  >>> leastCommonMultiple(6, 1)\n  6\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = tri + 3;\n    arr.push(tri);\n  }\n  if (n % 2 === 1) {\n    tri = tri + 2;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 2.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 8\n  digits(235) == 42\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 3.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 9\n  digits(235) == 81\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 4.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 16\n  digits(235) == 256\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 5.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 25\n  digits(235) == 625\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 6.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 36\n  digits(235) == 1256\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 7.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 49\n  digits(235) == 15625\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 8.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 64\n  digits(235) == 25625\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 9.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 81\n  digits(235) == 61235\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 10.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 100\n  digits(235) == 123500\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 11.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 121\n  digits(235) == 123121\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 12.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 123\n  digits(235) == 123123\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 13.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1234\n  digits(235) == 1231234\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 14.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 12344\n  digits(235) == 12312344\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 15.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 12345\n  digits(235) == 12312345\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 16.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 123456\n  digits(235) == 123123456\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 17.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1234567\n  digits(235) == 1231234567\n  */\nconst digitSum17 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 17;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 18.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 12345678\n  digits(235) == 12312345678\n  */\nconst digitSum18 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i) * 18;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 19.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 123456788", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let counter=0;\n   let openBrackets=0;\n   let closeBrackets=0;\n   let openBracketsCount=0;\n   let closeBracketsCount=0;\n   let openBracketsArray=[];\n   let closeBracketsArray=[];\n   let openBracketsArrayCount=0;\n   let closeBracketsArrayCount=0;\n   let openBracketsArrayCountArray=[];\n   let closeBracketsArrayCountArray=[];\n   let openBracketsArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=[];\n   let openBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCount=0;\n   let closeBracketsArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArrayCountArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[a-z]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a digit, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/\\d/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a punctuation mark, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a space, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[ ]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a symbol, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a symbol, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a symbol, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = true;\n  \n  if(lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)) {\n    lastCharIsALetter = false;\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a symbol, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returned the smallest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returned the average of an array of numbers. The \n   array did not contain duplicate values.\n\n  Examples:\n  average([1,2,3,4,5]) = 3\n  average([1,2,3]) = 2\n  */\nconst average = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  Examples:\n  largestAndSmallest([1,2,3,4,5]) = [5,1,4,3,2]\n  largestAndSmallest([1,2,3]) = [1,2,3]\n  */\nconst largestAndSmallest = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [max, min];\n};\n\n/*Create a function which returned the largest and smallest numbers in an \n   array. The array did not contain duplicate values.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers3 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers4 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers5 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers6 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers7 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers8 = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSm", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareTwo= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareThree= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareFour= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareFive= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareSix= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareSeven= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null; \n   }\n   if(aNum > bNum){\n     return \"greater\"; \n   }\n   if(aNum < bNum){\n     return \"smaller\"; \n   }\n   return null; \n };\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativePositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  \n  Input: \n  n: the number for which the factorial is to be calculated\n  \n  Output: \n  factorial: the factorial of n\n*/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(\n      0,\n      currentSuffix.length - 1\n    );\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all dashes with underscores, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"_Example_2\"\n  fixDashes(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, \"_\").replace(/-{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all commas with underscores, \n   and if a string had more than 2 consecutive commas, \n   then replaced all consecutive commas with-\n  \n   fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example_1\"\n  fixCommas(\" Example 2\") == \"_Example_2\"\n  fixCommas(\" Example   3\") == \"_Example-3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, \"_\").replace(/,{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all periods with underscores, \n   and if a string had more than 2 consecutive periods, \n   then replaced all consecutive periods with-\n  \n   fixPeriods(\"Example\") == \"Example\"\n  fixPeriods(\"Example 1\") == \"Example_1\"\n  fixPeriods(\" Example 2\") == \"_Example_2\"\n  fixPeriods(\" Example   3\") == \"_Example-3\"\n  */\nconst fixPeriods = (text) => {\n  return text.replace(/\\./g, \"_\").replace(/\\.{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all colons with underscores, \n   and if a string had more than 2 consecutive colons, \n   then replaced all consecutive colons with-\n  \n   fixColons(\"Example\") == \"Example\"\n  fixColons(\"Example 1\") == \"Example_1\"\n  fixColons(\" Example 2\") == \"_Example_2\"\n  fixColons(\" Example   3\") == \"_Example-3\"\n  */\nconst fixColons = (text) => {\n  return text.replace(/:/g, \"_\").replace(/:{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all question marks with underscores, \n   and if a string had more than 2 consecutive question marks, \n   then replaced all consecutive question marks with-\n  \n   fixQuestionMarks(\"Example\") == \"Example\"\n  fixQuestionMarks(\"Example 1\") == \"Example_1\"\n  fixQuestionMarks(\" Example 2\") == \"_Example_2\"\n  fixQuestionMarks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixQuestionMarks = (text) => {\n  return text.replace(/?/g, \"_\").replace(/?{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all exclamation marks with underscores, \n   and if a string had more than 2 consecutive exclamation marks, \n   then replaced all consecutive exclamation marks with-\n  \n   fixExclamationMarks(\"Example\") == \"Example\"\n  fixExclamationMarks(\"Example 1\") == \"Example_1\"\n  fixExclamationMarks(\" Example 2\") == \"_Example_2\"\n  fixExclamationMarks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixExclamationMarks = (text) => {\n  return text.replace(/!/g, \"_\").replace(/!{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all asterisks with underscores, \n   and if a string had more than 2 consecutive asterisks, \n   then replaced all consecutive asterisks with-\n  \n   fixAsterisks(\"Example\") == \"Example\"\n  fixAsterisks(\"Example 1\") == \"Example_1\"\n  fixAsterisks(\" Example 2\") == \"_Example_2\"\n  fixAsterisks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixAsterisks = (text) => {\n  return text.replace(/@/g, \"_\").replace(/@{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all colons with underscores, \n   and if a string had more than 2 consecutive colons, \n   then replaced all consecutive colons with-\n  \n   fixColons(\"Example\") == \"Example\"\n  fixColons(\"Example 1\") == \"Example_1\"\n  fixColons(\" Example 2\") == \"_Example_2\"\n  fixColons(\" Example   3\") == \"_Example-3\"\n  */\nconst fixColons = (text) => {\n  return text.replace(/:/g, \"_\").replace(/:{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all question marks with underscores, \n   and if a string had more than 2 consecutive question marks, \n   then replaced all consecutive question marks with-\n  \n   fixQuestionMarks(\"Example\") == \"Example\"\n  fixQuestionMarks(\"Example 1\") == \"Example_1\"\n  fixQuestionMarks(\" Example 2\") == \"_Example_2\"\n  fixQuestionMarks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixQuestionMarks = (text) => {\n  return text.replace(/?/g, \"_\").replace(/?{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all exclamation marks with underscores, \n   and if a string had more than 2 consecutive exclamation marks, \n   then replaced all consecutive exclamation marks with-\n  \n   fixExclamationMarks(\"Example\") == \"Example\"\n  fixExclamationMarks(\"Example 1\") == \"Example_1\"\n  fixExclamationMarks(\" Example 2\") == \"_Example_2\"\n  fixExclamationMarks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixExclamationMarks = (text) => {\n  return text.replace(/!/g, \"_\").replace(/!{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all asterisks with underscores, \n   and if a string had more than 2 consecutive asterisks, \n   then replaced all consecutive asterisks with-\n  \n   fixAsterisks(\"Example\") == \"Example\"\n  fixAsterisks(\"Example 1\") == \"Example_1\"\n  fixAsterisks(\" Example 2\") == \"_Example_2\"\n  fixAsterisks(\" Example   3\") == \"_Example-3\"\n  */\nconst fixAsterisks = (text) => {\n  return text.replace(/@/g, \"_\").replace(/@{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all colons with underscores, \n   and if a string had more than 2 consecutive colons, \n   then replaced ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// TESTS\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| a tags=javascript,arrays,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| a |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 tags=javascript,arrays,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| a |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 tags=javascript,arrays,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| a tags=javascript,arrays,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| a tags=javascript,arrays,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 && arr[i] % 4 === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).find(p => p > 1);\n    if (prime) {\n      primes.push(prime);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   let n1=Number(n.split(\"/\")[0]);\n   let n2=Number(n.split(\"/\")[1]);\n   let x1=Number(x.split(\"/\")[0]);\n   let x2=Number(x.split(\"/\")[1]);\n   if(n1==0){\n     return false;\n   }\n   if(n2==0){\n     return false;\n   }\n   if(x1==0){\n     return false;\n   }\n   if(x2==0){\n     return false;\n   }\n   if(n1==n2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){\n     return true;\n   }\n   if(x1==x2){", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in descending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((num) => {\n    const key = num.toString().split('').reduce((acc, cur, index) => {\n      return acc + cur;\n    }, 0);\n    if (!map.has(key)) {\n      map.set(key, num);\n    }\n  });\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0) {\n      if (num % 2 === 0) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          count++;\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          if (num % 2 === 0) {\n            count++;\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          if (num % 2 === 0) {\n            if (num % 2 === 0) {\n              count++;\n            }\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          if (num % 2 === 0) {\n            if (num % 2 === 0) {\n              if (num % 2 === 0) {\n                count++;\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          if (num % 2 === 0) {\n            if (num % 2 === 0) {\n              if (num % 2 === 0) {\n                if (num % 2 === 0) {\n                  if (num % 2 === 0) {\n                    if (num % 2 === 0) {\n                      count++;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1) {\n      if (num % 2 === 0) {\n        if (num % 2 === 0) {\n          if (num % 2 === 0) {\n            if (num % 2 === 0) {\n              if (num % 2 === 0) {\n                if (num % 2 === 0) {\n                  if (num % 2 === 0) {\n                    if (num % 2 === 0) {\n                      if (num % 2 === 0) {\n                        if (num % 2 === 0) {\n                          if (num % 2 === 0) {\n                            if (num % 2 === 0) {\n                              if (num % 2 === 0) {\n                                if (num % 2 === 0) {\n                                  if (num % 2 === 0) {\n                                    if (num % 2 === 0) {\n                                      if (num % 2 === 0) {\n                                        if (num % 2 === 0) {\n                                          if (num % 2 === 0) {\n                                            if (num % 2 === 0) {\n                                              if (num % 2 === 0) {\n                                                if (num % 2 === 0) {\n                                                  if (num % 2 === 0) {\n                                                    if (num % 2 === 0) {\n                                                      if (num % 2 === 0) {\n                                                        if (num % 2 === 0) {\n                                                          count++;\n                                                        }\n                                                      }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a dscore=1 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 tags=algorithm,javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,javascript,arrays dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,javascript,arrays dscore=0 |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays |>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Sun = sun(planet1);\n  const planet2Sun = sun(planet2);\n  const planet1SunOrbit = orbit(planet1Sun);\n  const planet2SunOrbit = orbit(planet2Sun);\n  const planet1SunSun = sun(planet1Sun);\n  const planet2SunSun = sun(planet2Sun);\n  const planet1SunSunOrbit = orbit(planet1SunSun);\n  const planet2SunSunOrbit = orbit(planet2SunSun);\n  const planet1SunSunSun = sun(planet1SunSun);\n  const planet2SunSunSun = sun(planet2SunSun);\n  const planet1SunSunSunOrbit = orbit(planet1SunSunSun);\n  const planet2SunSunSunOrbit = orbit(planet2SunSunSun);\n  const planet1SunSunSunSun = sun(planet1SunSunSun);\n  const planet2SunSunSunSun = sun(planet2SunSunSun);\n  const planet1SunSunSunSunOrbit = orbit(planet1SunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun);\n  const planet1SunSunSunSunSun = sun(planet1SunSunSunSun);\n  const planet2SunSunSunSun = sun(planet2SunSunSunSun);\n  const planet1SunSunSunSunOrbit = orbit(planet1SunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun);\n  const planet1SunSunSunSunSun = sun(planet1SunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun);\n  const planet1SunSunSunSunSun = sun(planet1SunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSun = sun(planet1SunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSun = sun(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun);\n  const planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSunSun);\n  const planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun);\n  const planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSunSun);\n  const planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSun);\n  const planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSun);\n  const planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun);\n  const planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSunSun);\n  const planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSun);\n  const planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSunSun);\n  const planet1SunSunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSunSun);\n  const planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSun);\n  const planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((word) => {\n    newList.push(word);\n  });\n  newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9, step10) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11, step12) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11, step12, step13) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11, step12, step13, step14) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max, step, step2, step3, step4, step5, step6, step7, step8, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum=0\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!==0){\n       sum+=lst[i]\n     }\n   }\n   return sum\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n};\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;\n}\n\n// keep this function call here to enable auto mocking to work\nconst result = compare(game, guess);\n\nconsole.log(\"Automated test passed!\");\nconsole.log(`The difference between the two arrays is ${result}`);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const scores = [];\n  game.forEach((score, index) => {\n    if (score === guess[index]) {\n      scores.push(0);\n    } else {\n      scores.push(Math.abs(score - guess[index]));\n    }\n  });\n  return scores;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest_extension = extensions[0];\n  let strongest_extension_strength = -1;\n\n  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength = class_name.split(extension).length - 1;\n    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = listOfStrings.sort((a, b) => {\n    return b.length - a.length;\n  });\n\n  return sortedListOfStrings.slice(0, N);\n};\n\n/*You were given a list of strings and a number N. \n   The list was to be sorted in descending order by the number of \n   characters in each string. \n   You should return a list of N strings in descending order \n   according to the number of characters in each string.\n  Example:\n  listOfStrings = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n  N = 3\n  return: ['ddd', 'eee', 'ccc', 'bbb']\n  */\nconst sortByLength = (listOfStrings, N) => {\n  const sortedListOfStrings = list", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let firstWord=a.split(\"\").reverse().join(\"\");\n   let secondWord=b.split(\"\").reverse().join(\"\");\n   let firstWordArray=firstWord.split(\"\");\n   let secondWordArray=secondWord.split(\"\");\n   let firstWordArrayLength=firstWordArray.length;\n   let secondWordArrayLength=secondWordArray.length;\n   let firstWordArrayRotations=firstWordArray.slice(0,firstWordArrayLength-1);\n   let secondWordArrayRotations=secondWordArray.slice(0,secondWordArrayLength-1);\n   let firstWordArraySubstrings=firstWordArray.slice(firstWordArrayLength-1,firstWordArrayLength);\n   let secondWordArraySubstrings=secondWordArray.slice(secondWordArrayLength-1,secondWordArrayLength);\n   let firstWordArraySubstringsLength=firstWordArraySubstrings.length;\n   let secondWordArraySubstringsLength=secondWordArraySubstrings.length;\n   let firstWordArraySubstringsRotations=firstWordArraySubstrings.slice(0,firstWordArraySubstringsLength-1);\n   let secondWordArraySubstringsRotations=secondWordArraySubstrings.slice(0,secondWordArraySubstringsLength-1);\n   let firstWordArraySubstringsSubstrings=firstWordArraySubstrings.slice(firstWordArraySubstringsLength-1,firstWordArraySubstringsLength);\n   let secondWordArraySubstringsSubstrings=secondWordArraySubstrings.slice(secondWordArraySubstringsLength-1,secondWordArraySubstringsLength);\n   let firstWordArraySubstringsSubstringsLength=firstWordArraySubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsLength=secondWordArraySubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsRotations=firstWordArraySubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsLength-1);\n   let secondWordArraySubstringsSubstringsRotations=secondWordArraySubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsLength-1);\n   let firstWordArraySubstringsSubstringsSubstrings=firstWordArraySubstringsSubstrings.slice(firstWordArraySubstringsSubstringsLength-1,firstWordArraySubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstrings=secondWordArraySubstringsSubstrings.slice(secondWordArraySubstringsSubstringsLength-1,secondWordArraySubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsLength-1);\n   let secondWordArraySubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsLength-1);\n   let firstWordArraySubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsLength-1,firstWordArraySubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsLength-1,secondWordArraySubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsLength-1);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsLength-1);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsSubstringsLength-1,firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsSubstringsLength-1,secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength-1);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength-1);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength-1,firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsSubstringsLength-1,secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsLength-1);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength-1);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSub", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = Math.floor(num / 10);\n  const oddDigits = num % 10;\n  return [evenDigits, oddDigits];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toLowerCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toUpperCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRoman(19) == 'xix'\n  >>> intToFullRoman(152) == 'clii'\n  >>> intToFullRoman(426) == 'cdxxvi'\n  */\nconst intToFullRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRoman(19) == 'XIX'\n  >>> intToFullRoman(152) == 'CLII'\n  >>> intToFullRoman(426) == 'CDXXVI'\n  */\nconst intToFullRomanUpper = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toUpperCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRoman(19) == 'XIX'\n  >>> intToFullRoman(152) == 'CLII'\n  >>> intToFullRoman(426) == 'CDXXVI'\n  */\nconst intToFullRomanFull = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFull(19) == 'XIX'\n  >>> intToFullRomanFull(152) == 'CLII'\n  >>> intToFullRomanFull(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullUpper = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toUpperCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFull(19) == 'XIX'\n  >>> intToFullRomanFull(152) == 'CLII'\n  >>> intToFullRomanFull(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullFull = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFullUpper(19) == 'XIX'\n  >>> intToFullRomanFullUpper(152) == 'CLII'\n  >>> intToFullRomanFullUpper(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullFullUpper = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toUpperCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form in its full form. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFullFull(19) == 'XIX'\n  >>> intToFullRomanFullFull(152) == 'CLII'\n  >>> intToFullRomanFullFull(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullFullFull = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form in its full form in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFullFullUpper(19) == 'XIX'\n  >>> intToFullRomanFullFullUpper(152) == 'CLII'\n  >>> intToFullRomanFullFullUpper(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullFullFullUpper = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber.toUpperCase()).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form in its full form in its full form. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFullFullFull(19) == 'XIX'\n  >>> intToFullRomanFullFullFull(152) == 'CLII'\n  >>> intToFullRomanFullFullFull(426) == 'CDXXVI'\n  */\nconst intToFullRomanFullFullFullFull = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map(romanNumber => romanNumber).join('');\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in its full form in its full form in its full form in its full form in its full form in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToFullRomanFullFullFullUpper(19", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let maxCount= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count>maxCount){\n       maxCount= count;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number \n   of unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMin([\"name\",\" of\",\" string\"])===\" string\" \n   findMin([\"name\",\" enam\",\" game\"])===\" name\" \n   findMin([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMin= (words)=>{\n   let minCount= 0;\n   let minWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count<minCount){\n       minCount= count;\n       minWord= word;\n     }\n   });\n   return minWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" name\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMaxUnique= (words)=>{\n   let maxCount= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count>maxCount){\n       maxCount= count;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number \n   of unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique([\"name\",\" enam\",\" game\"])===\" name\" \n   findMinUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMinUnique= (words)=>{\n   let minCount= 0;\n   let minWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count<minCount){\n       minCount= count;\n       minWord= word;\n     }\n   });\n   return minWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMaxUnique= (words)=>{\n   let maxCount= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count>maxCount){\n       maxCount= count;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number \n   of unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMinUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" bb\" \n  */ \n const findMinUnique= (words)=>{\n   let minCount= 0;\n   let minWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count<minCount){\n       minCount= count;\n       minWord= word;\n     }\n   });\n   return minWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" cc\" \n  */ \n const findMaxUnique= (words)=>{\n   let maxCount= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count>maxCount){\n       maxCount= count;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number \n   of unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique([\"name\",\" enam\",\" game\"])===\" name\" \n   findMinUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" bb\" \n  */ \n const findMinUnique= (words)=>{\n   let minCount= 0;\n   let minWord= \"\";\n   words.forEach((word)=>{\n     let count= word.length;\n     if(count<minCount){\n       minCount= count;\n       minWord= word;\n     }\n   });\n   return minWord;\n }\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMaxUnique([\"aaaaaaa\",", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining === 0) {\n    return [number, 0]\n  }\n  if (remaining < need) {\n    return [number, 0]\n  }\n  if (remaining > need) {\n    return [number, need]\n  }\n  return [number, remaining - need]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining === 0) {\n    return [number, 0]\n  }\n  if (remaining < need) {\n    return [number, 0]\n  }\n  if (remaining > need) {\n    return [number, need]\n  }\n  return [number, remaining - need]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining === 0) {\n    return [number, 0]\n  }\n  if (remaining < need) {\n    return [number, 0]\n  }\n  if (remaining > need) {\n    return [number, need]\n  }\n  return [number, remaining - need]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining === 0) {\n    return [number, 0]\n  }\n  if (remaining < need) {\n    return [number, 0]\n  }\n  if (remaining > need) {\n    return [number, need]\n  }\n  return [number, remaining - need]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining === 0) {\n    return [number, 0]\n  }\n  if (remaining < need) {\n    return [number, 0]\n  }\n  if (remaining > need) {\n    return [number, need]\n  }\n  return [number, remaining - need]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (characters[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters12 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters13 = (string, alphabet) => {\n  const characters = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (alphabet[character]) {\n      characters[character]++;\n    } else {\n      characters[character] = 1;\n    }\n  }\n  return Object.keys(characters).length;\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*\n   Write a function that takes a string and returns the number of vowels \n   in it.\n   Examples\n   vowels(\"abracadabra\") = 2\n   vowels(\"abracadabra\") = 1\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   vowels(\"abracadabra\") = 0\n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  const sha1 = new Sha1()\n  sha1.update(text)\n  return sha1.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = new Sha256()\n  sha256.update(text)\n  return sha256.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  const sha512 = new Sha512()\n  sha512.update(text)\n  return sha512.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'SGVsbG8gd29ybGQ='\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n  return base64.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToBase64('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToBase64 = (text) => {\n  const base64 = new Base64()\n  base64.update(text)\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in ascending order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 9\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 13\n  sumOfDigits(100) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 58\n  sumOfDigits(101) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 61\n  sumOfDigits(102) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 62\n  sumOfDigits(999) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 70\n  sumOfDigitsn  */\nconst sumOfDigits = n => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return the number of its digits.\n\n  For example:\n  digits(12) => 3\n  digits(13) => 2\n  digits(14) => 1\n  digits(100) => 3\n  digits(101) => 4\n  digits(102) => 3\n  digits(999) => 3\n  digits(1000) => 4\n  digits(1001) => 4\n  digits(1002) => 5\n  digits(1003) => 5\n  digits(1004) => 5\n  digits(1005) => 5\n  digits(1006) => 5\n  digits(1007) => 5\n  digits(1008) => 5\n  digits(1009) => 5\n  digits(1010) => 5\n  digits(1011) => 5\n  digits(1012) => 5\n  digits(1013) => 5\n  digits(1014) => 5\n  digits(1015) => 5\n  digits(1016) => 5\n  digits(1017) => 5\n  digits(1018) => 5\n  digits(1019) => 5\n  digits(1020) => 5\n  digits(1021) => 5\n  digits(1022) => 5\n  digits(1023) => 5\n  digits(1024) => 5\n  digits(1025) => 5\n  digits(1026) => 5\n  digits(1027) => 5\n  digits(1028) => 5\n  digits(1029) => 5\n  digits(1030) => 5\n  digits(1031) => 5\n  digits(1032) => 5\n  digits(1033) => 5\n  digits(1034) => 5\n  digits(1035) => 5\n  digits(1036) => 5\n  digits(1037) => 5\n  digits(1038) => 5\n  digits(1039) => 5\n  digits(1040) => 5\n  digits(1041) => 5\n  digits(1042) => 5\n  digits(1043) => 5\n  digits(1044) => 5\n  digits(1045) => 5\n  digits(1046) => 5\n  digits(1047) => 5\n  digits(1048) => 5\n  digits(1049) => 5\n  digits(1050) => 5\n  digits(1051) => 5\n  digits(1052) => 5\n  digits(1053) => 5\n  digits(1054) => 5\n  digits(1055) => 5\n  digits(1056) => 5\n  digits(1057) => 5\n  digits(1058) => 5\n  digits(1059) => 5\n  digits(1060) => 5\n  digits(1061) => 5\n  digits(1062) => 5\n  digits(1063) => 5\n  digits(1064) => 5\n  digits(1065) => 5\n  digits(1066) => 5\n  digits(1067) => 5\n  digits(1068) => 5\n  digits(1069) => 5\n  digits(1070) => 5\n  digits(1071) => 5\n  digits(1072) => 5\n  digits(1073) => 5\n  digits(1074) => 5\n  digits(1075) => 5\n  digits(1076) => 5\n  digits(1077) => 5\n  digits(1078) => 5\n  digits(1079) => 5\n  digits(1080) => 5\n  digits(1081) => 5\n  digits(1082) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  notes.forEach((note) => {\n    if (note.includes('o')) {\n      beats.push(4);\n    } else if (note.includes('|')) {\n      beats.push(2);\n    } else if (note.includes('.')) {\n      beats.push(1);\n    } else {\n      throw new Error(`Invalid note ${note}`);\n    }\n  });\n  return beats;\n};\n\n// Tests\nconst testParseMusic = () => {\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* \n  Given a string, return a new string with each word capitalized.\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('This Is A Test')\n  'This Is A Test'\n  >>> capitalize('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than g", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceNumber = numbers[0];\n  let secondSmallestDifferenceNumber = numbers[0];\n  let secondSmallestDifferenceIndex = 0;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const difference = numbers[i] - smallestDifferenceNumber;\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceNumber = numbers[i];\n    }\n    if (difference < secondSmallestDifferenceNumber) {\n      secondSmallestDifferenceNumber = difference;\n      secondSmallestDifferenceIndex = i;\n    }\n  }\n\n  return [smallestDifferenceNumber, secondSmallestDifferenceNumber];\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst range = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep2 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep3 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep4 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep5 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep6 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep7 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep8 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep9 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep10 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number and a step size, returns an array of numbers that sum to that number in a given range\n * \n * @param {number} number \n * @param {number} step \n * @param {number} min \n * @param {number} max \n */\nconst rangeStep11 = (number, step, min, max) => {\n  const result = [];\n  const increment = step || 1;\n  const startValue = min || 0;\n  const endValue = max || 100;\n  const incrementValue = increment;\n\n  for (let i = startValue; i <= endValue; i += incrementValue) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/**\n * Given a number ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max - min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['a', 'abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter gave list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => value instanceof Tuple);\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => value instanceof Set);\n};\n\n/**\n * Filter gave list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => value instanceof FrozenSet);\n};\n\n/**\n * Filter gave list of any python values only for dictionaries\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => value instanceof Dict);\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => value instanceof Set);\n};\n\n/**\n * Filter gave list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => value instanceof FrozenSet);\n};\n\n/**\n * Filter gave list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => value instanceof Tuple);\n};\n\n/**\n * Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => value instanceof Dict);\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => value instanceof Set);\n};\n\n/**\n * Filter gave list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => value instanceof FrozenSet);\n};\n\n/**\n * Filter gave list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => value instanceof Tuple);\n};\n\n/**\n * Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => value instanceof Dict);\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => value instanceof Set);\n};\n\n/**\n * Filter gave list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => value instanceof FrozenSet);\n};\n\n/**\n * Filter gave list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break\n    }\n    length++\n  }\n  return length\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  >>> isBlank('\\0')\n  true\n  >>> isBlank('abc')\n  false\n  >>> isBlank('abc ')\n  false\n  >>> isBlank('abc def')\n  false\n  >>> isBlank('abc defg')\n  false\n  >>> isBlank('abc defg\\0')\n  false\n  >>> isBlank('abc defg\\0\\0')\n  false\n  >>> isBlank('abc defg\\0\\0\\0')\n  false\n  */\nconst isBlank = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Return true if string contains only whitespace characters\n  >>> isBlank('')\n  true\n  >>> isBlank(' ')\n  true\n  >>> isBlank('\\n')\n  true\n  >>> isBlank('\\t')\n  true\n  >>> isBlank('\\r')\n  true\n  >>> isBlank('\\v')\n  true\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = Math.min(minDivisor, i);\n      minDivisorNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, greater than n\n  >>> largestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    factor *= factor;\n    n /= factor;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  let factors = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred less than or equal to \n   the given number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 2)\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThan = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred less than or equal to \n   the given number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 3)\n  [1, 4]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred more than the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 4)\n  [1, 3]\n  */\nconst removeDuplicatesMoreThan = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred more than the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 5)\n  []\n  */\nconst removeDuplicatesMoreThanOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 2)\n  []\n  */\nconst removeDuplicatesExactly = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 3)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 4)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 5)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 2)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 3)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 4)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 5)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 2)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 3)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 4)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list of integers, removed all elements that occurred exactly the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4], 5)\n  []\n  */\nconst removeDuplicatesExactlyOrEqualTo = (numbers, number) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Converts a string into camel case\n * \n * @param {string} string \n */\nconst camelCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into kebab case\n * \n * @param {string} string \n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst kebabToCamel = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst camelToPascal = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst camelToSnake = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalToCamel = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst snakeToCamel = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalToSnake = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst kebabToSnake = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst kebabToPascal = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst camelToKebab = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst camelToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst snakeToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst kebabToCamelCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst kebabToSnakeCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst camelToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst camelToPascalCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst snakeToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalToKebabCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst snakeToCamelCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst pascalToCamelCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into snake case\n * \n * @param {string} string \n */\nconst kebabToSnakeCase = (string) => {\n  return string\n   .split('-')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string into pascal case\n * \n * @param {string} string \n */\nconst kebabToPascalCase = (string) => {\n  return string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\")\n  'b'\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst remove = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Replace all occurrences of a string from a string\n  >>> replace(\"a\", \"abca\", \"b\")\n  'b'\n  >>> replace(\"a\", \"abca\", \"b\", true)\n  'b'\n  >>> replace(\"a\", \"abca\", \"b\", false)\n  'abca'\n  */\nconst replace = (str, str, replace, replaceAll) => {\n  if (replaceAll) {\n    return str.replace(str, replace);\n  }\n  return str.replace(new RegExp(str, \"g\"), replace);\n};\n\n/* Replace all occurrences of a string from a string\n  >>> replace(\"a\", \"abca\", \"b\", true)\n  'b'\n  >>> replace(\"a\", \"abca\", \"b\", false)\n  'abca'\n  */\nconst replaceAll = (str, str, replace, replaceAll) => {\n  if (replaceAll) {\n    return str.replace(str, replace);\n  }\n  return str.replace(new RegExp(str, \"g\"), replace);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst remove = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", false)\n  'abca'\n  */\nconst removeAll = (str, str, removeAll) => {\n  if (removeAll) {\n    return str.replace(str, \"\");\n  }\n  return str.replace(new RegExp(str, \"g\"), \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove(\"a\", \"abca\", true)\n  'b'\n  >>> remove(\"a\", \"abca\", ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that ended with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefix", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 2: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 3: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 4: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 5: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 6: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 7: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 8: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 9: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 10: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 11: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 12: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 13: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOrOdd = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n   Task 14: \n   Write a function that takes an array of integers and returns true if all elements are even and false if \n   any element is odd. \n   >>> evenOrOdd([1,2,3])\n   true\n   >>> evenOrOdd([1,3,5])\n   false\n   >>> evenOrOdd([2,4,6])\n   true\n  */\nconst evenOr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, -3, 3, 9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst getStrings = (l) => {\n  return l.filter((x) => typeof x === \"string\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{a: 1}, {b: 2}, {c: 3}])\n  [{a: 1}, {b: 2}, {c: 3}]\n  >>> getObjects([{a: 1}, {b: 2, c: 3}])\n  [{a: 1}, {b: 2, c: 3}]\n  */\nconst getObjects = (l) => {\n  return l.filter((x) => typeof x === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([1, 2, 3])\n  [1, 2, 3]\n  >>> getArrays([1, 2, 3, {a: 1}])\n  [1, 2, 3]\n  >>> getArrays([1, 2, 3, {a: 1}, \"e\"])\n  [1, 2, 3]\n  >>> getArrays([1, 2, 3, {a: 1}, \"e\", 4])\n  [1, 2, 3, 4]\n  */\nconst getArrays = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, \"e\"])\n  [() => {}, () => {}, () => {}, \"e\"]\n  >>> getFunctions([() => {}, () => {}, () => {}, \"e\", 4])\n  [() => {}, () => {}, () => {}, \"e\", 4]\n  */\nconst getFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\");\n};\n\n/*Return only nulls in the list.\n  >>> getNulls([null, null, null])\n  [null, null, null]\n  >>> getNulls([null, null, null, null])\n  [null, null, null, null]\n  */\nconst getNulls = (l) => {\n  return l.filter((x) => x === null);\n};\n\n/*Return only NaNs in the list.\n  >>> getNaNs([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> getNaNs([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst getNaNs = (l) => {\n  return l.filter((x) => isNaN(x));\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter((x) => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyArrays([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyObjects([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter((x) => Object.keys(x).length === 0);\n};\n\n/*Return only empty functions in the list.\n  >>> getEmptyFunctions([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyFunctions([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\" && x.length === 0);\n};\n\n/*Return only empty nulls in the list.\n  >>> getEmptyNulls([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyNulls([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyNulls = (l) => {\n  return l.filter((x) => x === null && x.length === 0);\n};\n\n/*Return only empty NaNs in the list.\n  >>> getEmptyNaNs([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyNaNs([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyNaNs = (l) => {\n  return l.filter((x) => isNaN(x) && x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter((x) => x === \"\" && x.length === 0);\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyArrays([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter((x) => x.length === 0 && x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyObjects([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter((x) => Object.keys(x).length === 0 && Object.keys(x).length === 0);\n};\n\n/*Return only empty functions in the list.\n  >>> getEmptyFunctions([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyFunctions([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\" && x.length === 0 && x.length === 0);\n};\n\n/*Return only empty nulls in the list.\n  >>> getEmptyNulls([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyNulls([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyNulls = (l) => {\n  return l.filter((x) => x === null && x.length === 0 && x.length === 0);\n};\n\n/*Return only empty NaN", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x= xs[0];\n  let y= xs[1];\n  let z= xs[2];\n  for(let i= 0; i<xs.length; i+=2){\n    if(xs[i]===0 && xs[i+1]===0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i]===0 && xs[i+1]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i+1]===0 && xs[i]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n  }\n  return { x: x, y: y, z: z };\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= max. \n   findMax returns only only max point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x= xs[0];\n  let y= xs[1];\n  let z= xs[2];\n  for(let i= 0; i<xs.length; i+=2){\n    if(xs[i]===0 && xs[i+1]===0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i]===0 && xs[i+1]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i+1]===0 && xs[i]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n  }\n  return { x: x, y: y, z: z };\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMin found x such that poly(x)= min. \n   findMin returns only min point, even if there was many. \n   Moreover, findMin only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x= xs[0];\n  let y= xs[1];\n  let z= xs[2];\n  for(let i= 0; i<xs.length; i+=2){\n    if(xs[i]===0 && xs[i+1]===0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i]===0 && xs[i+1]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i+1]===0 && xs[i]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n  }\n  return { x: x, y: y, z: z };\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findRoot found x such that poly(x)= root. \n   findRoot returns only root point, even if there was many. \n   Moreover, findRoot only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  let x= xs[0];\n  let y= xs[1];\n  let z= xs[2];\n  for(let i= 0; i<xs.length; i+=2){\n    if(xs[i]===0 && xs[i+1]===0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i]===0 && xs[i+1]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i+1]===0 && xs[i]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n  }\n  return { x: x, y: y, z: z };\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findCeil found x such that poly(x)= ceil. \n   findCeil returns only ceil point, even if there was many. \n   Moreover, findCeil only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findCeil([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findCeil([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCeil = (xs) => {\n  let x= xs[0];\n  let y= xs[1];\n  let z= xs[2];\n  for(let i= 0; i<xs.length; i+=2){\n    if(xs[i]===0 && xs[i+1]===0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i]===0 && xs[i+1]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n    if(xs[i+1]===0 && xs[i]!==0){\n      x= x; \n      y= y; \n      z= z;\n      break;\n    }\n  }\n  return { x: x, y: y, z: z };\n}\n\n/* \n   ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let thirdIndex = 0;\n  let thirdValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      newList.push(l[i]);\n      thirdIndex++;\n      thirdValue = l[i];\n    } else {\n      newList[thirdIndex] = thirdValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let fifthIndex = 0;\n  let fifthValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      newList.push(l[i]);\n      fifthIndex++;\n      fifthValue = l[i];\n    } else {\n      newList[fifthIndex] = fifthValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by seven, while its values at the indicies that was divisible by seven were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let seventhIndex = 0;\n  let seventhValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      newList.push(l[i]);\n      seventhIndex++;\n      seventhValue = l[i];\n    } else {\n      newList[seventhIndex] = seventhValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by nine, while its values at the indicies that was divisible by nine were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let ninthIndex = 0;\n  let ninthValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      newList.push(l[i]);\n      ninthIndex++;\n      ninthValue = l[i];\n    } else {\n      newList[ninthIndex] = ninthValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty, while its values at the indicies that was divisible by twenty were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentiethIndex = 0;\n  let twentiethValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n      twentiethIndex++;\n      twentiethValue = l[i];\n    } else {\n      newList[twentiethIndex] = twentiethValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty five, while its values at the indicies that was divisible by twenty five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyFive = (l) => {\n  let twentyFiveIndex = 0;\n  let twentyFiveValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 25 === 0) {\n      newList.push(l[i]);\n      twentyFiveIndex++;\n      twentyFiveValue = l[i];\n    } else {\n      newList[twentyFiveIndex] = twentyFiveValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty seven, while its values at the indicies that was divisible by twenty seven were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentySeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentySeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentySeven = (l) => {\n  let twentySevenIndex = 0;\n  let twentySevenValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 27 === 0) {\n      newList.push(l[i]);\n      twentySevenIndex++;\n      twentySevenValue = l[i];\n    } else {\n      newList[twentySevenIndex] = twentySevenValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty eight, while its values at the indicies that was divisible by twenty eight were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyEight([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyEight([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyEight = (l) => {\n  let twentyEightIndex = 0;\n  let twentyEightValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 28 === 0) {\n      newList.push(l[i]);\n      twentyEightIndex++;\n      twentyEightValue = l[i];\n    } else {\n      newList[twentyEightIndex] = twentyEightValue;\n    }\n  }\n  return newList;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indici", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique20 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique21 = (l) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst sumElementsGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst sumElementsLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list that are greater than the given number.\n  >>> productElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst productElementsGreaterThan = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than the given number.\n  >>> productElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst productElementsLessThan = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are equal to the given number.\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst productElementsEqual = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are greater than or equal to the given number.\n  >>> productElementsGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst productElementsGreaterThanOrEqual = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than or equal to the given number.\n  >>> productElementsLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst productElementsLessThanOrEqual = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst sumElementsEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  0\n  */\nconst sum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic9= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic10= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic11= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 5) {\n    return 13;\n  }\n  if (n === 7) {\n    return 89;\n  }\n  if (n === 11) {\n    return 251;\n  }\n  if (n === 13) {\n    return 413;\n  }\n  if (n === 17) {\n    return 937;\n  }\n  if (n === 19) {\n    return 1669;\n  }\n  if (n === 23) {\n    return 2863;\n  }\n  if (n === 29) {\n    return 5797;\n  }\n  if (n === 31) {\n    return 11893;\n  }\n  if (n === 37) {\n    return 17389;\n  }\n  if (n === 41) {\n    return 25815;\n  }\n  if (n === 43) {\n    return 36071;\n  }\n  if (n === 47) {\n    return 43387;\n  }\n  if (n === 53) {\n    return 54373;\n  }\n  if (n === 59) {\n    return 69373;\n  }\n  if (n === 61) {\n    return 73469;\n  }\n  if (n === 67) {\n    return 92489;\n  }\n  if (n === 71) {\n    return 102847;\n  }\n  if (n === 73) {\n    return 123529;\n  }\n  if (n === 79) {\n    return 144767;\n  }\n  if (n === 83) {\n    return 157283;\n  }\n  if (n === 89) {\n    return 179227;\n  }\n  if (n === 97) {\n    return 196839;\n  }\n  if (n === 101) {\n    return 209167;\n  }\n  if (n === 103){\n    return 220045;\n  }\n  if (n === 105){\n    return 234013;\n  }\n  if (n === 107){\n    return 248045;\n  }\n  if (n === 109){\n    return 262813;\n  }\n  if (n === 113){\n    return 281845;\n  }\n  if (n === 115){\n    return 304613;\n  }\n  if (n === 117){\n    return 325413;\n  }\n  if (n === 119){\n    return 346045;\n  }\n  if (n === 121){\n    return 366813;\n  }\n  if (n === 123){\n    return 397013;\n  }\n  if (n === 125){\n    return 418139;\n  }\n  if (n === 127){\n    return 449139;\n  }\n  if (n === 129){\n    return 479139;\n  }\n  if (n === 131){\n    return 508331;\n  }\n  if (n === 133){\n    return 538193;\n  }\n  if (n === 135){\n    return 568693;\n  }\n  if (n === 137){\n    return 598331;\n  }\n  if (n === 139){\n    return 618193;\n  }\n  if (n === 141){\n    return 648731;\n  }\n  if (n === 143){\n    return 667931;\n  }\n  if (n === 145){\n    return 687311;\n  }\n  if (n === 147){\n    return 707311;\n  }\n  if (n === 149){\n    return 737311;\n  }\n  if (n === 151){\n    return 767311;\n  }\n  if (n === 153){\n    return 797311;\n  }\n  if (n === 155){\n    return 827311;\n  }\n  if (n === 157){\n    return 856731;\n  }\n  if (n === 159){\n    return 886731;\n  }\n  if (n === 161){\n    return 907311;\n  }\n  if (n === 163){\n    return 937311;\n  }\n  if (n === 165){\n    return 967311;\n  }\n  if (n === 167){\n    return 997311;\n  }\n  if (n === 169){\n    return 1027311;\n  }\n  if (n === 171){\n    return 1047311;\n  }\n  if (n === 173){\n    return 1067311;\n  }\n  if (n === 175){\n    return 1096731;\n  }\n  if (n === 177){\n    return 1127311;\n  }\n  if (n === 179){\n    return 1147311;\n  }\n  if (n === 181){\n    return 1167311;\n  }\n  if (n === 183){\n    return 1187311;\n  }\n  if (n === 185){\n    return 1217311;\n  }\n  if (n === 187){\n    return 1247311;\n  }\n  if (n === 189){\n    return 1267311;\n  }\n  if (n === 191){\n    return 1297331;\n  }\n  if (n === 193){\n    return 1327311;\n  }\n  if (n === 195){\n    return 1347311;\n  }\n  if (n === 197){\n    return 1367311;\n  }\n  if (n === 199){\n    return 1397331;\n  }\n  if (n === 201){\n    return 1407311;\n  }\n  if (n === 203){\n    return 1437311;\n  }\n  if (n === 205){\n    return 1467311;\n  }\n  if (n === 207){\n    return 1497311;\n  }\n  if (n === 209){\n    return 1517311;\n  }\n  if (n === 211){\n    return 1547311;\n  }\n  if (n === 213){\n    return 1567311;\n  }\n  if (n === 215){\n    return 1597331;\n  }\n  if (n === 217){\n    return 1607311;\n  }\n  if (n === 219){\n    return 1637311;\n  }\n  if (n === 221){\n    return 1667311;\n  }\n  if (n === 223){\n    return 1697311;\n  }\n  if (n === 225){\n    return 1717311;\n  }\n  if (n === 227){\n    return 1747311;\n  }\n  if (n === 229){\n    return 1767311;\n  }\n  if (n === 231){\n    return 1797331;\n  }\n  if (n === 233){\n    return 1817311;\n  }\n  if (n === 235){\n    return 1847311;\n  }\n  if (n === 237){\n    return 1867311;\n  }\n  if (n === 239){\n    return 1897331;\n  }\n  if (n === 241){\n    return 1917311;\n  }\n  if (n === 243){\n    return 1947311;\n  }\n  if (n === 245){\n    return 1967311;\n  }\n  if (n === 247){\n    return 1997331;\n  }\n  if (n === 249){\n    return 2027311;\n  }\n  if (n === 251){\n    return 2047311;\n  }\n  if (n === 253){\n    return 2077311;\n  }\n  if (n === 255){\n    return 2096731;\n  }\n};\n\n/*\n  primeSum returned n-th number that was a prime number and it was also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 5) {\n    return 13;\n  }\n  if (n === 7) {\n    return 89;\n  }\n  if (n === 11) {\n    return 25", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation was the average squared difference between each \n   element and a centerpoint (mean in this case): \n   MSD= average| x-x_mean|^2 \n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Median Squared Deviation \n   around the median of this dataset. \n   Median Squared Deviation was the average squared difference between each \n   element and a centerpoint (median in this case): \n   MSD= average| x-x_median|^2 \n  >>> medianSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianSquaredDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - medianValue), 2));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation was the average squared difference between each \n   element and a centerpoint (mean in this case): \n   SD= average| x-x_mean|^2 \n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance was the average squared difference between each element and \n   a centerpoint (mean in this case): \n   V= average| x-x_mean|^2 \n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst variance = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Standard Error \n   around the mean of this dataset. \n   Standard Error was the average squared difference between each element \n   and a centerpoint (mean in this case): \n   SE= average| x-x_mean|^2/n \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardError = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Kurtosis \n   around the mean of this dataset. \n   Kurtosis was the average squared difference between each element and \n   a centerpoint (mean in this case): \n   K= average| x-x_mean|^2/n \n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst kurtosis = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Skewness \n   around the mean of this dataset. \n   Skewness was the average squared difference between each element and \n   a centerpoint (mean in this case): \n   S= average| x-x_mean|^2/n \n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst skewness = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Sample Standard Deviation \n   around the mean of this dataset. \n   Sample Standard Deviation was the average squared difference between each \n   element and a centerpoint (mean in this case): \n   SSD= average| x-x_mean|^2/n \n  >>> sampleStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst sampleStandardDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Sample Variance \n   around the mean of this dataset. \n   Sample Variance was the average squared difference between each element \n   and a centerpoint (mean in this case): \n   SV= average| x-x_mean|^2/n \n  >>> sampleVariance([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst sampleVariance = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Sample Standard Error \n   around the mean of this dataset. \n   Sample Standard Error was the average squared difference between each \n   element and a centerpoint (mean in this case): \n   SE= average| x-x_mean|^2/n \n  >>> sampleStandardError([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst sampleStandardError = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow((x - meanValue), 2));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Sample Kurtosis \n   around the mean of this dataset. \n   Sample Kurtosis was the average squared difference between each element \n   and a centerpoint ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 0\n  return false\n}\n\n/*\n  triplesSumToOne took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 1\n  return false\n}\n\n/*\n  triplesSumToTwo took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 2\n  return false\n}\n\n/*\n  triplesSumToThree took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 3\n  return false\n}\n\n/*\n  triplesSumToFour took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 4\n  return false\n}\n\n/*\n  triplesSumToFive took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 5\n  return false\n}\n\n/*\n  triplesSumToSix took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 6\n  return false\n}\n\n/*\n  triplesSumToSeven took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 7\n  return false\n}\n\n/*\n  triplesSumToEight took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 8\n  return false\n}\n\n/*\n  triplesSumToNine took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSumToNine = (l) => {\n  const n = l.length\n  if (n === 3) return l.reduce((a, b) => a + b) === 9\n  return false\n}\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision2= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision3= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision4= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision5= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision6= (n)=>{\n   let collisionCount=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(cars[i].x>cars[j].x && cars[i].x<cars[j].x+cars[j].width && cars[i].y>cars[j].y && cars[i].y<cars[j].y+cars[j].height){\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n\n ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 1, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incrListWithStep([1, 2, 3], 2)\n  [4, 6, 8]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [8, 12, 20]\n  */\nconst incrListWithStep = (l, step) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i * step;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decrListWithStep([1, 2, 3], 2)\n  [3, 6, 9]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [9, 12, 18]\n  */\nconst decrListWithStep = (l, step) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i * step;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2.\n  >>> incrListWithStepWithStep([1, 2, 3], 2, 2)\n  [6, 12, 24]\n  >>> incrListWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [12, 20, 36]\n  */\nconst incrListWithStepWithStep = (l, step, step2) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i * step + i * step2;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2.\n  >>> decrListWithStepWithStep([1, 2, 3], 2, 2)\n  [3, 6, 9]\n  >>> decrListWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [9, 12, 18]\n  */\nconst decrListWithStepWithStep = (l, step, step2) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i * step - i * step2;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStep([1, 2, 3], 2, 2, 2)\n  [6, 12, 24]\n  >>> incrListWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2)\n  [12, 20, 36]\n  */\nconst incrListWithStepWithStepWithStep = (l, step, step2, step3) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i * step + i * step2 + i * step3;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStep([1, 2, 3], 2, 2, 2)\n  [3, 6, 9]\n  >>> decrListWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2)\n  [9, 12, 18]\n  */\nconst decrListWithStepWithStepWithStep = (l, step, step2, step3) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i * step - i * step2 - i * step3;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2)\n  [6, 12, 24]\n  >>> incrListWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2)\n  [12, 20, 36]\n  */\nconst incrListWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i * step + i * step2 + i * step3 + i * step4;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2)\n  [3, 6, 9]\n  >>> decrListWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2)\n  [9, 12, 18]\n  */\nconst decrListWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i * step - i * step2 - i * step3 - i * step4;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2, 2)\n  [6, 12, 24]\n  >>> incrListWithStepWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2, 2)\n  [12, 20, 36]\n  */\nconst incrListWithStepWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4, step5) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i * step + i * step2 + i * step3 + i * step4 + i * step5;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2, 2)\n  [3, 6, 9]\n  >>> decrListWithStepWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2, 2)\n  [9, 12, 18]\n  */\nconst decr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to eight, and false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i][0];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to nine, and false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const str = x.toString(base);\n  return str.length < base? changeBase(x, base) : str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBaseWithBase = (x, base) => {\n  const str = x.toString(base);\n  return str.length < base? changeBaseWithBase(x, base) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3)\n  '22'\n  >>> changeBaseWithBase(8, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBase = (x, base1, base2) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBase(x, base1, base2) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBase = (x, base1, base2, base3) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBase(x, base1, base2, base3) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6, base7) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7, base8) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6, base7, base8) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7, base8, base9) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6, base7, base8, base9) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7, base8, base9, base10) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6, base7, base8, base9, base10) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7, base8, base9, base10, base11) => {\n  const str = x.toString(base1);\n  return str.length < base1? changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase(x, base1, base2, base3, base4, base5, base6, base7, base8, base9, base10, base11) : str;\n};\n\n/*\n  >>> changeBaseWithBase(8, 3, 2, 2)\n  '22'\n  >>> changeBaseWithBase(8, 2, 2, 2)\n  '1000'\n  >>> changeBaseWithBase(7, 2, 2, 2)\n  '111'\n  */\nconst changeBaseWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (x, base1, base2, base3, base4, base5, base6, base7, base8, base9, base10, base11, base12) => {\n  const str = x.toString(base1);\n  return str.length < base", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * (Math.PI * h);\n};\n\n/*Given length of a side and high return area for a diamond.\n  >>> diamondArea(5, 3)\n  7.5\n  */\nconst diamondArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a pentagon.\n  >>> pentagonArea(5, 3)\n  7.5\n  */\nconst pentagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a hexagon.\n  >>> hexagonArea(5, 3)\n  7.5\n  */\nconst hexagonArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.5\n  */\nconst starArea = (a, h) => {\n  return a * (Math.sqrt(3) * h);\n};\n\n/*Given length of a side and high return area for a heart.\n  >>> heartArea(5, 3)\n  7.5\n  */\nconst heartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octaheart.\n  >>> octaheartArea(5, 3)\n  7.5\n  */\nconst octaheartArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonArea(5, 3)\n  7.5\n  */\nconst octagonArea = (a, h) => {\n  return a * (Math.sqrt(5) * h);\n};\n\n/*Given length of a side and high return area for a star.\n  >>> starArea(5, 3)\n  7.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 1 \n   fib5(2)-> 1 \n   fib5(3)-> 1 \n   fib5(4)-> 2 \n   fib5(5)-> 1 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4)+ fib5(n-5).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 1 \n   fib6(2)-> 1 \n   fib6(3)-> 1 \n   fib6(4)-> 2 \n   fib6(5)-> 1 \n   fib6(6)-> 2 \n   fib6(7)-> 1 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4)+ fib6(n-5)+ fib6(n-6).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(5)\n  5\n  >>> fib6(6)\n  10\n  >>> fib6(7)\n  15\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 1 \n   fib7(2)-> 1 \n   fib7(3)-> 1 \n   fib7(4)-> 2 \n   fib7(5)-> 1 \n   fib7(6)-> 2 \n   fib7(7)-> 1 \n   fib7(8)-> 3 \n   fib7(9)-> 2 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4)+ fib7(n-5)+ fib7(n-6)+ fib7(n-7).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(5)\n  5\n  >>> fib7(6)\n  10\n  >>> fib7(7)\n  15\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 1;\n  if (n === 8) return 3;\n  if (n === 9) return 2;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib8(0)-> 0 \n   fib8(1)-> 1 \n   fib8(2)-> 1 \n   fib8(3)-> 1 \n   fib8(4)-> 2 \n   fib8(5)-> 1 \n   fib8(6)-> 2 \n   fib8(7)-> 1 \n   fib8(8)-> 3 \n   fib8(9)-> 2 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4)+ fib8(n-5)+ fib8(n-6)+ fib8(n-7)+ fib8(n-8).\n   Please wrote a function to efficiently computed the n-th element of the fib8 number sequence.   Did not use recursion.\n  >>> fib8(5)\n  5\n  >>> fib8(6)\n  10\n  >>> fib8(7)\n  15\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 1;\n  if (n === 8) return 3;\n  if (n === 9) return 2;\n  if (n === 10) return 3;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib9(0)-> 0 \n   fib9(1)-> 1 \n   fib9(2)-> 1 \n   fib9(3)-> 1 \n   fib9(4)-> 2 \n   fib9(5)-> 1 \n   fib9(6)-> 2 \n   fib9(7)-> 1 \n   fib9(8)-> 3 \n   fib9(9)-> 2 \n   fib9(n)-> fib9(n-1)+ fib9(n-2)+ fib9(n-3)+ fib9(n-4)+ fib9(n-5)+ fib9(n-6)+ fib9(n-7)+ fib9(n-8)+ fib9(n-9).\n   Please wrote a function to efficiently computed the n-th element of the fib9 number sequence.   Did not use recursion.\n  >>> fib9(5)\n  5\n  >>> fib9(6)\n  10\n  >>> fib9(7)\n  15\n  */\nconst fib9 = (n) => {\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n % 2 === 0) {\n    const a = l[n / 2]\n    const b = l[n - 1]\n    return a < b? a : b\n  }\n  return l[n / 2]\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i]\n    if (m[value] === undefined) {\n      m[value] = 0\n    }\n    m[value] += 1\n    if (m[value] > max) {\n      max = m[value]\n    }\n  }\n  let mode = 0\n  for (let key in m) {\n    if (m[key] === max) {\n      mode = key\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome or not\n  >>> isPalin", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p;\n  const r = n % p;\n  return r == 0? q : q + modp(q, p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpow = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q;\n};\n\n/*\n  >>> modpow(3, 5, 7)\n  3\n  >>> modpow(1101, 101, 7)\n  2\n  >>> modpow(0, 101, 7)\n  1\n  >>> modpow(3, 11, 7)\n  8\n  >>> modpow(100, 101, 7)\n  1\n  */\nconst modpowm = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m;\n};\n\n/*\n  >>> modpowm(3, 5, 7)\n  3\n  >>> modpowm(1101, 101, 7)\n  2\n  >>> modpowm(0, 101, 7)\n  1\n  >>> modpowm(3, 11, 7)\n  8\n  >>> modpowm(100, 101, 7)\n  1\n  */\nconst modpowm2 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m;\n};\n\n/*\n  >>> modpowm(2, 5, 7)\n  2\n  >>> modpowm(1101, 101, 7)\n  2\n  >>> modpowm(0, 101, 7)\n  1\n  >>> modpowm(2, 11, 7)\n  8\n  >>> modpowm(100, 101, 7)\n  1\n  */\nconst modpowm3 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m;\n};\n\n/*\n  >>> modpowm3(3, 5, 7)\n  3\n  >>> modpowm3(1101, 101, 7)\n  2\n  >>> modpowm3(0, 101, 7)\n  1\n  >>> modpowm3(3, 11, 7)\n  8\n  >>> modpowm3(100, 101, 7)\n  1\n  */\nconst modpowm4 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m;\n};\n\n/*\n  >>> modpowm4(2, 5, 7)\n  2\n  >>> modpowm4(1101, 101, 7)\n  2\n  >>> modpowm4(0, 101, 7)\n  1\n  >>> modpowm4(2, 11, 7)\n  8\n  >>> modpowm4(100, 101, 7)\n  1\n  */\nconst modpowm5 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm5(2, 5, 7)\n  2\n  >>> modpowm5(1101, 101, 7)\n  2\n  >>> modpowm5(0, 101, 7)\n  1\n  >>> modpowm5(2, 11, 7)\n  8\n  >>> modpowm5(100, 101, 7)\n  1\n  */\nconst modpowm6 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm6(2, 5, 7)\n  2\n  >>> modpowm6(1101, 101, 7)\n  2\n  >>> modpowm6(0, 101, 7)\n  1\n  >>> modpowm6(2, 11, 7)\n  8\n  >>> modpowm6(100, 101, 7)\n  1\n  */\nconst modpowm7 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm7(2, 5, 7)\n  2\n  >>> modpowm7(1101, 101, 7)\n  2\n  >>> modpowm7(0, 101, 7)\n  1\n  >>> modpowm7(2, 11, 7)\n  8\n  >>> modpowm7(100, 101, 7)\n  1\n  */\nconst modpowm8 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm8(2, 5, 7)\n  2\n  >>> modpowm8(1101, 101, 7)\n  2\n  >>> modpowm8(0, 101, 7)\n  1\n  >>> modpowm8(2, 11, 7)\n  8\n  >>> modpowm8(100, 101, 7)\n  1\n  */\nconst modpowm9 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm9(2, 5, 7)\n  2\n  >>> modpowm9(1101, 101, 7)\n  2\n  >>> modpowm9(0, 101, 7)\n  1\n  >>> modpowm9(2, 11, 7)\n  8\n  >>> modpowm9(100, 101, 7)\n  1\n  */\nconst modpowm10 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m * m * m * m * m * m * m;\n};\n\n/*\n  >>> modpowm10(2, 5, 7)\n  2\n  >>> modpowm10(1101, 101, 7)\n  2\n  >>> modpowm10(0, 101, 7)\n  1\n  >>> modpowm10(2, 11, 7)\n  8\n  >>> modpowm10(100, 101, 7)\n  1\n  */\nconst modpowm11 = (n, p, m) => {\n  const q = modp(n, p);\n  return m * q * q * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = _curry2((n, xs) => {\n  return slice(0, n < 0? Infinity : n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((pred, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((pred, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the elements of a given list which satisfy the\n * supplied predicate function. It passes each value to the supplied predicate\n * function, skipping elements while the predicate function returns `true`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [4, 3, 2, 1]\n *\n *      R.dropWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropWhile = _curry2((pred, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list formed by applying the supplied function to every element of the\n * supplied list.\n *\n * Note: `R.map` does not skip deleted or unassigned indices (sparse arrays), unlike\n * the native `Array.prototype.map` method. For more details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> b) -> [a] -> [b]\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.addIndex\n * @example\n *\n *      const double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n */\nconst map = _curry2((fn, list) => _reduce(\n  (f, [acc, x]) => _concat(acc, _map(fn, x)),\n  [],\n  list\n));\n\n/**\n * Returns a new list with the same elements as the original list, just\n * in the reverse order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The list to reverse.\n * @return {Array} A new array containing the elements of the original list, in reverse order.\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      const numbers = [1, 2, 3];\n *      R.reverse(numbers); //=> [3, 2, 1]\n */\nconst reverse = _curry1(function reverse(list) {\n  return _isString(list)? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y),..., (o -> p), ((a, b,..., n) -> o)) -> ((a, b,..., n) -> z)\n * @param {...Function}...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      const classyGreeting = (firstName, last", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift8= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift9= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift10= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift11= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift12= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift13= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift14= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift15= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift16= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift17= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift18= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift19= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift20= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was a function that took string and returns string without vowels.\n// removeVowels was ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold2 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold4 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold6 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold8 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold10 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold11 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, -10)\n  false\n  */\nconst betweenThreshold12 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold13 = (l, t, delta) => {\n  for (let i = 0; i < l.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-3)\n  3\n  >>> cbrt(3)\n  1\n  */\nconst cbrt = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -2\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-3)\n  -Infinity\n  >>> log(3)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the logarithm base 10 value of number x\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(3)\n  0\n  >>> log2(1024)\n  2\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(3)\n  0\n  >>> log10Base10(1024)\n  2\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2Base10(-3)\n  -Infinity\n  >>> log2Base10(3)\n  0\n  */\nconst log2Base10 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10Base10(-3)\n  -Infinity\n  >>> log10Base10(3)\n  0\n  */\nconst log10Base10 = x => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fi", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}/g);\n  const closingBrackets = brackets.match(/\\)|\\]|\\}|\\)/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n * \n * >>> capitalizeFirstLetter(\"hello world\")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"helloWorld\")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello\")\n * \"Hello\"\n * >>> capitalizeFirstLetter(\"hello  world\")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  \")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"hello  world  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, curr, prev, diff;\n  for (i = 1, j = l.length - 1; i <= j; i++) {\n    curr = l[i];\n    prev = l[i - 1];\n    diff = curr - prev;\n    if (diff > 0) {\n      return true;\n    }\n    if (diff < 0) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * That is, if the length of the list is a multiple of the specified length.\n * If there are multiple evenly spaced items, return true.\n * If there are multiple unevenly spaced items, return false.\n * If there are no unevenly spaced items, return true.\n * If there are multiple evenly spaced or unevenly spaced items, return false.\n * Throws an error if the list is not an array.\n * Throws an error if the length is not a positive integer.\n * Throws an error if the length is less than 1.\n * Throws an error if the length is greater than the length of the list.\n * Throws an error if the list is not sorted in ascending order.\n * @param {Array} list The list to check.\n * @param {Number} length The length of the list.\n * @returns {Boolean} True if the list is equally spaced in time, false otherwise.\n */\nconst isEvenlySpaced = (list, length) => {\n  if (!Array.isArray(list)) {\n    throw new Error('list must be an array');\n  }\n  if (!Number.isInteger(length)) {\n    throw new Error('length must be a positive integer');\n  }\n  if (length < 1) {\n    throw new Error('length must be greater than 0');\n  }\n  if (length > list.length) {\n    throw new Error('length must be less than the length of the list');\n  }\n  if (list.length % 2!== 0) {\n    throw new Error('list must be evenly spaced in time');\n  }\n  if (list.some((item) => item!== list[list.length - 1])) {\n    throw new Error('list must be sorted in ascending order');\n  }\n  let i, j, curr, prev, diff;\n  for (i = 1, j = list.length - 1; i <= j; i++) {\n    curr = list[i];\n    prev = list[i - 1];\n    diff = curr - prev;\n    if (diff!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * That is, if the length of the list is a multiple of the specified length.\n * If there are multiple evenly spaced items, return true.\n * If there are multiple unevenly spaced items, return false.\n * If there are no unevenly spaced items, return true.\n * If there are multiple evenly spaced or unevenly spaced items, return false.\n * Throws an error if the list is not an array.\n * Throws an error if the length is not a positive integer.\n * Throws an error if the length is less than 1.\n * Throws an error if the length is greater than the length of the list.\n * Throws an error if the list is not sorted in ascending order.\n * @param {Array} list The list to check.\n * @param {Number} length The length of the list.\n * @returns {Boolean} True if the list is equally spaced in time, false otherwise.\n */\nconst isEvenlySpacedOrEmpty = (list, length) => {\n  if (!Array.isArray(list)) {\n    throw new Error('list must be an array');\n  }\n  if (!Number.isInteger(length)) {\n    throw new Error('length must be a positive integer');\n  }\n  if (length < 1) {\n    throw new Error('length must be greater than 0');\n  }\n  if (length > list.length) {\n    throw new Error('length must be less than the length of the list');\n  }\n  if (list.length % 2!== 0) {\n    throw new Error('list must be evenly spaced in time');\n  }\n  if (list.some((item) => item!== list[list.length - 1])) {\n    throw new Error('list must be sorted in ascending order');\n  }\n  let i, j, curr, prev, diff;\n  for (i = 1, j = list.length - 1; i <= j; i++) {\n    curr = list[i];\n    prev = list[i - 1];\n    diff = curr - prev;\n    if (diff!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * That is, if the length of the list is a multiple of the specified length.\n * If there are multiple evenly spaced items, return true.\n * If there are multiple unevenly spaced items, return false.\n * If there are no unevenly spaced items, return true.\n * If there are multiple evenly spaced or unevenly spaced items, return false.\n * Throws an error if the list is not an array.\n * Throws an error if the length is not a positive integer.\n * Throws an error if the length is less than 1.\n * Throws an error if the length is greater than the length of the list.\n * Throws an error if the list is not sorted in ascending order.\n * @param {Array} list The list to check.\n * @param {Number} length The length of the list.\n * @returns {Boolean} True if the list is equally spaced in time, false otherwise.\n */\nconst isEvenlySpacedOrEmpty = (list, length) => {\n  if (!Array.isArray(list)) {\n    throw new Error('list must be an array');\n  }\n  if (!Number.isInteger(length)) {\n    throw new Error('length must be a positive integer');\n  }\n  if (length < 1) {\n    throw new Error('length must be greater than 0');\n  }\n  if (length > list.length) {\n    throw new Error('length must be less than the length of the list');\n  }\n  if (list.length % 2!== 0) {\n    throw new Error('list must be evenly spaced in time');\n  }\n  if (list.some((item) => item!== list[list.length - 1])) {\n    throw new Error('list must be sorted in ascending order');\n  }\n  let i, j, curr, prev, diff;\n  for (i = 1, j = list.length - 1; i <= j; i++) {\n    curr = list[i];\n    prev = list[i - 1];\n    diff = curr - prev;\n    if (diff!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * That is, if the length of the list is a multiple of the specified length.\n * If there are multiple evenly spaced items, return true.\n * If there are multiple unevenly spaced items, return false.\n * If there are no unevenly spaced items, return true.\n * If there are multiple evenly spaced or unevenly spaced items, return false.\n * Throws an error if the list is not an array.\n * Throws an error if the length is not a positive integer.\n * Throws an error if the length is less than 1.\n * Throws an error if the length is greater than the length of the list.\n * Throws an error if the list is not sorted in ascending order.\n * @param {Array} list The list to check.\n * @param {Number} length The length of the list.\n * @returns {Boolean} True if the list is equally spaced in time, false otherwise.\n */\nconst isEvenlySpacedOrEmpty = (list, length) => {\n  if (!Array.isArray(list)) {\n    throw new Error('list must be an array');\n  }\n  if (!Number.isInteger(length)) {\n    throw new Error('length must be a positive integer');\n  }\n  if (length < 1) {\n    throw new Error('length must be greater than 0');\n  }\n  if (length > list.length) {\n    throw new Error('length must be less than the length of the list');\n  }\n  if (list.length % 2!== 0) {\n    throw new Error('list must be evenly spaced in time');\n  }\n  if (list.some((item) => item!== list[list.length - 1])) {\n    throw new Error('list must be sorted in ascending order');\n  }\n  let i, j, curr, prev, diff;\n  for (i = 1, j = list.length - 1; i <= j; i++) {\n    curr = list[i];\n    prev = list[i - 1];\n    diff = curr - prev;\n    if (diff!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * That is, if the length of the list is a multiple of the specified length.\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else if (l1[i] > l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else {\n      result.push(l2[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(2,3)\n  1\n  >>> numberOfDivisors(2,5)\n  2\n  >>> numberOfDivisors(2,7)\n  1\n  >>> numberOfDivisors(2,13)\n  1\n  >>> numberOfDivisors(2,17)\n  2\n  >>> numberOfDivisors(2,19)\n  1\n  >>> numberOfDivisors(2,23)\n  2\n  >>> numberOfDivisors(2,29)\n  1\n  >>> numberOfDivisors(2,31)\n  2\n  >>> numberOfDivisors(2,37)\n  1\n  >>> numberOfDivisors(2,41)\n  2\n  >>> numberOfDivisors(2,43)\n  1\n  >>> numberOfDivisors(2,49)\n  2\n  >>> numberOfDivisors(2,53)\n  1\n  >>> numberOfDivisors(2,59)\n  2\n  >>> numberOfDivisors(2,61)\n  1\n  >>> numberOfDivisors(2,67)\n  2\n  >>> numberOfDivisors(2,71)\n  1\n  >>> numberOfDivisors(2,73)\n  2\n  >>> numberOfDivisors(2,79)\n  1\n  >>> numberOfDivisors(2,83)\n  2\n  >>> numberOfDivisors(2,89)\n  1\n  >>> numberOfDivisors(2,97)\n  2\n  >>> numberOfDivisors(2,101)\n  1\n  >>> numberOfDivisors(2,103)\n  2\n  >>> numberOfDivisors(2,107)\n  1\n  >>> numberOfDivisors(2,109)\n  2\n  >>> numberOfDivisors(2,113)\n  1\n  >>> numberOfDivisors(2,127)\n  2\n  >>> numberOfDivisors(2,131)\n  1\n  >>> numberOfDivisors(2,137)\n  2\n  >>> numberOfDivisors(2,139)\n  1\n  >>> numberOfDivisors(2,147)\n  2\n  >>> numberOfDivisors(2,151)\n  1\n  >>> numberOfDivisors(2,153)\n  2\n  >>> numberOfDivisors(2,157)\n  1\n  >>> numberOfDivisors(2,163)\n  2\n  >>> numberOfDivisors(2,167)\n  1\n  >>> numberOfDivisors(2,173)\n  2\n  >>> numberOfDivisors(2,179)\n  1\n  >>> numberOfDivisors(2,181)\n  2\n  >>> numberOfDivisors(2,191)\n  1\n  >>> numberOfDivisors(2,193)\n  2\n  >>> numberOfDivisors(2,197)\n  1\n  >>> numberOfDivisors(2,199)\n  2\n  >>> numberOfDivisors(2,203)\n  1\n  >>> numberOfDivisors(2,211)\n  2\n  >>> numberOfDivisors(2,217)\n  1\n  >>> numberOfDivisors(2,223)\n  2\n  >>> numberOfDivisors(2,229)\n  1\n  >>> numberOfDivisors(2,233)\n  2\n  >>> numberOfDivisors(2,239)\n  1\n  >>> numberOfDivisors(2,241)\n  2\n  >>> numberOfDivisors(2,251)\n  1\n  >>> numberOfDivisors(2,257)\n  2\n  >>> numberOfDivisors(2,263)\n  1\n  >>> numberOfDivisors(2,269)\n  2\n  >>> numberOfDivisors(2,271)\n  1\n  >>> numberOfDivisors(2,273)\n  2\n  >>> numberOfDivisors(2,277)\n  1\n  >>> numberOfDivisors(2,281)\n  2\n  >>> numberOfDivisors(2,283)\n  1\n  >>> numberOfDivisors(2,293)\n  2\n  >>> numberOfDivisors(2,307)\n  1\n  >>> numberOfDivisors(2,311)\n  2\n  >>> numberOfDivisors(2,313)\n  1\n  >>> numberOfDivisors(2,317)\n  2\n  >>> numberOfDivisors(2,319)\n  1\n  >>> numberOfDivisors(2,323)\n  2\n  >>> numberOfDivisors(2,331)\n  1\n  >>> numberOfDivisors(2,337)\n  2\n  >>> numberOfDivisors(2,347)\n  1\n  >>> numberOfDivisors(2,351)\n  2\n  >>> numberOfDivisors(2,359)\n  1\n  >>> numberOfDivisors(2,363)\n  2\n  >>> numberOfDivisors(2,369)\n  1\n  >>> numberOfDivisors(2,371)\n  2\n  >>> numberOfDivisors(2,373)\n  1\n  >>> numberOfDivisors(2,379)\n  2\n  >>> numberOfDivisors(2,383)\n  1\n  >>> numberOfDivisors(2,389)\n  2\n  >>> numberOfDivisors(2,397)\n  1\n  >>> numberOfDivisors(2,401)\n  2\n  >>> numberOfDivisors(2,409)\n  1\n  >>> numberOfDivisors(2,419)\n  2\n  >>> numberOfDivisors(2,421)\n  1\n  >>> numberOfDivisors(2,423)\n  2\n  >>> numberOfDivisors(2,429)\n  1\n  >>> numberOfDivisors(2,431)\n  2\n  >>> numberOfDivisors(2,437)\n  1\n  >>> numberOfDivisors(2,443)\n  2\n  >>> numberOfDivisors(2,449)\n  1\n  >>> numberOfDivisors(2,451)\n  2\n  >>> numberOfDivisors(2,457)\n  1\n  >>> numberOfDivisors(2,461)\n  2\n  >>> numberOfDivisors(2,463)\n  1\n  >>> numberOfDivisors(2,467)\n  2\n  >>> numberOfDivisors(2,471)\n  1\n  >>> numberOfDivisors(2,477)\n  2\n  >>> numberOfDivisors(2,483)\n  1\n  >>> numberOfDivisors(2,487)\n  2\n  >>> numberOfDivisors(2,491)\n  1\n  >>> numberOfDivisor", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.match(/[^()]+/g);\n  const paren_array_length = paren_array.length;\n  let max_level = 0;\n  let current_level = 0;\n  let current_level_paren_array = [];\n  let current_level_paren_string = '';\n  for (let i = 0; i < paren_array_length; i++) {\n    if (paren_array[i] === '(') {\n      current_level_paren_array.push(paren_array[i]);\n      current_level_paren_string = current_level_paren_string.concat(paren_array[i]);\n    } else if (paren_array[i] === ')') {\n      current_level_paren_string = current_level_paren_string.slice(0, -1);\n      current_level_paren_array = current_level_paren_array.slice(0, -1);\n      current_level--;\n      if (current_level === 0) {\n        max_level = current_level_paren_array.length;\n      }\n    }\n  }\n  return max_level;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation. \n   E.g. (5 + 3) * (6 + 4) -> (5 + 3) * 6 + 4\n*/\nconst reversePolishNotation = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i];\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation with spaces \n   between each operator. E.g. (5 + 3) * (6 + 4) -> (5 +3) * 6 + 4\n*/\nconst reversePolishNotationWithSpaces = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i] +'';\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation with spaces \n   between each operator and operand. E.g. (5 + 3) * (6 + 4) -> (5 +3) * 6 + 4\n*/\nconst reversePolishNotationWithSpacesAndOperands = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i] +'';\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation with spaces \n   between each operator and operand and parentheses around each operand. E.g. (5 + 3) * (6 + 4) -> (5 + 3) * 6 + 4\n*/\nconst reversePolishNotationWithSpacesAndOperandsAndParens = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i] +'';\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation with spaces \n   between each operator and operand and parentheses around each operand and parentheses around each operator. \n   E.g. (5 + 3) * (6 + 4) -> (5 +3) * 6 + 4\n*/\nconst reversePolishNotationWithSpacesAndOperandsAndParensAndParens = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i] +'';\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string representing the mathematical expression in reverse polish notation with spaces \n   between each operator and operand and parentheses around each operand and parentheses around each operator \n   and operand. E.g. (5 + 3) * (6 + 4) -> (5 +3) * 6 + 4\n*/\nconst reversePolishNotationWithSpacesAndOperandsAndParensAndParensAndOperands = (expression_string) => {\n  const expression_array = expression_string.match(/[^()]+/g);\n  const expression_array_length = expression_array.length;\n  let stack = [];\n  let output = '';\n  for (let i = 0; i < expression_array_length; i++) {\n    if (expression_array[i] === '(') {\n      stack.push(expression_array[i]);\n    } else if (expression_array[i] === ')') {\n      while (stack.length > 0 && expression_array[stack.length - 1]!== '(') {\n        output += stack.pop();\n      }\n      stack.pop();\n    } else {\n      output += expression_array[i] +'';\n    }\n  }\n  while (stack.length > 0) {\n    output += stack.pop();\n  }\n  return output;\n}\n\n/* \n   Given a string representing a mathematical expression, \n   output the string ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let bracketCount = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == '(') {\n      openingBrackets++;\n    } else if (brackets[i] == ')') {\n      closingBrackets++;\n    }\n    bracketCount++;\n  }\n  return openingBrackets == closingBrackets;\n};\n\n/* \n   Given a string, return a new string where every occurrence of the \n   character 'x' is replaced by 'y'.\n\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replaceCharByChar(\"abxcd\", \"x\", \"y\")\n  'ayycd'\n  >>> replace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes a number as an argument and returns the sum of the squares of the first ten natural numbers.\n  >>> sumOfSquares(1)\n  1\n  >>> sumOfSquares(2)\n  4\n  >>> sumOfSquares(3)\n  9\n  >>> sumOfSquares(4)\n  16\n  >>> sumOfSquares(5)\n  25\n  >>> sumOfSquares(10)\n  55\n  >>> sumOfSquares(100)\n  1464\n  >>> sumOfSquares(1000)\n  2520\n  >>> sumOfSquares(10000)\n  479001600\n  >>> sumOfSquares(100000)\n  98719476736\n  >>> sumOfSquares(1000000)\n  479001600000\n  >>> sumOfSquares(10000000)\n  987194767360\n  >>> sumOfSquares(100000000)\n  4790016000000\n  >>> sumOfSquares(1000000000)\n  987194767360000\n  >>> sumOfSquares(10000000000)\n  479001600000000\n  >>> sumOfSquares(100000000000)\n  98719476736000000\n  >>> sumOfSquares(1000000000000)\n  479001600000000000\n  >>> sumOfSquares(10000000000000)\n  98719476736000000000\n  >>> sumOfSquares(100000000000000)\n  4790016000000000000\n  >>> sumOfSquares(1000000000000000)\n  9871947673600000000000\n  >>> sumOfSquares(10000000000000000)\n  47900160000000000000\n  >>> sumOfSquares(100000000000000000)\n  9871947673600000000000000\n  >>> sumOfSquares(1000000000000000000)\n  47900160000000000000000\n  >>> sumOfSquares(10000000000000000000)\n  9871947673600000000000000000\n  >>> sumOfSquares(100000000000000000000)\n  47900160000000000000000000\n  >>> sumOfSquares(1000000000000000000000)\n  9871947673600000000000000000000\n  >>> sumOfSquares(10000000000000000000000)\n  987194767360000000000000000000000\n  >>> sumOfSquares(1000000000000000000000000)\n  9871947673600000000000000000000000\n  >>> sumOfSquares(100000000000000000000000000)\n  987194767360000000000000000000000000\n  >>> sumOfSquares(10000000000000000000000000000)\n  98719476736000000000000000000000000000\n  >>> sumOfSquares(1000000000000000000000000000000)\n  987194767360000000000000000000000000000\n  >>> sumOfSquares(100000000000000000000000000000000)\n  987194767360000000000000000000000000000000\n  >>> sumOfSquares(10000000000000000000000000000000001)\n  9871947673600000000000000000000000000000002\n  >>> sumOfSquares(10000000000000000000000000000000002)\n  9871947673600000000000000000000000000000003\n  >>> sumOfSquares(10000000000000000000000000000000003)\n  9871947673600000000000000000000000000000004\n  >>> sumOfSquares(10000000000000000000000000000000004)\n  9871947673600000000000000000000000000000005\n  >>> sumOfSquares(10000000000000000000000000000000005)\n  9871947673600000000000000000000000000000006\n  >>> sumOfSquares(10000000000000000000000000000000006)\n  9871947673600000000000000000000000000000007\n  >>> sumOfSquares(10000000000000000000000000000000007)\n  9871947673600000000000000000000000000000008\n  >>> sumOfSquares(10000000000000000000000000000000008)\n  9871947673600000000000000000000000000000009\n  >>> sumOfSquares(10000000000000000000000000000000009)\n  9871947673600000000000000000000000000000010\n  >>> sumOfSquares(10000000000000000000000000000000010)\n  9871947673600000000000000000000000000000011\n  >>> sumOfSquares(10000000000000000000000000000000011)\n  9871947673600000000000000000000000000000012\n  >>> sumOfSquares(10000000000000000000000000000000012)\n  9871947673600000000000000000000000000000013\n  >>> sumOfSquares(10000000000000000000000000000000013)\n  9871947673600000000000000000000000000000014\n  >>> sumOfSquares(10000000000000000000000000000000014)\n  9871947673600000000000000000000000000000015\n  >>> sumOfSquares(10000000000000000000000000000000015)\n  9871947673600000000000000000000000000000016\n  >>> sumOfSquares(10000000000000000000000000000000016)\n  9871947673600000000000000000000000000000017\n  >>> sumOfSquares(10000000000000000000000000000000017)\n  9871947673600000000000000000000000000000018\n  >>> sumOfSquares(10000000000000000000000000000000018)\n  9871947673600000000000000000000000000000019\n  >>> sumOfSquares(10000000000000000000000000000000019)\n  9871947673600000000000000000000000000000020\n  >>> sumOfSquares(10000000000000000000000000000000020)\n  9871947673600000000000000000000000000000021\n  >>> sumOfSquares(10000000000000000000000000000000021)\n  9871947673600000000000000000000000000000022\n  >>> sumOfSquares(10000000000000000000000000000000022)\n  9871947673600000000000000000000000000000023\n  >>> sumOfSquares(10000000000000000000000000000000023)\n  9871947673600000000000000000000000000000024\n  >>> sumOfSquares(10000000000000000000000000000000024)\n  9871947673600000000000000000000000000000025\n  >>> sumOfSquares(10000000000000000000000000000000025)\n  9871947673600000000000000000000000000000026\n  >>> sumOfSquares(10000000000000000000000000000000026)\n  9871947673600000000000000000000000000000027\n  >>> sumOfSquares(10000000000000000000000000000000027)\n  9871947673600000000000000000000000000000028\n  >>> sumOfSquares(10000000000000000000000000000000028)\n  9871947673600000000000000000000000000000029\n  >>> sumOfSquares(10000000000000000000000000000000029)\n  9871947673600000000000000000000000000000030\n  >>> sumOfSquares(10000000000000000000000000000000030)\n  9871947673600000000000000000000000000000031\n  >>> sumOfSquares(10000000000000000000000000000000031)\n  9871947673600000000000000000000000000000032\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  Given a binary string x, return a string representing the number in reverse order.\n  >>> reverseBinary('1100')\n  '0110'\n  >>> reverseBinary('11')\n  '1'\n  >>> reverseBinary('1')\n  '1'\n  >>> reverseBinary('10')\n  '10'\n  >>> reverseBinary('')\n  '' \n  >>> reverseBinary('0')\n  '0' \n  >>> reverseBinary('100')\n  '100' \n  >>> reverseBinary('101')\n  '101' \n  >>> reverseBinary('111')\n  '111' \n  >>> reverseBinary('1111')\n  '1111' \n  >>> reverseBinary('11111')\n  '11111' \n  >>> reverseBinary('111111')\n  '111111' \n  >>> reverseBinary('11111111')\n  '11111111' \n  >>> reverseBinary('111111111')\n  '111111111' \n  >>> reverseBinary('1111111111')\n  '1111111111' \n  >>> reverseBinary('11111111111')\n  '11111111111' \n  >>> reverseBinary('111111111111')\n  '111111111111' \n  >>> reverseBinary('1111111111111')\n  '1111111111111' \n  >>> reverseBinary('11111111111111')\n  '11111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('111111111111111')\n  '111111111111111' \n  >>> reverseBinary('11111111111111", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char - 'A' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char - 'A' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char - 'A' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char - 'A' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char - 'A' + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let arr= s.split(\" \");\n   let arr2= arr.map(x=>x.split(\"\"));\n   let arr3= arr2.map(x=>x.map(x=>parseInt(x)));\n   let arr4= arr3.map(x=>x.map(x=>(x>0)?x:0));\n   let arr5= arr4.map(x=>x.map(x=>(x>0)?x:0));\n   let arr6= arr5.map(x=>x.map(x=>(x>0)?x:0));\n   let arr7= arr6.map(x=>x.map(x=>(x>0)?x:0));\n   let arr8= arr7.map(x=>x.map(x=>(x>0)?x:0));\n   let arr9= arr8.map(x=>x.map(x=>(x>0)?x:0));\n   let arr10= arr9.map(x=>x.map(x=>(x>0)?x:0));\n   let arr11= arr10.map(x=>x.map(x=>(x>0)?x:0));\n   let arr12= arr11.map(x=>x.map(x=>(x>0)?x:0));\n   let arr13= arr12.map(x=>x.map(x=>(x>0)?x:0));\n   let arr14= arr13.map(x=>x.map(x=>(x>0)?x:0));\n   let arr15= arr14.map(x=>x.map(x=>(x>0)?x:0));\n   let arr16= arr15.map(x=>x.map(x=>(x>0)?x:0));\n   let arr17= arr16.map(x=>x.map(x=>(x>0)?x:0));\n   let arr18= arr17.map(x=>x.map(x=>(x>0)?x:0));\n   let arr19= arr18.map(x=>x.map(x=>(x>0)?x:0));\n   let arr20= arr19.map(x=>x.map(x=>(x>0)?x:0));\n   let arr21= arr20.map(x=>x.map(x=>(x>0)?x:0));\n   let arr22= arr21.map(x=>x.map(x=>(x>0)?x:0));\n   let arr23= arr22.map(x=>x.map(x=>(x>0)?x:0));\n   let arr24= arr23.map(x=>x.map(x=>(x>0)?x:0));\n   let arr25= arr24.map(x=>x.map(x=>(x>0)?x:0));\n   let arr26= arr25.map(x=>x.map(x=>(x>0)?x:0));\n   let arr27= arr26.map(x=>x.map(x=>(x>0)?x:0));\n   let arr28= arr27.map(x=>x.map(x=>(x>0)?x:0));\n   let arr29= arr28.map(x=>x.map(x=>(x>0)?x:0));\n   let arr30= arr29.map(x=>x.map(x=>(x>0)?x:0));\n   let arr31= arr30.map(x=>x.map(x=>(x>0)?x:0));\n   let arr32= arr31.map(x=>x.map(x=>(x>0)?x:0));\n   let arr33= arr32.map(x=>x.map(x=>(x>0)?x:0));\n   let arr34= arr33.map(x=>x.map(x=>(x>0)?x:0));\n   let arr35= arr34.map(x=>x.map(x=>(x>0)?x:0));\n   let arr36= arr35.map(x=>x.map(x=>(x>0)?x:0));\n   let arr37= arr36.map(x=>x.map(x=>(x>0)?x:0));\n   let arr38= arr37.map(x=>x.map(x=>(x>0)?x:0));\n   let arr39= arr38.map(x=>x.map(x=>(x>0)?x:0));\n   let arr40= arr39.map(x=>x.map(x=>(x>0)?x:0));\n   let arr41= arr40.map(x=>x.map(x=>(x>0)?x:0));\n   let arr42= arr41.map(x=>x.map(x=>(x>0)?x:0));\n   let arr43= arr42.map(x=>x.map(x=>(x>0)?x:0));\n   let arr44= arr43.map(x=>x.map(x=>(x>0)?x:0));\n   let arr45= arr44.map(x=>x.map(x=>(x>0)?x:0));\n   let arr46= arr45.map(x=>x.map(x=>(x>0)?x:0));\n   let arr47= arr46.map(x=>x.map(x=>(x>0)?x:0));\n   let arr48= arr47.map(x=>x.map(x=>(x>0)?x:0));\n   let arr49= arr48.map(x=>x.map(x=>(x>0)?x:0));\n   let arr50= arr49.map(x=>x.map(x=>(x>0)?x:0));\n   let arr51= arr50.map(x=>x.map(x=>(x>0)?x:0));\n   let arr52= arr51.map(x=>x.map(x=>(x>0)?x:0));\n   let arr53= arr52.map(x=>x.map(x=>(x>0)?x:0));\n   let arr54= arr53.map(x=>x.map(x=>(x>0)?x:0));\n   let arr55= arr54.map(x=>x.map(x=>(x>0)?x:0));\n   let arr56= arr55.map(x=>x.map(x=>(x>0)?x:0));\n   let arr57= arr56.map(x=>x.map(x=>(x>0)?x:0));\n   let arr58= arr57.map(x=>x.map(x=>(x>0)?x:0));\n   let arr59= arr58.map(x=>x.map(x=>(x>0)?x:0));\n   let arr60= arr59.map(x=>x.map(x=>(x>0)?x:0));\n   let arr61= arr60.map(x=>x.map(x=>(x>0)?x:0));\n   let arr62= arr61.map(x=>x.map(x=>(x>0)?x:0));\n   let arr63= arr62.map(x=>x.map(x=>(x>0)?x:0));\n   let arr64= arr63.map(x=>x.map(x=>(x>0)?x:0));\n   let arr65= arr64.map(x=>x.map(x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  const smallestIndex = evenValues.findIndex((val) => val < arr.indexOf(0));\n  return evenValues[smallestIndex];\n};\n\nexport { pluck };\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n    let smallestEven = arr[0];\n    let smallestEvenIndex = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (smallestEven > arr[i]) {\n                smallestEven = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n    return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a tags=arrays,javascript |>\n<| a |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a dscore=0 tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEven > arr[i]) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([1, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 0, 3, 0, 4, 2]));</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  sortedList.push(maxValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n    }\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n    }\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a string, return a new string with each character replaced \n  with the character code of the character in the original string.\n\n  Examples:\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"h1llo\"\n  replaceChar(\"hello\", \"e\", \"1\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) return -1;\n  return Math.abs(a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the perimeter of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleAreaJoin(3, 4, 5) == 6.00\n  triangleAreaJoin(1, 2, 10) == -1\n  */\nconst triangleAreaJoin = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs(a + b + c + d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of the \n   triangle formed by joining the three sides rounded to 2 decimal points if the \n   three ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, x) => acc + x, 0);\n  return sumOfElements <= maxWeight;\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one at index i.\n\n  Example:\n  removeAt([1,2,3,4,5], 2) ➞ [1,3,5]\n  */\nconst removeAt = (q, i) => {\n  return q.filter((x, j) => j!== i);\n};\n\n/*\n  Write a function that returns a new list containing all the elements of the given list q except the one ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;\n    }\n    if (count < min) {\n      min = count;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;\n    }\n    if (count > max) {\n      max = count;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;\n    }\n    if (count > max) {\n      max = count;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the minimum number of elements that needed to be changed to \n   make the array palindromic. A palindromic array was an array that was read the same backwards and \n   forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;\n    }\n    if (count < min) {\n      min = count;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;\n    }\n    if (count > max) {\n      max = count;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the minimum number of elements that needed to be changed to \n   make the array palindromic. A palindromic array was an array that was read the same backwards and \n   forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n    count = 1;\n    for (let j = len - 1; j >= 0; j--) {\n      if (arr[j] > max) {\n        max = arr[j];\n        mid = j;\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n        mid = j;\n      }\n      if (arr[j] === max) {\n        mid = j;\n      }\n      if (arr[j] === min) {\n        mid = j;\n      }\n      count++;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x) < 0);\n};\n\n// totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let primes = [];\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime4 = true;\n  let isPrime5 = true;\n  let isPrime6 = true;\n  let isPrime7 = true;\n  let isPrime8 = true;\n  let isPrime9 = true;\n  let isPrime10 = true;\n  let isPrime11 = true;\n  let isPrime12 = true;\n  let isPrime13 = true;\n  let isPrime14 = true;\n  let isPrime15 = true;\n  let isPrime16 = true;\n  let isPrime17 = true;\n  let isPrime18 = true;\n  let isPrime19 = true;\n  let isPrime20 = true;\n  let isPrime21 = true;\n  let isPrime22 = true;\n  let isPrime23 = true;\n  let isPrime24 = true;\n  let isPrime25 = true;\n  let isPrime26 = true;\n  let isPrime27 = true;\n  let isPrime28 = true;\n  let isPrime29 = true;\n  let isPrime30 = true;\n  let isPrime31 = true;\n  let isPrime32 = true;\n  let isPrime33 = true;\n  let isPrime34 = true;\n  let isPrime35 = true;\n  let isPrime36 = true;\n  let isPrime37 = true;\n  let isPrime38 = true;\n  let isPrime39 = true;\n  let isPrime40 = true;\n  let isPrime41 = true;\n  let isPrime42 = true;\n  let isPrime43 = true;\n  let isPrime44 = true;\n  let isPrime45 = true;\n  let isPrime46 = true;\n  let isPrime47 = true;\n  let isPrime48 = true;\n  let isPrime49 = true;\n  let isPrime50 = true;\n  let isPrime51 = true;\n  let isPrime52 = true;\n  let isPrime53 = true;\n  let isPrime54 = true;\n  let isPrime55 = true;\n  let isPrime56 = true;\n  let isPrime57 = true;\n  let isPrime58 = true;\n  let isPrime59 = true;\n  let isPrime60 = true;\n  let isPrime61 = true;\n  let isPrime62 = true;\n  let isPrime63 = true;\n  let isPrime64 = true;\n  let isPrime65 = true;\n  let isPrime66 = true;\n  let isPrime67 = true;\n  let isPrime68 = true;\n  let isPrime69 = true;\n  let isPrime70 = true;\n  let isPrime71 = true;\n  let isPrime72 = true;\n  let isPrime73 = true;\n  let isPrime74 = true;\n  let isPrime75 = true;\n  let isPrime76 = true;\n  let isPrime77 = true;\n  let isPrime78 = true;\n  let isPrime79 = true;\n  let isPrime80 = true;\n  let isPrime81 = true;\n  let isPrime82 = true;\n  let isPrime83 = true;\n  let isPrime84 = true;\n  let isPrime85 = true;\n  let isPrime86 = true;\n  let isPrime87 = true;\n  let isPrime88 = true;\n  let isPrime89 = true;\n  let isPrime90 = true;\n  let isPrime91 = true;\n  let isPrime92 = true;\n  let isPrime93 = true;\n  let isPrime94 = true;\n  let isPrime95 = true;\n  let isPrime96 = true;\n  let isPrime97 = true;\n  let isPrime98 = true;\n  let isPrime99 = true;\n  let isPrime100 = true;\n  let isPrime101 = true;\n  let isPrime102 = true;\n  let isPrime103 = true;\n  let isPrime104 = true;\n  let isPrime105 = true;\n  let isPrime106 = true;\n  let isPrime107 = true;\n  let isPrime108 = true;\n  let isPrime109 = true;\n  let isPrime110 = true;\n  let isPrime111 = true;\n  let isPrime112 = true;\n  let isPrime113 = true;\n  let isPrime114 = true;\n  let isPrime115 = true;\n  let isPrime116 = true;\n  let isPrime117 = true;\n  let isPrime118 = true;\n  let isPrime119 = true;\n  let isPrime120 = true;\n  let isPrime121 = true;\n  let isPrime122 = true;\n  let isPrime123 = true;\n  let isPrime124 = true;\n  let isPrime125 = true;\n  let isPrime126 = true;\n  let isPrime127 = true;\n  let isPrime128 = true;\n  let isPrime129 = true;\n  let isPrime130 = true;\n  let isPrime131 = true;\n  let isPrime132 = true;\n  let isPrime133 = true;\n  let isPrime134 = true;\n  let isPrime135 = true;\n  let isPrime136 = true;\n  let isPrime137 = true;\n  let isPrime138 = true;\n  let isPrime139 = true;\n  let isPrime140 = true;\n  let isPrime141 = true;\n  let isPrime142 = true;\n  let isPrime143 = true;\n  let isPrime144 = true;\n  let isPrime145 = true;\n  let isPrime146 = true;\n  let isPrime147 = true;\n  let isPrime148 = true;\n  let isPrime149 = true;\n  let isPrime150 = true;\n  let isPrime151 = true;\n  let isPrime152 = true;\n  let isPrime153 = true;\n  let isPrime154 = true;\n  let isPrime155 = true;\n  let isPrime156 = true;\n  let isPrime157 = true;\n  let isPrime158 = true;\n  let isPrime159 = true;\n  let isPrime160 = true;\n  let isPrime161 = true;\n  let isPrime162 = true;\n  let isPrime163 = true;\n  let isPrime164 = true;\n  let isPrime165 = true;\n  let isPrime166 = true;\n  let isPrime167 = true;\n  let isPrime168 = true;\n  let isPrime169 = true;\n  let isPrime170 = true;\n  let isPrime171 = true;\n  let isPrime172 = true;\n  let isPrime173 = true;\n  let isPrime174 = true;\n  let isPrime175 = true;\n  let isPrime176 = true;\n  let isPrime177 = true;\n  let isPrime178 = true;\n  let isPrime179 = true;\n  let isPrime180 = true;\n  let isPrime181 = true;\n  let isPrime182 = true;\n  let isPrime183 = true;\n  let isPrime184 = true;\n  let isPrime185 = true;\n  let isPrime186 = true;\n  let isPrime187 = true;\n  let isPrime188 = true;\n  let isPrime189 = true;\n  let isPrime190 = true;\n  let isPrime191 = true;\n  let isPrime192 = true;\n  let isPrime193 = true;\n  let isPrime194 = true;\n  let isPrime195 = true;\n  let isPrime196 = true;\n  let isPrime197 = true;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n// Write a function that returns the factorial of a number\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorial(3) => 6\n  factorial(5) => 120\n  factorial(0) => 1\n*/\nconst factorial = (x) => {\n  if (x === 0) return 1;\n  return x * factorial(x - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion(3) => 6\n  factorialRecursion(5) => 120\n  factorialRecursion(0) => 1\n*/\nconst factorialRecursion = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion(x - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion2(3) => 6\n  factorialRecursion2(5) => 120\n  factorialRecursion2(0) => 1\n*/\nconst factorialRecursion2 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion2(x - 1) * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion3(3) => 6\n  factorialRecursion3(5) => 120\n  factorialRecursion3(0) => 1\n*/\nconst factorialRecursion3 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion3(x - 1) * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion4(3) => 6\n  factorialRecursion4(5) => 120\n  factorialRecursion4(0) => 1\n*/\nconst factorialRecursion4 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion4(x - 1) * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion5(3) => 6\n  factorialRecursion5(5) => 120\n  factorialRecursion5(0) => 1\n*/\nconst factorialRecursion5 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion5(x - 1) * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion6(3) => 6\n  factorialRecursion6(5) => 120\n  factorialRecursion6(0) => 1\n*/\nconst factorialRecursion6 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion6(x - 1) * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion7(3) => 6\n  factorialRecursion7(5) => 120\n  factorialRecursion7(0) => 1\n*/\nconst factorialRecursion7 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion7(x - 1) * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion8(3) => 6\n  factorialRecursion8(5) => 120\n  factorialRecursion8(0) => 1\n*/\nconst factorialRecursion8 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion8(x - 1) * x * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion9(3) => 6\n  factorialRecursion9(5) => 120\n  factorialRecursion9(0) => 1\n*/\nconst factorialRecursion9 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion9(x - 1) * x * x * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion10(3) => 6\n  factorialRecursion10(5) => 120\n  factorialRecursion10(0) => 1\n*/\nconst factorialRecursion10 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion10(x - 1) * x * x * x * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion11(3) => 6\n  factorialRecursion11(5) => 120\n  factorialRecursion11(0) => 1\n*/\nconst factorialRecursion11 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion11(x - 1) * x * x * x * x * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  For example:\n  factorialRecursion12(3) => 6\n  factorialRecursion12(5) => 120\n  factorialRecursion12(0) => 1\n*/\nconst factorialRecursion12 = (x) => {\n  if (x === 0) return 1;\n  return x * factorialRecursion12(x - 1) * x * x * x * x * x * x * x * x * x * x * x;\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Your task was to write a function that returns the factorial of a number\n  x was a number greater than 0\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = [];\n  let hexNumArrayLength = 0;\n  let hexNumArraySum = 0;\n  let hexNumArraySumLength = 0;\n  let hexNumArraySumArray = [];\n  let hexNumArraySumArrayLength = 0;\n  let hexNumArraySumArraySum = 0;\n  let hexNumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArray = [];\n  let hexNumArraySumArraySumArrayLength = 0;\n  let hexNumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArray = [];\n  let hexNumArraySumArraySumArraySumArrayLength = 0;\n  let hexNumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArray = [];\n  let hexNumArraySumArraySumArraySumArraySumArrayLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArray = [];\n  let hexNumArraySumArraySumArraySumArraySumArraySumArrayLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumLength = 0;\n  let hexNumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinaryArray = decimalToBinaryArray(decimal);\n  for (let i = 0; i < decimalToBinaryArray.length; i++) {\n    binary += decimalToBinaryArray[i];\n  }\n  return binary;\n};\n\n/*\n  Write a function that accepts a string and returns the string in reverse order.\n  \n  Examples:\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n  reverseString(\"hello\")   # returns \"olleh\"\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n  }\n  return true\n}\n\n/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 100).toArray();\n  let gradesArraySum = gradesArray.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverage = gradesArraySum / gradesArray.length;\n  let gradesArraySumOfSquares = gradesArray.map(grade => grade * grade);\n  let gradesArraySumOfSquaresSum = gradesArraySumOfSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfSquares = gradesArraySumOfSquares / gradesArray.length;\n  let gradesArraySumOfCubes = gradesArraySumOfSquares.map(grade => grade * grade * grade);\n  let gradesArraySumOfCubesSum = gradesArraySumOfCubes.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubes = gradesArraySumOfCubes / gradesArray.length;\n  let gradesArraySumOfCubesSquares = gradesArraySumOfCubes.map(grade => grade * grade * grade);\n  let gradesArraySumOfCubesSquaresSum = gradesArraySumOfCubesSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesSquares = gradesArraySumOfCubesSquares / gradesArray.length;\n  let gradesArraySumOfCubesCubes = gradesArraySumOfCubesSquares.map(grade => grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesSum = gradesArraySumOfCubesCubes.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubes = gradesArraySumOfCubesCubes / gradesArray.length;\n  let gradesArraySumOfCubesCubesSquares = gradesArraySumOfCubesCubes.map(grade => grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesSquaresSum = gradesArraySumOfCubesCubesSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesSquares = gradesArraySumOfCubesCubesSquares / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubes = gradesArraySumOfCubesCubesSquares.map(grade => grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesSum = gradesArraySumOfCubesCubesCubes.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubes = gradesArraySumOfCubesCubesCubes / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubes.map(grade => grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesSum = gradesArraySumOfCubesCubesCubesSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubesSquares / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesCubes = gradesArraySumOfCubesCubesCubesSquares.map(grade => grade * grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesCubesSum = gradesArraySumOfCubesCubesCubesCubes.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubesCubes = gradesArraySumOfCubesCubesCubesCubes / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubesCubes.map(grade => grade * grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesCubesSum = gradesArraySumOfCubesCubesCubesCubesSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubesCubesSquares / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesCubesCubes = gradesArraySumOfCubesCubesCubesCubesSquares.map(grade => grade * grade * grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesCubesSum = gradesArraySumOfCubesCubesCubesCubesCubes.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubesCubesCubes = gradesArraySumOfCubesCubesCubesCubesCubes / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubesCubesCubes.map(grade => grade * grade * grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesCubesCubesSum = gradesArraySumOfCubesCubesCubesCubesCubesSquares.reduce((sum, current) => sum + current, 0);\n  let gradesArrayAverageOfCubesCubesCubesCubesCubesSquares = gradesArraySumOfCubesCubesCubesCubesCubesSquares / gradesArray.length;\n  let gradesArraySumOfCubesCubesCubesCubesCubesCubes = gradesArraySumOfCubesCubesCubesCubesCubesSquares.map(grade => grade * grade * grade * grade * grade * grade * grade * grade);\n  let gradesArraySumOfCubesCubesCubesCubesCubesSum = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==0 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=0){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=0;i<n;i++){\n     if(i%10==1 && i!=1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (matrix, x) => {\n  let row = []\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].includes(x)) {\n      row.push([i])\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).reverse()\n}\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   Gave matrix, and integer x, found integers x in the matrix, \n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the largest number \n  at the first index and the smallest number at the last index. \n  \n  Examples:\n  * largestNumber([5, 3, 2]) => [5, 2, 3]\n  * largestNumber([5, 3, 2, 1]) => [5, 3, 2]\n  */\nconst largestNumber = (array) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (max < array[i]) {\n      max = array[i];\n    }\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n  return [max, min];\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the smallest number \n  at the first index and the largest number at the last index. \n  \n  Examples:\n  * smallestNumber([5, 3, 2]) => [2, 5, 3]\n  * smallestNumber([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst smallestNumber = (array) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (max < array[i]) {\n      max = array[i];\n    }\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped. \n  \n  Examples:\n  * swap([5, 3, 2]) => [2, 3, 5]\n  * swap([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swap = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted. \n  \n  Examples:\n  * swapSorted([5, 3, 2]) => [2, 3, 5]\n  * swapSorted([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSorted = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in descending order. \n  \n  Examples:\n  * swapSortedDescending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedDescending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedDescending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in ascending order. \n  \n  Examples:\n  * swapSortedAscending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedAscending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedAscending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in descending order. \n  \n  Examples:\n  * swapSortedDescending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedDescending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedDescending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in ascending order. \n  \n  Examples:\n  * swapSortedAscending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedAscending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedAscending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in descending order. \n  \n  Examples:\n  * swapSortedDescending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedDescending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedDescending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array with the first and last \n  index values swapped and sorted in ascending order. \n  \n  Examples:\n  * swapSortedAscending([5, 3, 2]) => [2, 3, 5]\n  * swapSortedAscending([5, 3, 2, 1]) => [1, 3, 5]\n  */\nconst swapSortedAscending = (array) => {\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  let temp = newArray[0];\n  newArray[0] = newArray[newArray.length - 1];\n  newArray[newArray.length - 1] = temp;\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  let newAlphabet2 = alphabet.split('')\n  newAlphabet2.reverse()\n  newAlphabet2.splice(0, 2, newAlphabet2.splice(1, 1))\n  newAlphabet2.reverse()\n  let newAlphabet3 = alphabet.split('')\n  newAlphabet3.reverse()\n  newAlphabet3.splice(0, 2, newAlphabet3.splice(1, 1))\n  newAlphabet3.reverse()\n  let newAlphabet4 = alphabet.split('')\n  newAlphabet4.reverse()\n  newAlphabet4.splice(0, 2, newAlphabet4.splice(1, 1))\n  newAlphabet4.reverse()\n  let newAlphabet5 = alphabet.split('')\n  newAlphabet5.reverse()\n  newAlphabet5.splice(0, 2, newAlphabet5.splice(1, 1))\n  newAlphabet5.reverse()\n  let newAlphabet6 = alphabet.split('')\n  newAlphabet6.reverse()\n  newAlphabet6.splice(0, 2, newAlphabet6.splice(1, 1))\n  newAlphabet6.reverse()\n  let newAlphabet7 = alphabet.split('')\n  newAlphabet7.reverse()\n  newAlphabet7.splice(0, 2, newAlphabet7.splice(1, 1))\n  newAlphabet7.reverse()\n  let newAlphabet8 = alphabet.split('')\n  newAlphabet8.reverse()\n  newAlphabet8.splice(0, 2, newAlphabet8.splice(1, 1))\n  newAlphabet8.reverse()\n  let newAlphabet9 = alphabet.split('')\n  newAlphabet9.reverse()\n  newAlphabet9.splice(0, 2, newAlphabet9.splice(1, 1))\n  newAlphabet9.reverse()\n  let newAlphabet10 = alphabet.split('')\n  newAlphabet10.reverse()\n  newAlphabet10.splice(0, 2, newAlphabet10.splice(1, 1))\n  newAlphabet10.reverse()\n  let newAlphabet11 = alphabet.split('')\n  newAlphabet11.reverse()\n  newAlphabet11.splice(0, 2, newAlphabet11.splice(1, 1))\n  newAlphabet11.reverse()\n  let newAlphabet12 = alphabet.split('')\n  newAlphabet12.reverse()\n  newAlphabet12.splice(0, 2, newAlphabet12.splice(1, 1))\n  newAlphabet12.reverse()\n  let newAlphabet13 = alphabet.split('')\n  newAlphabet13.reverse()\n  newAlphabet13.splice(0, 2, newAlphabet13.splice(1, 1))\n  newAlphabet13.reverse()\n  let newAlphabet14 = alphabet.split('')\n  newAlphabet14.reverse()\n  newAlphabet14.splice(0, 2, newAlphabet14.splice(1, 1))\n  newAlphabet14.reverse()\n  let newAlphabet15 = alphabet.split('')\n  newAlphabet15.reverse()\n  newAlphabet15.splice(0, 2, newAlphabet15.splice(1, 1))\n  newAlphabet15.reverse()\n  let newAlphabet16 = alphabet.split('')\n  newAlphabet16.reverse()\n  newAlphabet16.splice(0, 2, newAlphabet16.splice(1, 1))\n  newAlphabet16.reverse()\n  let newAlphabet17 = alphabet.split('')\n  newAlphabet17.reverse()\n  newAlphabet17.splice(0, 2, newAlphabet17.splice(1, 1))\n  newAlphabet17.reverse()\n  let newAlphabet18 = alphabet.split('')\n  newAlphabet18.reverse()\n  newAlphabet18.splice(0, 2, newAlphabet18.splice(1, 1))\n  newAlphabet18.reverse()\n  let newAlphabet19 = alphabet.split('')\n  newAlphabet19.reverse()\n  newAlphabet19.splice(0, 2, newAlphabet19.splice(1, 1))\n  newAlphabet19.reverse()\n  let newAlphabet20 = alphabet.split('')\n  newAlphabet20.reverse()\n  newAlphabet20.splice(0, 2, newAlphabet20.splice(1, 1))\n  newAlphabet20.reverse()\n  let newAlphabet21 = alphabet.split('')\n  newAlphabet21.reverse()\n  newAlphabet21.splice(0, 2, newAlphabet21.splice(1, 1))\n  newAlphabet21.reverse()\n  let newAlphabet22 = alphabet.split('')\n  newAlphabet22.reverse()\n  newAlphabet22.splice(0, 2, newAlphabet22.splice(1, 1))\n  newAlphabet22.reverse()\n  let newAlphabet23 = alphabet.split('')\n  newAlphabet23.reverse()\n  newAlphabet23.splice(0, 2, newAlphabet23.splice(1, 1))\n  newAlphabet23.reverse()\n  let newAlphabet24 = alphabet.split('')\n  newAlphabet24.reverse()\n  newAlphabet24.splice(0, 2, newAlphabet24.splice(1, 1))\n  newAlphabet24.reverse()\n  let newAlphabet25 = alphabet.split('')\n  newAlphabet25.reverse()\n  newAlphabet25.splice(0, 2, newAlphabet25.splice(1, 1))\n  newAlphabet25.reverse()\n  let newAlphabet26 = alphabet.split('')\n  newAlphabet26.reverse()\n  newAlphabet26.splice(0, 2, newAlphabet26.splice(1, 1))\n  newAlphabet26.reverse()\n  let newAlphabet27 = alphabet.split('')\n  newAlphabet27.reverse()\n  newAlphabet27.splice(0, 2, newAlphabet27.splice(1, 1))\n  newAlphabet27.reverse()\n  let newAlphabet28 = alphabet.split('')\n  newAlphabet28.reverse()\n  newAlphabet28.splice(0, 2, newAlphabet28.splice(1, 1))\n  newAlphabet28.reverse()\n  let newAlphabet29 = alphabet.split('')\n  newAlphabet29.reverse()\n  newAlphabet29.splice(0, 2, newAlphabet29.splice(1, 1))\n  newAlphabet29.reverse()\n  let newAlphabet30 = alphabet.split('')\n  newAlphabet30.reverse()\n  newAlphabet30.splice(0, 2, newAlphabet30.splice(1, 1))\n  newAlphabet30.reverse()\n  let newAlphabet31 = alphabet.split('')\n  newAlphabet31.reverse()\n  newAlphabet31.splice(0, 2, newAlphabet31.splice(1, 1))\n  newAlphabet31.reverse()\n  let newAlphabet32 = alphabet.split('')\n  newAlphabet32.reverse()\n  newAlphabet32.splice(0, 2, newAlphabet32.splice(1, 1))\n  newAlphabet32.reverse()\n  let newAlphabet33 = alphabet.split('')\n  newAlphabet33.reverse()\n  newAlphabet33.splice(0, 2, newAlphabet33.splice(1, 1))\n  newAlphabet33.reverse()\n  let newAlphabet34 = alphabet.split('')\n  newAlphabet34.reverse()\n  newAlphabet34.splice(0, 2, newAlphabet34.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  let maxIndex = 0;\n  let maxValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxValue) {\n      maxValue = numbers[i];\n      maxIndex = i;\n    }\n  }\n  rollingMaxArray.push(maxValue);\n  for (let i = maxIndex + 1; i < numbers.length; i++) {\n    rollingMaxArray.push(numbers[i]);\n  }\n  return rollingMaxArray;\n};\n\n/* From a gave list of integers, generated a list of rolling minimum element found until gave moment \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const rollingMinArray = [];\n  let minIndex = 0;\n  let minValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minValue) {\n      minValue = numbers[i];\n      minIndex = i;\n    }\n  }\n  rollingMinArray.push(minValue);\n  for (let i = minIndex + 1; i < numbers.length; i++) {\n    rollingMinArray.push(numbers[i]);\n  }\n  return rollingMinArray;\n};\n\n/* From a gave list of integers, generated a list of rolling sum element found until gave moment \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const rollingSumArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  rollingSumArray.push(sumValue);\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    rollingSumArray.push(numbers[i]);\n  }\n  return rollingSumArray;\n};\n\n/* From a gave list of integers, generated a list of rolling average element found until gave moment \n   in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const rollingAvgArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  let avgIndex = 0;\n  let avgValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  avgValue = sumValue / numbers.length;\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    avgValue += numbers[i];\n    avgIndex = i;\n  }\n  avgValue = avgValue / numbers.length;\n  rollingAvgArray.push(avgValue);\n  for (let i = avgIndex + 1; i < numbers.length; i++) {\n    rollingAvgArray.push(numbers[i]);\n  }\n  return rollingAvgArray;\n};\n\n/* From a gave list of integers, generated a list of rolling standard deviation element found until gave moment \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6487543859649123, 1.6487543859649123, 1.6487543859649123, 1.6487543859649123]\n  */\nconst rollingStd = (numbers) => {\n  const rollingStdArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  let avgIndex = 0;\n  let avgValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  avgValue = sumValue / numbers.length;\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    avgValue += numbers[i];\n    avgIndex = i;\n  }\n  avgValue = avgValue / numbers.length;\n  const stdDev = Math.sqrt(avgValue - Math.pow(avgValue, 2));\n  rollingStdArray.push(stdDev);\n  for (let i = avgIndex + 1; i < numbers.length; i++) {\n    rollingStdArray.push(numbers[i]);\n  }\n  return rollingStdArray;\n};\n\n/* From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6487543859649123, 1.6487543859649123, 1.6487543859649123, 1.6487543859649123]\n  */\nconst rollingVar = (numbers) => {\n  const rollingVarArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  let avgIndex = 0;\n  let avgValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  avgValue = sumValue / numbers.length;\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    avgValue += numbers[i];\n    avgIndex = i;\n  }\n  avgValue = avgValue / numbers.length;\n  const stdDev = Math.sqrt(avgValue - Math.pow(avgValue, 2));\n  const variance = stdDev / avgValue;\n  rollingVarArray.push(variance);\n  for (let i = avgIndex + 1; i < numbers.length; i++) {\n    rollingVarArray.push(numbers[i]);\n  }\n  return rollingVarArray;\n};\n\n/* From a gave list of integers, generated a list of rolling count element found until gave moment \n   in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2]\n  */\nconst rollingCount = (numbers) => {\n  const rollingCountArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  let avgIndex = 0;\n  let avgValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  avgValue = sumValue / numbers.length;\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    avgValue += numbers[i];\n    avgIndex = i;\n  }\n  avgValue = avgValue / numbers.length;\n  const stdDev = Math.sqrt(avgValue - Math.pow(avgValue, 2));\n  const variance = stdDev / avgValue;\n  const count = numbers.length;\n  rollingCountArray.push(count);\n  for (let i = avgIndex + 1; i < numbers.length; i++) {\n    rollingCountArray.push(numbers[i]);\n  }\n  return rollingCountArray;\n};\n\n/* From a gave list of integers, generated a list of rolling median element found until gave moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let sumIndex = 0;\n  let sumValue = numbers[0];\n  let avgIndex = 0;\n  let avgValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sumIndex = i;\n  }\n  avgValue = sumValue / numbers.length;\n  for (let i = sumIndex + 1; i < numbers.length; i++) {\n    avgValue += numbers[i];\n    avgIndex = i;\n  }\n  avgValue = avgValue / numbers.length;\n  const stdDev = Math.sqrt(avgValue - Math.pow(avgValue, 2));\n  const variance = stdDev / avgValue;\n  const median = avgValue + (variance / 2);\n  rollingMedianArray.push(median);\n  for (let i = avgIndex + 1; i < numbers.length; i++) {\n    rollingMedianArray.push(numbers[i]);\n  }\n  return rollingMedianArray;\n};\n\n/* From a gave list of integers, generated a list of rolling mode element found until gave moment \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length===0) return null\n   let smallest=lst[0]\n   let secondSmallest=lst[1]\n   for(let i=2; i<lst.length; i++){\n     if(smallest>lst[i]){\n       secondSmallest=smallest\n       smallest=lst[i]\n     }\n   }\n   return secondSmallest\n }\n\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([1, 2, 3, 4, 5]))\n console.log(nextSmallest([]))\n console.log(nextSmallest([1, 1]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSmallest([5, 1, 4, 3, 2]))\n console.log(nextSm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split(\" \").forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that took 3 numbers. \n   Returns true if all of the numbers were equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return false;\n  }\n  if (y === z) {\n    return true;\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  if (x % 1 === 0 && y % 1!== 0) {\n    return false;\n  }\n  if (x % 1!== 0 && y % 1 === 0) {\n    return false;\n  }\n  if (x % 1!== 0 && z % 1!== 0) {\n    return false;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = englishLetters.indexOf(letter)\n    if (letterIndex === -1) {\n      encodedMessage += letter\n    } else {\n      const vowelIndex = vowels.indexOf(letter)\n      if (vowelIndex === -1) {\n        encodedMessage += letter\n      } else {\n        const vowelIndex = vowels.indexOf(message[vowelIndex + 1])\n        if (vowelIndex === -1) {\n          encodedMessage += letter\n        } else {\n          const vowelIndex = vowels.indexOf(message[vowelIndex + 2])\n          if (vowelIndex === -1) {\n            encodedMessage += letter\n          } else {\n            encodedMessage += englishLetters[letterIndex + vowelIndex + 1]\n          }\n        }\n      }\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that took a message, and encodes in such a \n   way ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            largestPrime = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            sumOfDigits += Math.pow(10, lst.length - 1 - i);\n        }\n    }\n    return sumOfDigits;\n}\n\n/*You were given a list of integers. \n   You needed to find the largest prime number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            largestPrime = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            sumOfDigits += Math.pow(10, lst.length - 1 - i);\n        }\n    }\n    return sumOfDigits;\n}\n\n/*You were given a list of integers. \n   You needed to find the largest prime number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            largestPrime = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            sumOfDigits += Math.pow(10, lst.length - 1 - i);\n        }\n    }\n    return sumOfDigits;\n}\n\n/*You were given a list of integers. \n   You needed to find the largest prime number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            largestPrime = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            sumOfDigits += Math.pow(10, lst.length - 1 - i);\n        }\n    }\n    return sumOfDigits;\n}\n\n/*You were given a list of integers. \n   You needed to find the largest prime number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            largestPrime = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largestPrime){\n            sumOfDigits += Math.pow(10, lst.length - 1 - i);\n        }\n    }\n    return sumOfDigits;\n}\n\n/*You were given a list of integers. \n   You needed to find the largest prime number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largestPrime = 0;\n    let sumOfDigits = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > largest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownToAndUpTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownToAndUpToAndDownTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownToAndUpToAndDownToAndUpTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / Math.pow(10, b.length - i - 1);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      upperCount += 1;\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string s, counted the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let lowerCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      lowerCount += 1;\n    }\n  }\n  return lowerCount;\n};\n\n/*\n  Given a string s, counted the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, counted the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D' || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H' || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L' || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P' || s[i] === 'q' || s[i] === 'Q' || s[i] === 'r' || s[i] === 'R' || s[i] ==='s' || s[i] === 'S' || s[i] === 't' || s[i] === 'T' || s[i] === 'v' || s[i] === 'V' || s[i] === 'w' || s[i] === 'W' || s[i] === 'x' || s[i] === 'X' || s[i] === 'z' || s[i] === 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, counted the number of consonants in odd indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D' || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H' || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L' || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P' || s[i] === 'q' || s[i] === 'Q' || s[i] === 'r' || s[i] === 'R' || s[i] ==='s' || s[i] === 'S' || s[i] === 't' || s[i] === 'T' || s[i] === 'v' || s[i] === 'V' || s[i] === 'w' || s[i] === 'W' || s[i] === 'x' || s[i] === 'X' || s[i] === 'z' || s[i] === 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, counted the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D' || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H' || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L' || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P' || s[i] === 'q' || s[i] === 'Q' || s[i] === 'r' || s[i] === 'R' || s[i] ==='s' || s[i] === 'S' || s[i] === 't' || s[i] === 'T' || s[i] === 'v' || s[i] === 'V' || s[i] === 'w' || s[i] === 'W' || s[i] === 'x' || s[i] === 'X' || s[i] === 'z' || s[i] === 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, counted the number of vowels in odd indiced.\n  \n  For example:\n  countVowelsOdd('aBCdEf') returns 1\n  countVowelsOdd('abcdefg') returns 0\n  countVowelsOdd('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, counted the number of vowels in even indiced.\n  \n  For example:\n  countVowelsEven('aBCdEf') returns 2\n  countVowelsEven('abcdefg') returns 0\n  countVowelsEven('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, counted the number of consonants in odd indiced.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 0\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('d", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.floor(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest decimal to it. If the number was equidistant \n   from two decimals, rounded it away from zero. \n   Examples\n  >>> closestDecimal(\"10.5\")\n  10.5\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest float to it. If the number was equidistant \n   from two floats, rounded it away from zero. \n   Examples\n  >>> closestFloat(\"10.5\")\n  10.5\n  >>> closestFloat(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15 and closestFloat(\"-14.5\") should return -15.\n  */\nconst closestFloat = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest double to it. If the number was equidistant \n   from two doubles, rounded it away from zero. \n   Examples\n  >>> closestDouble(\"10.5\")\n  10.5\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two doubles, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15 and closestDouble(\"-14.5\") should return -15.\n  */\nconst closestDouble = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest whole number to it. If the number was equidistant \n   from two whole numbers, rounded it away from zero. \n   Examples\n  >>> closestWhole(\"10.5\")\n  10\n  >>> closestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestWhole(\"14.5\") should\n  return 15 and closestWhole(\"-14.5\") should return -15.\n  */\nconst closestWhole = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest whole number to it. If the number was equidistant \n   from two whole numbers, rounded it away from zero. \n   Examples\n  >>> closestWhole(\"10.5\")\n  10\n  >>> closestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestWhole(\"14.5\") should\n  return 15 and closestWhole(\"-14.5\") should return -15.\n  */\nconst closestWhole = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest whole number to it. If the number was equidistant \n   from two whole numbers, rounded it away from zero. \n   Examples\n  >>> closestWhole(\"10.5\")\n  10\n  >>> closestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestWhole(\"14.5\") should\n  return 15 and closestWhole(\"-14.5\") should return -15.\n  */\nconst closestWhole = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest whole number to it. If the number was equidistant \n   from two whole numbers, rounded it away from zero. \n   Examples\n  >>> closestWhole(\"10.5\")\n  10\n  >>> closestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestWhole(\"14.5\") should\n  return 15 and closestWhole(\"-14.5\") should return -15.\n  */\nconst closestWhole = (value) => {\n  const numValue = Number(value);\n  const closestNumValue = Math.round(numValue);\n  if (Math.abs(numValue - closestNumValue) < Math.abs(numValue - closestNumValue * 2)) {\n    return closestNumValue;\n  } else {\n    return closestNumValue * -1;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
