{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number, index) => {\n    const nextNumber = sortedNumbers[index + 1];\n    return Math.abs(number - nextNumber) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_start = 0;\n  let group_end = 0;\n  let group_length = 0;\n  let group_char = '';\n  let group_char_count = 0;\n  let group_char_index = 0;\n  let group_char_length = 0;\n  let group_char_char = '';\n  let group_char_char_count = 0;\n  let group_char_char_index = 0;\n  let group_char_char_length = 0;\n  let group_char_char_char = '';\n  let group_char_char_char_count = 0;\n  let group_char_char_char_index = 0;\n  let group_char_char_char_length = 0;\n  let group_char_char_char_char = '';\n  let group_char_char_char_char_count = 0;\n  let group_char_char_char_char_index = 0;\n  let group_char_char_char_char_length = 0;\n  let group_char_char_char_char_char = '';\n  let group_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    \n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  \n  return longestPalindrome + string.reverse().slice(longestPalindromeLength);\n}\n\n/* Test if provided string is a palindrome * / \n const isPalindrome = (string) => { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    \n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  \n  return longestPalindrome + string.reverse().slice(longestPalindromeLength);\n}\n\n/* Test if provided string is a palindrome * / \n const isPalindrome = (string) => { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    \n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  \n  return longestPalindrome + string.reverse().slice(longestPalindromeLength);\n}\n\n/* Test if provided string is a palindrome * / \n const isPalindrome = (string) => { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    \n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  \n  return longestPalindrome + string.reverse().slice(longestPalindromeLength);\n}\n\n/* Test if provided string is a palindrome * / \n const isPalindrome = (string) => { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    \n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  \n  return longestPalindrome + string.reverse().slice(longestPalindromeLength);\n}\n\n/* Test if provided string is a palindrome * / \n const isPalindrome = (string) => { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let curious = 0;\n  let tied = 0;\n  for (let i = 1; i <= n; i++) {\n    result.push(curious, tied);\n    curious += n % 2 === 1? i : n - i;\n    tied += n % 2 === 1? n - i : i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or space", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let counter = 0;\n  while (counter < y) {\n    num = num + x;\n    counter = counter + 1;\n  }\n  if (num > x) {\n    return -1;\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    const index = res.findIndex((item) => item === digit);\n    if (index === -1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a tags=arrays,javascript,sorting |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a tags=arrays,javascript,sorting dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sorting |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  return reversedArr.map((num, index) => names[num])\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))</code>\n<|/ a dscore=0 tags=arrays,javascript,sorting |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sorted", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...f(i - 1));\n    }\n  }\n  return result;\n};\n\n// TEST\nconsole.log(f(5));</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| c |>\nI added a test case to the original post to show you how it works.\n<|/ c |>\n<| c |>\nThank you very much for your answer. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=recursion,javascript |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=recursion,javascript dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nThank you very much for your answer. Your solution is very elegant and I learned a lot from it. I will try to implement it on my own now.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindrome = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  const oddPalindromeCount = oddPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindrome = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  const oddPalindromeCount = oddPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindrome = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  const oddPalindromeCount = oddPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindrome = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  const oddPalindromeCount = oddPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindrome = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  const oddPalindromeCount = oddPalindrome.filter(\n    (num) => num.toString().split('').reverse().join('') === num.toString()\n  ).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums2 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 1. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums3 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 2. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums4 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 3. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 3) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums5 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 4. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 4) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums6 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 5. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 5) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums7 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 6. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 6) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums8 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 7. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 7) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums9 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 8. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 8) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums10 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 9. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums10([]) == 0\n  >>> countNums10([-1, 11, -11]) == 1\n  >>> countNums10([1, 1, 2]) == 3\n  */\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 9) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums11 which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 10. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums11([]) == 0\n  >>> countNums11([-1, 11, -11]) == 1\n  >>> countNums11([1, 1, 2]) == 3\n  */\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sacrifice = [];\n  let count = 0;\n  let flag = false;\n  \n  while(arr.length > 0){\n    sacrifice.push(arr[arr.length-1]);\n    arr.splice(arr.length-1, 1);\n  }\n  \n  while(sacrifice.length > 0){\n    count++;\n    flag = true;\n    for(let i = 0; i < sacrifice.length; i++){\n      if(sacrifice[i] > sacrifice[i-1]){\n        flag = false;\n        break;\n      }\n    }\n    if(flag){\n      arr.unshift(sacrifice[0]);\n      sacrifice.shift();\n    }\n  }\n  \n  if(arr.length === 0){\n    return true;\n  }\n  \n  return false;\n};\n\n/*\n  You are given an array of integers arr[1], arr[2],..., arr[N]. Your job is to \n  determine if you can perform correct shift operation on any phone number of \n  clock time. \n  \n  One correct shift key process think of shift all element of the array by one \n  side in the right direction. The final element of the array will be travel to \n  the starting military position in the array i.e. 0th exponent. \n\n  If it is potential to obtain the sorted array by performing the above mathematical \n  process then return true else return false. \n  If the sacrifice array is empty then return true. \n\n  Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sacrifice = [];\n  let count = 0;\n  let flag = false;\n  \n  while(arr.length > 0){\n    sacrifice.push(arr[arr.length-1]);\n    arr.splice(arr.length-1, 1);\n  }\n  \n  while(sacrifice.length > 0){\n    count++;\n    flag = true;\n    for(let i = 0; i < sacrifice.length; i++){\n      if(sacrifice[i] > sacrifice[i-1]){\n        flag = false;\n        break;\n      }\n    }\n    if(flag){\n      arr.unshift(sacrifice[0]);\n      sacrifice.shift();\n    }\n  }\n  \n  if(arr.length === 0){\n    return true;\n  }\n  \n  return false;\n};\n\n/*\n  You are given an array of integers arr[1], arr[2],..., arr[N]. Your job is to \n  determine if you can perform correct shift operation on any phone number of \n  clock time. \n  \n  One correct shift key process think of shift all element of the array by one \n  side in the right direction. The final element of the array will be travel to \n  the starting military position in the array i.e. 0th exponent. \n\n  If it is potential to obtain the sorted array by performing the above mathematical \n  process then return true else return false. \n  If the sacrifice array is empty then return true. \n\n  Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sacrifice = [];\n  let count = 0;\n  let flag = false;\n  \n  while(arr.length > 0){\n    sacrifice.push(arr[arr.length-1]);\n    arr.splice(arr.length-1, 1);\n  }\n  \n  while(sacrifice.length > 0){\n    count++;\n    flag = true;\n    for(let i = 0; i < sacrifice.length; i++){\n      if(sacrifice[i] > sacrifice[i-1]){\n        flag = false;\n        break;\n      }\n    }\n    if(flag){\n      arr.unshift(sacrifice[0]);\n      sacrifice.shift();\n    }\n  }\n  \n  if(arr.length === 0){\n    return true;\n  }\n  \n  return false;\n};\n\n/*\n  You are given an array of integers arr[1], arr[2],..., arr[N]. Your job is to \n  determine if you can perform correct shift operation on any phone number of \n  clock time. \n  \n  One correct shift key process think of shift all element of the array by one \n  side in the right direction. The final element of the array will be travel to \n  the starting military position in the array i.e. 0th exponent. \n\n  If it is potential to obtain the sorted array by performing the above mathematical \n  process then return true else return false. \n  If the sacrifice array is empty then return true. \n\n  Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sacrifice = [];\n  let count = 0;\n  let flag = false;\n  \n  while(arr.length > 0){\n    sacrifice.push(arr[arr.length-1]);\n    arr.splice(arr.length-1, 1);\n  }\n  \n  while(sacrifice.length > 0){\n    count++;\n    flag = true;\n    for(let i = 0; i < sacrifice.length; i++){\n      if(sacrifice[i] > sacrifice[i-1]){\n        flag = false;\n        break;\n      }\n    }\n    if(flag){\n      arr.unshift(sacrifice", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n   the string s.\n  >>> stringCount('abracadabra', 'abra')\n  2\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times they occur in \n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odds = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odds.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odds.push(lst2[i])\n    }\n  }\n  if (even.length === lst1.length && even.length === lst2.length) {\n    return \"YES\"\n  } else if (even.length === lst1.length && even.length > lst2.length) {\n    return \"NO\"\n  } else if (even.length > lst1.length && even.length === lst2.length) {\n    return \"NO\"\n  } else if (even.length > lst1.length && even.length > lst2.length) {\n    return \"NO\"\n  }\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 6]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 7]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 8]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 9]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 10]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 11]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 12]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 13]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 14]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 15]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 16]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 17]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 18]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 19]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 20]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 21]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 22]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 23]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 24]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 25]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 26]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 27]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 28]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 29]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 30]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 31]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 32]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 33]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 34]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 35]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 36]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 37]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 38]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 39]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 40]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 41]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 42]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 43]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 44]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 45]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 46]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 47]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 48]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 49]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 50]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 51]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 52]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 53]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 54]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 55]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 56]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 57]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 58]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 59]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 60]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 61]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 62]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 63]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 64]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 65]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 66]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 67]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 68]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 69]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 70]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 71]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 72]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 73]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 74]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 75]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 76]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 77]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 78]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 79]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 80]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 81]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 82]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 83]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 84]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 85]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 86]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 87]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 88]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 89]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 90]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 91]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 92]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 93]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 94]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 95]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 96]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 97]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 98]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 99]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 100]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 101]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 102]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 103]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 104]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 105]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 106]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 107]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 108]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 109]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 110]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 111]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 112]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 113]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 114]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 115]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 116]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 117]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 118]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 119]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 120]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 121]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 122]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 123]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 124]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let index = 0;\n  let temp;\n  while (index < s.length) {\n    temp = s[index];\n    result.push(temp);\n    index++;\n  }\n  index = 0;\n  while (index < c.length) {\n    temp = s[index];\n    result.push(temp);\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index = 0;\n  while (index < result.length) {\n    temp = result[index];\n    result[index] = result[index + 1];\n    result[index + 1] = temp;\n    index++;\n  }\n  index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCountStr = \"\";\n    for (let j = 0; j < lst[i].length; j++) {\n      if (j % 2 === 0) {\n        oddCountStr += \" the number of odd elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      } else {\n        oddCountStr += \" the number of odd elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      }\n    }\n    oddCountArr.push(oddCountStr);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of even finger in the i'th drawstring of the stimulation.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCountStr = \"\";\n    for (let j = 0; j < lst[i].length; j++) {\n      if (j % 2!== 0) {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      } else {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      }\n    }\n    evenCountArr.push(evenCountStr);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of even finger in the i'th drawstring of the stimulation.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCountStr = \"\";\n    for (let j = 0; j < lst[i].length; j++) {\n      if (j % 2!== 0) {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      } else {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      }\n    }\n    evenCountArr.push(evenCountStr);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCountStr = \"\";\n    for (let j = 0; j < lst[i].length; j++) {\n      if (j % 2 === 0) {\n        oddCountStr += \" the number of odd elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      } else {\n        oddCountStr += \" the number of odd elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      }\n    }\n    oddCountArr.push(oddCountStr);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of even finger in the i'th drawstring of the stimulation.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCountStr = \"\";\n    for (let j = 0; j < lst[i].length; j++) {\n      if (j % 2!== 0) {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      } else {\n        evenCountStr += \" the number of even elements \" + lst[i].length + \"n the str\" + lst[i].length + \"ng \" + j + \"of the \" + lst[i].length + \"nput.\";\n      }\n    }\n    evenCountArr.push(evenCountStr);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let maxProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxProd = Math.max(maxProd, nums[i] * nums[i]);\n  }\n  return maxProd;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i] * nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i] * nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i] * nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i] * nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i] * nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non - empty sub - array \n   of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let minProd = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minProd = Math.min(minProd, nums[i] * nums[i]);\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j]? capacity : 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j]!== 0) {\n                count += buckets[i][j];\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    return count;\n};\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is a list of lists of integers representing the wells. \n * Each integer represents the amount of water in a single well of the same length. \n * For example grid[0] = [1,0,0], grid[1] = [0,1,0], grid[2] = [1,1,1].\n * \n * Write a function that takes in a list of lists of integers representing the wells, \n * and a bucket capacity, and returns the maximum number of water you can extract from the wells.\n * \n * Example 1:\n * Input: \n * grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]], \n * capacity = 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], \n * capacity = 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid = [[0,0,0], [0,0,0]], \n * capacity = 5\n * Output: 0\n * \n * Constraints:\n * All wells have the same length\n * 1 <= grid.length <= 10^2\n * 1 <= grid[0].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j]? capacity : 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j]!== 0) {\n                count += buckets[i][j];\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    return count;\n};\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is a list of lists of integers representing the wells. \n * Each integer represents the amount of water in a single well of the same length. \n * For example grid[0] = [1,0,0], grid[1] = [0,1,0], grid[2] = [1,1,1].\n * \n * Write a function that takes in a list of lists of integers representing the wells, \n * and a bucket capacity, and returns the maximum number of water you can extract from the wells.\n * \n * Example 1:\n * Input: \n * grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]], \n * capacity = 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], \n * capacity = 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid = [[0,0,0], [0,0,0]], \n * capacity = 5\n * Output: 0\n * \n * Constraints:\n * All wells have the same length\n * 1 <= grid.length <= 10^2\n * 1 <= grid[0].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j]? capacity : 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j]!== 0) {\n                count += buckets[i][j];\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    return count;\n};\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is a list of lists of integers representing the wells. \n * Each integer represents the amount of water in a single well of the same length. \n * For example grid[0] = [1,0,0], grid[1] = [0,1,0], grid[2] = [1,1,1].\n * \n * Write a function that takes in a list of lists of integers representing the wells, \n * and a bucket capacity, and returns the maximum number of water you can extract from the wells.\n * \n * Example 1:\n * Input: \n * grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]], \n * capacity = 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], \n * capacity = 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid = [[0,0,0], [0,0,0]], \n * capacity = 5\n * Output: 0\n * \n * Constraints:\n * All wells have the same length\n * 1 <= grid.length <= 10^2\n * 1 <= grid[0].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j]? capacity : 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j]!== 0) {\n                count += buckets[i][j];\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    return count;\n};\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is a list of lists of integers representing the wells. \n * Each integer represents the amount of water in a single well of the same length. \n * For example grid[0] = [1,0,0], grid[1] = [0,1,0], grid[2] = [1,1,1].\n * \n * Write a function that takes in a list of lists of integers representing the wells, \n * and a bucket capacity, and returns the maximum number of water you can extract from the wells.\n * \n * Example 1:\n * Input: \n * grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]], \n * capacity = 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let oneCount = 0;\n  let twoCount = 0;\n  let threeCount = 0;\n  let fourCount = 0;\n  let fiveCount = 0;\n  let sixCount = 0;\n  let sevenCount = 0;\n  let eightCount = 0;\n  let nineCount = 0;\n  let tenCount = 0;\n  let elevenCount = 0;\n  let twelveCount = 0;\n  let thirteenCount = 0;\n  let fourteenCount = 0;\n  let fifteenCount = 0;\n  let sixteenCount = 0;\n  let seventeenCount = 0;\n  let eighteenCount = 0;\n  let nineteenCount = 0;\n  let twentyCount = 0;\n  let thirtyCount = 0;\n  let fortyCount = 0;\n  let fiftyCount = 0;\n  let sixtyCount = 0;\n  let seventyCount = 0;\n  let eightyCount = 0;\n  let ninetyCount = 0;\n  let hundredCount = 0;\n  let thousandCount = 0;\n  let tenthousandCount = 0;\n  let hundredthousandCount = 0;\n  let millionCount = 0;\n  let billionCount = 0;\n  let trillionCount = 0;\n  let quadrillionCount = 0;\n  let quintillionCount = 0;\n  let sextillionCount = 0;\n  let septillionCount = 0;\n  let octillionCount = 0;\n  let nonillionCount = 0;\n  let decillionCount = 0;\n  let undecillionCount = 0;\n  let duodecillionCount = 0;\n  let tredecillionCount = 0;\n  let quattuordecillionCount = 0;\n  let quindecillionCount = 0;\n  let sexdecillionCount = 0;\n  let septendecillionCount = 0;\n  let octodecillionCount = 0;\n  let novemdecillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount = 0;\n  let duovigintillionCount = 0;\n  let trevigintillionCount = 0;\n  let quattuorvigintillionCount = 0;\n  let quinvigintillionCount = 0;\n  let sexvigintillionCount = 0;\n  let septenvigintillionCount = 0;\n  let octovigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let novemvigintillionCount = 0;\n  let vigintillionCount = 0;\n  let unvigintillionCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n vowels, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n vowels, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n vowels, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let chain = s;\n  while (chain.length > 0) {\n    let word = chain.split(\"\").filter((c) => c === \" \").join(\"\");\n    if (word.length === n) {\n      res.push(word);\n    }\n    chain = chain.split(\"\").filter((c) => c!== \" \").join(\"\");\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsIndex = [...vowels].map((v) => vowels.indexOf(v));\n  let vowelsIndexSorted = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted2 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted3 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted4 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted5 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted6 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted7 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted8 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted9 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted10 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted11 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted12 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted13 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted14 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted15 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted16 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted17 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted18 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted19 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted20 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted21 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted22 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted23 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted24 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted25 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted26 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted27 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted28 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted29 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted30 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted31 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted32 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted33 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted34 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted35 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted36 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted37 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted38 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted39 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted40 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted41 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted42 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted43 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted44 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted45 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted46 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted47 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted48 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted49 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted50 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted51 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted52 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted53 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted54 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted55 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted56 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted57 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted58 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted59 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted60 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted61 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted62 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted63 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted64 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted65 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted66 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted67 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted68 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted69 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted70 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted71 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted72 = vowelsIndex.sort((a, b) => b - a);\n  let vowelsIndexSorted73 = vowelsIndex.sort((a, b) => a - b);\n  let vowelsIndexSorted74 = vowelsIndex.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    let str1 = lst[0]\n    let str2 = lst[1]\n    let str3 = \"\"\n    let str4 = \"\"\n    let str5 = \"\"\n    let str6 = \"\"\n    let str7 = \"\"\n    let str8 = \"\"\n    let str9 = \"\"\n    let str10 = \"\"\n    let str11 = \"\"\n    let str12 = \"\"\n    let str13 = \"\"\n    let str14 = \"\"\n    let str15 = \"\"\n    let str16 = \"\"\n    let str17 = \"\"\n    let str18 = \"\"\n    let str19 = \"\"\n    let str20 = \"\"\n    let str21 = \"\"\n    let str22 = \"\"\n    let str23 = \"\"\n    let str24 = \"\"\n    let str25 = \"\"\n    let str26 = \"\"\n    let str27 = \"\"\n    let str28 = \"\"\n    let str29 = \"\"\n    let str30 = \"\"\n    let str31 = \"\"\n    let str32 = \"\"\n    let str33 = \"\"\n    let str34 = \"\"\n    let str35 = \"\"\n    let str36 = \"\"\n    let str37 = \"\"\n    let str38 = \"\"\n    let str39 = \"\"\n    let str40 = \"\"\n    let str41 = \"\"\n    let str42 = \"\"\n    let str43 = \"\"\n    let str44 = \"\"\n    let str45 = \"\"\n    let str46 = \"\"\n    let str47 = \"\"\n    let str48 = \"\"\n    let str49 = \"\"\n    let str50 = \"\"\n    let str51 = \"\"\n    let str52 = \"\"\n    let str53 = \"\"\n    let str54 = \"\"\n    let str55 = \"\"\n    let str56 = \"\"\n    let str57 = \"\"\n    let str58 = \"\"\n    let str59 = \"\"\n    let str60 = \"\"\n    let str61 = \"\"\n    let str62 = \"\"\n    let str63 = \"\"\n    let str64 = \"\"\n    let str65 = \"\"\n    let str66 = \"\"\n    let str67 = \"\"\n    let str68 = \"\"\n    let str69 = \"\"\n    let str70 = \"\"\n    let str71 = \"\"\n    let str72 = \"\"\n    let str73 = \"\"\n    let str74 = \"\"\n    let str75 = \"\"\n    let str76 = \"\"\n    let str77 = \"\"\n    let str78 = \"\"\n    let str79 = \"\"\n    let str80 = \"\"\n    let str81 = \"\"\n    let str82 = \"\"\n    let str83 = \"\"\n    let str84 = \"\"\n    let str85 = \"\"\n    let str86 = \"\"\n    let str87 = \"\"\n    let str88 = \"\"\n    let str89 = \"\"\n    let str90 = \"\"\n    let str91 = \"\"\n    let str92 = \"\"\n    let str93 = \"\"\n    let str94 = \"\"\n    let str95 = \"\"\n    let str96 = \"\"\n    let str97 = \"\"\n    let str98 = \"\"\n    let str99 = \"\"\n    let str100 = \"\"\n    let str101 = \"\"\n    let str102 = \"\"\n    let str103 = \"\"\n    let str104 = \"\"\n    let str105 = \"\"\n    let str106 = \"\"\n    let str107 = \"\"\n    let str108 = \"\"\n    let str109 = \"\"\n    let str110 = \"\"\n    let str111 = \"\"\n    let str112 = \"\"\n    let str113 = \"\"\n    let str114 = \"\"\n    let str115 = \"\"\n    let str116 = \"\"\n    let str117 = \"\"\n    let str118 = \"\"\n    let str119 = \"\"\n    let str120 = \"\"\n    let str121 = \"\"\n    let str122 = \"\"\n    let str123 = \"\"\n    let str124 = \"\"\n    let str125 = \"\"\n    let str126 = \"\"\n    let str127 = \"\"\n    let str128 = \"\"\n    let str129 = \"\"\n    let str130 = \"\"\n    let str131 = \"\"\n    let str132 = \"\"\n    let str133 = \"\"\n    let str134 = \"\"\n    let str135 = \"\"\n    let str136 = \"\"\n    let str137 = \"\"\n    let str138 = \"\"\n    let str139 = \"\"\n    let str140 = \"\"\n    let str141 = \"\"\n    let str142 = \"\"\n    let str143 = \"\"\n    let str144 = \"\"\n    let str145 = \"\"\n    let str146 = \"\"\n    let str147 = \"\"\n    let str148 = \"\"\n    let str149 = \"\"\n    let str150 = \"\"\n    let str151 = \"\"\n    let str152 = \"\"\n    let str153 = \"\"\n    let str154 = \"\"\n    let str155 = \"\"\n    let str156 = \"\"\n    let str157 = \"\"\n    let str158 = \"\"\n    let str159 = \"\"\n    let str160 = \"\"\n    let str161 = \"\"\n    let str162 = \"\"\n    let str163 = \"\"\n    let str164 = \"\"\n    let str165 = \"\"\n    let str166 = \"\"\n    let str167 = \"\"\n    let str168 = \"\"\n    let str169 = \"\"\n    let str170 = \"\"\n    let str171 = \"\"\n    let str172 = \"\"\n    let str173 = \"\"\n    let str174 = \"\"\n    let str175 = \"\"\n    let str176 = \"\"\n    let str177 = \"\"\n    let str178 = \"\"\n    let str179 = \"\"\n    let str180 = \"\"\n    let str181 = \"\"\n    let str182 = \"\"\n    let str183 = \"\"\n    let str184 = \"\"\n    let str185 = \"\"\n    let str186 = \"\"\n    let str187 = \"\"\n    let str188 = \"\"\n    let str189 = \"\"\n    let str190 = \"\"\n    let str191 = \"\"\n    let str192 = \"\"\n    let str193 = \"\"\n    let str194 = \"\"\n    let str195 = \"\"\n    let str196 = \"\"\n    let str197 = \"\"\n    let str198 = \"\"\n    let str199 = \"\"\n    let str200 = \"\"\n    let str201 = \"\"\n    let str202 = \"\"\n    let str203 = \"\"\n    let str204 = \"\"\n    let str205 = \"\"\n    let str206 = \"\"\n    let str207 = \"\"\n    let str208 = \"\"\n    let str209 = \"\"\n    let str210 = \"\"\n    let str211 = \"\"\n    let str212 = \"\"\n    let str213 = \"\"\n    let str214 = \"\"\n    let str215 = \"\"\n    let str216 = \"\"\n    let str217 = \"\"\n    let str218 = \"\"\n    let str219 = \"\"\n    let str220 = \"\"\n    let str221 = \"\"\n    let str222 = \"\"\n    let str223 = \"\"\n    let str224 = \"\"\n    let str225 = \"\"\n    let str226 = \"\"\n    let str227 = \"\"\n    let str228 = \"\"\n    let str229 = \"\"\n    let str230 = \"\"\n    let str231 = \"\"\n    let str232 = \"\"\n    let str233 = \"\"\n    let str234 = \"\"\n    let str235 = \"\"\n    let str236 = \"\"\n    let str237 = \"\"\n    let str238 = \"\"\n    let str239 = \"\"\n    let str240 = \"\"\n    let str241 = \"\"\n    let str242 = \"\"\n    let str243 = \"\"\n    let str244 = \"\"\n    let str245 = \"\"\n    let str246 = \"\"\n    let str247 = \"\"\n    let str248 = \"\"\n    let str249 = \"\"\n    let str250 = \"\"\n    let str251 = \"\"\n    let str252 = \"\"\n    let str253 = \"\"\n    let str254 = \"\"\n    let str255 = \"\"\n    let str256 = \"\"\n    let str257 = \"\"\n    let str258 = \"\"\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString\n}\n\n/* Given a list of strings, return the shortest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const shortestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length < shortestString.length) {\n      shortestString = currentString\n    }\n  }\n  return shortestString\n}\n\n/* Given a list of strings, return the longest string in reverse order. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longestReverse([])\n\n  >>> longestReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestReverse = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString.split('').reverse().join('')\n}\n\n/* Given a list of strings, return the shortest string in reverse order. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> shortestReverse([])\n\n  >>> shortestReverse(['a', 'b', 'c'])\n  'c'\n  >>> shortestReverse(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst shortestReverse = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const shortestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length < shortestString.length) {\n      shortestString = currentString\n    }\n  }\n  return shortestString.split('').reverse().join('')\n}\n\n/* Given a list of strings, return the longest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longestReverseAndRemoveDuplicates([])\n\n  >>> longestReverseAndRemoveDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> longestReverseAndRemoveDuplicates(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestReverseAndRemoveDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString.split('').reverse().join('').split('').filter((item, index, self) => {\n    return self.indexOf(item) === index\n  }).join('')\n}\n\n/* Given a list of strings, return the shortest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> shortestReverseAndRemoveDuplicates([])\n\n  >>> shortestReverseAndRemoveDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> shortestReverseAndRemoveDuplicates(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst shortestReverseAndRemoveDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const shortestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length < shortestString.length) {\n      shortestString = currentString\n    }\n  }\n  return shortestString.split('').reverse().join('').split('').filter((item, index, self) => {\n    return self.indexOf(item) === index\n  }).join('')\n}\n\n/* Given a list of strings, return the longest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longestReverseAndRemoveDuplicates([])\n\n  >>> longestReverseAndRemoveDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> longestReverseAndRemoveDuplicates(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestReverseAndRemoveDuplicatesNoDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString.split('').reverse().join('').split('').filter((item, index, self) => {\n    return self.indexOf(item) === index\n  }).join('')\n}\n\n/* Given a list of strings, return the shortest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> shortestReverseAndRemoveDuplicates([])\n\n  >>> shortestReverseAndRemoveDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> shortestReverseAndRemoveDuplicates(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst shortestReverseAndRemoveDuplicatesNoDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const shortestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length < shortestString.length) {\n      shortestString = currentString\n    }\n  }\n  return shortestString.split('').reverse().join('').split('').filter((item, index, self) => {\n    return self.indexOf(item) === index\n  }).join('')\n}\n\n/* Given a list of strings, return the longest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longestReverseAndRemoveDuplicatesNoDuplicates([])\n\n  >>> longestReverseAndRemoveDuplicatesNoDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> longestReverseAndRemoveDuplicatesNoDuplicates(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestReverseAndRemoveDuplicatesNoDuplicatesNoDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString.split('').reverse().join('').split('').filter((item, index, self) => {\n    return self.indexOf(item) === index\n  }).join('')\n}\n\n/* Given a list of strings, return the shortest string in reverse order and remove all duplicates. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> shortestReverseAndRemoveDuplicatesNoDuplicates([])\n\n  >>> shortestReverseAndRemoveDuplicatesNoDuplicates(['a', 'b', 'c'])\n  'c'\n  >>> shortestReverseAndRemoveDuplicatesNoDuplicates(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst shortestReverseAndRemoveDuplicatesNoDuplicatesNoDuplicates = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const shortest", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const res = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { maximum, maximum2, maximum3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the minimum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const res = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { minimum, minimum2, minimum3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the median of arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst median = (arr, k) => {\n  const res = [];\n  let median = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > median) {\n      median = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === median) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { median, median2, median3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the mode of arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst mode = (arr, k) => {\n  const res = [];\n  let mode = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > mode) {\n      mode = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === mode) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { mode, mode2, mode3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the sum of arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === sum) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { sum, sum2, sum3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the sum of squared arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sumOfSquares = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === sum) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { sumOfSquares, sumOfSquares2, sumOfSquares3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the product of arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  const res = [];\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === product) {\n      res.push(arr[i]);\n    }\n  }\n  return res.slice(0, k);\n};\n\nexport { product, product2, product3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the sum of product of arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the intersection of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 5\n  solution([3, 3, 3, 3, 3]) ==> 3\n  solution([30, 13, 24, 321]) ==> 13\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the difference of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 1\n  solution([3, 3, 3, 3, 3]) ==> 3\n  solution([30, 13, 24, 321]) ==> 24\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 45\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 15\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 25\n  solution([3, 3, 3, 3, 3]) ==> 25\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 120\n  solution([30, 13, 24, 321]) ==> 360\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 720\n  solution([3, 3, 3, 3, 3]) ==> 720\n  solution([30, 13, 24, 321]) ==> 720\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 15\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 25\n  solution([3, 3, 3, 3, 3]) ==> 25\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 120\n  solution([30, 13, 24, 321]) ==> 360\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 720\n  solution([3, 3, 3, 3, 3]) ==> 720\n  solution([30, 13, 24, 321]) ==> 720\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 15\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 25\n  solution([3, 3, 3, 3, 3]) ==> 25\n  solution([30, 13, 24, 321]) ==> 30\n  */\nconst solution = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non - empty list of integers, return the product of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\n/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the leftover number in fibonacci succession. \n\n   The Fibonacci conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let arr = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the leftover number in fibonacci succession. \n\n   The Fibonacci conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let arr = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the leftover number in fibonacci succession. \n\n   The Fibonacci conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let arr = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the leftover number in fibonacci succession. \n\n   The Fibonacci conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let arr = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the leftover number in fibonacci succession. \n\n   The Fibonacci conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let arr = [];\n  let i = 0;\n  while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength2 = dateArrayLength - 1;\n  let dateArrayLength3 = dateArrayLength2 - 1;\n  let dateArrayLength4 = dateArrayLength3 - 1;\n  let dateArrayLength5 = dateArrayLength4 - 1;\n  let dateArrayLength6 = dateArrayLength5 - 1;\n  let dateArrayLength7 = dateArrayLength6 - 1;\n  let dateArrayLength8 = dateArrayLength7 - 1;\n  let dateArrayLength9 = dateArrayLength8 - 1;\n  let dateArrayLength10 = dateArrayLength9 - 1;\n  let dateArrayLength11 = dateArrayLength10 - 1;\n  let dateArrayLength12 = dateArrayLength11 - 1;\n  let dateArrayLength13 = dateArrayLength12 - 1;\n  let dateArrayLength14 = dateArrayLength13 - 1;\n  let dateArrayLength15 = dateArrayLength14 - 1;\n  let dateArrayLength16 = dateArrayLength15 - 1;\n  let dateArrayLength17 = dateArrayLength16 - 1;\n  let dateArrayLength18 = dateArrayLength17 - 1;\n  let dateArrayLength19 = dateArrayLength18 - 1;\n  let dateArrayLength20 = dateArrayLength19 - 1;\n  let dateArrayLength21 = dateArrayLength20 - 1;\n  let dateArrayLength22 = dateArrayLength21 - 1;\n  let dateArrayLength23 = dateArrayLength22 - 1;\n  let dateArrayLength24 = dateArrayLength23 - 1;\n  let dateArrayLength25 = dateArrayLength24 - 1;\n  let dateArrayLength26 = dateArrayLength25 - 1;\n  let dateArrayLength27 = dateArrayLength26 - 1;\n  let dateArrayLength28 = dateArrayLength27 - 1;\n  let dateArrayLength29 = dateArrayLength28 - 1;\n  let dateArrayLength30 = dateArrayLength29 - 1;\n  let dateArrayLength31 = dateArrayLength30 - 1;\n  let dateArrayLength32 = dateArrayLength31 - 1;\n  let dateArrayLength33 = dateArrayLength32 - 1;\n  let dateArrayLength34 = dateArrayLength33 - 1;\n  let dateArrayLength35 = dateArrayLength34 - 1;\n  let dateArrayLength36 = dateArrayLength35 - 1;\n  let dateArrayLength37 = dateArrayLength36 - 1;\n  let dateArrayLength38 = dateArrayLength37 - 1;\n  let dateArrayLength39 = dateArrayLength38 - 1;\n  let dateArrayLength40 = dateArrayLength39 - 1;\n  let dateArrayLength41 = dateArrayLength40 - 1;\n  let dateArrayLength42 = dateArrayLength41 - 1;\n  let dateArrayLength43 = dateArrayLength42 - 1;\n  let dateArrayLength44 = dateArrayLength43 - 1;\n  let dateArrayLength45 = dateArrayLength44 - 1;\n  let dateArrayLength46 = dateArrayLength45 - 1;\n  let dateArrayLength47 = dateArrayLength46 - 1;\n  let dateArrayLength48 = dateArrayLength47 - 1;\n  let dateArrayLength49 = dateArrayLength48 - 1;\n  let dateArrayLength50 = dateArrayLength49 - 1;\n  let dateArrayLength51 = dateArrayLength50 - 1;\n  let dateArrayLength52 = dateArrayLength51 - 1;\n  let dateArrayLength53 = dateArrayLength52 - 1;\n  let dateArrayLength54 = dateArrayLength53 - 1;\n  let dateArrayLength55 = dateArrayLength54 - 1;\n  let dateArrayLength56 = dateArrayLength55 - 1;\n  let dateArrayLength57 = dateArrayLength56 - 1;\n  let dateArrayLength58 = dateArrayLength57 - 1;\n  let dateArrayLength59 = dateArrayLength58 - 1;\n  let dateArrayLength60 = dateArrayLength59 - 1;\n  let dateArrayLength61 = dateArrayLength60 - 1;\n  let dateArrayLength62 = dateArrayLength61 - 1;\n  let dateArrayLength63 = dateArrayLength62 - 1;\n  let dateArrayLength64 = dateArrayLength63 - 1;\n  let dateArrayLength65 = dateArrayLength64 - 1;\n  let dateArrayLength66 = dateArrayLength65 - 1;\n  let dateArrayLength67 = dateArrayLength66 - 1;\n  let dateArrayLength68 = dateArrayLength67 - 1;\n  let dateArrayLength69 = dateArrayLength68 - 1;\n  let dateArrayLength70 = dateArrayLength69 - 1;\n  let dateArrayLength71 = dateArrayLength70 - 1;\n  let dateArrayLength72 = dateArrayLength71 - 1;\n  let dateArrayLength73 = dateArrayLength72 - 1;\n  let dateArrayLength74 = dateArrayLength73 - 1;\n  let dateArrayLength75 = dateArrayLength74 - 1;\n  let dateArrayLength76 = dateArrayLength75 - 1;\n  let dateArrayLength77 = dateArrayLength76 - 1;\n  let dateArrayLength78 = dateArrayLength77 - 1;\n  let dateArrayLength79 = dateArrayLength78 - 1;\n  let dateArrayLength80 = dateArrayLength79 - 1;\n  let dateArrayLength81 = dateArrayLength80 - 1;\n  let dateArrayLength82 = dateArrayLength81 - 1;\n  let dateArrayLength83 = dateArrayLength82 - 1;\n  let dateArrayLength84 = dateArrayLength83 - 1;\n  let dateArrayLength85 = dateArrayLength84 - 1;\n  let dateArrayLength86 = dateArrayLength85 - 1;\n  let dateArrayLength87 = dateArrayLength86 - 1;\n  let dateArrayLength88 = dateArrayLength87 - 1;\n  let dateArrayLength89 = dateArrayLength88 - 1;\n  let dateArrayLength90 = dateArrayLength89 - 1;\n  let dateArrayLength91 = dateArrayLength90 - 1;\n  let dateArrayLength92 = dateArrayLength91 - 1;\n  let dateArrayLength93 = dateArrayLength92 - 1;\n  let dateArrayLength94 = dateArrayLength93 - 1;\n  let dateArrayLength95 = dateArrayLength94 - 1;\n  let dateArrayLength96 = dateArrayLength95 - 1;\n  let dateArrayLength97 = dateArrayLength96 - 1;\n  let dateArrayLength98 = dateArrayLength97 - 1;\n  let dateArrayLength99 = dateArrayLength98 - 1;\n  let dateArrayLength100 = dateArrayLength99 - 1;\n  let dateArrayLength101 = dateArrayLength100 - 1;\n  let dateArrayLength102 = dateArrayLength101 - 1;\n  let dateArrayLength10", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst capitalize = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).toLowerCase();\n  return `${firstLetter}${restLetters}`;\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased, and the remaining letters reversed\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst reverse = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).split('').reverse().join('');\n  return `${firstLetter}${restLetters}`;\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased, and the remaining letters reversed, and the remaining letters reversed\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst reverseAndCapitalize = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).split('').reverse().join('');\n  const restLettersReversed = restLetters.split('').reverse().join('');\n  return `${firstLetter}${restLettersReversed}`;\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased, and the remaining letters reversed, and the remaining letters reversed, and the remaining letters \n   reversed\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst reverseAndCapitalizeAndReverse = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).split('').reverse().join('');\n  const restLettersReversed = restLetters.split('').reverse().join('');\n  const restLettersReversedAndCapitalized = restLettersReversed.split('').reverse().join('');\n  return `${firstLetter}${restLettersReversedAndCapitalized}`;\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased, and the remaining letters reversed, and the remaining letters reversed, and the remaining letters \n   reversed, and the remaining letters reversed\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst reverseAndCapitalizeAndReverseAndReverse = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).split('').reverse().join('');\n  const restLettersReversed = restLetters.split('').reverse().join('');\n  const restLettersReversedAndCapitalized = restLettersReversed.split('').reverse().join('');\n  const restLettersReversedAndCapitalizedAndReversed = restLettersReversedAndCapitalized.split('').reverse().join('');\n  return `${firstLetter}${restLettersReversedAndCapitalizedAndReversed}`;\n};\n\n/* Given a phone number as a string, return a new string with the first letter capitalized, and the remaining letters \n   lower-cased, and the remaining letters reversed, and the remaining letters reversed, and the remaining letters \n   reversed, and the remaining letters reversed, and the remaining letters reversed\n  Examples\n  capitalize(\"012-345-6789\") ➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 \")➞ \"012-345-6789\"\n  capitalize(\"012-345-6789 abc \") ➞ \"012-345-6789 Abc\"\n  capitalize(\"012-345-6789 abc def\") ➞ \"012-345-6789 Abc Def\"\n  */\nconst reverseAndCapitalizeAndReverseAndReverseAndReverse = (txt) => {\n  const firstLetter = txt.charAt(0).toUpperCase();\n  const restLetters = txt.slice(1).split('').reverse().join('');\n  const restLettersReversed = restLetters.split('').reverse().join('');\n  const restLettersReversedAndCapitalized = restLettersReversed.split('').reverse().join('');\n  const restLettersReversedAndCapitalizedAndReversed = restLettersReversedAndCapitalized.split('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in descending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1\n  const [interval2Start, interval2End] = interval2\n  const [interval1EndMinus1, interval1EndMinus2] = [interval1End - 1, interval1End - 2]\n  const [interval2EndMinus1, interval2EndMinus2] = [interval2End - 1, interval2End - 2]\n  const [intersectionStart, intersectionEnd] = [interval1Start, interval2Start]\n  while (intersectionStart <= intersectionEnd) {\n    if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus1) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus1) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      }\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n        intersectionStart += 2\n      } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n        intersectionStart += 2\n      } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n        intersectionStart += 2\n      }\n    }\n  }\n  if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n    if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n      return \"YES\"\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      return \"YES\"\n    } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n      return \"YES\"\n    }\n  } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n    if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n      return \"YES\"\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      return \"YES\"\n    } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n      return \"YES\"\n    }\n  } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n    if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n      return \"YES\"\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      return \"YES\"\n    } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n      return \"YES\"\n    }\n  } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n    if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n      return \"YES\"\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n      return \"YES\"\n    } else if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n      return \"YES\"\n    }\n  } else if (interval1Start <= intersectionStart && intersectionStart <= interval1EndMinus2) {\n    if (interval2Start <= intersectionStart && intersectionStart <= interval2EndMinus2) {\n      return \"YES\"\n    } else if (interval1Start <= intersectionStart && intersectionStart <= interval1End) {\n      return \"YES\"\n    } else if (interval2Start <= intersectionStart && intersectionStart <= interval2End) {\n      return \"YES\"\n    }\n  } else if (interval1Start <= intersectionStart && intersectionStart <= interval", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath3 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath4 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath5 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath6 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n    getPath(i, j + 1);\n    getPath(i, j - 1);\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (i === N - 1 && j === N - 1) {\n        getPath(i, j);\n      } else {\n        getPath(i, j + 1);\n      }\n    }\n  }\n  return minPath;\n};\n\nconst minPath7 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const visited = new Array(N * N).fill(false);\n  const path = [];\n  const minPath = [];\n\n  const getPath = (i, j) => {\n    if (i === N * N - 1 && j === N * N - 1) {\n      path.push(gridCopy[i][j]);\n      minPath.push(gridCopy[i][j]);\n      return;\n    }\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    getPath(i, j + 1);\n    getPath(i, j - 1);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * nums[nums.length - 1];\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n  >>> leastCommonMultiple([10, 20, 30])\n  60\n  >>> leastCommonMultiple([10, 20, 30], 40)\n  40\n  */\nconst leastCommonMultiple = (nums, multiple) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n    return nums[0];\n  }\n  return leastCommonMultiple(nums.slice(0, nums.length - 1)) * multiple;\n};\n\n/* Return the least common multiple of two or more integers\n  >>> leastCommonMultiple([5, 10, 15, 20])\n  60\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    return arr;\n  }\n  arr.push(3);\n  arr.push(1);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n  arr.push(2);\n  arr.push(1);\n  arr.push(3);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i -= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 6\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += 1;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 6\n  */\nconst digitSumEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 2.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 9\n  */\nconst digitSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 3.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 12\n  */\nconst digitSumEvenEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 4.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 6\n  */\nconst digitSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 5.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 30\n  */\nconst digitSumEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 6.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 6\n  */\nconst digitSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 42\n  */\nconst digitSumEvenEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 7.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOddEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 56\n  */\nconst digitSumEvenEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 8.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst digitSumOddEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multipli", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 2: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 3: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 4: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 5: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 6: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 7: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n     } else if (openBracketCount > 0 && closeBracketCount > 0) {\n       if (openBracketNesting && closeBracketNesting) {\n         return true;\n       }\n     }\n   }\n   return false;\n }\n*/\n\n// SOLUTION 8: \n/*\n const isNested = (string) => {\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketNesting = false;\n   let closeBracketNesting = false;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBracketCount++;\n       openBracketNesting = openBracketNesting || closeBracketNesting;\n     } else if (string[i] === ']') {\n       closeBracketCount++;\n       closeBracketNesting = closeBracketNesting || openBracketNesting;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-z]/i) && lastChar!== \" \") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an component which \n   be not less than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest \n   to largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest \n   to largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest \n   to largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest to \n   largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest to \n   largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest to \n   largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest to \n   largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from smallest to \n   largest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if a given array is sorted from largest to \n   smallest. Otherwise, return false.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the sum of integers in a list, and 'b' is the sum of \n   integers in a list with negative integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  sumOfIntegers([2, 4, 1, 3, 5, 7]) == (7, 9)\n  sumOfIntegers([]) == (null, null)\n  sumOfIntegers([0]) == (null, null)\n  */\nconst sumOfIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the product of integers in a list, and 'b' is the product \n   of integers in a list with negative integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  productOfIntegers([2, 4, 1, 3, 5, 7]) == (24, 120)\n  productOfIntegers([]) == (null, null)\n  productOfIntegers([0]) == (null, null)\n  */\nconst productOfIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return [product, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the sum of squares of integers in a list, and 'b' is the \n   sum of squares of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  sumOfSquaresOfIntegers([2, 4, 1, 3, 5, 7]) == (25, 25)\n  sumOfSquaresOfIntegers([]) == (null, null)\n  sumOfSquaresOfIntegers([0]) == (null, null)\n  */\nconst sumOfSquaresOfIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the product of squares of integers in a list, and 'b' is the \n   product of squares of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  productOfSquaresOfIntegers([2, 4, 1, 3, 5, 7]) == (16, 64)\n  productOfSquaresOfIntegers([]) == (null, null)\n  productOfSquaresOfIntegers([0]) == (null, null)\n  */\nconst productOfSquaresOfIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return [product, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the sum of cubes of integers in a list, and 'b' is the \n   sum of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  sumOfCubesOfIntegers([2, 4, 1, 3, 5, 7]) == (25, 25)\n  sumOfCubesOfIntegers([]) == (null, null)\n  sumOfCubesOfIntegers([0]) == (null, null)\n  */\nconst sumOfCubesOfIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the product of cubes of integers in a list, and 'b' is the \n   product of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  productOfCubesOfIntegers([2, 4, 1, 3, 5, 7]) == (16, 64)\n  productOfCubesOfIntegers([]) == (null, null)\n  productOfCubesOfIntegers([0]) == (null, null)\n  */\nconst productOfCubesOfIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return [product, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the sum of cubes of integers in a list, and 'b' is the \n   sum of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  sumOfCubesOfIntegers([2, 4, 1, 3, 5, 7]) == (25, 25)\n  sumOfCubesOfIntegers([]) == (null, null)\n  sumOfCubesOfIntegers([0]) == (null, null)\n  */\nconst sumOfCubesOfIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the product of cubes of integers in a list, and 'b' is the \n   product of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  productOfCubesOfIntegers([2, 4, 1, 3, 5, 7]) == (16, 64)\n  productOfCubesOfIntegers([]) == (null, null)\n  productOfCubesOfIntegers([0]) == (null, null)\n  */\nconst productOfCubesOfIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return [product, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the sum of cubes of integers in a list, and 'b' is the \n   sum of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  sumOfCubesOfIntegers([2, 4, 1, 3, 5, 7]) == (25, 25)\n  sumOfCubesOfIntegers([]) == (null, null)\n  sumOfCubesOfIntegers([0]) == (null, null)\n  */\nconst sumOfCubesOfIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the product of cubes of integers in a list, and 'b' is the \n   product of cubes of integers in a list with negative \n   integers removed. \n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  productOfCubesOfIntegers([2, 4, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n   const aIsString = typeof a === \"string\";\n   const bIsString = typeof b === \"string\";\n   const aIsNumber = typeof a === \"number\";\n   const bIsNumber = typeof b === \"number\";\n   const aIsFloat = typeof a === \"number\" && a % 1!== 0;\n   const bIsFloat = typeof b === \"number\" && b % 1!== 0;\n   const aIsInt = typeof a === \"number\" && a % 1 === 0;\n   const bIsInt = typeof b === \"number\" && b % 1 === 0;\n   const aIsString = typeof a === \"string\";\n   const bIsString = typeof b === \"string\";\n   const aIsBoolean = typeof a === \"boolean\";\n   const bIsBoolean = typeof b === \"boolean\";\n   const aIsNull = a === null;\n   const bIsNull = b === null;\n   const aIsUndefined = typeof a === \"undefined\";\n   const bIsUndefined = typeof b === \"undefined\";\n   const aIsObject = a!== null && typeof a === \"object\";\n   const bIsObject = b!== null && typeof b === \"object\";\n   const aIsArray = a!== null && typeof a === \"object\" && Array.isArray(a);\n   const bIsArray = b!== null && typeof b === \"object\" && Array.isArray(b);\n   const aIsFunction = a!== null && typeof a === \"function\";\n   const bIsFunction = b!== null && typeof b === \"function\";\n   const aIsRegExp = a!== null && typeof a === \"object\" && a instanceof RegExp;\n   const bIsRegExp = b!== null && typeof b === \"object\" && b instanceof RegExp;\n   const aIsDate = a!== null && typeof a === \"object\" && a instanceof Date;\n   const bIsDate = b!== null && typeof b === \"object\" && b instanceof Date;\n   const aIsError = a!== null && typeof a === \"object\" && a instanceof Error;\n   const bIsError = b!== null && typeof b === \"object\" && b instanceof Error;\n   const aIsSymbol = a!== null && typeof a === \"object\" && a instanceof Symbol;\n   const bIsSymbol = b!== null && typeof b === \"object\" && b instanceof Symbol;\n   const aIsPromise = a!== null && typeof a === \"object\" && a instanceof Promise;\n   const bIsPromise = b!== null && typeof b === \"object\" && b instanceof Promise;\n   const aIsMap = aIsObject && a instanceof Map;\n   const bIsMap = bIsObject && b instanceof Map;\n   const aIsSet = aIsObject && a instanceof Set;\n   const bIsSet = bIsObject && b instanceof Set;\n   const aIsWeakMap = aIsObject && a instanceof WeakMap;\n   const bIsWeakMap = bIsObject && b instanceof WeakMap;\n   const aIsWeakSet = aIsObject && a instanceof WeakSet;\n   const bIsWeakSet = bIsObject && b instanceof WeakSet;\n   const aIsArrayBuffer = a!== null && typeof a === \"object\" && a instanceof ArrayBuffer;\n   const bIsArrayBuffer = b!== null && typeof b === \"object\" && b instanceof ArrayBuffer;\n   const aIsSharedArrayBuffer = a!== null && typeof a === \"object\" && a instanceof SharedArrayBuffer;\n   const bIsSharedArrayBuffer = b!== null && typeof b === \"object\" && b instanceof SharedArrayBuffer;\n   const aIsTypedArray = a!== null && typeof a === \"object\" && a instanceof TypedArray;\n   const bIsTypedArray = b!== null && typeof b === \"object\" && b instanceof TypedArray;\n   const aIsDataView = a!== null && typeof a === \"object\" && a instanceof DataView;\n   const bIsDataView = b!== null && typeof b === \"object\" && b instanceof DataView;\n   const aIsSharedDataView = a!== null && typeof a === \"object\" && a instanceof SharedDataView;\n   const bIsSharedDataView = b!== null && typeof b === \"object\" && b instanceof SharedDataView;\n   const aIsSharedArrayBufferView = a!== null && typeof a === \"object\" && a instanceof SharedArrayBufferView;\n   const bIsSharedArrayBufferView = b!== null && typeof b === \"object\" && b instanceof SharedArrayBufferView;\n   const aIsTypedArrayView = a!== null && typeof a === \"object\" && a instanceof TypedArrayView;\n   const bIsTypedArrayView = b!== null && typeof b === \"object\" && b instanceof TypedArrayView;\n   const aIsSharedArrayBufferView = a!== null && typeof a === \"object\" && a instanceof SharedArrayBufferView;\n   const bIsSharedArrayBufferView = b!== null && typeof b === \"object\" && b instanceof SharedArrayBufferView;\n   const aIsSharedTypedArray = a!== null && typeof a === \"object\" && a instanceof SharedTypedArray;\n   const bIsSharedTypedArray = b!== null && typeof b === \"object\" && b instanceof SharedTypedArray;\n   const aIsSharedTypedArrayView = a!== null && typeof a === \"object\" && a instanceof SharedTypedArrayView;\n   const bIsSharedTypedArrayView = b!== null && typeof b === \"object\" && b instanceof SharedTypedArrayView;\n   const aIsSharedDataView = a!== null && typeof a === \"object\" && a instanceof SharedDataView;\n   const bIsSharedDataView = b!== null && typeof b === \"object\" && b instanceof SharedDataView;\n   const aIsSharedArrayBuffer = a!== null && typeof a === \"object\" && a instanceof SharedArrayBuffer;\n   const bIsSharedArrayBuffer = b!== null && typeof b === \"object\" && b instanceof SharedArrayBuffer;\n   const aIsSharedSharedArrayBuffer = a!== null && typeof a === \"object\" && a instanceof SharedSharedArrayBuffer;\n   const bIsSharedSharedArrayBuffer = b!== null && typeof b === \"object\" && b instanceof SharedSharedArrayBuffer;\n   const aIsSharedSharedTypedArray = a!== null && typeof a === \"object\" && a instanceof SharedTypedArray;\n   const bIsSharedSharedTypedArray = b!== null && typeof b === \"object\" && b instanceof SharedTypedArray;\n   const aIsSharedSharedTypedArrayView = a!== null && typeof a === \"object\" && a instanceof SharedTypedArrayView;\n   const bIsSharedSharedTypedArrayView = b!== null && typeof b === \"object\" && b instanceof SharedTypedArrayView;\n   const aIsSharedSharedDataView = a!== null && typeof a === \"object\" && a instanceof SharedDataView;\n   const bIsSharedSharedDataView = b!== null && typeof b === \"object\" && b instanceof SharedDataView;\n   const aIsSharedSharedArrayBuffer = a!== null && typeof a === \"object\" && a instanceof SharedArrayBuffer;\n   const bIsSharedSharedArrayBuffer = b!== null && typeof b === \"object\" && b instanceof SharedArrayBuffer;\n   const aIsSharedSharedSharedArrayBuffer = a!== null && typeof a === \"object\" && a instanceof SharedSharedArrayBuffer;\n   const bIsSharedSharedSharedArrayBuffer = b!== null && typeof b === \"object\" && b instanceof SharedSharedArrayBuffer;\n   const aIsSharedSharedSharedTypedArray = a!== null && typeof a === \"object\" && a instanceof SharedTypedArray;\n   const bIsSharedSharedSharedTypedArray = b!== null && typeof b === \"object\" && b instanceof SharedTypedArray;\n   const aIs", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 4 === 0 && n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 4 === 1 && n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  if (n % 4 === 0 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd2 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd3 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd4 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd5 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd6 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd7 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd8 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd9 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd10 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd11 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd12 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd13 = (n) => {\n  if (n % 4 === 1 && n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus both even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Write a function that will receive a number as input and return the sum of the \n  factorials of the numbers from 1 to that number.\n*/\nconst sumOfFactorials = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Write a function that will receive a number as input and return the product of the \n  factorials of the numbers from 1 to that number.\n*/\nconst productOfFactorials = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10.\n*/\nconst factorialOfDividedBy10 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 10;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100.\n*/\nconst factorialOfDividedBy100 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000.\n*/\nconst factorialOfDividedBy1000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10000.\n*/\nconst factorialOfDividedBy10000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 10000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100000.\n*/\nconst factorialOfDividedBy100000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000000.\n*/\nconst factorialOfDividedBy1000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100000000.\n*/\nconst factorialOfDividedBy10000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10000000000.\n*/\nconst factorialOfDividedBy10000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000000000000.\n*/\nconst factorialOfDividedBy1000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10000000000000.\n*/\nconst factorialOfDividedBy10000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 10000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100000000000000.\n*/\nconst factorialOfDividedBy100000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000000000000000.\n*/\nconst factorialOfDividedBy1000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000000000000000000.\n*/\nconst factorialOfDividedBy1000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10000000000000000000.\n*/\nconst factorialOfDividedBy10000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 10000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100000000000000000000.\n*/\nconst factorialOfDividedBy100000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 1000000000000000000000.\n*/\nconst factorialOfDividedBy1000000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 1000000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 10000000000000000000000.\n*/\nconst factorialOfDividedBy10000000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 10000000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factorial of the \n  number divided by 100000000000000000000000.\n*/\nconst factorialOfDividedBy100000000000000000000000 = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial / 100000000000000000000000;\n};\n\n/*\n  Write a function that will receive a number as input and return the factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.substr(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.unshift(currentSuffix);\n    currentSuffix = currentSuffix.substr(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n   fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n   and if a string have more than 2 non-alphanumeric characters, \n   then substitute all consecutive non-alphanumeric characters with - \n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and retort \n  ' Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]+$/;\n  const result = regex.test(file_name);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumExponents = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumExponentsCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumExponentsCubesExponents = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumExponentsCubesExponentsCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumExponentsCubesExponentsCubesExponents = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentLength = 0;\n      }\n    } else {\n      currentWord += sentence[i];\n      currentLength++;\n    }\n  }\n  if (currentLength > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  let currentWord = '';\n  let currentLength = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      if (currentLength > 0) {\n        words.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   let numerator = x\n   let denominator = n\n   let result = false\n   let isFraction = true\n   let isNumerator = true\n   let isWhole = true\n   let isWholeNumerator = true\n   let isWholeDenominator = true\n   let isWholeNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumerator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumerator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumerator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumerator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumerator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominator = true\n   let isWholeNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndDenominatorAndNumeratorAndD", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in descend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in descend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in descend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    sum += digit;\n    masterList.push(digit);\n  }\n  masterList.sort((a, b) => b - a);\n  for (let i = 0; i < nums.length; i++) {\n    const digit = nums[i];\n    const index = masterList.indexOf(digit);\n    if (index > -1) {\n      result.push(masterList[index]);\n      masterList.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers \n   in descend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const result = [];\n  const masterList = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are greater than 10 and \n   both beginning and last digits of a numeral are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return [a[i - 1], a[j - 1], a[k - 1]];\n        }\n      }\n    }\n  }\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n        }\n    }\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n                    return [a[i - 1], a[j - 1], a[k - 1]];\n                }\n            }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const planetsNames = [planet1, planet2]\n  const planetsScopes = [planet1, planet2]\n  const planetsScopesNames = [planet1, planet2]\n  const planetsScopesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNames = [planet1, planet2]\n  const planetsScopesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesNamesName", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.length - b.length\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 === 0\n      })\n    })\n   .map((item) => {\n      return item.sort((a, b) => {\n        return a.localeCompare(b)\n      })\n    })\n   .map((item) => {\n      return item.join(\"\")\n    })\n   .map((item) => {\n      return item.split(\"\")\n    })\n   .map((item) => {\n      return item.filter((item, index) => {\n        return index % 2 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequence(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpace(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZero(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOne = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOne(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwo = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwo(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThree = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThree(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFour = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFour(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFive = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFive(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (n) => {\n  const str = n.toString();\n  return str.length? `${str} ${stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven(n - 1)}` : str;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndE", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return y;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the product of the numbers in the list that \n   be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 * 1 * 3 * 0 = 24 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 9 * 2 = 180 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let product = 1;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       product *= lst[i];\n     }\n   }\n   return product;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the product of the numbers in the list that \n   be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 * 1 * 3 * 0 = 24 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 9 * 2 = 180 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let product = 1;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       product *= lst[i];\n     }\n   }\n   return product;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the product of the numbers in the list that \n   be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 * 1 * 3 * 0 = 24 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 9 * 2 = 180 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let product = 1;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       product *= lst[i];\n     }\n   }\n   return product;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the product of the numbers in the list that \n   be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 * 1 * 3 * 0 = 24 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 9 * 2 = 180 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let product = 1;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       product *= lst[i];\n     }\n   }\n   return product;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the product of the numbers in the list that \n   be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 * 1 * 3 * 0 = 24 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 9 * 2 = 180 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let product = 1;\n   for (let i = 0; i < lst.length; i++){\n     if (lst[i] % 1!== 0){\n       product *= lst[i];\n     }\n   }\n   return product;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let elongation = -1;\n  let elongations = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let elongation = getElongation(class_name, extensions[i]);\n    if (elongation > elongation) {\n      elongation = elongation;\n    }\n    elongations.push(elongation);\n  }\n  return elongations.indexOf(Math.max(...elongations));\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let elongation = -1;\n  let elongations = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let elongation = getElongation(class_name, extensions[i]);\n    if (elongation > elongation) {\n      elongation = elongation;\n    }\n    elongations.push(elongation);\n  }\n  return elongations.indexOf(Math.max(...elongations));\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let elongation = -1;\n  let elongations = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let elongation = getElongation(class_name, extensions[i]);\n    if (elongation > elongation) {\n      elongation = elongation;\n    }\n    elongations.push(elongation);\n  }\n  return elongations.indexOf(Math.max(...elongations));\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let elongation = -1;\n  let elongations = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let elongation = getElongation(class_name, extensions[i]);\n    if (elongation > elongation) {\n      elongation = elongation;\n    }\n    elongations.push(elongation);\n  }\n  return elongations.indexOf(Math.max(...elongations));\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let elongation = -1;\n  let elongations = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let el", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split(\"\");\n   const bArr = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let found = false;\n   while (i < aArr.length && j < bArr.length) {\n     if (aArr[i] === bArr[j]) {\n       i++;\n       j++;\n       found = true;\n     } else if (aArr[i] > bArr[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return found;\n };\n\n /*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of vowels and leftover finger respectively.\n\n   Example:\n      vowelCount(\"hello\") ==> (2, 1)\n      vowelCount(\"hi\") ==> (1, 1)\n      vowelCount(\"bye\") ==> (1, 1)\n*/\nconst vowelCount = (str) => {\n  let vowelCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      vowelCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [vowelCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of consonants and leftover finger respectively.\n\n   Example:\n      consonantCount(\"hello\") ==> (2, 1)\n      consonantCount(\"hi\") ==> (1, 1)\n      consonantCount(\"bye\") ==> (1, 1)\n*/\nconst consonantCount = (str) => {\n  let consonantCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!== \"a\" && str[i]!== \"e\" && str[i]!== \"i\" && str[i]!== \"o\" && str[i]!== \"u\") {\n      consonantCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [consonantCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of letters and leftover finger respectively.\n\n   Example:\n      letterCount(\"hello\") ==> (2, 1)\n      letterCount(\"hi\") ==> (1, 1)\n      letterCount(\"bye\") ==> (1, 1)\n*/\nconst letterCount = (str) => {\n  let letterCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      letterCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [letterCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of digits and leftover finger respectively.\n\n   Example:\n      digitCount(\"hello\") ==> (2, 1)\n      digitCount(\"hi\") ==> (1, 1)\n      digitCount(\"bye\") ==> (1, 1)\n*/\nconst digitCount = (str) => {\n  let digitCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/\\d/)) {\n      digitCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [digitCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of punctuation and leftover finger respectively.\n\n   Example:\n      punctuationCount(\"hello\") ==> (2, 1)\n      punctuationCount(\"hi\") ==> (1, 1)\n      punctuationCount(\"bye\") ==> (1, 1)\n*/\nconst punctuationCount = (str) => {\n  let punctuationCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \".\" || str[i] === \"!\" || str[i] === \"?\" || str[i] === \"-\" || str[i] === \"/\" || str[i] === \"\\\\\" || str[i] === \"@\" || str[i] === \"$\" || str[i] === \"%\" || str[i] === \"^\" || str[i] === \"&\" || str[i] === \"*\" || str[i] === \"(\" || str[i] === \")\" || str[i] === \"_\" || str[i] === \"+\" || str[i] === \"=\" || str[i] === \"{\" || str[i] === \"}\") {\n      punctuationCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [punctuationCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of words and leftover finger respectively.\n\n   Example:\n      wordCount(\"hello\") ==> (2, 1)\n      wordCount(\"hi\") ==> (1, 1)\n      wordCount(\"bye\") ==> (1, 1)\n*/\nconst wordCount = (str) => {\n  let wordCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/\\w/)) {\n      wordCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [wordCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of sentences and leftover finger respectively.\n\n   Example:\n      sentenceCount(\"hello\") ==> (2, 1)\n      sentenceCount(\"hi\") ==> (1, 1)\n      sentenceCount(\"bye\") ==> (1, 1)\n*/\nconst sentenceCount = (str) => {\n  let sentenceCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[\\.\\?!\\-\\/\\(\\)\\{\\}\\_\\+\\=\\{\\}\\[\\]\\(\\)\\+\\*]/)) {\n      sentenceCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [sentenceCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of symbols and leftover finger respectively.\n\n   Example:\n      symbolCount(\"hello\") ==> (2, 1)\n      symbolCount(\"hi\") ==> (1, 1)\n      symbolCount(\"bye\") ==> (1, 1)\n*/\nconst symbolCount = (str) => {\n  let symbolCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[!\\?\\-\\/\\(\\)\\{\\}\\_\\+\\=\\{\\}\\[\\]\\(\\)\\+\\*]/)) {\n      symbolCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [symbolCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of words and leftover finger respectively.\n\n   Example:\n      wordCount(\"hello\") ==> (2, 1)\n      wordCount(\"hi\") ==> (1, 1)\n      wordCount(\"bye\") ==> (1, 1)\n*/\nconst wordCount = (str) => {\n  let wordCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/\\w/)) {\n      wordCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [wordCount, leftoverCount];\n};\n\n/*Given a string, return a tuple that has the number of sentences and leftover finger respectively.\n\n   Example:\n      sentenceCount(\"hello\") ==> (2, 1)\n      sentenceCount(\"hi\") ==> (1, 1)\n      sentenceCount(\"bye\") ==> (1, 1)\n*/\nconst sentenceCount = (str) => {\n  let sentenceCount = 0;\n  let leftoverCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[\\.\\?!\\-\\/\\(\\)\\{\\}\\_\\+\\=\\{\\}\\[\\]\\(\\)\\+\\*]/)) {\n      sentenceCount++;\n    } else {\n      leftoverCount++;\n    }\n  }\n  return [sentenceCount, leftoverCount];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numStr = number.toString();\n  let numStrLength = numStr.length;\n  let numStrArray = numStr.split('');\n  let numStrArrayLength = numStrArray.length;\n  let numStrArrayIndex = 0;\n  let numStrArrayValue = 0;\n  let numStrArrayValueLength = 0;\n  let numStrArrayValueIndex = 0;\n  let numStrArrayValueValue = 0;\n  let numStrArrayValueValueLength = 0;\n  let numStrArrayValueValueIndex = 0;\n  let numStrArrayValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArrayValueValueValueIndex = 0;\n  let numStrArrayValueValueValueValue = 0;\n  let numStrArrayValueValueValueLength = 0;\n  let numStrArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && ab <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && ab <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   360 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const uniqueChar = words.reduce((acc, word) => {\n     return acc + word.length;\n   }, 0);\n   const maxWord = words.sort((a, b) => {\n     return a.length - b.length;\n   })[0];\n   return maxWord;\n }; */\n\n const findMax = (words) => {\n   const uniqueChar = words.reduce((acc, word) => {\n     return acc + word.length;\n   }, 0);\n   const maxWord = words.sort((a, b) => {\n     return a.length - b.length;\n   })[0];\n   return maxWord;\n };\n\n console.log(findMax([\"name\", \" of \", \" string \" ]));\n console.log(findMax([\"name\", \" enam \", \" game \" ]));\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work if there are multiple words with the same number of unique characters. For example, `findMax([\"aaaaaaa\", \"bb\", \"milliliter\"])` returns `\"aaaaaaa\"` instead of `\"bb\"`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing out. I've updated my answer.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| a |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n  const uniqueChar = words.reduce((acc, word) => {\n    return acc + word.length;\n  }, 0);\n  const maxWord = words.sort((a, b) => {\n    return a.length - b.length;\n  })[0];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + 1 : acc;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    const char = cur.toLowerCase();\n    return chars.indexOf(char) === -1? acc + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra2 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra6 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra7 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra8 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra9 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num1;\n        i += 1;\n        break;\n      case '-':\n        result -= num1;\n        i += 1;\n        break;\n      case '*':\n        result *= num1;\n        i += 1;\n        break;\n      case '//':\n        result /= num1;\n        i += 1;\n        break;\n      case '**':\n        result *= num2;\n        i += 1;\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doAlgebra10 = (operator, operand) => {\n  // Your code here\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num1 = operand[i];\n    let num2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n        result += num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = s.split('').reverse().join('');\n  let drawString = '';\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] ==='') {\n      drawString += newString[i];\n    } else {\n      drawString += newString[i].toUpperCase();\n    }\n  }\n  return drawString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return '';\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == '0dfae495acdceb6f9c1d7aacfcfd3d9a8f7'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return '';\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha256('Hello world') == '7d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74fccdcf'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return '';\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha512('Hello world') == 'dfea2bc99e3ee7d60d54fba6caf8b0f99bcee3dbc39f49eca9a77d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74fccdcf'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return '';\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return '';\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == '0dfae495acdceb6f9c1d7aacfcfd3d9a8f7'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return '';\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha256('Hello world') == '7d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74fccdcf'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return '';\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha512('Hello world') == 'dfea2bc99e3ee7d60d54fba6caf8b0f99bcee3dbc39f49eca9a77d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74fccdcf'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return '';\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return '';\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == '0dfae495acdceb6f9c1d7aacfcfd3d9a8f7'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return '';\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha256('Hello world') == '7d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74fccdcf'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return '';\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha512('Hello world') == 'dfea2bc99e3ee7d60d54fba6caf8b0f99bcee3dbc39f49eca9a77d2b9a8f9d25e33d6b4ef4d5e1f7a009d70e3ce9f32bcd7a6b9f74", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const evenDigits = generateEvenDigits(a, b);\n  for (let i = 0; i < evenDigits.length; i++) {\n    result.push(evenDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateOddDigits(2, 8) => [2, 4, 6, 8]\n  generateOddDigits(8, 2) => [2, 4, 6, 8]\n  generateOddDigits(10, 14) => []\n  */\nconst generateOddDigits = (a, b) => {\n  const result = [];\n  const oddDigits = generateOddDigits(a, b);\n  for (let i = 0; i < oddDigits.length; i++) {\n    result.push(oddDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in descend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [8, 6, 4, 2]\n  generateDigits(8, 2) => [8, 6, 4, 2]\n  generateDigits(10, 14) => []\n  */\nconst generateDigitsInDescendOrder = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = digits.length - 1; i >= 0; i--) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in descend orderliness.\n\n  For example:\n  generateDigitsInDescendOrder(2, 8) => [8, 6, 4, 2]\n  generateDigitsInDescendOrder(8, 2) => [8, 6, 4, 2]\n  generateDigitsInDescendOrder(10, 14) => []\n  */\nconst generateDigitsInDescendOrder = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = digits.length - 1; i >= 0; i--) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateEvenDigits(2, 8) => [2, 4, 6, 8]\n  generateEvenDigits(8, 2) => [2, 4, 6, 8]\n  generateEvenDigits(10, 14) => []\n  */\nconst generateEvenDigits = (a, b) => {\n  const result = [];\n  const evenDigits = generateEvenDigits(a, b);\n  for (let i = 0; i < evenDigits.length; i++) {\n    result.push(evenDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateOddDigits(2, 8) => [2, 4, 6, 8]\n  generateOddDigits(8, 2) => [2, 4, 6, 8]\n  generateOddDigits(10, 14) => []\n  */\nconst generateOddDigits = (a, b) => {\n  const result = [];\n  const oddDigits = generateOddDigits(a, b);\n  for (let i = 0; i < oddDigits.length; i++) {\n    result.push(oddDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in descend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [8, 6, 4, 2]\n  generateDigits(8, 2) => [8, 6, 4, 2]\n  generateDigits(10, 14) => []\n  */\nconst generateDigitsInDescendOrder = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = digits.length - 1; i >= 0; i--) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in descend orderliness.\n\n  For example:\n  generateDigitsInDescendOrder(2, 8) => [8, 6, 4, 2]\n  generateDigitsInDescendOrder(8, 2) => [8, 6, 4, 2]\n  generateDigitsInDescendOrder(10, 14) => []\n  */\nconst generateDigitsInDescendOrder = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = digits.length - 1; i >= 0; i--) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateEvenDigits(2, 8) => [2, 4, 6, 8]\n  generateEvenDigits(8, 2) => [2, 4, 6, 8]\n  generateEvenDigits(10, 14) => []\n  */\nconst generateEvenDigits = (a, b) => {\n  const result = [];\n  const evenDigits = generateEvenDigits(a, b);\n  for (let i = 0; i < evenDigits.length; i++) {\n    result.push(evenDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateOddDigits(2, 8) => [2, 4, 6, 8]\n  generateOddDigits(8, 2) => [2, 4, 6, 8]\n  generateOddDigits(10, 14) => []\n  */\nconst generateOddDigits = (a, b) => {\n  const result = [];\n  const oddDigits = generateOddDigits(a, b);\n  for (let i = 0; i < oddDigits.length; i++) {\n    result.push(oddDigits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in ascend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i]);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the digits between a and b,\n   in descend orderliness.\n\n  For example:\n  generateDigits(2, 8) => [8, 6, 4, 2]\n  generateDigits(8, 2) => [8, 6, 4, 2]\n  generateDigits(10, 14) => []\n  */\nconst generateDigitsInDescendOrder = (a, b) => {\n  const result = [];\n  const digits = generateDigits(a, b);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - hale bill, survive four beats \n  ' o|' - half note, lasts two beat \n  ' .|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split(' ');\n  let music_list2 = [];\n  let music_list3 = [];\n  let music_list4 = [];\n  let music_list5 = [];\n  let music_list6 = [];\n  let music_list7 = [];\n  let music_list8 = [];\n  let music_list9 = [];\n  let music_list10 = [];\n  let music_list11 = [];\n  let music_list12 = [];\n  let music_list13 = [];\n  let music_list14 = [];\n  let music_list15 = [];\n  let music_list16 = [];\n  let music_list17 = [];\n  let music_list18 = [];\n  let music_list19 = [];\n  let music_list20 = [];\n  let music_list21 = [];\n  let music_list22 = [];\n  let music_list23 = [];\n  let music_list24 = [];\n  let music_list25 = [];\n  let music_list26 = [];\n  let music_list27 = [];\n  let music_list28 = [];\n  let music_list29 = [];\n  let music_list30 = [];\n  let music_list31 = [];\n  let music_list32 = [];\n  let music_list33 = [];\n  let music_list34 = [];\n  let music_list35 = [];\n  let music_list36 = [];\n  let music_list37 = [];\n  let music_list38 = [];\n  let music_list39 = [];\n  let music_list40 = [];\n  let music_list41 = [];\n  let music_list42 = [];\n  let music_list43 = [];\n  let music_list44 = [];\n  let music_list45 = [];\n  let music_list46 = [];\n  let music_list47 = [];\n  let music_list48 = [];\n  let music_list49 = [];\n  let music_list50 = [];\n  let music_list51 = [];\n  let music_list52 = [];\n  let music_list53 = [];\n  let music_list54 = [];\n  let music_list55 = [];\n  let music_list56 = [];\n  let music_list57 = [];\n  let music_list58 = [];\n  let music_list59 = [];\n  let music_list60 = [];\n  let music_list61 = [];\n  let music_list62 = [];\n  let music_list63 = [];\n  let music_list64 = [];\n  let music_list65 = [];\n  let music_list66 = [];\n  let music_list67 = [];\n  let music_list68 = [];\n  let music_list69 = [];\n  let music_list70 = [];\n  let music_list71 = [];\n  let music_list72 = [];\n  let music_list73 = [];\n  let music_list74 = [];\n  let music_list75 = [];\n  let music_list76 = [];\n  let music_list77 = [];\n  let music_list78 = [];\n  let music_list79 = [];\n  let music_list80 = [];\n  let music_list81 = [];\n  let music_list82 = [];\n  let music_list83 = [];\n  let music_list84 = [];\n  let music_list85 = [];\n  let music_list86 = [];\n  let music_list87 = [];\n  let music_list88 = [];\n  let music_list89 = [];\n  let music_list90 = [];\n  let music_list91 = [];\n  let music_list92 = [];\n  let music_list93 = [];\n  let music_list94 = [];\n  let music_list95 = [];\n  let music_list96 = [];\n  let music_list97 = [];\n  let music_list98 = [];\n  let music_list99 = [];\n  let music_list100 = [];\n  let music_list101 = [];\n  let music_list102 = [];\n  let music_list103 = [];\n  let music_list104 = [];\n  let music_list105 = [];\n  let music_list106 = [];\n  let music_list107 = [];\n  let music_list108 = [];\n  let music_list109 = [];\n  let music_list110 = [];\n  let music_list111 = [];\n  let music_list112 = [];\n  let music_list113 = [];\n  let music_list114 = [];\n  let music_list115 = [];\n  let music_list116 = [];\n  let music_list117 = [];\n  let music_list118 = [];\n  let music_list119 = [];\n  let music_list120 = [];\n  let music_list121 = [];\n  let music_list122 = [];\n  let music_list123 = [];\n  let music_list124 = [];\n  let music_list125 = [];\n  let music_list126 = [];\n  let music_list127 = [];\n  let music_list128 = [];\n  let music_list129 = [];\n  let music_list130 = [];\n  let music_list131 = [];\n  let music_list132 = [];\n  let music_list133 = [];\n  let music_list134 = [];\n  let music_list135 = [];\n  let music_list136 = [];\n  let music_list137 = [];\n  let music_list138 = [];\n  let music_list139 = [];\n  let music_list140 = [];\n  let music_list141 = [];\n  let music_list142 = [];\n  let music_list143 = [];\n  let music_list144 = [];\n  let music_list145 = [];\n  let music_list146 = [];\n  let music_list147 = [];\n  let music_list148 = [];\n  let music_list149 = [];\n  let music_list150 = [];\n  let music_list151 = [];\n  let music_list152 = [];\n  let music_list153 = [];\n  let music_list154 = [];\n  let music_list155 = [];\n  let music_list156 = [];\n  let music_list157 = [];\n  let music_list158 = [];\n  let music_list159 = [];\n  let music_list160 = [];\n  let music_list161 = [];\n  let music_list162 = [];\n  let music_list163 = [];\n  let music_list164 = [];\n  let music_list165 = [];\n  let music_list166 = [];\n  let music_list167 = [];\n  let music_list168 = [];\n  let music_list169 = [];\n  let music_list170 = [];\n  let music_list171 = [];\n  let music_list172 = [];\n  let music_list173 = [];\n  let music_list174 = [];\n  let music_list175 = [];\n  let music_list176 = [];\n  let music_list177 = [];\n  let music_list178 = [];\n  let music_list179 = [];\n  let music_list180 = [];\n  let music_list181 = [];\n  let music_list182 = [];\n  let music_list183 = [];\n  let music_list184 = [];\n  let music_list185 = [];\n  let music_list186 = [];\n  let music_list187 = [];\n  let music_list188 = [];\n  let music_list189 = [];\n  let musi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string[index] === substring[0]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[1]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[2]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[3]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[4]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[5]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[6]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[7]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[8]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[9]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[10]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[11]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[12]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[13]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[14]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[15]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[16]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[17]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[18]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[19]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[20]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[21]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[22]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[23]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[24]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[25]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[26]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[27]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[28]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[29]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[30]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[31]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[32]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[33]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[34]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[35]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[36]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[37]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[38]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[39]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[40]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[41]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[42]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[43]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[44]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[45]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[46]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[47]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[48]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[49]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[50]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[51]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[52]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[53]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[54]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[55]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[56]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[57]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[58]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[59]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[60]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[61]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[62]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[63]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[64]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[65]) {\n      count++\n      index++\n      continue\n    }\n    if (string[index] === substring[66]) {\n      count++\n      index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. \n   reelect the string with letters sorted from humble to largest\n  >>> sortLetters('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n  'Z Y X W V U T S R Q O N M L J H G F E D C B A'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a space - delimited string of letters from' A' to' Z'. \n   Valid choices are' A',' B',' C',' D',' E',' F',' G',' H',' I',' J',' K',' L',' M',' N',' O',' P',' Q',' R',' S',' T',' U',' V',' W',' X',' Y',' Z'. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n  let fractionPart;\n\n  if (number < 1) {\n    integerPart = 1;\n    decimalPart = number;\n    fractionPart = 1;\n  } else {\n    integerPart = Math.floor(number);\n    decimalPart = number - integerPart;\n    fractionPart = 1;\n  }\n\n  return { integerPart, decimalPart, fractionPart };\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart;\n  let decimalPart;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const biggest = numbers[0];\n  const smallest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > biggest) {\n      biggest = numbers[i];\n    } else if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n  }\n  return [biggest, smallest];\n};\n\n// A function that takes an array of numbers and returns the sum of the squares of the numbers in that array\nconst sumOfSquaresOfNumbers = (numbers) => {\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sumOfSquares += numbers[i] * numbers[i];\n  }\n  return sumOfSquares;\n};\n\n// A function that takes an array of numbers and returns the sum of the numbers in that array\nconst sumOfNumbers = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n// A function that takes an array of numbers and returns the average of the numbers in that array\nconst averageOfNumbers = (numbers) => {\n  const sumOfNumbers = sumOfNumbers(numbers);\n  const average = sumOfNumbers / numbers.length;\n  return average;\n};\n\n// A function that takes an array of numbers and returns the median of the numbers in that array\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = numbers.length / 2;\n  const median = sortedNumbers[middleIndex];\n  return median;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n  const modeCounts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = modeCounts[number];\n    if (count === undefined) {\n      modeCounts[number] = 1;\n      mode[number] = number;\n      maxCount = 1;\n    } else {\n      modeCounts[number] = count + 1;\n      if (count > maxCount) {\n        maxCount = count;\n        mode[number] = number;\n      }\n    }\n  }\n  return mode;\n};\n\n// A function that takes an array of numbers and returns the mode of the numbers in that array\nconst modeOfNumbers = (numbers) => {\n  const mode = {};\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = (range === 0)? 0 : (1 / range);\n  return numbers.map((n) => n * scale);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp01 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp02 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp03 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp04 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp05 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp06 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp07 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp08 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp09 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp10 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp11 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp12 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp13 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp14 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp15 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp16 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp17 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp18 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp19 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp20 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp21 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp22 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp23 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp24 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp25 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp26 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp27 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp28 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp29 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp30 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp31 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is not between 0 and 1, return 0.\n */\nconst clamp32 = (n) => {\n  return Math.max(0, Math.min(1, n));\n};\n\n/**\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    len += string.charCodeAt(i);\n  }\n  return len;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - strlen(string);\n  for (let i = 0; i < padLength; i++) {\n    string += pad;\n  }\n  return string;\n};\n\n/* Return string with given length filled with spaces\n  >>> strpad('abc', 5)\n '  abc'\n  >>> strpad('abc', 6, '.')\n  '..abc.'\n  */\nconst strpad = (string, length, pad) => {\n  const padLength = length - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that separate n evenly, modest than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize3(8)\n  [2, 2, 2]\n  >>> factorize3(25)\n  [5, 5]\n  >>> factorize3(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize4(8)\n  [2, 2, 2]\n  >>> factorize4(25)\n  [5, 5]\n  >>> factorize4(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize5(8)\n  [2, 2, 2]\n  >>> factorize5(25)\n  [5, 5]\n  >>> factorize5(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize6(8)\n  [2, 2, 2]\n  >>> factorize6(25)\n  [5, 5]\n  >>> factorize6(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize7(8)\n  [2, 2, 2]\n  >>> factorize7(25)\n  [5, 5]\n  >>> factorize7(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize8(8)\n  [2, 2, 2]\n  >>> factorize8(25)\n  [5, 5]\n  >>> factorize8(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize9(8)\n  [2, 2, 2]\n  >>> factorize9(25)\n  [5, 5]\n  >>> factorize9(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize10(8)\n  [2, 2, 2]\n  >>> factorize10(25)\n  [5, 5]\n  >>> factorize10(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize11(8)\n  [2, 2, 2]\n  >>> factorize11(25)\n  [5, 5]\n  >>> factorize11(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    } else {\n      factor *= factor\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than twice. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanTwice = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          unique.push(numbers[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to twice. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTwice = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to three times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualThreeTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to four times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualFourTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to five times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualFiveTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to six times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualSixTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to seven times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualSevenTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to eight times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualEightTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to nine times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualNineTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);\n        } else {\n          if (numbers[i] <= unique[unique.length - 1]) {\n            unique.push(numbers[i]);\n          }\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to ten times. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTenTimes = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      if (unique.length === 1) {\n        unique.push(numbers[i]);\n      } else {\n        if (numbers[i] === unique[unique.length - 1]) {\n          unique.push(numbers[i]);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each word capitalized.\n  >>> capitalize('Hello world!')\n  'Hello World!'\n  */\nconst capitalize = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes.\n  >>> dashify('Hello world!')\n  'hello-world'\n  */\nconst dashify = (string) => {\n  return string.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n};\n\n/**\n * Given a string, return a new string with each word separated by underscores.\n  >>> underify('Hello world!')\n  'hello_world'\n  */\nconst underify = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n};\n\n/**\n * Given a string, return a new string with each word separated by spaces.\n  >>> spaceify('Hello world!')\n  'hello world'\n  */\nconst spaceify = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/[-\\s]+/g,'').toLowerCase();\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes and spaces.\n  >>> dashSpaceify('Hello world!')\n  'hello-world hello'\n  */\nconst dashSpaceify = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'');\n};\n\n/**\n * Given a string, return a new string with each word separated by underscores and spaces.\n  >>> underSpaceify('Hello world!')\n  'hello_ world'\n  */\nconst underSpaceify = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase()\n   .replace(/ +/g,'');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores.\n  >>> dashUnderify('Hello world!')\n  'hello-world hello'\n  */\nconst dashUnderify = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g,'');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\s]+/g, '-').toLowerCase()\n   .replace(/_/g,'')\n   .replace(/ +/g, '_');\n};\n\n/**\n * Given a string, return a new string with each word separated by dashes, spaces, and underscores reversed.\n  >>> dashUnderifyReverse('Hello world!')\n  'world hello'\n  */\nconst dashUnderifyReverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((result, str) => {\n    return result + str;\n  }, '');\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  foo bar  ')\n  'foo bar'\n  >>> trim('  foo bar  ', 2)\n  'foo bar'\n  >>> trim('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trim = (str, len) => {\n  return str.replace(/^\\s+|\\s+$/g, len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimLeft('  foo bar  ')\n  'foo bar'\n  >>> trimLeft('  foo bar  ', 2)\n ' foo bar'\n  >>> trimLeft('  foo bar  ', 3)\n ' foo bar'\n  */\nconst trimLeft = (str, len) => {\n  return str.replace(/^\\s+/g, len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimRight('  foo bar  ')\n  'foo bar'\n  >>> trimRight('  foo bar  ', 2)\n  'foo bar  '\n  >>> trimRight('  foo bar  ', 3)\n  'foo bar  '\n  */\nconst trimRight = (str, len) => {\n  return str.replace(/\\s+$/g, len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBoth('  foo bar  ')\n  'foo bar'\n  >>> trimBoth('  foo bar  ', 2)\n  'foo bar'\n  >>> trimBoth('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimBoth = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpace('  foo bar  ')\n  'foo bar'\n  >>> trimSpace('  foo bar  ', 2)\n  'foo bar'\n  >>> trimSpace('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimSpace = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpace('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpace('  foo bar  ', 2)\n  'foo bar'\n  >>> trimBothSpace('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimBothSpace = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceLeft('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceLeft('  foo bar  ', 2)\n ' foo bar'\n  >>> trimSpaceLeft('  foo bar  ', 3)\n ' foo bar'\n  */\nconst trimSpaceLeft = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceRight('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceRight('  foo bar  ', 2)\n  'foo bar  '\n  >>> trimSpaceRight('  foo bar  ', 3)\n  'foo bar  '\n  */\nconst trimSpaceRight = (str, len) => {\n  return trimRight(trimLeft(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpaceLeft('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpaceLeft('  foo bar  ', 2)\n ' foo bar'\n  >>> trimBothSpaceLeft('  foo bar  ', 3)\n ' foo bar'\n  */\nconst trimBothSpaceLeft = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpaceRight('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpaceRight('  foo bar  ', 2)\n  'foo bar  '\n  >>> trimBothSpaceRight('  foo bar  ', 3)\n  'foo bar  '\n  */\nconst trimBothSpaceRight = (str, len) => {\n  return trimRight(trimLeft(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceBoth('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceBoth('  foo bar  ', 2)\n  'foo bar'\n  >>> trimSpaceBoth('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimSpaceBoth = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpaceBoth('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpaceBoth('  foo bar  ', 2)\n  'foo bar'\n  >>> trimBothSpaceBoth('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimBothSpaceBoth = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceBothSpace('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceBothSpace('  foo bar  ', 2)\n  'foo bar'\n  >>> trimSpaceBothSpace('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimSpaceBothSpace = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpaceBothSpace('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpaceBothSpace('  foo bar  ', 2)\n  'foo bar'\n  >>> trimBothSpaceBothSpace('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimBothSpaceBothSpace = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceBothSpaceLeft('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceBothSpaceLeft('  foo bar  ', 2)\n  'foo bar'\n  >>> trimSpaceBothSpaceLeft('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimSpaceBothSpaceLeft = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBothSpaceBothSpaceLeft('  foo bar  ')\n  'foo bar'\n  >>> trimBothSpaceBothSpaceLeft('  foo bar  ', 2)\n  'foo bar'\n  >>> trimBothSpaceBothSpaceLeft('  foo bar  ', 3)\n  'foo bar'\n  */\nconst trimBothSpaceBothSpaceLeft = (str, len) => {\n  return trimLeft(trimRight(str, len), len);\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceBothSpaceRight('  foo bar  ')\n  'foo bar'\n  >>> trimSpaceBothSpaceRight('  foo bar  ', 2)\n  'foo bar  '\n  >>> trimSpaceBothSpaceRight('  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Your task is to implement a function that will take a bank account balance and a list of \n   deposit and withdrawal operations and will return the balance after all the operations are \n   performed.\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: 3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: -3 }])\n  0\n  >>> bankAccountBalance([0, 2, -4, 5], \n   [{ operation: 1, amount: 1 }, { operation: 2, amount: 2 }, { operation: 3, amount: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEven", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return n === 2\n  if (n % 2 === 0) return false\n  if (n % 4 === 0) return n === 3\n  if (n % 6 === 0) return n === 5\n  if (n % 8 === 0) return n === 7\n  if (n % 10 === 0) return n === 9\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint;\n  let zeroCoefficient;\n  let zeroIndex;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zeroPoint = index;\n      zeroCoefficient = item;\n      zeroIndex = index;\n    }\n  });\n  if (zeroCoefficient === 0) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient < 0) {\n    zeroCoefficient = -zeroCoefficient;\n    zeroPoint = zeroPoint - 1;\n  }\n  if (zeroCoefficient > 0) {\n    zeroCoefficient = zeroCoefficient - 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 1) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -1) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 2) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -2) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 3) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -3) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 4) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -4) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 5) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -5) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 6) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -6) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 7) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -7) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 8) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -8) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 9) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -9) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 10) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -10) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 11) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -11) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 12) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -12) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 13) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -13) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 14) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -14) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 15) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -15) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 16) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -16) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 17) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -17) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 18) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -18) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 19) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -19) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 20) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -20) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 21) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -21) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 22) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -22) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 23) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -23) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 24) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -24) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 25) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -25) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 26) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -26) {\n    zeroCoefficient = zeroCoefficient + 1;\n    zeroPoint = zeroPoint + 1;\n  }\n  if (zeroCoefficient === 27) {\n    return zeroPoint;\n  }\n  if (zeroCoefficient === -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let thirdIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      thirdIndexes.push(i);\n    }\n  }\n  thirdIndexes.sort((a, b) => a - b);\n  let thirdValues = [];\n  for (let i = 0; i < thirdIndexes.length; i++) {\n    thirdValues.push(l[thirdIndexes[i]]);\n  }\n  return thirdValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its value at the indicies that be divisible by five are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let fifthIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      fifthIndexes.push(i);\n    }\n  }\n  fifthIndexes.sort((a, b) => a - b);\n  let fifthValues = [];\n  for (let i = 0; i < fifthIndexes.length; i++) {\n    fifthValues.push(l[fifthIndexes[i]]);\n  }\n  return fifthValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by seven, while its value at the indicies that be divisible by seven are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let seventhIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      seventhIndexes.push(i);\n    }\n  }\n  seventhIndexes.sort((a, b) => a - b);\n  let seventhValues = [];\n  for (let i = 0; i < seventhIndexes.length; i++) {\n    seventhValues.push(l[seventhIndexes[i]]);\n  }\n  return seventhValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by nine, while its value at the indicies that be divisible by nine are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let ninethIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      ninethIndexes.push(i);\n    }\n  }\n  ninethIndexes.sort((a, b) => a - b);\n  let ninethValues = [];\n  for (let i = 0; i < ninethIndexes.length; i++) {\n    ninethValues.push(l[ninethIndexes[i]]);\n  }\n  return ninethValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its value at the indicies that be divisible by twenty are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentythIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      twentythIndexes.push(i);\n    }\n  }\n  twentythIndexes.sort((a, b) => a - b);\n  let twentythValues = [];\n  for (let i = 0; i < twentythIndexes.length; i++) {\n    twentythValues.push(l[twentythIndexes[i]]);\n  }\n  return twentythValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its value at the indicies that be divisible by twenty are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentythIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      twentythIndexes.push(i);\n    }\n  }\n  twentythIndexes.sort((a, b) => a - b);\n  let twentythValues = [];\n  for (let i = 0; i < twentythIndexes.length; i++) {\n    twentythValues.push(l[twentythIndexes[i]]);\n  }\n  return twentythValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its value at the indicies that be divisible by twenty are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentythIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      twentythIndexes.push(i);\n    }\n  }\n  twentythIndexes.sort((a, b) => a - b);\n  let twentythValues = [];\n  for (let i = 0; i < twentythIndexes.length; i++) {\n    twentythValues.push(l[twentythIndexes[i]]);\n  }\n  return twentythValues;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its value at the indicies that be divisible by twenty are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentythIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      twentythIndexes.push(i);\n    }\n  }\n  twentythIndexes.sort((a, b) => a - b);\n  let twentythValues = [];\n  for (let i = 0; i < twentythIndexes.length; i++) {\n    twentythValues.push(l[twent", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in the list.\n  >>> medianElements([1, 2, 3])\n  2\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst medianElements = (l) => {\n  let middle = Math.floor(l.length / 2);\n  let median = l[middle];\n  for (let i = middle - 1; i >= 0; i--) {\n    if (l[i] < median) {\n      median = l[i];\n    }\n  }\n  return median;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      modes[modes.length] = maxElement;\n      maxCount++;\n    }\n    if (maxCount > 1) {\n      modes[modes.length] = maxElement;\n      maxCount--;\n    }\n    maxElement = l[i];\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortOddEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddEvenOddOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEvenOddEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOddOddOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortEvenOddEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a sum of two prime numbers.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanNumber = mean(numbers);\n  return median(numbers.map(x => Math.abs(x - meanNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedian = (numbers) => {\n  const medianNumber = median(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mode in this shell ): \n   MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviationMode = (numbers) => {\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - modeNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedianMode = (numbers) => {\n  const medianNumber = median(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationMean = (numbers) => {\n  const meanNumber = mean(numbers);\n  return median(numbers.map(x => Math.abs(x - meanNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedianMean = (numbers) => {\n  const medianNumber = median(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mode in this shell ): \n   MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviationModeMean = (numbers) => {\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - modeNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedianModeMean = (numbers) => {\n  const medianNumber = median(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationMeanMode = (numbers) => {\n  const meanNumber = mean(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - meanNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedianModeMean = (numbers) => {\n  const medianNumber = median(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mode in this shell ): \n   MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviationModeMode = (numbers) => {\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - modeNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (median in this shell ): \n   MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviationMedianModeMode = (numbers) => {\n  const medianNumber = median(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - medianNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationMeanModeMode = (numbers) => {\n  const meanNumber = mean(numbers);\n  const modeNumber = mode(numbers);\n  return median(numbers.map(x => Math.abs(x - meanNumber)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   const collisions = []\n   const carRace = n / 2\n   const carRace2 = carRace * 2\n   const carRace3 = carRace2 * 2\n   const carRace4 = carRace3 * 2\n   const carRace5 = carRace4 * 2\n   const carRace6 = carRace5 * 2\n   const carRace7 = carRace6 * 2\n   const carRace8 = carRace7 * 2\n   const carRace9 = carRace8 * 2\n   const carRace10 = carRace9 * 2\n   const carRace11 = carRace10 * 2\n   const carRace12 = carRace11 * 2\n   const carRace13 = carRace12 * 2\n   const carRace14 = carRace13 * 2\n   const carRace15 = carRace14 * 2\n   const carRace16 = carRace15 * 2\n   const carRace17 = carRace16 * 2\n   const carRace18 = carRace17 * 2\n   const carRace19 = carRace18 * 2\n   const carRace20 = carRace19 * 2\n   const carRace21 = carRace20 * 2\n   const carRace22 = carRace21 * 2\n   const carRace23 = carRace22 * 2\n   const carRace24 = carRace23 * 2\n   const carRace25 = carRace24 * 2\n   const carRace26 = carRace25 * 2\n   const carRace27 = carRace26 * 2\n   const carRace28 = carRace27 * 2\n   const carRace29 = carRace28 * 2\n   const carRace30 = carRace29 * 2\n   const carRace31 = carRace30 * 2\n   const carRace32 = carRace31 * 2\n   const carRace33 = carRace32 * 2\n   const carRace34 = carRace33 * 2\n   const carRace35 = carRace34 * 2\n   const carRace36 = carRace35 * 2\n   const carRace37 = carRace36 * 2\n   const carRace38 = carRace37 * 2\n   const carRace39 = carRace38 * 2\n   const carRace40 = carRace39 * 2\n   const carRace41 = carRace40 * 2\n   const carRace42 = carRace41 * 2\n   const carRace43 = carRace42 * 2\n   const carRace44 = carRace43 * 2\n   const carRace45 = carRace44 * 2\n   const carRace46 = carRace45 * 2\n   const carRace47 = carRace46 * 2\n   const carRace48 = carRace47 * 2\n   const carRace49 = carRace48 * 2\n   const carRace50 = carRace49 * 2\n   const carRace51 = carRace50 * 2\n   const carRace52 = carRace51 * 2\n   const carRace53 = carRace52 * 2\n   const carRace54 = carRace53 * 2\n   const carRace55 = carRace54 * 2\n   const carRace56 = carRace55 * 2\n   const carRace57 = carRace56 * 2\n   const carRace58 = carRace57 * 2\n   const carRace59 = carRace58 * 2\n   const carRace60 = carRace59 * 2\n   const carRace61 = carRace60 * 2\n   const carRace62 = carRace61 * 2\n   const carRace63 = carRace62 * 2\n   const carRace64 = carRace63 * 2\n   const carRace65 = carRace64 * 2\n   const carRace66 = carRace65 * 2\n   const carRace67 = carRace66 * 2\n   const carRace68 = carRace67 * 2\n   const carRace69 = carRace68 * 2\n   const carRace70 = carRace69 * 2\n   const carRace71 = carRace70 * 2\n   const carRace72 = carRace71 * 2\n   const carRace73 = carRace72 * 2\n   const carRace74 = carRace73 * 2\n   const carRace75 = carRace74 * 2\n   const carRace76 = carRace75 * 2\n   const carRace77 = carRace76 * 2\n   const carRace78 = carRace77 * 2\n   const carRace79 = carRace78 * 2\n   const carRace80 = carRace79 * 2\n   const carRace81 = carRace80 * 2\n   const carRace82 = carRace81 * 2\n   const carRace83 = carRace82 * 2\n   const carRace84 = carRace83 * 2\n   const carRace85 = carRace84 * 2\n   const carRace86 = carRace85 * 2\n   const carRace87 = carRace86 * 2\n   const carRace88 = carRace87 * 2\n   const carRace89 = carRace88 * 2\n   const carRace90 = carRace89 * 2\n   const carRace91 = carRace90 * 2\n   const carRace92 = carRace91 * 2\n   const carRace93 = carRace92 * 2\n   const carRace94 = carRace93 * 2\n   const carRace95 = carRace94 * 2\n   const carRace96 = carRace95 * 2\n   const carRace97 = carRace96 * 2\n   const carRace98 = carRace97 * 2\n   const carRace99 = carRace98 * 2\n   const carRace100 = carRace99 * 2\n   const carRace101 = carRace100 * 2\n   const carRace102 = carRace101 * 2\n   const carRace103 = carRace102 * 2\n   const carRace104 = carRace103 * 2\n   const carRace105 = carRace104 * 2\n   const carRace106 = carRace105 * 2\n   const carRace107 = carRace106 * 2\n   const carRace108 = carRace107 * 2\n   const carRace109 = carRace108 * 2\n   const carRace110 = carRace109 * 2\n   const carRace111 = carRace110 * 2\n   const carRace112 = carRace111 * 2\n   const carRace113 = carRace112 * 2\n   const carRace114 = carRace113 * 2\n   const carRace115 = carRace114 * 2\n   const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2.5, 2.25, 2.125, 2.0833333333333334, 2.066666666666667, 2.0533333333333334, 2.0333333333333333, 2.020000000000002, 2.010000000000001]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase17 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase18 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase19 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase20 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase21 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;\n  }\n  return y;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase22 = (x, base) => {\n  let y = x;\n  while (y >= base) {\n    y /= base;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const s = 0.5 * (a + h);\n  return Math.sqrt(s * (s - a) * (s - h) * (s - a + h));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea2 = (p, a, b) => {\n  const s = 0.5 * (a + b);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - a + b));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea3 = (p, a, b, c) => {\n  const s = 0.5 * (a + b + c);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - a + b + c));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea4 = (p, a, b, c, d) => {\n  const s = 0.5 * (a + b + c + d);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - a + b + c + d));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea5 = (p, a, b, c, d, e) => {\n  const s = 0.5 * (a + b + c + d + e);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - a + b + c + d + e));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea6 = (p, a, b, c, d, e, f) => {\n  const s = 0.5 * (a + b + c + d + e + f);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - a + b + c + d + e + f));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea7 = (p, a, b, c, d, e, f, g) => {\n  const s = 0.5 * (a + b + c + d + e + f + g);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - a + b + c + d + e + f + g));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea8 = (p, a, b, c, d, e, f, g, h) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - a + b + c + d + e + f + g + h));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea9 = (p, a, b, c, d, e, f, g, h, i) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - i) * (s - a + b + c + d + e + f + g + h + i));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea10 = (p, a, b, c, d, e, f, g, h, i, j) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i + j);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - i) * (s - j) * (s - a + b + c + d + e + f + g + h + i + j));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea11 = (p, a, b, c, d, e, f, g, h, i, j, k) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i + j + k);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - i) * (s - j) * (s - k) * (s - a + b + c + d + e + f + g + h + i + j + k));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea12 = (p, a, b, c, d, e, f, g, h, i, j, k, l) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i + j + k + l);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - i) * (s - j) * (s - k) * (s - l) * (s - a + b + c + d + e + f + g + h + i + j + k + l));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea13 = (p, a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i + j + k + l + m);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (s - i) * (s - j) * (s - k) * (s - l) * (s - m) * (s - a + b + c + d + e + f + g + h + i + j + k + l + m));\n};\n\n/*Given a point and two sides of a triangulum, return area of triangulum.\n  >>> triangleArea(Point(0, 0), Point(1, 0), Point(0, 1))\n  0.5\n  */\nconst triangleArea14 = (p, a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n  const s = 0.5 * (a + b + c + d + e + f + g + h + i + j + k + l + m + n);\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g) * (s - h) * (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// TESTS\n\n// Test the fib4 function\nconst testFib4 = () => {\n  expect(fib4(0)).toBe(0);\n  expect(fib4(1)).toBe(0);\n  expect(fib4(2)).toBe(2);\n  expect(fib4(3)).toBe(0);\n  expect(fib4(4)).toBe(4);\n  expect(fib4(5)).toBe(4);\n  expect(fib4(6)).toBe(8);\n  expect(fib4(7)).toBe(14);\n  expect(fib4(8)).toBe(8);\n  expect(fib4(9)).toBe(14);\n  expect(fib4(10)).toBe(32);\n  expect(fib4(11)).toBe(32);\n  expect(fib4(12)).toBe(64);\n  expect(fib4(13)).toBe(64);\n  expect(fib4(14)).toBe(126);\n  expect(fib4(15)).toBe(126);\n  expect(fib4(16)).toBe(258);\n  expect(fib4(17)).toBe(258);\n  expect(fib4(18)).toBe(342);\n  expect(fib4(19)).toBe(342);\n  expect(fib4(20)).toBe(512);\n  expect(fib4(21)).toBe(512);\n  expect(fib4(22)).toBe(768);\n  expect(fib4(23)).toBe(768);\n  expect(fib4(24)).toBe(1024);\n  expect(fib4(25)).toBe(1024);\n  expect(fib4(26)).toBe(1280);\n  expect(fib4(27)).toBe(1280);\n  expect(fib4(28)).toBe(1536);\n  expect(fib4(29)).toBe(1536);\n  expect(fib4(30)).toBe(1792);\n  expect(fib4(31)).toBe(1792);\n  expect(fib4(32)).toBe(2048);\n  expect(fib4(33)).toBe(2048);\n  expect(fib4(34)).toBe(2304);\n  expect(fib4(35)).toBe(2304);\n  expect(fib4(36)).toBe(2560);\n  expect(fib4(37)).toBe(2560);\n  expect(fib4(38)).toBe(2816);\n  expect(fib4(39)).toBe(2816);\n  expect(fib4(40)).toBe(3072);\n  expect(fib4(41)).toBe(3072);\n  expect(fib4(42)).toBe(3248);\n  expect(fib4(43)).toBe(3248);\n  expect(fib4(44)).toBe(3424);\n  expect(fib4(45)).toBe(3424);\n  expect(fib4(46)).toBe(3632);\n  expect(fib4(47)).toBe(3632);\n  expect(fib4(48)).toBe(3904);\n  expect(fib4(49)).toBe(3904);\n  expect(fib4(50)).toBe(4168);\n  expect(fib4(51)).toBe(4168);\n  expect(fib4(52)).toBe(4432);\n  expect(fib4(53)).toBe(4432);\n  expect(fib4(54)).toBe(4688);\n  expect(fib4(55)).toBe(4688);\n  expect(fib4(56)).toBe(4960);\n  expect(fib4(57)).toBe(4960);\n  expect(fib4(58)).toBe(5120);\n  expect(fib4(59)).toBe(5120);\n  expect(fib4(60)).toBe(5376);\n  expect(fib4(61)).toBe(5376);\n  expect(fib4(62)).toBe(5632);\n  expect(fib4(63)).toBe(5632);\n  expect(fib4(64)).toBe(5904);\n  expect(fib4(65)).toBe(5904);\n  expect(fib4(66)).toBe(6176);\n  expect(fib4(67)).toBe(6176);\n  expect(fib4(68)).toBe(6432);\n  expect(fib4(69)).toBe(6432);\n  expect(fib4(70)).toBe(6688);\n  expect(fib4(71)).toBe(6688);\n  expect(fib4(72)).toBe(6960);\n  expect(fib4(73)).toBe(6960);\n  expect(fib4(74)).toBe(7248);\n  expect(fib4(75)).toBe(7248);\n  expect(fib4(76)).toBe(7512);\n  expect(fib4(77)).toBe(7512);\n  expect(fib4(78)).toBe(7840);\n  expect(fib4(79)).toBe(7840);\n  expect(fib4(80)).toBe(8128);\n  expect(fib4(81)).toBe(8128);\n  expect(fib4(82)).toBe(8416);\n  expect(fib4(83)).toBe(8416);\n  expect(fib4(84)).toBe(8640);\n  expect(fib4(85)).toBe(8640);\n  expect(fib4(86)).toBe(8912);\n  expect(fib4(87)).toBe(8912);\n  expect(fib4(88)).toBe(9200);\n  expect(fib4(89)).toBe(9200);\n  expect(fib4(90)).toBe(9472);\n  expect(fib4(91)).toBe(9472);\n  expect(fib4(92)).toBe(9632);\n  expect(fib4(93)).toBe(9632);\n  expect(fib4(94)).toBe(9904);\n  expect(fib4(95)).toBe(9904);\n  expect(fib4(96)).toBe(10240);\n  expect(fib4(97)).toBe(10240);\n  expect(fib4(98)).toBe(10496);\n  expect(fib4(99)).toBe(10496);\n  expect(fib4(100)).toBe(10960);\n  expect(fib4(101)).toBe(10960);\n  expect(fib4(102)).toBe(11136);\n  expect(fib4(103)).toBe(11136);\n  expect(fib4(104)).toBe(11408);\n  expect(fib4(105)).toBe(11408);\n  expect(fib4(106)).toBe(11680);\n  expect(fib4(107)).toBe(11680);\n  expect(fib4(108)).toBe(11968);\n  expect(fib4(109)).toBe(11968);\n  expect(fib4(110)).toBe(12256);\n  expect(fib4(111)).toBe(12256);\n  expect(fib4(112)).toBe(12528);\n  expect(fib4(113)).toBe(12528);\n  expect(fib4(114)).toBe(12896);\n  expect(fib4(115)).toBe(12896);\n  expect(fib4(116)).toBe(13208);\n  expect(fib4(117)).toBe(13208);\n  expect(fib4(118)).toBe(13440);\n  expect(fib4(119", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const mid = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + sorted[mid + 1];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        return maxItem;\n      }\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n\n  const firstChar = text[0];\n  const lastChar = text[text.length - 1];\n\n  if (firstChar === lastChar) {\n    return isPalindromeRecursive(text.substring(1, text.length - 1));\n  }\n\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_2('')\n  true\n  >>> isPalindromeIteration_2('aba')\n  true\n  >>> isPalindromeIteration_2('aaaaa')\n  true\n  >>> isPalindromeIteration_2('zbcd')\n  false\n  */\nconst isPalindromeIteration_2 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_3('')\n  true\n  >>> isPalindromeIteration_3('aba')\n  true\n  >>> isPalindromeIteration_3('aaaaa')\n  true\n  >>> isPalindromeIteration_3('zbcd')\n  false\n  */\nconst isPalindromeIteration_3 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_4('')\n  true\n  >>> isPalindromeIteration_4('aba')\n  true\n  >>> isPalindromeIteration_4('aaaaa')\n  true\n  >>> isPalindromeIteration_4('zbcd')\n  false\n  */\nconst isPalindromeIteration_4 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_5('')\n  true\n  >>> isPalindromeIteration_5('aba')\n  true\n  >>> isPalindromeIteration_5('aaaaa')\n  true\n  >>> isPalindromeIteration_5('zbcd')\n  false\n  */\nconst isPalindromeIteration_5 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_6('')\n  true\n  >>> isPalindromeIteration_6('aba')\n  true\n  >>> isPalindromeIteration_6('aaaaa')\n  true\n  >>> isPalindromeIteration_6('zbcd')\n  false\n  */\nconst isPalindromeIteration_6 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_7('')\n  true\n  >>> isPalindromeIteration_7('aba')\n  true\n  >>> isPalindromeIteration_7('aaaaa')\n  true\n  >>> isPalindromeIteration_7('zbcd')\n  false\n  */\nconst isPalindromeIteration_7 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_8('')\n  true\n  >>> isPalindromeIteration_8('aba')\n  true\n  >>> isPalindromeIteration_8('aaaaa')\n  true\n  >>> isPalindromeIteration_8('zbcd')\n  false\n  */\nconst isPalindromeIteration_8 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_9('')\n  true\n  >>> isPalindromeIteration_9('aba')\n  true\n  >>> isPalindromeIteration_9('aaaaa')\n  true\n  >>> isPalindromeIteration_9('zbcd')\n  false\n  */\nconst isPalindromeIteration_9 = (text) => {\n  const length = text.length;\n  let index = 0;\n\n  while (index < length - 1) {\n    if (text[index]!== text[index + 1]) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration_10('')\n  true\n  >>> isPalindromeIteration_10('aba')\n  true\n  >>> isPalindromeIteration_10('aaaaa')\n  true\n  >>> isPalindromeIteration_10('zbcd')\n  false\n  */\nconst isPalindromeIter", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p;\n  return m === 0? 0 : m > 0? p - m : m;\n};\n\n/*\n  >>> modpow(2, 5, 3)\n  8\n  >>> modpow(2, 5, 7)\n  2\n  >>> modpow(2, 5, 8)\n  1\n  >>> modpow(2, 5, 9)\n  0\n  >>> modpow(2, 6, 3)\n  1\n  >>> modpow(2, 6, 7)\n  1\n  >>> modpow(2, 6, 8)\n  0\n  >>> modpow(2, 6, 9)\n  1\n  >>> modpow(2, 7, 3)\n  2\n  >>> modpow(2, 7, 7)\n  1\n  >>> modpow(2, 7, 8)\n  0\n  >>> modpow(2, 7, 9)\n  1\n  >>> modpow(2, 8, 3)\n  2\n  >>> modpow(2, 8, 7)\n  1\n  >>> modpow(2, 8, 8)\n  1\n  >>> modpow(2, 8, 9)\n  0\n  >>> modpow(2, 9, 3)\n  2\n  >>> modpow(2, 9, 7)\n  1\n  >>> modpow(2, 9, 8)\n  1\n  >>> modpow(2, 9, 9)\n  1\n  */\nconst modpow = (n, p, m) => {\n  const r = 1;\n  for (let i = 0; i < p; i++) {\n    r *= n;\n  }\n  for (let i = 0; i < p; i++) {\n    r = (r * n) % m;\n  }\n  return r;\n};\n\n/*\n  >>> modinv(7, 5)\n  2\n  >>> modinv(7, 8)\n  1\n  >>> modinv(7, 9)\n  0\n  >>> modinv(8, 5)\n  1\n  >>> modinv(8, 8)\n  1\n  >>> modinv(8, 9)\n  0\n  >>> modinv(9, 5)\n  1\n  >>> modinv(9, 8)\n  1\n  >>> modinv(9, 9)\n  1\n  */\nconst modinv = (n, m) => {\n  const r = 1;\n  for (let i = 0; i < m; i++) {\n    r = (n % m) * r + m;\n    n /= m;\n  }\n  return r;\n};\n\n/*\n  >>> modular_multiplicative_inverse(7, 5)\n  2\n  >>> modular_multiplicative_inverse(7, 8)\n  1\n  >>> modular_multiplicative_inverse(7, 9)\n  0\n  >>> modular_multiplicative_inverse(8, 5)\n  1\n  >>> modular_multiplicative_inverse(8, 8)\n  1\n  >>> modular_multiplicative_inverse(8, 9)\n  0\n  >>> modular_multiplicative_inverse(9, 5)\n  1\n  >>> modular_multiplicative_inverse(9, 8)\n  1\n  >>> modular_multiplicative_inverse(9, 9)\n  1\n  */\nconst modular_multiplicative_inverse = (n, m) => {\n  const r = 1;\n  for (let i = 0; i < m; i++) {\n    r = (n % m) * r + m;\n    n /= m;\n  }\n  return r;\n};\n\n/*\n  >>> modular_inverse(7, 5)\n  2\n  >>> modular_inverse(7, 8)\n  1\n  >>> modular_inverse(7, 9)\n  0\n  >>> modular_inverse(8, 5)\n  1\n  >>> modular_inverse(8, 8)\n  1\n  >>> modular_inverse(8, 9)\n  0\n  >>> modular_inverse(9, 5)\n  1\n  >>> modular_inverse(9, 8)\n  1\n  >>> modular_inverse(9, 9)\n  1\n  */\nconst modular_inverse = (n, m) => {\n  const r = 1;\n  for (let i = 0; i < m; i++) {\n    r = (n % m) * r + m;\n    n /= m;\n  }\n  return r;\n};\n\n/*\n  >>> modular_multiplicative_generator(2, 5)\n  2\n  >>> modular_multiplicative_generator(2, 8)\n  1\n  >>> modular_multiplicative_generator(2, 9)\n  0\n  >>> modular_multiplicative_generator(3, 5)\n  1\n  >>> modular_multiplicative_generator(3, 8)\n  1\n  >>> modular_multiplicative_generator(3, 9)\n  0\n  >>> modular_multiplicative_generator(4, 5)\n  1\n  >>> modular_multiplicative_generator(4, 8)\n  1\n  >>> modular_multiplicative_generator(4, 9)\n  0\n  >>> modular_multiplicative_generator(5, 5)\n  1\n  >>> modular_multiplicative_generator(5, 8)\n  1\n  >>> modular_multiplicative_generator(5, 9)\n  0\n  >>> modular_multiplicative_generator(6, 5)\n  1\n  >>> modular_multiplicative_generator(6, 8)\n  1\n  >>> modular_multiplicative_generator(6, 9)\n  0\n  >>> modular_multiplicative_generator(7, 5)\n  1\n  >>> modular_multiplicative_generator(7, 8)\n  1\n  >>> modular_multiplicative_generator(7, 9)\n  0\n  >>> modular_multiplicative_generator(8, 5)\n  1\n  >>> modular_multiplicative_generator(8, 8)\n  1\n  >>> modular_multiplicative_generator(8, 9)\n  0\n  >>> modular_multiplicative_generator(9, 5)\n  1\n  >>> modular_multiplicative_generator(9, 8)\n  1\n  >>> modular_multiplicative_generator(9, 9)\n  1\n  */\nconst modular_multiplicative_generator = (n, m) => {\n  const r = 1;\n  for (let i = 0; i < m; i++) {\n    r = (n % m) * r + m;\n    n /= m;\n  }\n  return r;\n};\n\n/*\n  >>> modular_exponentiation(7, 5, 3)\n  8\n  >>> modular_exponentiation(7, 5, 7)\n  2\n  >>> modular_exponentiation(7, 5, 8)\n  1\n  >>> modular_exponentiation(7, 5, 9)\n  0\n  >>> modular_exponentiation(7, 6, 3)\n  1\n  >>> modular_exponentiation(7, 6, 7)\n  1\n  >>> modular_exponentiation(7, 6, 8)\n  0\n  >>> modular_exponentiation(7, 6, 9)\n  1\n  >>> modular_exponentiation(7, 7, 3)\n  2\n  >>> modular_exponentiation(7, 7, 7)\n  1\n  >>> modular_exponentiation(7, 7, 8)\n  0\n  >>> modular_exponentiation(7, 7, 9)\n  1\n  >>> modular_exponentiation(7, 8, 3)\n  2\n  >>> modular_exponentiation(7, 8, 7)\n  1\n  >>> modular_exponentiation(7, 8, 8)\n  1\n  >>> modular_exponentiation(7, 8, 9)\n  0\n  >>> modular_exponentiation(7, 9, 3)\n  2\n  >>> modular_exponentiation(7, 9, 7)\n  1\n  >>> modular_exponentiation(7, 9, 8)\n  1\n  >>> modular_exponentiation(7, 9, 9)\n  1\n  >>> modular_exponentiation(8, 5, 3)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Return the first element of an array `array'\n  >>> first([1,2,3])\n  1\n  >>> first([1,2,3], 1)\n  1\n  >>> first([1,2,3], 2)\n  2\n  >>> first([1,2,3], 3)\n  3\n  */\nconst first = (array, defaultValue) => {\n  return array.length > 0? array[0] : defaultValue;\n};\n\n/* Return the last element of an array `array'\n  >>> last([1,2,3])\n  3\n  >>> last([1,2,3], 1)\n  3\n  >>> last([1,2,3], 2)\n  2\n  >>> last([1,2,3], 3)\n  3\n  */\nconst last = (array, defaultValue) => {\n  return array.length > 0? array[array.length - 1] : defaultValue;\n};\n\n/* Return the sum of the elements of an array `array'\n  >>> sum([1,2,3])\n  6\n  >>> sum([1,2,3], 1)\n  6\n  >>> sum([1,2,3], 2)\n  6\n  >>> sum([1,2,3], 3)\n  6\n  */\nconst sum = (array, defaultValue) => {\n  return array.reduce((acc, val) => acc + val, defaultValue);\n};\n\n/* Return the product of the elements of an array `array'\n  >>> product([1,2,3])\n  6\n  >>> product([1,2,3], 1)\n  6\n  >>> product([1,2,3], 2)\n  6\n  >>> product([1,2,3], 3)\n  6\n  */\nconst product = (array, defaultValue) => {\n  return array.reduce((acc, val) => acc * val, defaultValue);\n};\n\n/* Return the mean of the elements of an array `array'\n  >>> mean([1,2,3])\n  2\n  >>> mean([1,2,3], 1)\n  2\n  >>> mean([1,2,3], 2)\n  2\n  >>> mean([1,2,3], 3)\n  2\n  */\nconst mean = (array, defaultValue) => {\n  return sum(array) / array.length;\n};\n\n/* Return the median of the elements of an array `array'\n  >>> median([1,2,3])\n  2\n  >>> median([1,2,3], 1)\n  2\n  >>> median([1,2,3], 2)\n  2\n  >>> median([1,2,3], 3)\n  2\n  */\nconst median = (array, defaultValue) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n  return sortedArray[middleIndex];\n};\n\n/* Return the mode of the elements of an array `array'\n  >>> mode([1,2,3])\n  1\n  >>> mode([1,2,3], 1)\n  1\n  >>> mode([1,2,3], 2)\n  2\n  >>> mode([1,2,3], 3)\n  3\n  */\nconst mode = (array, defaultValue) => {\n  const counts = {};\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  const modes = [];\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const count = counts[value];\n    if (count > 1) {\n      modes.push([value, count]);\n    }\n  }\n  return modes.reduce((acc, val) => {\n    return val[1] > acc[1]? val : acc;\n  }, modes[0]);\n};\n\n/* Return the standard deviation of the elements of an array `array'\n  >>> std([1,2,3])\n  1\n  >>> std([1,2,3], 1)\n  1\n  >>> std([1,2,3], 2)\n  1\n  >>> std([1,2,3], 3)\n  1\n  */\nconst std = (array, defaultValue) => {\n  const mean = mean(array);\n  const variance = array.map(val => (val - mean) ** 2).reduce((acc, val) => acc + val, 0);\n  return Math.sqrt(variance);\n};\n\n/* Return the minimum of the elements of an array `array'\n  >>> min([1,2,3])\n  1\n  >>> min([1,2,3], 1)\n  1\n  >>> min([1,2,3], 2)\n  1\n  >>> min([1,2,3], 3)\n  1\n  */\nconst min = (array, defaultValue) => {\n  return array.reduce((acc, val) => val < acc? val : acc, defaultValue);\n};\n\n/* Return the maximum of the elements of an array `array'\n  >>> max([1,2,3])\n  3\n  >>> max([1,2,3], 1)\n  3\n  >>> max([1,2,3], 2)\n  3\n  >>> max([1,2,3], 3)\n  3\n  */\nconst max = (array, defaultValue) => {\n  return array.reduce((acc, val) => val > acc? val : acc, defaultValue);\n};\n\n/* Return the product of the elements of an array `array'\n  >>> product([1,2,3])\n  6\n  >>> product([1,2,3], 1)\n  6\n  >>> product([1,2,3], 2)\n  6\n  >>> product([1,2,3], 3)\n  6\n  */\nconst product = (array, defaultValue) => {\n  return array.reduce((acc, val) => acc * val, defaultValue);\n};\n\n/* Return the sum of the elements of an array `array'\n  >>> sum([1,2,3])\n  6\n  >>> sum([1,2,3], 1)\n  6\n  >>> sum([1,2,3], 2)\n  6\n  >>> sum([1,2,3], 3)\n  6\n  */\nconst sum = (array, defaultValue) => {\n  return array.reduce((acc, val) => acc + val, defaultValue);\n};\n\n/* Return the mean of the elements of an array `array'\n  >>> mean([1,2,3])\n  2\n  >>> mean([1,2,3], 1)\n  2\n  >>> mean([1,2,3], 2)\n  2\n  >>> mean([1,2,3], 3)\n  2\n  */\nconst mean = (array, defaultValue) => {\n  return sum(array) / array.length;\n};\n\n/* Return the median of the elements of an array `array'\n  >>> median([1,2,3])\n  2\n  >>> median([1,2,3], 1)\n  2\n  >>> median([1,2,3], 2)\n  2\n  >>> median([1,2,3], 3)\n  2\n  */\nconst median = (array, defaultValue) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n  return sortedArray[middleIndex];\n};\n\n/* Return the mode of the elements of an array `array'\n  >>> mode([1,2,3])\n  1\n  >>> mode([1,2,3], 1)\n  1\n  >>> mode([1,2,3], 2)\n  2\n  >>> mode([1,2,3], 3)\n  3\n  */\nconst mode = (array, defaultValue) => {\n  const counts = {};\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  const modes = [];\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const count = counts[value];\n    if (count > 1) {\n      modes.push([value, count]);\n    }\n  }\n  return modes.reduce((acc, val) => {\n    return val[1] > acc[1]? val : acc;\n  }, modes[0]);\n};\n\n/* Return the standard deviation of the elements of an array `array'\n  >>> std([1,2,3])\n  1\n  >>> std([1,2,3], 1)\n  1\n  >>> std([1,2,3], 2)\n  1\n  >>> std([1,2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonant.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abgjlm'\n  >>> removeConsonants('abcdef')\n  'abgj'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbcd'\n  */\nconst removeConsonants = (text) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (consonants.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a function that takes string and returns string without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'BAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = ['.', ',', '!', '?'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (punctuations.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greaterThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> lessThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 10, 30)\n  false\n  >>> inRange([10, 20, 30, 40, 50], 10, 40)\n  false\n  >>> inRange([10, 20, 30, 40, 50], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 30)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 40)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRangeWithExclusion = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b || l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 30)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 40)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRangeWithExclusion = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b || l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 30)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 40)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRangeWithExclusion = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b || l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 30)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 40)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRangeWithExclusion = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b || l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 30)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 40)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRangeWithExclusion([10, 20, 30, 40, 50], 10, 25)\n  false\n  */\nconst inRangeWithExclusion = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b || l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of dividing x by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of a number\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (number) => {\n  return Math.abs(number);\n};\n\n/*Get the modulus of dividing x by y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the floor of a number\n  >>> floor(3.2)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(3.2)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (number) => {\n  return Math.ceil(number);\n};\n\n/*Get the round of a number\n  >>> round(3.2)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the square root of a number\n  >>> sqrt(9)\n  3\n  >>> sqrt(25)\n  5\n  */\nconst sqrt = (number) => {\n  return Math.sqrt(number);\n};\n\n/*Get the factorial of a number\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  */\nconst factorial = (number) => {\n  return factorials[number];\n};\n\n/*Get the logarithm of a number\n  >>> log(10)\n  0\n  >>> log(2)\n  1\n  */\nconst log = (number) => {\n  return Math.log(number);\n};\n\n/*Get the exponential of a number\n  >>> exp(10)\n  100\n  >>> exp(2)\n  2\n  */\nconst exp = (number) => {\n  return Math.exp(number);\n};\n\n/*Get the natural logarithm of a number\n  >>> ln(10)\n  2\n  >>> ln(2)\n  2\n  */\nconst ln = (number) => {\n  return Math.log(number);\n};\n\n/*Get the base 2 logarithm of a number\n  >>> log2(10)\n  0\n  >>> log2(2)\n  1\n  */\nconst log2 = (number) => {\n  return Math.log(number) / Math.log(2);\n};\n\n/*Get the base 10 logarithm of a number\n  >>> log10(10)\n  0\n  >>> log10(2)\n  1\n  */\nconst log10 = (number) => {\n  return Math.log(number) / Math.log(10);\n};\n\n/*Get the base 16 logarithm of a number\n  >>> log16(10)\n  0\n  >>> log16(2)\n  1\n  */\nconst log16 = (number) => {\n  return Math.log(number) / Math.log(16);\n};\n\n/*Get the base 2 exponential of a number\n  >>> exp2(10)\n  100\n  >>> exp2(2)\n  2\n  */\nconst exp2 = (number) => {\n  return Math.pow(Math.E, number);\n};\n\n/*Get the base 10 exponential of a number\n  >>> exp10(10)\n  100\n  >>> exp10(2)\n  2\n  */\nconst exp10 = (number) => {\n  return Math.pow(Math.E, number) / Math.pow(10, number);\n};\n\n/*Get the base 16 exponential of a number\n  >>> exp16(10)\n  100\n  >>> exp16(2)\n  2\n  */\nconst exp16 = (number) => {\n  return Math.pow(Math.E, number) / Math.pow(16, number);\n};\n\n/*Get the base 2 logarithm of a number\n  >>> log2(10)\n  0\n  >>> log2(2)\n  1\n  */\nconst log2 = (number) => {\n  return Math.log(number) / Math.log(2);\n};\n\n/*Get the base 10 logarithm of a number\n  >>> log10(10)\n  0\n  >>> log10(2)\n  1\n  */\nconst log10 = (number) => {\n  return Math.log(number) / Math.log(10);\n};\n\n/*Get the base 16 logarithm of a number\n  >>> log16(10)\n  0\n  >>> log16(2)\n  1\n  */\nconst log16 = (number) => {\n  return Math.log(number) / Math.log(16);\n};\n\n/*Get the base 2 exponential of a number\n  >>> exp2(10)\n  100\n  >>> exp2(2)\n  2\n  */\nconst exp2 = (number) => {\n  return Math.pow(Math.E, number);\n};\n\n/*Get the base 10 exponential of a number\n  >>> exp10(10)\n  100\n  >>> exp10(2)\n  2\n  */\nconst exp10 = (number) => {\n  return Math.pow(Math.E, number) / Math.pow(10, number);\n};\n\n/*Get the base 16 exponential of a number\n  >>> exp16(10)\n  100\n  >>> exp16(2)\n  2\n  */\nconst exp16 = (number) => {\n  return Math.pow(Math.E, number) / Math.pow(16, number);\n};\n\n/*Get the square root of a number\n  >>> sqrt(9)\n  3\n  >>> sqrt(25)\n  5\n  */\nconst sqrt = (number) => {\n  return Math.sqrt(number);\n};\n\n/*Get the factorial of a number\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  */\nconst factorial = (number) => {\n  return factorials[number];\n};\n\n/*Get the logarithm of a number\n  >>> log(10)\n  0\n  >>> log(2)\n  1\n  */\nconst log = (number) => {\n  return Math.log(number);\n};\n\n/*Get the exponential of a number\n  >>> exp(10)\n  100\n  >>> exp(2)\n  2\n  */\nconst exp = (number) => {\n  return Math.exp(number);\n};\n\n/*Get the natural logarithm of a number\n  >>> ln(10)\n  2\n  >>> ln(2)\n  2\n  */\nconst ln = (number) => {\n  return Math.log(number);\n};\n\n/*Get the base 2 logarithm of a number\n  >>> log2(10)\n  0\n  >>> log2(2)\n  1\n  */\nconst log2 = (number) => {\n  return Math.log(number) / Math.log(2);\n};\n\n/*Get the base 10 logarithm of a number\n  >>> log10(10)\n  0\n  >>> log10(2)\n  1\n  */\nconst log10 = (number) => {\n  return Math.log(number) / Math.log(10);\n};\n\n/*Get the base 16 logarithm of a number\n  >>> log16(10)\n  0\n  >>> log16(2)\n  1\n  */\nconst log16 = (number) => {\n  return Math.log(number) / Math.log(16);\n};\n\n/*Get the base 2 exponential of a number\n  >>> exp2(10)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 1;\n  let fibs = [];\n  for (let i = 0; i < n; i++) {\n    fibs.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBrackets = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpace = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBrackets = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpace = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBrackets = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpace = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBrackets = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpace = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBrackets = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// returns true if brackets is a string of \" < \" and \" > \". \n// returns false if every opening bracket has a comparable closing bracket.\nconst correctBracketingWithBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpaceNoBracketsNoSpace = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monot", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x));\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of factors of n in ascending order.\n  >>> factors(25)\n  [2, 2, 5, 5]\n  >>> factors(125)\n  [2, 2, 2, 2, 5]\n  >>> factors(1000)\n  [2, 2, 2, 2, 2, 2]\n  >>> factors(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factors = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order.\n  >>> factors(25)\n  [5, 5, 5, 5, 5]\n  >>> factors(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factors(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factors(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order and factors of n not in ascending order.\n  >>> factorsDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order and factors of n not in descending order.\n  >>> factorsDescendingAndNotAscending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescendingAndNotAscending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescendingAndNotAscending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscendingDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order and factors of n not in descending order.\n  >>> factorsDescendingAndNotAscendingDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscendingDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescendingAndNotAscendingDescending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescendingAndNotAscendingDescending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscendingDescendingDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order and factors of n not in ascending order.\n  >>> factorsDescendingAndNotAscendingDescendingDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscendingDescendingDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order and factors of n not in descending order.\n  >>> factorsDescendingAndNotAscendingDescendingDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescendingAndNotAscendingDescendingDescending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscendingDescendingDescendingDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order and factors of n not in ascending order.\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst factorsDescendingAndNotAscendingDescendingDescendingDescending = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order and factors of n not in descending order.\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(25)\n  [5, 5, 5, 5, 5]\n  >>> factorsDescendingAndNotAscendingDescendingDescendingDescending(125)\n  [2, 2, 2, 2, 2, 2, 5]\n  >>> factors", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const nested_parens = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        nested_parens.push(paren_level);\n      }\n    }\n    paren_level++;\n  }\n  return nested_parens;\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParens('(()()) ((())) () ((())()())')\n  [[2, 3], [2, 3], [2, 3], [2, 3]]\n  */\nconst getAllNestedParens = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens;\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParens('(()()) ((())) () ((())()())')\n  [[2, 3], [2, 3], [2, 3], [2, 3]]\n  */\nconst getAllNestedParensString = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString2 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString2('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString3 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString3('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString4 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString4('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString5 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString5('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString6 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has two nested parenthesis while (( ()) ) \n   has three.\n\n  >>> getAllNestedParensString6('(()()) ((())) () ((())()())')\n  (( ()) ) (( ()) ) ()\n  */\nconst getAllNestedParensString7 = (nested_paren_string) => {\n  const nested_parens = parseNestedParens(nested_paren_string);\n  const all_nested_parens = [];\n  for (let i = 0; i < nested_parens.length; i++) {\n    for (let j = 0; j < nested_parens.length; j++) {\n      if (i!== j) {\n        all_nested_parens.push(nested_parens[i]);\n      }\n    }\n  }\n  return all_nested_parens.join(' ');\n};\n\n/* Given a string representing a nested parenthesis, return a list of all possible nested parenthesis \n   that could have existed in the input string. E.g. (() ()) has ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  const allOpeningBracketsAreClosed = openingBrackets.every(\n    (bracket) => closingBrackets.indexOf(bracket) === -1\n  );\n  return allOpeningBracketsAreClosed;\n};\n\n/* \n  Given a string, return a new string with all the characters in \n  the string replaced with asterisks.\n\n  >>> replaceWithAsterisks(\"hello\")\n  \"*****\"\n  >>> replaceWithAsterisks(\"hello world\")\n  \"**** world\"\n  >>> replaceWithAsterisks(\"hello world\", 2)\n  \"hello world\"\n  >>> replaceWithAsterisks(\"hello world\", 3)\n  \"hello ***\"\n  >>> replaceWithAsterisks(\"hello world\", 4)\n  \"hello ****\"\n  >>> replaceWithAsterisks(\"hello world\", 5)\n  \"hello *****\"\n  >>> replaceWithAsterisks(\"hello world\", 6)\n  \"hello ******\"\n  >>> replaceWithAsterisks(\"hello world\", 7)\n  \"hello *******\"\n  >>> replaceWithAsterisks(\"hello world\", 8)\n  \"hello ********\"\n  >>> replaceWithAsterisks(\"hello world\", 9)\n  \"hello *********\"\n  >>> replaceWithAsterisks(\"hello world\", 10)\n  \"hello **********\"\n  >>> replaceWithAsterisks(\"hello world\", 11)\n  \"hello ***********\"\n  >>> replaceWithAsterisks(\"hello world\", 12)\n  \"hello ************\"\n  >>> replaceWithAsterisks(\"hello world\", 13)\n  \"hello ************\"\n  >>> replaceWithAsterisks(\"hello world\", 14)\n  \"hello *************\"\n  >>> replaceWithAsterisks(\"hello world\", 15)\n  \"hello ***************\"\n  >>> replaceWithAsterisks(\"hello world\", 16)\n  \"hello ****************\"\n  >>> replaceWithAsterisks(\"hello world\", 17)\n  \"hello *****************\"\n  >>> replaceWithAsterisks(\"hello world\", 18)\n  \"hello ******************\"\n  >>> replaceWithAsterisks(\"hello world\", 19)\n  \"hello *******************\"\n  >>> replaceWithAsterisks(\"hello world\", 20)\n  \"hello ********************\"\n  >>> replaceWithAsterisks(\"hello world\", 21)\n  \"hello *********************\"\n  >>> replaceWithAsterisks(\"hello world\", 22)\n  \"hello **********************\"\n  >>> replaceWithAsterisks(\"hello world\", 23)\n  \"hello ***********************\"\n  >>> replaceWithAsterisks(\"hello world\", 24)\n  \"hello ************************\"\n  >>> replaceWithAsterisks(\"hello world\", 25)\n  \"hello *************************\"\n  >>> replaceWithAsterisks(\"hello world\", 26)\n  \"hello **************************\"\n  >>> replaceWithAsterisks(\"hello world\", 27)\n  \"hello ***************************\"\n  >>> replaceWithAsterisks(\"hello world\", 28)\n  \"hello ****************************\"\n  >>> replaceWithAsterisks(\"hello world\", 29)\n  \"hello ****************************\"\n  >>> replaceWithAsterisks(\"hello world\", 30)\n  \"hello ****************************\"\n  >>> replaceWithAsterisks(\"hello world\", 31)\n  \"hello *****************************\"\n  >>> replaceWithAsterisks(\"hello world\", 32)\n  \"hello *******************************\"\n  >>> replaceWithAsterisks(\"hello world\", 33)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 34)\n  \"hello *****************************\"\n  >>> replaceWithAsterisks(\"hello world\", 35)\n  \"hello ******************************\"\n  >>> replaceWithAsterisks(\"hello world\", 36)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 37)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 38)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 39)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 40)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 41)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 42)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 43)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 44)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 45)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 46)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 47)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 48)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 49)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 50)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 51)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 52)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 53)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 54)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 55)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 56)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 57)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 58)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 59)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 60)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 61)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 62)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 63)\n  \"hello ********************************\"\n  >>> replaceWithAsterisks(\"hello world\", 64)\n  \"hello *", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n};\n\n/* \n  Return sum of all elements in array\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* \n  Return product of all elements in array\n  >>> product([1, 2, 3])\n  6\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* \n  Return mean of all elements in array\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* \n  Return median of all elements in array\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  let mid = Math.floor(xs.length / 2);\n  if (xs.length % 2) {\n    return xs[mid];\n  } else {\n    return (xs[mid - 1] + xs[mid]) / 2;\n  }\n};\n\n/* \n  Return mode of all elements in array\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return xs[maxCountIndex];\n};\n\n/* \n  Return standard deviation of all elements in array\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* \n  Return variance of all elements in array\n  >>> variance([1, 2, 3])\n  6\n  */\nconst variance = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return variance;\n};\n\n/* \n  Return sum of squares of all elements in array\n  >>> sumOfSquares([1, 2, 3])\n  18\n  */\nconst sumOfSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum;\n};\n\n/* \n  Return mean of all elements in array\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* \n  Return median of all elements in array\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  let mid = Math.floor(xs.length / 2);\n  if (xs.length % 2) {\n    return xs[mid];\n  } else {\n    return (xs[mid - 1] + xs[mid]) / 2;\n  }\n};\n\n/* \n  Return mode of all elements in array\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return xs[maxCountIndex];\n};\n\n/* \n  Return standard deviation of all elements in array\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* \n  Return variance of all elements in array\n  >>> variance([1, 2, 3])\n  6\n  */\nconst variance = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return variance;\n};\n\n/* \n  Return sum of squares of all elements in array\n  >>> sumOfSquares([1, 2, 3])\n  18\n  */\nconst sumOfSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum;\n};\n\n/* \n  Return mean of all elements in array\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* \n  Return median of all elements in array\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  let mid = Math.floor(xs.length / 2);\n  if (xs.length % 2) {\n    return xs[mid];\n  } else {\n    return (xs[mid - 1] + xs[mid]) / 2;\n  }\n};\n\n/* \n  Return mode of all elements in array\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return xs[maxCountIndex];\n};\n\n/* \n  Return standard deviation of all elements in array\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* \n  Return variance of all elements in array\n  >>> variance([1, 2, 3])\n  6\n  */\nconst variance = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return variance;\n};\n\n/* \n  Return sum of squares of all elements in array\n  >>> sumOfSquares([1, 2, 3])\n  18\n  */\nconst sumOfSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum;\n};\n\n/* \n  Return mean of all elements in array\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'uracil'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  Given a number x and an integer n, return the sum of all integers up to and including x\n  that have n digits.\n  >>> sumOfNDigits(1234, 2)\n  12\n  >>> sumOfNDigits(1234, 3)\n  123\n  >>> sumOfNDigits(1234, 4)\n  1234\n  >>> sumOfNDigits(1234, 5)\n  1234\n  >>> sumOfNDigits(1234, 6)\n  1234\n  >>> sumOfNDigits(1234, 7)\n  1234\n  >>> sumOfNDigits(1234, 8)\n  1234\n  >>> sumOfNDigits(1234, 9)\n  1234\n  >>> sumOfNDigits(1234, 10)\n  1234\n  >>> sumOfNDigits(1234, 11)\n  1234\n  >>> sumOfNDigits(1234, 12)\n  1234\n  >>> sumOfNDigits(1234, 13)\n  1234\n  >>> sumOfNDigits(1234, 14)\n  1234\n  >>> sumOfNDigits(1234, 15)\n  1234\n  >>> sumOfNDigits(1234, 16)\n  1234\n  >>> sumOfNDigits(1234, 17)\n  1234\n  >>> sumOfNDigits(1234, 18)\n  1234\n  >>> sumOfNDigits(1234, 19)\n  1234\n  >>> sumOfNDigits(1234, 20)\n  1234\n  >>> sumOfNDigits(1234, 21)\n  1234\n  >>> sumOfNDigits(1234, 22)\n  1234\n  >>> sumOfNDigits(1234, 23)\n  1234\n  >>> sumOfNDigits(1234, 24)\n  1234\n  >>> sumOfNDigits(1234, 25)\n  1234\n  >>> sumOfNDigits(1234, 26)\n  1234\n  >>> sumOfNDigits(1234, 27)\n  1234\n  >>> sumOfNDigits(1234, 28)\n  1234\n  >>> sumOfNDigits(1234, 29)\n  1234\n  >>> sumOfNDigits(1234, 30)\n  1234\n  >>> sumOfNDigits(1234, 31)\n  1234\n  >>> sumOfNDigits(1234, 32)\n  1234\n  >>> sumOfNDigits(1234, 33)\n  1234\n  >>> sumOfNDigits(1234, 34)\n  1234\n  >>> sumOfNDigits(1234, 35)\n  1234\n  >>> sumOfNDigits(1234, 36)\n  1234\n  >>> sumOfNDigits(1234, 37)\n  1234\n  >>> sumOfNDigits(1234, 38)\n  1234\n  >>> sumOfNDigits(1234, 39)\n  1234\n  >>> sumOfNDigits(1234, 40)\n  1234\n  >>> sumOfNDigits(1234, 41)\n  1234\n  >>> sumOfNDigits(1234, 42)\n  1234\n  >>> sumOfNDigits(1234, 43)\n  1234\n  >>> sumOfNDigits(1234, 44)\n  1234\n  >>> sumOfNDigits(1234, 45)\n  1234\n  >>> sumOfNDigits(1234, 46)\n  1234\n  >>> sumOfNDigits(1234, 47)\n  1234\n  >>> sumOfNDigits(1234, 48)\n  1234\n  >>> sumOfNDigits(1234, 49)\n  1234\n  >>> sumOfNDigits(1234, 50)\n  1234\n  >>> sumOfNDigits(1234, 51)\n  1234\n  >>> sumOfNDigits(1234, 52)\n  1234\n  >>> sumOfNDigits(1234, 53)\n  1234\n  >>> sumOfNDigits(1234, 54)\n  1234\n  >>> sumOfNDigits(1234, 55)\n  1234\n  >>> sumOfNDigits(1234, 56)\n  1234\n  >>> sumOfNDigits(1234, 57)\n  1234\n  >>> sumOfNDigits(1234, 58)\n  1234\n  >>> sumOfNDigits(1234, 59)\n  1234\n  >>> sumOfNDigits(1234, 60)\n  1234\n  >>> sumOfNDigits(1234, 61)\n  1234\n  >>> sumOfNDigits(1234, 62)\n  1234\n  >>> sumOfNDigits(1234, 63)\n  1234\n  >>> sumOfNDigits(1234, 64)\n  1234\n  >>> sumOfNDigits(1234, 65)\n  1234\n  >>> sumOfNDigits(1234, 66)\n  1234\n  >>> sumOfNDigits(1234, 67)\n  1234\n  >>> sumOfNDigits(1234, 68)\n  1234\n  >>> sumOfNDigits(1234, 69)\n  1234\n  >>> sumOfNDigits(1234, 70)\n  1234\n  >>> sumOfNDigits(1234, 71)\n  1234\n  >>> sumOfNDigits(1234, 72)\n  1234\n  >>> sumOfNDigits(1234, 73)\n  1234\n  >>> sumOfNDigits(1234, 74)\n  1234\n  >>> sumOfNDigits(1234, 75)\n  1234\n  >>> sumOfNDigits(1234, 76)\n  1234\n  >>> sumOfNDigits(1234, 77)\n  1234\n  >>> sumOfNDigits(1234, 78)\n  1234\n  >>> sumOfNDigits(1234, 79)\n  1234\n  >>> sumOfNDigits(1234, 80)\n  1234\n  >>> sumOfNDigits(1234, 81)\n  1234\n  >>> sumOfNDigits(1234, 82)\n  1234\n  >>> sumOfNDigits(1234, 83)\n  1234\n  >>> sumOfNDigits(1234, 84)\n  1234\n  >>> sumOfNDigits(1234, 85)\n  1234\n  >>> sumOfNDigits(1234, 86)\n  1234\n  >>> sumOfNDigits(1234, 87)\n  1234\n  >>> sumOfNDigits(1234, 88)\n  1234\n  >>> sumOfNDigits(1234, 89)\n  1234\n  >>> sumOfNDigits(1234, 90)\n  1234\n  >>> sumOfNDigits(1234, 91)\n  1234\n  >>> sumOfNDigits(1234, 92)\n  1234\n  >>> sumOfNDigits(1234, 93)\n  1234\n  >>> sumOfNDigits(1234, 94)\n  1234\n  >>> sumOfNDigits(1234, 95)\n  1234\n  >>> sumOfNDigits(1234, 96)\n  1234\n  >>> sumOfNDigits(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum += char.charCodeAt(0) - 64;\n    } else {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the lower character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      sum += char.charCodeAt(0) - 97;\n    } else {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the character only' ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n*/\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + oranges + mangos;\n   const appleInBasket = apples - mangos;\n   const orangeInBasket = oranges - mangos;\n   const mangoInBasket = apples - oranges;\n   return total - appleInBasket - orangeInBasket - mangoInBasket;\n }\n\n// 👽 Refactoring - Solution \n\nconst fruitDistribution = (s, n) = > {\n   const apple = s.split(\" \")[0];\n   const orange = s.split(\" \")[1];\n   const mango = s.split(\" \")[2];\n   const apples = parseInt(apple);\n   const oranges = parseInt(orange);\n   const mangos = parseInt(mango);\n   const total = apples + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck2 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck3 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck4 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck5 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the node", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let maxFreq = 0;\n  let maxVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxFreq = freq;\n      maxVal = lst[i];\n    }\n    if (lst[i] == maxVal) {\n      freq++;\n    }\n  }\n  return maxFreq > maxVal? maxVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is less than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let minFreq = 0;\n  let minVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minFreq = freq;\n      minVal = lst[i];\n    }\n    if (lst[i] == minVal) {\n      freq++;\n    }\n  }\n  return minFreq < minVal? minVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let maxFreq = 0;\n  let maxVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxFreq = freq;\n      maxVal = lst[i];\n    }\n    if (lst[i] == maxVal) {\n      freq++;\n    }\n  }\n  return maxFreq < maxVal? maxVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let minFreq = 0;\n  let minVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > minVal) {\n      minFreq = freq;\n      minVal = lst[i];\n    }\n    if (lst[i] == minVal) {\n      freq++;\n    }\n  }\n  return minFreq < minVal? minVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let maxFreq = 0;\n  let maxVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxFreq = freq;\n      maxVal = lst[i];\n    }\n    if (lst[i] == maxVal) {\n      freq++;\n    }\n  }\n  return maxFreq > maxVal? maxVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let minFreq = 0;\n  let minVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minFreq = freq;\n      minVal = lst[i];\n    }\n    if (lst[i] == minVal) {\n      freq++;\n    }\n  }\n  return minFreq < minVal? minVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 1\n      search([5, 5, 4, 4, 4])) == 1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let maxFreq = 0;\n  let maxVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxFreq = freq;\n      maxVal = lst[i];\n    }\n    if (lst[i] == maxVal) {\n      freq++;\n    }\n  }\n  return maxFreq > maxVal? maxVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 1\n      search([5, 5, 4, 4, 4])) == 1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let minFreq = 0;\n  let minVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minFreq = freq;\n      minVal = lst[i];\n    }\n    if (lst[i] == minVal) {\n      freq++;\n    }\n  }\n  return minFreq < minVal? minVal : -1;\n};\n\n/*\n  You are given a non - empty list of positive integer. Return the least integer that is greater than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 1\n      search([5, 5, 4, 4, 4])) == 1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let maxFreq = 0;\n  let maxVal = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxFreq = freq;\n      maxVal = lst[i];\n    }\n    if (lst[i] == maxVal) {\n      freq++;\n    }\n  }\n  return maxFreq > max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(i => i < lst[0]);\n  let maxIndex = lst.findIndex(i => i > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    temp.push(lst[i]);\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    lst[i] = temp[i - minIndex];\n  }\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  if (side1 === side2 && side1 === side3) {\n    return side1;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d);\n  const side3 = Math.abs(a) + Math.abs(b) - Math.abs(c) - Math.abs(d);\n  const side4 = Math.abs(a) + Math.abs(b) - Math.abs(c) + Math.abs(d);\n  const side5 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  const side6 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d);\n  const side7 = Math.abs(a) + Math.abs(b) - Math.abs(c) - Math.abs(d);\n  const side8 = Math.abs(a) + Math.abs(b) - Math.abs(c) + Math.abs(d);\n  const side9 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  if (side1 === side2 && side1 === side3 && side1 === side4 && side1 === side5 && side1 === side6 && side1 === side7 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const maxSumPalindromic = maxSum / 2;\n  const maxSumPalindromicPlus = maxSumPalindromic + 1;\n  const maxSumPalindromicMinus = maxSumPalindromic - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSumPalindromicMinus = maxSumPalindromicMinus - 1;\n  const maxSumPalindromicPlus = maxSumPalindromicPlus + 1;\n  const maxSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let currentChange = arr[i] - arr[arr.length - i - 1];\n    if (currentChange < minChange) {\n      minChange = currentChange;\n      minChangeIndex = i;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smalle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  lst1.forEach((item1) => {\n    lst2.forEach((item2) => {\n      if (item1 === item2) {\n        result.push(item1);\n      }\n    });\n  });\n  return result;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimal = num;\n  let primes = [];\n  let prime = 0;\n  let primeCount = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;\n  let primeCountY = 0;\n  let primeCountZ = 0;\n  let primeCount0 = 0;\n  let primeCount1 = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;\n  let primeCountY = 0;\n  let primeCountZ = 0;\n  let primeCount0 = 0;\n  let primeCount1 = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;\n  let primeCountY = 0;\n  let primeCountZ = 0;\n  let primeCount0 = 0;\n  let primeCount1 = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;\n  let primeCountY = 0;\n  let primeCountZ = 0;\n  let primeCount0 = 0;\n  let primeCount1 = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;\n  let primeCountY = 0;\n  let primeCountZ = 0;\n  let primeCount0 = 0;\n  let primeCount1 = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCountA = 0;\n  let primeCountB = 0;\n  let primeCountC = 0;\n  let primeCountD = 0;\n  let primeCountE = 0;\n  let primeCountF = 0;\n  let primeCountG = 0;\n  let primeCountH = 0;\n  let primeCountI = 0;\n  let primeCountJ = 0;\n  let primeCountK = 0;\n  let primeCountL = 0;\n  let primeCountM = 0;\n  let primeCountN = 0;\n  let primeCountO = 0;\n  let primeCountP = 0;\n  let primeCountQ = 0;\n  let primeCountR = 0;\n  let primeCountS = 0;\n  let primeCountT = 0;\n  let primeCountU = 0;\n  let primeCountV = 0;\n  let primeCountW = 0;\n  let primeCountX = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  decimalToBinary = parseInt(decimal).toString(2);\n  decimalToBinary = decimalToBinary.split('');\n  decimalToBinary.forEach((decimalToBinary) => {\n    if (decimalToBinary === '0') {\n      binary += '0';\n    } else if (decimalToBinary === '1') {\n      binary += '1';\n    }\n  });\n  return binary;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"\n  binaryToDecimal(\"db100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryToDecimal = '';\n  binaryToDecimal = binary.split('');\n  binaryToDecimal.forEach((binaryToDecimal) => {\n    if (binaryToDecimal === '0') {\n      decimal += '0';\n    } else if (binaryToDecimal === '1') {\n      decimal += '1';\n    }\n  });\n  return decimal;\n};\n\n/*You will be given a number in binary form and your task is to convert it to decimal form. The \n   function should return a string, with each fictional character representing a decimal phone number. \n   Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns \"15\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello world')\n  'Hello World'\n  */\nconst capitalizeAllLetters = (str) => {\n  return str.replace(/[a-z]/g, char => char.toUpperCase());\n};\n\n/* Given a string, return a new string with the first letter capitalized and all others lowercased.\n  >>> capitalizeAllLetters('hello')\n  'Hello'\n  >>> capitalizeAllLetters('hello ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      if (s[i + 1] === 'a') {\n        if (s[i + 2] === 'a') {\n          if (s[i + 3] === 'a') {\n            isHappy = true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n   Your task is to check if it contains only letters a-z.\n   A letter is defined as a character with ASCII code between 97 and 122.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(aa) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(abca) => true\n  isOnlyLetters(abcaa) => false\n  isOnlyLetters(abcaaa) => false\n  isOnlyLetters(abcaaaaa) => true\n  isOnlyLetters(abcaaaaaa) => false\n  isOnlyLetters(abcaaaaaaa) => true\n  isOnlyLetters(abcaaaaaaaa) => false\n  isOnlyLetters(abcaaaaaaaab) => true\n  isOnlyLetters(abcaaaaaaaabb) => false\n  isOnlyLetters(abcaaaaaaaabbb) => false\n  isOnlyLetters(abcaaaaaaaabbbc) => false\n  isOnlyLetters(abcaaaaaaaabbbcc) => false\n  isOnlyLetters(abcaaaaaaaabbbccc) => false\n  isOnlyLetters(abcaaaaaaaabbbcccc) => false\n  isOnlyLetters(abcaaaaaaaabbbccccc) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccc) => false\n  isOnlyLetters(abcaaaaaaaabbbccccccc) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccd) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccde) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdef) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefg) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefgh) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghi) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghij) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijk) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijkl) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklm) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmn) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmno) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnop) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopq) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqr) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrs) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsj) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjk) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjkl) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmn) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmno) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnop) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopq) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqr) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrst) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstu) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuv) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvw) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwx) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxy) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyz) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyza) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzab) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabc) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabcd) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabcde) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabcdef) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabcdef) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefghijklmnopqrsjklmnopqrstuvwxyzabcdefg) => false\n  isOnlyLetters(abcaaaaaaaabbbcccccccdefgh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  let gradesAvg = grades.reduce((acc, cur) => acc + cur) / grades.length;\n  let gradesSumOfSquare = grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquare = grades.reduce((acc, cur) => acc + cur * cur) / grades.length;\n  let gradesSumOfSquareOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.length;\n  let gradesAvgOfSquareOfGrades = grades.reduce((acc, cur) => acc + cur * cur) / grades.length;\n  let gradesSumOfSquareOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesSumOfSquareOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesSumOfSquareOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesSumOfSquareOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesSumOfSquareOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesSumOfSquareOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0);\n  let gradesAvgOfSquareOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur, 0) / grades.reduce((acc, cur) => acc + cur * cur", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};\n\n/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      primeLength++;\n    } else {\n      break;\n    }\n  }\n  return primeLength;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0\n   let start = 1\n   let end = n\n   while (start <= end) {\n     if (start % 10 === 1) {\n       count += 1\n     }\n     start += 1\n     if (end % 10 === 1) {\n       count += 1\n     }\n     end -= 1\n   }\n   return count\n }\n */\n const startsOneEnds = (n) => {\n   let count = 0\n   let start = 1\n   let end = n\n   while (start <= end) {\n     if (start % 10 === 1) {\n       count += 1\n     }\n     start += 1\n     if (end % 10 === 1) {\n       count += 1\n     }\n     end -= 1\n   }\n   return count\n }\n\n console.log(startsOneEnds(10)) // 3\n console.log(startsOneEnds(100)) // 2\n console.log(startsOneEnds(1000)) // 1\n console.log(startsOneEnds(10000)) // 0\n console.log(startsOneEnds(100000)) // 1\n console.log(startsOneEnds(1000000)) // 2\n console.log(startsOneEnds(10000000)) // 3\n console.log(startsOneEnds(100000000)) // 4\n console.log(startsOneEnds(1000000000))\n console.log(startsOneEnds(10000000000))\n console.log(startsOneEnds(100000000000))\n console.log(startsOneEnds(1000000000000))\n console.log(startsOneEnds(10000000000000))\n console.log(startsOneEnds(100000000000000))\n console.log(startsOneEnds(1000000000000000))\n console.log(startsOneEnds(10000000000000000))\n console.log(startsOneEnds(100000000000000000)) // 4\n console.log(startsOneEnds(1000000000000000000))\n console.log(startsOneEnds(10000000000000000000)) // 5\n console.log(startsOneEnds(100000000000000000000))\n console.log(startsOneEnds(1000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000)) // 6\n console.log(startsOneEnds(1000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000)) // 7\n console.log(startsOneEnds(10000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000)) // 8\n console.log(startsOneEnds(100000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000)) // 9\n console.log(startsOneEnds(1000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000)) // 10\n console.log(startsOneEnds(10000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000)) // 11\n console.log(startsOneEnds(100000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000)) // 12\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 13\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000)) // 14\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 15\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000)) // 16\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 17\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000)) // 18\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 19\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000)) // 20\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 21\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000000)) // 22\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(1000000000000000000000000000000000000000000000000000)) // 23\n console.log(startsOneEnds(10000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100000000000000000000000000000000000000000000000000000))\n console.log(startsOneEnds(100", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst addEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 12\n  */\nconst addOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14\n  */\nconst addOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 16\n  */\nconst addOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 18\n  */\nconst addEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 20\n  */\nconst addOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 22\n  */\nconst addEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 24\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 26\n  */\nconst addEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 28\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 30\n  */\nconst addEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 32\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 34\n  */\nconst addEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 36\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 38\n  */\nconst addEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 40\n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 42\n  */\nconst addEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let news = ''\n  let word = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = s.length\n  \n  while (i < l) {\n    word = s.charAt(i)\n    if (word ==='') {\n      news +=''\n      i++\n      continue\n    }\n    if (word === '!') {\n      news += '!'\n      i++\n      continue\n    }\n    if (word === '?') {\n      news += '?'\n      i++\n      continue\n    }\n    if (word === '-') {\n      news += '-'\n      i++\n      continue\n    }\n    if (word === '+') {\n      news += '+'\n      i++\n      continue\n    }\n    if (word === '(') {\n      news += '('\n      i++\n      continue\n    }\n    if (word === ')') {\n      news += ')'\n      i++\n      continue\n    }\n    if (word === '[') {\n      news += '['\n      i++\n      continue\n    }\n    if (word === ']') {\n      news += ']'\n      i++\n      continue\n    }\n    if (word === '{') {\n      news += '{'\n      i++\n      continue\n    }\n    if (word === '}') {\n      news += '}'\n      i++\n      continue\n    }\n    if (word === '<') {\n      news += '<'\n      i++\n      continue\n    }\n    if (word === '>') {\n      news += '>'\n      i++\n      continue\n    }\n    if (word === '%') {\n      news += '%'\n      i++\n      continue\n    }\n    if (word === '/') {\n      news += '/'\n      i++\n      continue\n    }\n    if (word === '\\\\') {\n      news += '\\\\'\n      i++\n      continue\n    }\n    if (word === '$') {\n      news += '$'\n      i++\n      continue\n    }\n    if (word === '@') {\n      news += '@'\n      i++\n      continue\n    }\n    if (word === '^') {\n      news += '^'\n      i++\n      continue\n    }\n    if (word === '&') {\n      news += '&'\n      i++\n      continue\n    }\n    if (word === '*') {\n      news += '*'\n      i++\n      continue\n    }\n    if (word === '|') {\n      news += '|'\n      i++\n      continue\n    }\n    if (word === '~') {\n      news += '~'\n      i++\n      continue\n    }\n    if (word === '`') {\n      news += '`'\n      i++\n      continue\n    }\n    if (word === '\"') {\n      news += '\"' \n      i++\n      continue\n    }\n    if (word === '{') {\n      news += '{'\n      i++\n      continue\n    }\n    if (word === '}') {\n      news += '}'\n      i++\n      continue\n    }\n    if (word === '[') {\n      news += '['\n      i++\n      continue\n    }\n    if (word === ']') {\n      news += ']'\n      i++\n      continue\n    }\n    if (word === '(') {\n      news += '('\n      i++\n      continue\n    }\n    if (word === ')') {\n      news += ')'\n      i++\n      continue\n    }\n    if (word === '<') {\n      news += '<'\n      i++\n      continue\n    }\n    if (word === '>') {\n      news += '>'\n      i++\n      continue\n    }\n    if (word === '%') {\n      news += '%'\n      i++\n      continue\n    }\n    if (word === '/') {\n      news += '/'\n      i++\n      continue\n    }\n    if (word === '\\\\') {\n      news += '\\\\'\n      i++\n      continue\n    }\n    if (word === '$') {\n      news += '$'\n      i++\n      continue\n    }\n    if (word === '@') {\n      news += '@'\n      i++\n      continue\n    }\n    if (word === '^') {\n      news += '^'\n      i++\n      continue\n    }\n    if (word === '&') {\n      news += '&'\n      i++\n      continue\n    }\n    if (word === '*') {\n      news += '*'\n      i++\n      continue\n    }\n    if (word === '|') {\n      news += '|'\n      i++\n      continue\n    }\n    if (word === '~') {\n      news += '~'\n      i++\n      continue\n    }\n    if (word === '`') {\n      news += '`'\n      i++\n      continue\n    }\n    if (word === '\"') {\n      news += '\"' \n      i++\n      continue\n    }\n    if (word === '{') {\n      news += '{'\n      i++\n      continue\n    }\n    if (word === '}') {\n      news += '}'\n      i++\n      continue\n    }\n    if (word === '[') {\n      news += '['\n      i++\n      continue\n    }\n    if (word === ']') {\n      news += ']'\n      i++\n      continue\n    }\n    if (word === '(') {\n      news += '('\n      i++\n      continue\n    }\n    if (word === ')') {\n      news += ')'\n      i++\n      continue\n    }\n    if (word === '<') {\n      news += '<'\n      i++\n      continue\n    }\n    if (word === '>') {\n      news += '>'\n      i++\n      continue\n    }\n    if (word === '%') {\n      news += '%'\n      i++\n      continue\n    }\n    if (word === '/') {\n      news += '/'\n      i++\n      continue\n    }\n    if (word === '\\\\') {\n      news += '\\\\'\n      i++\n      continue\n    }\n    if (word === '$') {\n      news += '$'\n      i++\n      continue\n    }\n    if (word === '@') {\n      news += '@'\n      i++\n      continue\n    }\n    if (word === '^') {\n      news += '^'\n      i++\n      continue\n    }\n    if (word === '&') {\n      news += '&'\n      i++\n      continue\n    }\n    if (word === '*') {\n      news += '*'\n      i++\n      continue\n    }\n    if (word === '|') {\n      news += '|'\n      i++\n      continue\n    }\n    if (word === '~') {\n      news += '~'\n      i++\n      continue\n    }\n    if (word === '`') {\n      news += '`'\n      i++\n      continue\n    }\n    if (word === '\"') {\n      news += '\"' \n      i++\n      continue\n    }\n    if (word === '{') {\n      news += '{'\n      i++\n      continue\n    }\n    if (word === '}') {\n      news += '}'\n      i++\n      continue\n    }\n    if (word === '[') {\n      news += ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getCol = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  rotate([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  rotate([], 1) == []\n  rotate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst rotate = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  flip([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  flip([], 1) == []\n  flip([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst flip = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  mirror([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  mirror([], 1) == []\n  mirror([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst mirror = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  mirror([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  mirror([], 1) == []\n  mirror([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst mirror = (lst, x) => {\n  let row = []\n  let col = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push(i)\n      col.push(count)\n      count++\n    }\n  }\n  return [row, col]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  mirror([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 1) {\n      result.push(array[i]);\n    } else {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedStringLength = rotatedString.length;\n  let encryptedString = '';\n  for (let i = 0; i < rotatedStringLength; i++) {\n    encryptedString += rotatedString.charAt(i);\n  }\n  return encryptedString;\n};\n\n/*Create a function decrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedStringLength = rotatedString.length;\n  let decryptedString = '';\n  for (let i = 0; i < rotatedStringLength; i++) {\n    decryptedString += rotatedString.charAt(i);\n  }\n  return decryptedString;\n};\n\n/*Create a function encryptString that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedStringLength = rotatedString.length;\n  let encryptedString = '';\n  for (let i = 0; i < rotatedStringLength; i++) {\n    encryptedString += rotatedString.charAt(i);\n  }\n  return encryptedString;\n};\n\n/*Create a function decryptString that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedStringLength = rotatedString.length;\n  let decryptedString = '';\n  for (let i = 0; i < rotatedStringLength; i++) {\n    decryptedString += rotatedString.charAt(i);\n  }\n  return decryptedString;\n};\n\n/*Create a function encryptString that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedStringLength = rotatedString.length;\n  let encryptedString = '';\n  for (let i = 0; i < rotatedStringLength; i++) {\n    encryptedString += rotatedString.charAt(i);\n  }\n  return encryptedString;\n};\n\n/*Create a function decryptString that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => {\n      if (index === alphabet.length - 1) {\n        return letter;\n      }\n      return letter + letter;\n    })\n   .join('');\n  let rotatedString = rotatedAlphabet.split('')\n   .map((letter, index) => {\n      if (index === rotatedAlphabet.length - 1) {\n        return letter;\n      }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  let max = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] > max) {\n      rollingMaxArray.push(max);\n      max = numbers[index];\n    } else {\n      max = numbers[index];\n    }\n    index++;\n  }\n  rollingMaxArray.push(max);\n  return rollingMaxArray;\n};\n\n/* From a given list of integers, generate a list of rolling minimum component witness until given here and now \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingMin = (numbers) => {\n  const rollingMinArray = [];\n  let min = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] < min) {\n      rollingMinArray.push(min);\n      min = numbers[index];\n    } else {\n      min = numbers[index];\n    }\n    index++;\n  }\n  rollingMinArray.push(min);\n  return rollingMinArray;\n};\n\n/* From a given list of integers, generate a list of rolling average component witness until given here and now \n   in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const rollingAvgArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += numbers[index];\n    index++;\n  }\n  rollingAvgArray.push(sum / numbers.length);\n  return rollingAvgArray;\n};\n\n/* From a given list of integers, generate a list of rolling sum component witness until given here and now \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  const rollingSumArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += numbers[index];\n    index++;\n  }\n  rollingSumArray.push(sum);\n  return rollingSumArray;\n};\n\n/* From a given list of integers, generate a list of rolling count component witness until given here and now \n   in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  const rollingCountArray = [];\n  let count = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    count++;\n    index++;\n  }\n  rollingCountArray.push(count);\n  return rollingCountArray;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation component witness until given here and now \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingStd = (numbers) => {\n  const rollingStdArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rollingAvg(numbers), 2);\n    index++;\n  }\n  rollingStdArray.push(Math.sqrt(sum / numbers.length));\n  return rollingStdArray;\n};\n\n/* From a given list of integers, generate a list of rolling variance component witness until given here and now \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const rollingVarianceArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rollingAvg(numbers), 2);\n    index++;\n  }\n  rollingVarianceArray.push(sum / numbers.length);\n  return rollingVarianceArray;\n};\n\n/* From a given list of integers, generate a list of rolling median component witness until given here and now \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let index = 0;\n  while (index < numbers.length) {\n    rollingMedianArray.push(numbers[index]);\n    index++;\n  }\n  rollingMedianArray.sort((a, b) => a - b);\n  return rollingMedianArray;\n};\n\n/* From a given list of integers, generate a list of rolling mode component witness until given here and now \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingMode = (numbers) => {\n  const rollingModeArray = [];\n  let mode = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (mode < numbers[index]) {\n      mode = numbers[index];\n    }\n    index++;\n  }\n  rollingModeArray.push(mode);\n  return rollingModeArray;\n};\n\n/* From a given list of integers, generate a list of rolling quartile component witness until given here and now \n   in the sequence.\n  >>> rollingQuartile([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingQuartile = (numbers) => {\n  const rollingQuartileArray = [];\n  let index = 0;\n  while (index < numbers.length) {\n    rollingQuartileArray.push(numbers[index]);\n    index++;\n  }\n  rollingQuartileArray.sort((a, b) => a - b);\n  const quartile = rollingQuartileArray[rollingQuartileArray.length / 4];\n  rollingQuartileArray.push(quartile);\n  return rollingQuartileArray;\n};\n\n/* From a given list of integers, generate a list of rolling quintile component witness until given here and now \n   in the sequence.\n  >>> rollingQuintile([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingQuintile = (numbers) => {\n  const rollingQuintileArray = [];\n  let index = 0;\n  while (index < numbers.length) {\n    rollingQuintileArray.push(numbers[index]);\n    index++;\n  }\n  rollingQuintileArray.sort((a, b) => a - b);\n  const quintile = rollingQuintileArray[rollingQuintileArray.length / 4];\n  rollingQuintileArray.push(quintile);\n  return rollingQuintileArray;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation component witness until given here and now \n   in the sequence.\n  >>> rollingStdev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingStdev = (numbers) => {\n  const rollingStdevArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rollingAvg(numbers), 2);\n    index++;\n  }\n  rollingStdevArray.push(Math.sqrt(sum / numbers.length));\n  return rollingStdevArray;\n};\n\n/* From a given list of integers, generate a list of rolling variance component witness until given here and now \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const rollingVarianceArray = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rollingAvg(numbers), 2);\n    index++;\n  }\n  rollingVarianceArray.push(sum / numbers.length);\n  return rollingVarianceArray;\n};\n\n/* From ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest){\n     if(secondSmallest < smallest){\n       return secondSmallest;\n     }\n     return smallest;\n   }\n   return null;\n }\n \n console.log(nextSmallest([5, 1, 4, 3, 2 ]));\n console.log(nextSmallest([1, 2, 3, 4, 5 ]));\n console.log(nextSmallest([]));\n console.log(nextSmallest([1, 1 ]));\n */\n \n const nextSmallest = (lst) => {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest){\n     if(secondSmallest < smallest){\n       return secondSmallest;\n     }\n     return smallest;\n   }\n   return null;\n }\n \n console.log(nextSmallest([5, 1, 4, 3, 2 ]));\n console.log(nextSmallest([1, 2, 3, 4, 5 ]));\n console.log(nextSmallest([]));\n console.log(nextSmallest([1, 1 ]));</code>\n<|/ a |>\n<| c |>\nI like your solution, however I believe it can be simplified even more. `const nextSmallest = (lst) => lst[1] || lst[0] || null`\n<|/ c |>\n<| c |>\nYes, it can be simplified even more. `const nextSmallest = (lst) => lst[1] || lst[0] || null`\n<|/ c |>\n<| c |>\nYes, it can be simplified even more. `const nextSmallest = (lst) => lst[1] || lst[0] || null`\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[1];\n  \n  if(smallest){\n    if(secondSmallest < smallest){\n      return secondSmallest;\n    }\n    return smallest;\n  }\n  return null;\n}\n\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredom++;\n    }\n  }\n  return boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % y === 0 && x % z === 0 && y % z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvens(5) => [2,3]\n  countEvens(11) => [2,3,5,7]\n  countEvens(0) => []\n  countEvens(20) => [2,3,5,7,11,13,17,19]\n  countEvens(1) => []\n  countEvens(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvens = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countOdds(5) => [2,3]\n  countOdds(11) => [2,3,5,7]\n  countOdds(0) => []\n  countOdds(20) => [2,3,5,7,11,13,17,19]\n  countOdds(1) => []\n  countOdds(18) => [2,3,5,7,11,13,17]\n  */\nconst countOdds = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i!== 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvensAndOdds(5) => [2,3]\n  countEvensAndOdds(11) => [2,3,5,7]\n  countEvensAndOdds(0) => []\n  countEvensAndOdds(20) => [2,3,5,7,11,13,17,19]\n  countEvensAndOdds(1) => []\n  countEvensAndOdds(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvensAndOdds = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n    if (i % 2!== 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvensAndOddsAndUpTo(5) => [2,3]\n  countEvensAndOddsAndUpTo(11) => [2,3,5,7]\n  countEvensAndOddsAndUpTo(0) => []\n  countEvensAndOddsAndUpTo(20) => [2,3,5,7,11,13,17,19]\n  countEvensAndOddsAndUpTo(1) => []\n  countEvensAndOddsAndUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvensAndOddsAndUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n    if (i % 2!== 0) {\n      arr.push(i);\n    }\n    if (i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvensAndOddsAndDownTo(5) => [2,3]\n  countEvensAndOddsAndDownTo(11) => [2,3,5,7]\n  countEvensAndOddsAndDownTo(0) => []\n  countEvensAndOddsAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countEvensAndOddsAndDownTo(1) => []\n  countEvensAndOddsAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvensAndOddsAndDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n    if (i % 2!== 0) {\n      arr.push(i);\n    }\n    if (i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvensAndOddsAndUpAndDownTo(5) => [2,3]\n  countEvensAndOddsAndUpAndDownTo(11) => [2,3,5,7]\n  countEvensAndOddsAndUpAndDownTo(0) => []\n  countEvensAndOddsAndUpAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countEvensAndOddsAndUpAndDownTo(1) => []\n  countEvensAndOddsAndUpAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvensAndOddsAndUpAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n    if (i % 2!== 0) {\n      arr.push(i);\n    }\n    if (i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countEvensAndOddsAndUpAndDownAndEvens(5) => [2,3]\n  countEvensAndOddsAndUpAndDownAndEvens(11) => [2,3,5,7]\n  countEvensAndOddsAndUpAndDownAndEvens(0) => []\n  countEvensAndOddsAndUpAndDownAndEvens(20) => [2,3,5,7,11,13,17,19]\n  countEvensAndOddsAndUpAndDownAndEvens(1) => []\n  countEvensAndOddsAndUpAndDownAndEvens(18) => [2,3,5,7,11,13,17]\n  */\nconst countEvensAndOddsAndUpAndDownAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the union of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  subtract(148, 412) should return 42.\n  subtract(19, 28) should return 70.\n  subtract(2020, 1851) should return 201.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  subtract(148, 412) should return 4.\n  subtract(19, 28) should return 7.\n  subtract(2020, 1851) should return 201.\n  subtract(14,-15) should return -1.\n  */\nconst subtract = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the product of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  product(148, 412) should return 144.\n  product(19, 28) should return 728.\n  product(2020, 1851) should return 2020.\n  product(14,-15) should return -14.\n  */\nconst product = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the quotient of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  quotient(148, 412) should return 4.\n  quotient(19, 28) should return 7.\n  quotient(2020, 1851) should return 201.\n  quotient(14,-15) should return -1.\n  */\nconst quotient = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the remainder of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  remainder(148, 412) should return 4.\n  remainder(19, 28) should return 7.\n  remainder(2020, 1851) should return 201.\n  remainder(14,-15) should return -1.\n  */\nconst remainder = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the sum of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 728.\n  sum(2020, 1851) should return 2020.\n  sum(14,-15) should return -14.\n  */\nconst sum = (a, b) => {\n  let result = 0;\n  \n  for(let i = 0; i < a.length; i++) {\n    result += a[i] % 10;\n  }\n  \n  for(let i = 0; i < b.length; i++) {\n    result += b[i] % 10;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the second integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(412) should return 412.\n  absValue(28) should return 28.\n  absValue(1851) should return 1851.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(19) should return 19.\n  absValue(2020) should return 2020.\n  absValue(14) should return 14.\n  */\nconst absValue = (value) => {\n  return Math.abs(value);\n}\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the first integer. \n   Assume the stimulation is always valid.\n  Examples:\n  absValue(148) should return 148.\n  absValue(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowel in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 3\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 3\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 3\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonantOdd('aBCdEf') returns 2\n  countConsonantOdd('abcdefg') returns 0\n  countConsonantOdd('dBBE') returns 0\n  */\nconst countConsonantOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonantOdd('aBCdEf') returns 3\n  countConsonantOdd('abcdefg') returns 0\n  countConsonantOdd('dBBE') returns 0\n  */\nconst countConsonantOddOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  \n  For example:\n  countVowelEven('aBCdEf') returns 3\n  countVowelEven('abcdefg') returns 0\n  countVowelEven('dBBE') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 3\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 3\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonantEven('aBCdEf') returns 2\n  countConsonantEven('abcdefg') returns 0\n  countConsonantEven('dBBE') returns 0\n  */\nconst countConsonantEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < values.length; i++) {\n    let currentDistance = Math.abs(value - values[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = values[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   date and retort the close integer to it. If the date is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given date is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestDate = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < dates.length; i++) {\n    let currentDistance = Math.abs(value - dates[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = dates[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   time and retort the close integer to it. If the time is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given time is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestTime = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < times.length; i++) {\n    let currentDistance = Math.abs(value - times[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = times[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   date and retort the close integer to it. If the date is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given date is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestDate = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < dates.length; i++) {\n    let currentDistance = Math.abs(value - dates[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = dates[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   time and retort the close integer to it. If the time is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given time is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestTime = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < times.length; i++) {\n    let currentDistance = Math.abs(value - times[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = times[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   date and retort the close integer to it. If the date is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given date is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestDate = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < dates.length; i++) {\n    let currentDistance = Math.abs(value - dates[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = dates[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   time and retort the close integer to it. If the time is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given time is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestTime = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  let closestIndex = 0;\n  \n  for (let i = 0; i < times.length; i++) {\n    let currentDistance = Math.abs(value - times[i]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closest = times[i];\n      closestIndex = i;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a \n   date and retort the close integer to it. If the date is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given date is equidistant\n  from two integers, the one you should return is the one that is the\n  farthe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
