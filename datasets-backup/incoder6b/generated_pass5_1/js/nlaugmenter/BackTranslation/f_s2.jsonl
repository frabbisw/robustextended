{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentNumber = numbers[i];\n    const nextNumber = numbers[i + 1];\n    const currentDistance = distance(currentNumber, nextNumber);\n    const nextDistance = distance(currentNumber, nextNumber);\n    if (currentDistance < nextDistance && currentDistance > threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Given a sorted array of numbers, find the median of the given numbers. If there are an even number of numbers, return the average of the two middle numbers.\n * If the array is empty, return the number itself.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an odd number of numbers, return the middle number and the average of the two middle numbers.\n * If there are an even number of numbers, return the middle number and the average ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open_brackets = 0;\n  let current_group_close_brackets = 0;\n  let current_group_open_brackets_length = 0;\n  let current_group_close_brackets_length = 0;\n  let current_group_open_brackets_char = '';\n  let current_group_close_brackets_char = '';\n  let current_group_char = '';\n  let current_group_char_length = 0;\n  let current_group_char_char = '';\n  let current_group_char_char_length = 0;\n  let current_group_char_char_char = '';\n  let current_group_char_char_char_length = 0;\n  let current_group_char_char_char_char = '';\n  let current_group_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*\n  Write a function that takes an array of numbers and returns the largest number in the array. If there is no number in the array, return -1.\n\n  For example:\n  largest([2, 7, 9, 4, 5]) should return 9\n  largest([2, 7, 9, 4, 1]) should return -1\n  */\nconst largest = arr => {\n  if (arr.length === 0) {\n    return -1;\n  }\n  return Math.max(...arr);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the smallest number in the array. If there is no number in the array, return -1.\n\n  For example:\n  smallest([2, 7, 9, 4, 5]) should return 5\n  smallest([2, 7, 9, 4, 1]) should return -1\n  */\nconst smallest = arr => {\n  if (arr.length === 0) {\n    return -1;\n  }\n  return Math.min(...arr);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of all the numbers in the array. If there is no number in the array, return 0.\n\n  For example:\n  sum([2, 7, 9, 4, 5]) should return 15\n  sum([2, 7, 9, 4, 1]) should return 0\n  */\nconst sum = arr => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the product of all the numbers in the array. If there is no number in the array, return 1.\n\n  For example:\n  product([2, 7, 9, 4, 5]) should return 720\n  product([2, 7, 9, 4, 1]) should return 1\n  */\nconst product = arr => {\n  if (arr.length === 0) {\n    return 1;\n  }\n  return arr.reduce((acc, curr) => acc * curr, 1);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order. If there is no number in the array, return an empty array.\n\n  For example:\n  ascending([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  ascending([2, 7, 9, 4, 1]) should return []\n  */\nconst ascending = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => a - b);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in descending order. If there is no number in the array, return an empty array.\n\n  For example:\n  descending([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  descending([2, 7, 9, 4, 1]) should return []\n  */\nconst descending = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => b - a);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order by the absolute value of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  absolute([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  absolute([2, 7, 9, 4, 1]) should return []\n  */\nconst absolute = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => Math.abs(a) - Math.abs(b));\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in descending order by the absolute value of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  absolute([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  absolute([2, 7, 9, 4, 1]) should return []\n  */\nconst absoluteDesc = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => -Math.abs(a) - Math.abs(b));\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order by the sum of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  sumOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  sumOf([2, 7, 9, 4, 1]) should return []\n  */\nconst sumOf = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => a + b);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in descending order by the sum of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  sumOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  sumOf([2, 7, 9, 4, 1]) should return []\n  */\nconst sumOfDesc = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => b - a);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order by the product of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  productOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  productOf([2, 7, 9, 4, 1]) should return []\n  */\nconst productOf = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => a * b);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in descending order by the product of the numbers. If there is no number in the array, return an empty array.\n\n  For example:\n  productOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  productOf([2, 7, 9, 4, 1]) should return []\n  */\nconst productOfDesc = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => b * a);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order by the largest number in the array. If there is no number in the array, return an empty array.\n\n  For example:\n  largestOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  largestOf([2, 7, 9, 4, 1]) should return []\n  */\nconst largestOf = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => a - b);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in descending order by the largest number in the array. If there is no number in the array, return an empty array.\n\n  For example:\n  largestOf([2, 7, 9, 4, 5]) should return [5, 4, 3, 2, 1]\n  largestOf([2, 7, 9, 4, 1]) should return []\n  */\nconst largestOfDesc = arr => {\n  if (arr.length === 0) {\n    return [];\n  }\n  return arr.sort((a, b) => b - a);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of numbers that is sorted in ascending order by the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const binary = Array(m + 1).fill(0);\n  for (let i = n; i <= m; i += 1) {\n    binary[i - n] = 1;\n  }\n  return binary.reduce((acc, cur) => acc + cur, 0).toString(2);\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation.\n  Example:\n  binaryDigits(5) => \"0b101\"\n  binaryDigits(15) => \"0b1111\"\n  binaryDigits(10) => \"0b1010\"\n  binaryDigits(0) => \"\"\n*/\nconst binaryDigits = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order.\n  Example:\n  binaryDigitsReverse(5) => \"101\"\n  binaryDigitsReverse(15) => \"1111\"\n  binaryDigitsReverse(10) => \"1010\"\n  binaryDigitsReverse(0) => \"\"\n*/\nconst binaryDigitsReverse = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binaryDigitsReverseWithZeros(15) => \"1111\"\n  binaryDigitsReverseWithZeros(10) => \"1010\"\n  binaryDigitsReverseWithZeros(0) => \"\"\n*/\nconst binaryDigitsReverseWithZeros = n => {\n  if (n === 0) {\n    return \"\";\n  }\n  return Array(Math.ceil(n)).fill(0).map((_, i) => i).map(i => n % Math.pow(2, i)).map(i => i === 0? \"0\" : i).reverse().filter(i => i!== \"0\").join(\"\");\n};\n\n/*\n  Write a function that takes a positive integer and returns the first n digits of its binary representation in reverse order without leading zeros.\n  Example:\n  binaryDigitsReverseWithZeros(5) => \"101\"\n  binary", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit and even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit and even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit and even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit and even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddOddOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x.indexOf(x[i]) === i) {\n      if (x[i] % 2 === 0) {\n        if (x[i] % 2!== 0) {\n          unique.push(x[i]);\n        }\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit and even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(`One ${reversed[i]}`);\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  ['', []],\n  ['1', [1]],\n  ['12', [12]],\n  ['123', [1, 2, 3]],\n  ['1234', [1, 2, 3, 4]],\n  ['12345', [1, 2, 3, 4, 5]],\n  ['123456', [1, 2, 3, 4, 5, 6]],\n  ['1234567', [1, 2, 3, 4, 5, 6, 7]],\n  ['12345678', [1, 2, 3, 4, 5, 6, 7, 8]],\n  ['123456789', [1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  ['1234567890', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]],\n  ['12345678901', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]],\n  ['123456789012', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]],\n  ['1234567890123', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]],\n  ['12345678901234', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['123456789012345', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]],\n  ['1234567890123456', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]],\n  ['12345678901234567', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]],\n  ['123456789012345678', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  ['1234567890123456789', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]],\n  ['12345678901234567890', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]],\n  ['123456789012345678901', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]],\n  ['1234567890123456789012', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]],\n  ['12345678901234567890123', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['123456789012345678901234', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['1234567890123456789012345', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]],\n  ['12345678901234567890123456', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]],\n  ['123456789012345678901234567', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]],\n  ['1234567890123456789012345678', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  ['12345678901234567890123456789', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]],\n  ['123456789012345678901234567890', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]],\n  ['1234567890123456789012345678901', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]],\n  ['12345678901234567890123456789012', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]],\n  ['123456789012345678901234567890123', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['1234567890123456789012345678901234', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['12345678901234567890123456789012345', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]],\n  ['123456789012345678901234567890123456', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]],\n  ['1234567890123456789012345678901234567', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]],\n  ['12345678901234567890123456789012345678', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  ['123456789012345678901234567890123456789', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]],\n  ['1234567890123456789012345678901234567890', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]],\n  ['12345678901234567890123456789012345678901', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]],\n  ['123456789012345678901234567890123456789012', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]],\n  ['1234567890123456789012345678901234567890123', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['12345678901234567890123456789012345678901234', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['123456789012345678901234567890123456789012345', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]],\n  ['1234567890123456789012345678901234567890123456', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]],\n  ['12345678901234567890123456789012345678901234567', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]],\n  ['123456789012345678901234567890123456789012345678', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  ['1234567890123456789012345678901234567890123456789', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]],\n  ['12345678901234567890123456789012345678901234567890', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]],\n  ['123456789012345678901234567890123456789012345678901', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]],\n  ['1234567890123456789012345678901234567890123456789012', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]],\n  ['12345678901234567890123456789012345678901234567890123', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['123456789012345678901234567890123456789012345678901234', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]],\n  ['1234567890123456789012345678901234567890123456789012345', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]],\n  ['12345678901234567890123456789012345678901234567890123456', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]],\n  ['123456789012345678901234567890123456789012345678901234567', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]],\n  ['1234567890123456789012345678901234567890123456789012345678', [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function g, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 20, 30]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function h, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 20, 30]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function i, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 20, 30]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function j, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 20, 30]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function k, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 20, 30]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function l, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 20, 30]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function m, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 20, 30]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function n, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 20, 30]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function o, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 20, 30]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function p, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 20, 30]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function q, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 20, 30]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement function r, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  r(5) == [1, 2, 6, 20, 30]\n  */\nconst r = (n) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      res.push([i, str]);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"hello\"\n      Output: \"olleh\"\n      Explanation: \"olleh\" -> \"ehllo\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"A man, a plan, a canal: Panama\"\n      Explanation: \"A man, a plan, a canal: Panama\" -> \"A man, a plan, a canal: Panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race a car\"\n      Explanation: \"race a car\" -> \"carac ea\"\n\n  Example 4:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"A man, a plan, a canal: Panama\"\n      Explanation: \"A man, a plan, a canal: Panama\" -> \"A man, a plan, a canal: Panama\"\n\n  Note:\n      1. String consists of lowercase English letters.\n      2. String length will be in the range [1, 10000].\n      3. String contains only lowercase English letters.\n      4. String contains only lowercase English letters.\n*/\nconst reverseString = (s) => {\n  const newStr = s.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      Return:\n      [\n          [15,7],\n          [9,20],\n          [3]\n      ]\n*/\nconst levelOrder = (root) => {\n  const res = [];\n  const queue = [root];\n  while (queue.length > 0) {\n    const front = queue.shift();\n    res.push(front);\n    if (front.left && front.right) {\n      queue.push(front.left);\n      queue.push(front.right);\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function sumDigits that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits([-1, 11, -11]) == 1 + 1 + 1 = 4.\n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == 4\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits2 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits2([]) == 0\n  >>> sumDigits2([]) == 0\n  >>> sumDigits2([-1, 11, -11]) == 4\n  */\nconst sumDigits2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits3 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits3([]) == 0\n  >>> sumDigits3([]) == 0\n  >>> sumDigits3([-1, 11, -11]) == 4\n  */\nconst sumDigits3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits4 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits4([]) == 0\n  >>> sumDigits4([]) == 0\n  >>> sumDigits4([-1, 11, -11]) == 4\n  */\nconst sumDigits4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits5 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits5([]) == 0\n  >>> sumDigits5([]) == 0\n  >>> sumDigits5([-1, 11, -11]) == 4\n  */\nconst sumDigits5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits6 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits6([]) == 0\n  >>> sumDigits6([]) == 0\n  >>> sumDigits6([-1, 11, -11]) == 4\n  */\nconst sumDigits6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits7 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits7([]) == 0\n  >>> sumDigits7([]) == 0\n  >>> sumDigits7([-1, 11, -11]) == 4\n  */\nconst sumDigits7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits8 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits8([]) == 0\n  >>> sumDigits8([]) == 0\n  >>> sumDigits8([-1, 11, -11]) == 4\n  */\nconst sumDigits8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits9 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits9([]) == 0\n  >>> sumDigits9([]) == 0\n  >>> sumDigits9([-1, 11, -11]) == 4\n  */\nconst sumDigits9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits10 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits10([]) == 0\n  >>> sumDigits10([]) == 0\n  >>> sumDigits10([-1, 11, -11]) == 4\n  */\nconst sumDigits10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits11 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits11([]) == 0\n  >>> sumDigits11([]) == 0\n  >>> sumDigits11([-1, 11, -11]) == 4\n  */\nconst sumDigits11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits12 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits12([]) == 0\n  >>> sumDigits12([]) == 0\n  >>> sumDigits12([-1, 11, -11]) == 4\n  */\nconst sumDigits12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits13 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits13([]) == 0\n  >>> sumDigits13([]) == 0\n  >>> sumDigits13([-1, 11, -11]) == 4\n  */\nconst sumDigits13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits14 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits14([]) == 0\n  >>> sumDigits14([]) == 0\n  >>> sumDigits14([-1, 11, -11]) == 4\n  */\nconst sumDigits14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits15 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits15([]) == 0\n  >>> sumDigits15([]) == 0\n  >>> sumDigits15([-1, 11, -11]) == 4\n  */\nconst sumDigits15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits16 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits16([]) == 0\n  >>> sumDigits16([]) == 0\n  >>> sumDigits16([-1, 11, -11]) == 4\n  */\nconst sumDigits", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  let flag = true;\n  let temp = 0;\n  \n  for(let i = 0; i < n; i++){\n    temp = arr[i];\n    for(let j = i; j < n; j++){\n      arr[j] = arr[j+1];\n    }\n    arr[i] = temp;\n    count++;\n  }\n  \n  if(count === n){\n    flag = false;\n  }\n  return flag;\n}\n\n/*\n  Write a function that takes an array of integers and returns an array of\n  integers such that each element of the new array is equal to the product of \n  the original array and the element at that position in the original array.\n  \n  For example:\n  \n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n  product([2, 5, 7, 11])==>[4, 10, 18]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '110'\n  */\nconst stringNot = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '110'\n  */\nconst stringNot = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] ^ y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (x, y) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i] & y[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMin = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMax = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramAvg = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMedian = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  let sortedHistogram = Object.keys(histogram).sort(function (a, b) {\n    return histogram[b] - histogram[a]\n  })\n  let middleIndex = Math.floor((sortedHistogram.length + 1) / 2)\n  let median = sortedHistogram[middleIndex]\n  return median\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMode = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  let sortedHistogram = Object.keys(histogram).sort(function (a, b) {\n    return histogram[b] - histogram[a]\n  })\n  let mode = sortedHistogram[0]\n  return mode\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeMin = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  let sortedHistogram = Object.keys(histogram).sort(function (a, b) {\n    return histogram[b] - histogram[a]\n  })\n  let mode = sortedHistogram[0]\n  return mode\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeMax = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  let letter = letters[0]\n  let count = 1\n  for (let i = 1; i < letters.length; i++) {\n    if (letters[i] === letter) {\n      count++\n    } else {\n      letter = letters[i]\n      count = 1\n    }\n    histogram[letter] = count\n  }\n  let sortedHistogram = Object.keys(histogram).sort(function (a, b) {\n    return histogram[b] - histogram[a]\n  })\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even elements in the string i of input,\" with all i's being replaced by the number of even digits in the i'th string of input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const str = lst.toString();\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even elements ${evenDigits}n the str${evenDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even and odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even and odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even and odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even and odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const str = lst.toString();\n  const oddDigits = str.match(/\\d/g).length;\n  const evenDigits = str.match(/\\d/g).length;\n  return lst.map((i) => `the number of even and odd elements ${oddDigits}n the str${oddDigits}ng ${i} of the ${i}nput.`);\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers, search for the maximum sum of all non-empty sub-arrays of numbers.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      currentSum += nums[j];\n      if (currentSum > maxSum) {\n        maxSum = currentSum;\n        maxSumIndex = j;\n      }\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -3]) == [-3, -1]\n  */\nconst positiveAndNegative = (nums) => {\n  let positiveCount = 0;\n  let negativeCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount++;\n    } else if (nums[i] < 0) {\n      negativeCount++;\n    }\n  }\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given an array of integers, find the number of positive and negative numbers in the array.\n  Example\n  positiveAndNegative([2, 3, 4, 1, 2, 4]) == [4, 2]\n  positiveAndNegative([-1, -2, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        if (buckets[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const binaryArray = arr\n   .map(n => n.toString(2))\n   .map(n => n.padStart(8, '0'))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(n => n.split('').map(i => +i).join(''))\n   .map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words.filter(word => word.length == n);\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsCountIndex = 0;\n  let vowelsCountMax = vowelsCount - 1;\n  let vowelsCountMin = 0;\n  let vowelsCountMaxIndex = 0;\n  let vowelsCountMinIndex = 0;\n  let vowelsCountMinMax = vowelsCountMax - 1;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex = 0;\n  let vowelsCountMinMaxIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n    if (openCount === closeCount) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  let longest = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length;\n\n    if (length > longest) {\n      longest = length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/* Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  let shortest = 0;\n  let shortestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length;\n\n    if (length < shortest) {\n      shortest = length;\n      shortestString = strings[i];\n    }\n  }\n\n  return shortestString;\n};\n\n/* Returns true if the given string is a palindrome. Palindromes are strings that read the same backward as forward.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abba')\n  False\n  */\nconst isPalindrome = (string) => {\n  const reversed = string\n   .split('')\n   .reverse()\n   .join('');\n\n  return string === reversed;\n};\n\n/* Returns the first string from the given list of strings. Returns zero if the input list is empty.\n  >>> first([])\n\n  >>> first(['a', 'b', 'c'])\n  'a'\n  >>> first(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst first = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  return strings[0];\n};\n\n/* Returns the last string from the given list of strings. Returns zero if the input list is empty.\n  >>> last([])\n\n  >>> last(['a', 'b', 'c'])\n  'c'\n  >>> last(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst last = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  return strings[strings.length - 1];\n};\n\n/* Returns the index of the first occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> indexOfFirst([], 0)\n\n  >>> indexOfFirst(['a', 'b', 'c'], 0)\n  0\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 0)\n  0\n  >>> indexOfFirst(['a', 'b', 'c'], 1)\n  1\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 1)\n  1\n  >>> indexOfFirst(['a', 'b', 'c'], 2)\n  2\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst indexOfFirst = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the last occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> indexOfLast([], 0)\n\n  >>> indexOfLast(['a', 'b', 'c'], 0)\n  0\n  >>> indexOfLast(['a', 'bb', 'ccc'], 0)\n  0\n  >>> indexOfLast(['a', 'b', 'c'], 1)\n  1\n  >>> indexOfLast(['a', 'bb', 'ccc'], 1)\n  1\n  >>> indexOfLast(['a', 'b', 'c'], 2)\n  2\n  >>> indexOfLast(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst indexOfLast = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the first occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> lastIndexOf([], 0)\n\n  >>> lastIndexOf(['a', 'b', 'c'], 0)\n  0\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 0)\n  0\n  >>> lastIndexOf(['a', 'b', 'c'], 1)\n  1\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 1)\n  1\n  >>> lastIndexOf(['a', 'b', 'c'], 2)\n  2\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst lastIndexOf = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the last occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> lastIndexOf([], 0)\n\n  >>> lastIndexOf(['a', 'b', 'c'], 0)\n  0\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 0)\n  0\n  >>> lastIndexOf(['a', 'b', 'c'], 1)\n  1\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 1)\n  1\n  >>> lastIndexOf(['a', 'b', 'c'], 2)\n  2\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst lastIndexOf = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the first occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> indexOfFirst([], 0)\n\n  >>> indexOfFirst(['a', 'b', 'c'], 0)\n  0\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 0)\n  0\n  >>> indexOfFirst(['a', 'b', 'c'], 1)\n  1\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 1)\n  1\n  >>> indexOfFirst(['a', 'b', 'c'], 2)\n  2\n  >>> indexOfFirst(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst indexOfFirst = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the last occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> indexOfLast([], 0)\n\n  >>> indexOfLast(['a', 'b', 'c'], 0)\n  0\n  >>> indexOfLast(['a', 'bb', 'ccc'], 0)\n  0\n  >>> indexOfLast(['a', 'b', 'c'], 1)\n  1\n  >>> indexOfLast(['a', 'bb', 'ccc'], 1)\n  1\n  >>> indexOfLast(['a', 'b', 'c'], 2)\n  2\n  >>> indexOfLast(['a', 'bb', 'ccc'], 2)\n  2\n  */\nconst indexOfLast = (strings, stringToFind) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i] === stringToFind) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/* Returns the index of the first occurrence of the given string in the given list of strings. Returns zero if the input list is empty.\n  >>> lastIndexOf([], 0)\n\n  >>> lastIndexOf(['a', 'b', 'c'], 0)\n  0\n  >>> lastIndexOf(['a', 'bb', 'ccc'], 0)\n  0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximumN };\n\n/*\n  Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber, singleNumberN };\n\n/*\n  Given a non-empty array of integers, every element appears exactly twice, except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber2 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber2, singleNumber2N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly three times, except for two. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber3 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber3, singleNumber3N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly four times, except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber4 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber4, singleNumber4N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly five times, except for two. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber5 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber5, singleNumber5N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly six times, except for two. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber6 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber6, singleNumber6N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly seven times, except for two. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber7 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { singleNumber7, singleNumber7N };\n\n/*\n  Given a non-empty array of integers, every element appears exactly eight times, except for two. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [2,2,3,4,4,3,4,5,3]\n      Output: 4\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n  */\nconst singleNumber8 = (arr) => {\n  let max = 0;\n  let single = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === max) {\n      single = arr[i];\n    }\n  }\n  return single;\n};\n\nexport { single", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution15 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*GIf you create a non-empty list of integers, you return the product of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 120\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of two digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of three digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsThreeDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of four digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsFourDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of five digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsFiveDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of six digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSixDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of seven digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSevenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of eight digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsEightDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of nine digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsNineDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of ten digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsTenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of eleven digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsElevenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of twelve digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsTwelveDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer arr[] and an integer k, find the sum of the elements with maximum of thirteen digits from the first k elements of arr. Return 0 if there is no such element.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2 === 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatzDesc = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2 === 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let arr = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    arr.push(nextTerm);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in col", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthsInYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  let daysInYear = 365;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength2 = dateArrayLength - 1;\n  let daysInMonth2 = daysInMonth[dateArrayLength2];\n  let monthsInYear2 = monthsInYear[dateArrayLength2];\n  let daysInYear2 = daysInYear[dateArrayLength2];\n  let dateArrayLength3 = dateArrayLength - 2;\n  let daysInMonth3 = daysInMonth[dateArrayLength3];\n  let monthsInYear3 = monthsInYear[dateArrayLength3];\n  let daysInYear3 = daysInYear[dateArrayLength3];\n  let dateArrayLength4 = dateArrayLength - 3;\n  let daysInMonth4 = daysInMonth[dateArrayLength4];\n  let monthsInYear4 = monthsInYear[dateArrayLength4];\n  let daysInYear4 = daysInYear[dateArrayLength4];\n  let dateArrayLength5 = dateArrayLength - 4;\n  let daysInMonth5 = daysInMonth[dateArrayLength5];\n  let monthsInYear5 = monthsInYear[dateArrayLength5];\n  let daysInYear5 = daysInYear[dateArrayLength5];\n  let dateArrayLength6 = dateArrayLength - 5;\n  let daysInMonth6 = daysInMonth[dateArrayLength6];\n  let monthsInYear6 = monthsInYear[dateArrayLength6];\n  let daysInYear6 = daysInYear[dateArrayLength6];\n  let dateArrayLength7 = dateArrayLength - 6;\n  let daysInMonth7 = daysInMonth[dateArrayLength7];\n  let monthsInYear7 = monthsInYear[dateArrayLength7];\n  let daysInYear7 = daysInYear[dateArrayLength7];\n  let dateArrayLength8 = dateArrayLength - 7;\n  let daysInMonth8 = daysInMonth[dateArrayLength8];\n  let monthsInYear8 = monthsInYear[dateArrayLength8];\n  let daysInYear8 = daysInYear[dateArrayLength8];\n  let dateArrayLength9 = dateArrayLength - 8;\n  let daysInMonth9 = daysInMonth[dateArrayLength9];\n  let monthsInYear9 = monthsInYear[dateArrayLength9];\n  let daysInYear9 = daysInYear[dateArrayLength9];\n  let dateArrayLength10 = dateArrayLength - 9;\n  let daysInMonth10 = daysInMonth[dateArrayLength10];\n  let monthsInYear10 = monthsInYear[dateArrayLength10];\n  let daysInYear10 = daysInYear[dateArrayLength10];\n  let dateArrayLength11 = dateArrayLength - 10;\n  let daysInMonth11 = daysInMonth[dateArrayLength11];\n  let monthsInYear11 = monthsInYear[dateArrayLength11];\n  let daysInYear11 = daysInYear[dateArrayLength11];\n  let dateArrayLength12 = dateArrayLength - 11;\n  let daysInMonth12 = daysInMonth[dateArrayLength12];\n  let monthsInYear12 = monthsInYear[dateArrayLength12];\n  let daysInYear12 = daysInYear[dateArrayLength12];\n  let dateArrayLength13 = dateArrayLength - 12;\n  let daysInMonth13 = daysInMonth[dateArrayLength13];\n  let monthsInYear13 = monthsInYear[dateArrayLength13];\n  let daysInYear13 = daysInYear[dateArrayLength13];\n  let dateArrayLength14 = dateArrayLength - 13;\n  let daysInMonth14 = daysInMonth[dateArrayLength14];\n  let monthsInYear14 = monthsInYear[dateArrayLength14];\n  let daysInYear14 = daysInYear[dateArrayLength14];\n  let dateArrayLength15 = dateArrayLength - 14;\n  let daysInMonth15 = daysInMonth[dateArrayLength15];\n  let monthsInYear15 = monthsInYear[dateArrayLength15];\n  let daysInYear15 = daysInYear[dateArrayLength15];\n  let dateArrayLength16 = dateArrayLength - 15;\n  let daysInMonth16 = daysInMonth[dateArrayLength16];\n  let monthsInYear16 = monthsInYear[dateArrayLength16];\n  let daysInYear16 = daysInYear[dateArrayLength16];\n  let dateArrayLength17 = dateArrayLength - 16;\n  let daysInMonth17 = daysInMonth[dateArrayLength17];\n  let monthsInYear17 = monthsInYear[dateArrayLength17];\n  let daysInYear17 = daysInYear[dateArrayLength17];\n  let dateArrayLength18 = dateArrayLength - 17;\n  let daysInMonth18 = daysInMonth[dateArrayLength18];\n  let monthsInYear18 = monthsInYear[dateArrayLength18];\n  let daysInYear18 = daysInYear[dateArrayLength18];\n  let dateArrayLength19 = dateArrayLength - 18;\n  let daysInMonth19 = daysInMonth[dateArrayLength19];\n  let monthsInYear19 = monthsInYear[dateArrayLength19];\n  let daysInYear19 = daysInYear[dateArrayLength19];\n  let dateArrayLength20 = dateArrayLength - 19;\n  let daysInMonth20 = daysInMonth[dateArrayLength20];\n  let monthsInYear20 = monthsInYear[dateArrayLength20];\n  let daysInYear20 = daysInYear[dateArrayLength20];\n  let dateArrayLength21 = dateArrayLength - 20;\n  let daysInMonth21 = daysInMonth[dateArrayLength21];\n  let monthsInYear21 = monthsInYear[dateArrayLength21];\n  let daysInYear21 = daysInYear[dateArrayLength21];\n  let dateArrayLength22 = dateArrayLength - 21;\n  let daysInMonth22 = daysInMonth[dateArrayLength22];\n  let monthsInYear22 = monthsInYear[dateArrayLength22];\n  let daysInYear22 = daysInYear[dateArrayLength22];\n  let dateArrayLength23 = dateArrayLength - 22;\n  let daysInMonth23 = daysInMonth[dateArrayLength23];\n  let monthsInYear23 = monthsInYear[dateArrayLength23];\n  let daysInYear23 = daysInYear[dateArrayLength23];\n  let dateArrayLength24 = dateArrayLength - 23;\n  let daysInMonth24 = daysInMonth[dateArrayLength24];\n  let monthsInYear24 = monthsInYear[dateArrayLength24", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list, remove all duplicates. Return the new list.\n  Examples\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start < interval1End && interval2Start < interval2End) {\n    if (interval1Start > interval2Start) {\n      return [interval1Start, interval2Start];\n    }\n    if (interval1Start < interval2End) {\n      return [interval1Start, interval2End];\n    }\n    if (interval1End > interval2Start) {\n      return [interval1End, interval2Start];\n    }\n    if (interval1End < interval2End) {\n      return [interval1End, interval2End];\n    }\n  }\n  return [\"NO\"];\n};\n\n/*\n  Given two intervals, return whether they are disjoint or not.\n  Two intervals are disjoint if they have no intersection.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) are disjoint.\n  Example, interval1 = (-1, 1) and interval2 = (0, 4) are disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n  Example, interval1 = (-3, -1) and interval2 = (-5, 5) are not disjoint.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns13 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns14 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => []);\n  queue[0][0] = grid[0][0];\n  visited[0] = true;\n  result.push(grid[0][0]);\n  \n  for (let i = 1; i < N; i++) {\n    queue[i][0] = grid[i][0];\n    visited[i] = true;\n    \n    for (let j = 1; j < N; j++) {\n      if (visited[j] && queue[i - 1][j - 1] < queue[i][j]) {\n        queue[i][j] = queue[i - 1][j - 1];\n      }\n    }\n  }\n  \n  while (queue[N - 1][N - 1] > k) {\n    result.push(queue[N - 1][N - 1]);\n    \n    for (let i = N - 2; i > 0; i--) {\n      for (let j = N - 2; j > 0; j--) {\n        if (visited[j] && queue[i - 1][j - 1] < queue[i][j]) {\n          queue[i][j] = queue[i - 1][j - 1];\n        }\n      }\n    }\n  }\n  \n  return result;\n};\n\n// --------------------------------------------------\n// Tests\nconst tests = [\n  [[1,2,3], [4,5,6], [7,8,9]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [[5,9,3], [4,1,6", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 7)\n  7\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextTowardsZero(8)\n  8\n  >>> nextTowardsZero(8)\n  8\n  >>> nextTowardsZero(8)\n  8\n  >>> nextTowardsZero(8)\n  8\n  */\nconst nextTowardsZero = a => {\n  return a + (a > 0? 1 : -1);\n};\n\n/**\n * Returns the largest number less than or equal to its argument\n  >>> previousTowardsZero(8)\n  8\n  >>> previousTowardsZero(8)\n  8\n  >>> previousTowardsZero(8)\n  8\n  >>> previousTowardsZero(8)\n  8\n  */\nconst previousTowardsZero = a => {\n  return a - (a < 0? 1 : -1);\n};\n\n/**\n * Returns the sum of an array of numbers\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = arr => {\n  return arr.reduce((acc, val) => acc + val, 0);\n};\n\n/**\n * Returns the average of an array of numbers\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, 3])\n  2\n  */\nconst average = arr => {\n  return sum(arr) / arr.length;\n};\n\n/**\n * Returns the median of an array of numbers\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const len = arr.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  if (len % 2 === 1) {\n    return sorted[len / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n};\n\n/**\n * Returns the mode of an array of numbers\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  */\nconst mode = arr => {\n  const counts = {};\n  const maxCount = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    const count = counts[value] || 0;\n    counts[value] = count + 1;\n    if (count > maxCount) {\n      maxCount = count;\n    }\n  }\n  const modes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    const count = counts[value] || 0;\n    if (count === maxCount) {\n      modes.push(value);\n    }\n  }\n  return modes;\n};\n\n/**\n * Returns the standard deviation of an array of numbers\n  >>> standardDeviation([1, 2, 3, 1, 2, 3])\n  1.5811388300841898\n  >>> standardDeviation([1, 2, 3, 1, 2, 3])\n  1.5811388300841898\n  >>> standardDeviation([1, 2, 3, 1, 2, 3])\n  1.5811388300841898\n  >>> standardDeviation([1, 2, 3, 1, 2, 3])\n  1.5811388300841898\n  */\nconst standardDeviation = arr => {\n  const mean = average(arr);\n  const variance = arr.map(val => (val - mean) ** 2).reduce((acc, val) => acc + val, 0);\n  return Math.sqrt(variance);\n};\n\n/**\n * Returns the variance of numbers in an array\n  >>> variance([1, 2, 3, 1, 2, 3])\n  2.1666666666666665\n  >>> variance([1, 2, 3, 1, 2, 3])\n  2.1666666666666665\n  >>> variance([1, 2, 3, 1, 2, 3])\n  2.1666666666666665\n  >>> variance([1, 2, 3, 1, 2, 3])\n  2.1666666666666665\n  */\nconst variance = arr => {\n  const mean = average(arr);\n  const variance = arr.map(val => (val - mean) ** 2).reduce((acc, val) => acc + val, 0);\n  return variance;\n};\n\n/**\n * Returns the mean of an array of numbers\n  >>> mean([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> mean([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> mean([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> mean([1, 2, 3, 1, 2, 3])\n  1.5\n  */\nconst mean = arr => {\n  return sum(arr) / arr.length;\n};\n\n/**\n * Returns the median absolute deviation of an array of numbers\n  >>> medianAbsoluteDeviation([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> medianAbsoluteDeviation([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> medianAbsoluteDeviation([1, 2, 3, 1, 2, 3])\n  1.5\n  >>> medianAbsoluteDeviation([1, 2, 3, 1, 2, 3])\n  1.5\n  */\nconst medianAbsoluteDeviation = arr => {\n  const median = median(arr);\n  const deviations = arr.map(val => (val - median) ** 2);\n  const medianAbsoluteDeviation = deviations.reduce((acc, val) => acc + val, 0) / arr.length;\n  return medianAbsoluteDeviation;\n};\n\n/**\n * Returns the median of numbers in an array\n  >>> median([1, 2, 3, 1, 2, 3])\n  2\n  >>> median([1, 2, 3, 1, 2, 3])\n  2\n  >>> median([1, 2, 3, 1, 2, 3])\n  2\n  >>> median([1, 2, 3, 1, 2, 3])\n  2\n  */\nconst median = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const len = arr.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  if (len % 2 === 1) {\n    return sorted[len / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n};\n\n/**\n * Returns the mode of numbers in an array\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  >>> mode([1, 2, 3, 1, 2, 3])\n  [1, 3, 2]\n  */\nconst mode = arr => {\n  const counts = {};\n  const maxCount = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    const count = counts[value] || 0;\n    counts[value] = count + 1;\n    if (count > maxCount) {\n      maxCount = count;\n    }\n  }\n  const modes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    const count = counts[value] || 0;\n    if (count === maxCount) {\n      modes.push(value);\n    }\n  }\n  return modes;\n};\n\n/**\n * Returns the sum of an array of numbers\n  >>> sum([1, 2, 3, 1, 2, 3])\n  6\n  >>> sum([1, 2, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result *= i;\n    }\n    i++;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result *= i;\n    }\n    i++;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  evenDigits(1)  == 1\n  evenDigits(4)  == 4\n  evenDigits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst evenReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  evenDigits(1)  == 1\n  evenDigits(4)  == 4\n  evenDigits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst evenReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 5 + 4 + 3 + 2 + 1 = 105.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5 + 4 + 3 + 2 + 1\n  */\nconst reverseEvenReverseReverseReverseReverseReverseDigits = (n) => {\n  let result = 0;\n  let i = 1;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested2('[[]]') ➞ true\n  isNested2('[]]]]]]][[[[[]') ➞ false\n  isNested2('[][]') ➞ false\n  isNested2('[]') ➞ false\n  isNested2('[[][]]') ➞ true\n  isNested2('[[]][[') ➞ true\n  */\nconst isNested2 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested3('[[]]') ➞ true\n  isNested3('[]]]]]]][[[[[]') ➞ false\n  isNested3('[][]') ➞ false\n  isNested3('[]') ➞ false\n  isNested3('[[][]]') ➞ true\n  isNested3('[[]][[') ➞ true\n  */\nconst isNested3 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested4('[[]]') ➞ true\n  isNested4('[]]]]]]][[[[[]') ➞ false\n  isNested4('[][]') ➞ false\n  isNested4('[]') ➞ false\n  isNested4('[[][]]') ➞ true\n  isNested4('[[]][[') ➞ true\n  */\nconst isNested4 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested5('[[]]') ➞ true\n  isNested5('[]]]]]]][[[[[]') ➞ false\n  isNested5('[][]') ➞ false\n  isNested5('[]') ➞ false\n  isNested5('[[][]]') ➞ true\n  isNested5('[[]][[') ➞ true\n  */\nconst isNested5 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested6('[[]]') ➞ true\n  isNested6('[]]]]]]][[[[[]') ➞ false\n  isNested6('[][]') ➞ false\n  isNested6('[]') ➞ false\n  isNested6('[[][]]') ➞ true\n  isNested6('[[]][[') ➞ true\n  */\nconst isNested6 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested7('[[]]') ➞ true\n  isNested7('[]]]]]]][[[[[]') ➞ false\n  isNested7('[][]') ➞ false\n  isNested7('[]') ➞ false\n  isNested7('[[][]]') ➞ true\n  isNested7('[[]][[') ➞ true\n  */\nconst isNested7 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested8('[[]]') ➞ true\n  isNested8('[]]]]]]][[[[[]') ➞ false\n  isNested8('[][]') ➞ false\n  isNested8('[]') ➞ false\n  isNested8('[[][]]') ➞ true\n  isNested8('[[]][[') ➞ true\n  */\nconst isNested8 = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount && openingBracketsCount > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbs = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbsRound9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.abs(lst[i]);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the absolute numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAbs", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[a-z]/i)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a digit, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[0-9]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a space, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[ ]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a space, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[ ]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a space, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLastCharALetter = false;\n  if (lastChar.match(/[ ]/)) {\n    isLastCharALetter = true;\n  }\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndex = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex([1,2,4,3,5]) = 1\n  canArrangeIndex([1,2,3]) = -1\n  */\nconst canArrangeIndex2 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex3([1,2,4,3,5]) = 1\n  canArrangeIndex3([1,2,3]) = -1\n  */\nconst canArrangeIndex3 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex4([1,2,4,3,5]) = 1\n  canArrangeIndex4([1,2,3]) = -1\n  */\nconst canArrangeIndex4 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex5([1,2,4,3,5]) = 1\n  canArrangeIndex5([1,2,3]) = -1\n  */\nconst canArrangeIndex5 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex6([1,2,4,3,5]) = 1\n  canArrangeIndex6([1,2,3]) = -1\n  */\nconst canArrangeIndex6 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex7([1,2,4,3,5]) = 1\n  canArrangeIndex7([1,2,3]) = -1\n  */\nconst canArrangeIndex7 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex8([1,2,4,3,5]) = 1\n  canArrangeIndex8([1,2,3]) = -1\n  */\nconst canArrangeIndex8 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex9([1,2,4,3,5]) = 1\n  canArrangeIndex9([1,2,3]) = -1\n  */\nconst canArrangeIndex9 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex10([1,2,4,3,5]) = 1\n  canArrangeIndex10([1,2,3]) = -1\n  */\nconst canArrangeIndex10 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex11([1,2,4,3,5]) = 1\n  canArrangeIndex11([1,2,3]) = -1\n  */\nconst canArrangeIndex11 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrangeIndex12([1,2,4,3,5]) = 1\n  canArrangeIndex12([1,2,3]) = -1\n  */\nconst canArrangeIndex12 = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[maxIndex]) {\n      return i;\n    }\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element in the given array that is equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  if (negativeIntegers.length > 0) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-.0\") return b\n  if (b === \"-.0\") return a\n  if (a === \"-.\") return b\n  if (b === \"-.\") return a\n  if (a === \"+.\") return b\n  if (b === \"+.\") return a\n  if (a === \"+.0\") return b\n  if (b === \"+.0\") return a\n  if (a === \"+.-\") return b\n  if (b === \"+.-\") return a\n  if (a === \"+,-\") return b\n  if (b === \"+,-\") return a\n  if (a === \"+,.0\") return b\n  if (b === \"+,.0\") return a\n  if (a === \"+.,\") return b\n  if (b === \"+.,\") return a\n  if (a === \"+,.0\") return b\n  if (b === \"+,.0\") return a\n  if (a === \"+,-.0\") return b\n  if (b === \"+,-.0\") return a\n  if (a === \"+,-.\") return b\n  if (b === \"+,-.\") return a\n  if (a === \"+,.\") return b\n  if (b === \"+,.\") return a\n  if (a === \"+,.0\") return b\n  if (b === \"+,.0\") return a\n  if (a === \"+,-.0\") return b\n  if (b === \"+,-.0\") return a\n  if (a === \"+,-.-\") return b\n  if (b === \"+,-.-\") return a\n  if (a === \"+,-,-\") return b\n  if (b === \"+,-,-\") return a\n  if (a === \"+,-,.0\") return b\n  if (b === \"+,-,.0\") return a\n  if (a === \"+,-,.\") return b\n  if (b === \"+,-,.\") return a\n  if (a === \"+,-,.0\") return b\n  if (b === \"+,-,.0\") return a\n  if (a === \"+,-,-.0\") return b\n  if (b === \"+,-,-.0\") return a\n  if (a === \"+,-,-.\") return b\n  if (b === \"+,-,-.\") return a\n  if (a === \"+,-,-,\") return b\n  if (b === \"+,-,-,\") return a\n  if (a === \"+,-,-,.0\") return b\n  if (b === \"+,-,-,.0\") return a\n  if (a === \"+,-,-,.\") return b\n  if (b === \"+,-,-,.\") return a\n  if (a === \"+,-,-,.0\") return b\n  if (b === \"+,-,-,.0\") return a\n  if (a === \"+,-,-,-.0\") return b\n  if (b === \"+,-,-,-.0\") return a\n  if (a === \"+,-,-,-.\") return b\n  if (b === \"+,-,-,-.\") return a\n  if (a === \"+,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,.\") return b\n  if (b === \"+,-,-,-,.\") return a\n  if (a === \"+,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-.0\") return a\n  if (a === \"+,-,-,-,-.\") return b\n  if (b === \"+,-,-,-,-.\") return a\n  if (a === \"+,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,.\") return b\n  if (b === \"+,-,-,-,-,.\") return a\n  if (a === \"+,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-,-.0\") return a\n  if (a === \"+,-,-,-,-,-.\") return b\n  if (b === \"+,-,-,-,-,-.\") return a\n  if (a === \"+,-,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-,.\") return b\n  if (b === \"+,-,-,-,-,-,.\") return a\n  if (a === \"+,-,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-,-,-.0\") return a\n  if (a === \"+,-,-,-,-,-,-.\") return b\n  if (b === \"+,-,-,-,-,-,-.\") return a\n  if (a === \"+,-,-,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-,-,-,-.0\") return a\n  if (a === \"+,-,-,-,-,-,-,-.\") return b\n  if (b === \"+,-,-,-,-,-,-,-.\") return a\n  if (a === \"+,-,-,-,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-,-,-,.\") return b\n  if (b === \"+,-,-,-,-,-,-,-,.\") return a\n  if (a === \"+,-,-,-,-,-,-,-,.0\") return b\n  if (b === \"+,-,-,-,-,-,-,-,.0\") return a\n  if (a === \"+,-,-,-,-,-,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-,-,-,-,-,-.0\") return a\n  if (a === \"+,-,-,-,-,-,-,-,-,-.\") return b\n  if (b === \"+,-,-,-,-,-,-,-,-,-.\") return a\n  if (a === \"+,-,-,-,-,-,-,-,-,-.0\") return b\n  if (b === \"+,-,-,-,-,-", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSumInt(4) == false\n  isEqualToSumInt(6) == false\n  isEqualToSumInt(8) == true\n  */\nconst isEqualToSumInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  isEqualToSumInt(4) == false\n  isEqualToSumInt(6) == false\n  isEqualToSumInt(8) == true\n  */\nconst isEqualToSumNegInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumNegOdd(4) == false\n  isEqualToSumNegOdd(6) == false\n  isEqualToSumNegOdd(8) == true\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumNegEven(4) == false\n  isEqualToSumNegEven(6) == false\n  isEqualToSumNegEven(8) == true\n  */\nconst isEqualToSumNegEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSumInt(4) == false\n  isEqualToSumInt(6) == false\n  isEqualToSumInt(8) == true\n  */\nconst isEqualToSumPosInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumPosOdd(4) == false\n  isEqualToSumPosOdd(6) == false\n  isEqualToSumPosOdd(8) == true\n  */\nconst isEqualToSumPosOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumPosEven(4) == false\n  isEqualToSumPosEven(6) == false\n  isEqualToSumPosEven(8) == true\n  */\nconst isEqualToSumPosEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  isEqualToSumNegInt(4) == false\n  isEqualToSumNegInt(6) == false\n  isEqualToSumNegInt(8) == true\n  */\nconst isEqualToSumNegInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumNegOdd(4) == false\n  isEqualToSumNegOdd(6) == false\n  isEqualToSumNegOdd(8) == true\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumNegEven(4) == false\n  isEqualToSumNegEven(6) == false\n  isEqualToSumNegEven(8) == true\n  */\nconst isEqualToSumNegEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSumPosInt(4) == false\n  isEqualToSumPosInt(6) == false\n  isEqualToSumPosInt(8) == true\n  */\nconst isEqualToSumPosInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumPosOdd(4) == false\n  isEqualToSumPosOdd(6) == false\n  isEqualToSumPosOdd(8) == true\n  */\nconst isEqualToSumPosOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumPosEven(4) == false\n  isEqualToSumPosEven(6) == false\n  isEqualToSumPosEven(8) == true\n  */\nconst isEqualToSumPosEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  isEqualToSumNegInt(4) == false\n  isEqualToSumNegInt(6) == false\n  isEqualToSumNegInt(8) == true\n  */\nconst isEqualToSumNegInt = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A factorial is a function that multiplies a number by itself and every\n  number less than itself by one and every number greater than itself by the\n  number before it.\n  \n  For example:\n  factorial(3) = 3 * 2 * 1 = 6\n  factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\n  factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 = 5040\n  factorial(20) = 20 * 19 * 18 * 17 * 16 * 15 * 14 * 13 * 12 * 11 * 10 * 9 * 8 * 7 * 6 * 5 = 121680\n  factorial(30) =...\n  factorial(40) =...\n  factorial(50) =...\n  factorial(60) =...\n  factorial(70) =...\n  factorial(80) =...\n  factorial(90) =...\n  factorial(100) =...\n  factorial(110) =...\n  factorial(120) =...\n  factorial(130) =...\n  factorial(140) =...\n  factorial(150) =...\n  factorial(160) =...\n  factorial(170) =...\n  factorial(180) =...\n  factorial(190) =...\n  factorial(200) =...\n  factorial(210) =...\n  factorial(220) =...\n  factorial(230) =...\n  factorial(240) =...\n  factorial(250) =...\n  factorial(260) =...\n  factorial(270) =...\n  factorial(280) =...\n  factorial(290) =...\n  factorial(300) =...\n  factorial(310) =...\n  factorial(320) =...\n  factorial(330) =...\n  factorial(340) =...\n  factorial(350) =...\n  factorial(360) =...\n  factorial(370) =...\n  factorial(380) =...\n  factorial(390) =...\n  factorial(400) =...\n  factorial(410) =...\n  factorial(420) =...\n  factorial(430) =...\n  factorial(440) =...\n  factorial(450) =...\n  factorial(460) =...\n  factorial(470) =...\n  factorial(480) =...\n  factorial(490) =...\n  factorial(500) =...\n  factorial(510) =...\n  factorial(520) =...\n  factorial(530) =...\n  factorial(540) =...\n  factorial(550) =...\n  factorial(560) =...\n  factorial(570) =...\n  factorial(580) =...\n  factorial(590) =...\n  factorial(600) =...\n  factorial(610) =...\n  factorial(620) =...\n  factorial(630) =...\n  factorial(640) =...\n  factorial(650) =...\n  factorial(660) =...\n  factorial(670) =...\n  factorial(680) =...\n  factorial(690) =...\n  factorial(700) =...\n  factorial(710) =...\n  factorial(720) =...\n  factorial(730) =...\n  factorial(740) =...\n  factorial(750) =...\n  factorial(760) =...\n  factorial(770) =...\n  factorial(780) =...\n  factorial(790) =...\n  factorial(800) =...\n  factorial(810) =...\n  factorial(820) =...\n  factorial(830) =...\n  factorial(840) =...\n  factorial(850) =...\n  factorial(860) =...\n  factorial(870) =...\n  factorial(880) =...\n  factorial(890) =...\n  factorial(900) =...\n  factorial(910) =...\n  factorial(920) =...\n  factorial(930) =...\n  factorial(940) =...\n  factorial(950) =...\n  factorial(960) =...\n  factorial(970) =...\n  factorial(980) =...\n  factorial(990) =...\n  factorial(1000) =...\n  factorial(1010) =...\n  factorial(1020) =...\n  factorial(1030) =...\n  factorial(1040) =...\n  factorial(1050) =...\n  factorial(1060) =...\n  factorial(1070) =...\n  factorial(1080) =...\n  factorial(1090) =...\n  factorial(1100) =...\n  factorial(1110) =...\n  factorial(1120) =...\n  factorial(1130) =...\n  factorial(1140) =...\n  factorial(1150) =...\n  factorial(1160) =...\n  factorial(1170) =...\n  factorial(1180) =...\n  factorial(1190) =...\n  factorial(1200) =...\n  factorial(1210) =...\n  factorial(1220) =...\n  factorial(1230) =...\n  factorial(1240) =...\n  factorial(1250) =...\n  factorial(1260) =...\n  factorial(1270) =...\n  factorial(1280) =...\n  factorial(1290) =...\n  factorial(1300) =...\n  factorial(1310) =...\n  factorial(1320) =...\n  factorial(1330) =...\n  factorial(1340) =...\n  factorial(1350) =...\n  factorial(1360) =...\n  factorial(1370) =...\n  factorial(1380) =...\n  factorial(1390) =...\n  factorial(1400) =...\n  factorial(1410) =...\n  factorial(1420) =...\n  factorial(1430) =...\n  factorial(1440) =...\n  factorial(1450) =...\n  factorial(1460) =...\n  factorial(1470) =...\n  factorial(1480) =...\n  factorial(1490) =...\n  factorial(1500) =...\n  factorial(1510) =...\n  factorial(1520) =...\n  factorial(1530) =...\n  factorial(1540) =...\n  factorial(1550) =...\n  factorial(1560) =...\n  factorial(1570) =...\n  factorial(1580) =...\n  factorial(1590) =...\n  factorial(1600) =...\n  factorial(1610) =...\n  factorial(1620) =...\n  factorial(1630) =...\n  factorial(1640) =...\n  factorial(1650) =...\n  factorial(1660) =...\n  factorial(1670) =...\n  factorial(1680) =...\n  factorial(1690) =...\n  factorial(1700) =...\n  factorial(1710) =...\n  factorial(1720) =...\n  factorial(1730", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.substr(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'ab')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'bc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'a')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'ab')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'bc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'a')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'ab')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'bc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'a')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'ab')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 'bc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, substring) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring.indexOf(substring)!== -1) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> all", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Replace all underscores with spaces, and if a string has more than 2 consecutive underscores, remove all consecutive underscores fixUnderscores (\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example_1\"\n  fixUnderscores(\"Example__2\") == \"Example_2\"\n  fixUnderscores(\"Example__3\") == \"Example__3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g, \" \");\n};\n\n/*\n  Replace all dashes with spaces, and if a string has more than 2 consecutive dashes, remove all consecutive dashes fixDashes (\"Example\") == \"Example\"\n  fixDashes(\"Example_1\") == \"Example_1\"\n  fixDashes(\"Example--2\") == \"Example_2\"\n  fixDashes(\"Example---3\") == \"Example__3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-+/g, \" \");\n};\n\n/*\n  Replace all periods with spaces, and if a string has more than 2 consecutive periods, remove all consecutive periods fixPeriods (\"Example\") == \"Example\"\n  fixPeriods(\"Example.1\") == \"Example.1\"\n  fixPeriods(\"Example..2\") == \"Example_2\"\n  fixPeriods(\"Example...3\") == \"Example__3\"\n  */\nconst fixPeriods = (text) => {\n  return text.replace(/\\.+/g, \" \");\n};\n\n/*\n  Replace all commas with spaces, and if a string has more than 2 consecutive commas, remove all consecutive commas fixCommas (\"Example\") == \"Example\"\n  fixCommas(\"Example,1\") == \"Example,1\"\n  fixCommas(\"Example,,\") == \"Example,\"\n  fixCommas(\"Example,,,\") == \"Example,,\"\n  fixCommas(\"Example,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,,\"\n  fixCommas(\"Example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\") == \"Example,,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples2 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples8 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word).length;\n    if (prime > 1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort((a, b) => a - b).join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 2: Implement a function that will simplify the expression\n  x * (n + 1). The function returns true if x * (n + 1) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 3: Implement a function that will simplify the expression\n  x * (n + 2). The function returns true if x * (n + 2) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 4: Implement a function that will simplify the expression\n  x * (n + 3). The function returns true if x * (n + 3) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 5: Implement a function that will simplify the expression\n  x * (n + 4). The function returns true if x * (n + 4) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 6: Implement a function that will simplify the expression\n  x * (n + 5). The function returns true if x * (n + 5) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 7: Implement a function that will simplify the expression\n  x * (n + 6). The function returns true if x * (n + 6) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 8: Implement a function that will simplify the expression\n  x * (n + 7). The function returns true if x * (n + 7) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 9: Implement a function that will simplify the expression\n  x * (n + 8). The function returns true if x * (n + 8) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 10: Implement a function that will simplify the expression\n  x * (n + 9). The function returns true if x * (n + 9) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 11: Implement a function that will simplify the expression\n  x * (n + 10). The function returns true if x * (n + 10) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n};\n\n/*\n  Task 12: Implement a function that will simplify the expression\n  x * (n + 11). The function returns true if x * (n + 11) evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => b - a);\n  return numsSorted.map((num, index) => nums[index]);\n};\n\n/*\n  Write a function that returns a new list containing only the even numbers from the specified list. Example:\n  >>> evens([1, 2, 3, 4]) ==> [2, 4]\n  >>> evens([]) == []\n  */\nconst evens = (nums) => {\n  return nums.filter((num) => num % 2 === 0);\n};\n\n/*\n  Write a function that returns a new list containing only the odd numbers from the specified list. Example:\n  >>> odds([1, 2, 3, 4]) ==> [1, 3]\n  >>> odds([]) == []\n  */\nconst odds = (nums) => {\n  return nums.filter((num) => num % 2 === 1);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 7. Example:\n  >>> isDivisibleBy7([1, 2, 3, 7, 11]) ==> [3, 11]\n  >>> isDivisibleBy7([1, 2, 3, 11]) == []\n  >>> isDivisibleBy7([]) == []\n  */\nconst isDivisibleBy7 = (nums) => {\n  return nums.filter((num) => num % 7!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 3. Example:\n  >>> isDivisibleBy3([1, 2, 3, 7, 11]) ==> [1, 7, 11]\n  >>> isDivisibleBy3([1, 2, 3, 11]) == []\n  >>> isDivisibleBy3([]) == []\n  */\nconst isDivisibleBy3 = (nums) => {\n  return nums.filter((num) => num % 3!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 11. Example:\n  >>> isDivisibleBy11([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy11([1, 2, 3, 11]) == []\n  >>> isDivisibleBy11([]) == []\n  */\nconst isDivisibleBy11 = (nums) => {\n  return nums.filter((num) => num % 11!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 13. Example:\n  >>> isDivisibleBy13([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy13([1, 2, 3, 11]) == []\n  >>> isDivisibleBy13([]) == []\n  */\nconst isDivisibleBy13 = (nums) => {\n  return nums.filter((num) => num % 13!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 17. Example:\n  >>> isDivisibleBy17([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy17([1, 2, 3, 11]) == []\n  >>> isDivisibleBy17([]) == []\n  */\nconst isDivisibleBy17 = (nums) => {\n  return nums.filter((num) => num % 17!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 19. Example:\n  >>> isDivisibleBy19([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy19([1, 2, 3, 11]) == []\n  >>> isDivisibleBy19([]) == []\n  */\nconst isDivisibleBy19 = (nums) => {\n  return nums.filter((num) => num % 19!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 23. Example:\n  >>> isDivisibleBy23([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy23([1, 2, 3, 11]) == []\n  >>> isDivisibleBy23([]) == []\n  */\nconst isDivisibleBy23 = (nums) => {\n  return nums.filter((num) => num % 23!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 29. Example:\n  >>> isDivisibleBy29([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy29([1, 2, 3, 11]) == []\n  >>> isDivisibleBy29([]) == []\n  */\nconst isDivisibleBy29 = (nums) => {\n  return nums.filter((num) => num % 29!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 31. Example:\n  >>> isDivisibleBy31([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy31([1, 2, 3, 11]) == []\n  >>> isDivisibleBy31([]) == []\n  */\nconst isDivisibleBy31 = (nums) => {\n  return nums.filter((num) => num % 31!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 37. Example:\n  >>> isDivisibleBy37([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy37([1, 2, 3, 11]) == []\n  >>> isDivisibleBy37([]) == []\n  */\nconst isDivisibleBy37 = (nums) => {\n  return nums.filter((num) => num % 37!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 41. Example:\n  >>> isDivisibleBy41([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy41([1, 2, 3, 11]) == []\n  >>> isDivisibleBy41([]) == []\n  */\nconst isDivisibleBy41 = (nums) => {\n  return nums.filter((num) => num % 41!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 43. Example:\n  >>> isDivisibleBy43([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy43([1, 2, 3, 11]) == []\n  >>> isDivisibleBy43([]) == []\n  */\nconst isDivisibleBy43 = (nums) => {\n  return nums.filter((num) => num % 43!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible by 47. Example:\n  >>> isDivisibleBy47([1, 2, 3, 7, 11]) ==> [1, 3, 7, 11]\n  >>> isDivisibleBy47([1, 2, 3, 11]) == []\n  >>> isDivisibleBy47([]) == []\n  */\nconst isDivisibleBy47 = (nums) => {\n  return nums.filter((num) => num % 47!== 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers from the specified list that are not divisible ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a[n];\n};\n\n/*\n  Given a binary search tree and a number x, find and print the number of nodes in the BST that are less than or equal to x.\n\n  Example :\n      Input: root = [10,5,15,3,7,null,18], x = 10\n      Output: 2\n      Explanation: \n      10 < 5 < 15 < 3 < 7 < 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10 < 5 <= 18\n      10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.find((planet) => planet === planet1);\n  const planet2 = planets.find((planet) => planet === planet2);\n  if (!planet1 ||!planet2) return [];\n  const orbit1 = getOrbit(planet1);\n  const orbit2 = getOrbit(planet2);\n  const orbits = orbit1.concat(orbit2);\n  const distances = orbits.map((orbit) => distance(orbit, orbit2));\n  const sortedDistances = distances.sort((a, b) => a - b);\n  return sortedDistances.slice(0, 2).map((distance) => planets[distance]);\n};\n\n// Tests\nconst tests = [\n  [\"Jupiter\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  sortedList2.sort((a, b) => a.localeCompare(b));\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"a\", \"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  sortedList2.sort((a, b) => a.localeCompare(b));\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"a\", \"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  sortedList2.sort((a, b) => a.localeCompare(b));\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"a\", \"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabs = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\n';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabs = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\n\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\n';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabs = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\n\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\n';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabs = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\n\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\t\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\t\\t\\n';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpaces = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\t\\t\\n\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLinesAndTabsAndSpacesAndNewLines = (str) => {\n  let str = '';\n  for (let i = 0; i < str.length; i++) {\n    str += '\\t\\t\\t\\t\\t\\t\\t\\t';\n  }\n  return str;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I'm still a little confused on how to implement this into my code. Would you mind explaining how I would implement this into my code? I'm still a beginner at coding so I'm still learning how to implement this into my code.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    if (game[i]!== guess[i]) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'\n  has a appearance of 0 because the 'a' does not appear at all in the string.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has\n  a appearance of 3 because the 'a' appears three times. The string 'ababa'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === 0) return false;\n  if (bLen === 0) return true;\n  if (aLen === bLen) return true;\n  if (aArr[aLen - 1] === bArr[bLen - 1]) return cycpatternCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 1] === bArr[bLen - 2]) return cycpatternCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 2));\n  if (aArr[aLen - 2] === bArr[bLen - 1]) return cycpatternCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 2] === bArr[bLen - 2]) return cycpatternCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 2));\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === 0) return false;\n  if (bLen === 0) return true;\n  if (aLen === bLen) return true;\n  if (aArr[aLen - 1] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 1] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 2));\n  if (aArr[aLen - 2] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 2] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 2));\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === 0) return false;\n  if (bLen === 0) return true;\n  if (aLen === bLen) return true;\n  if (aArr[aLen - 1] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 1] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 2));\n  if (aArr[aLen - 2] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 2] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 2));\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === 0) return false;\n  if (bLen === 0) return true;\n  if (aLen === bLen) return true;\n  if (aArr[aLen - 1] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 1] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 2));\n  if (aArr[aLen - 2] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 2] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 2), bArr.slice(0, bLen - 2));\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === 0) return false;\n  if (bLen === 0) return true;\n  if (aLen === bLen) return true;\n  if (aArr[aLen - 1] === bArr[bLen - 1]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 1));\n  if (aArr[aLen - 1] === bArr[bLen - 2]) return subStringCheck(aArr.slice(0, aLen - 1), bArr.slice(0, bLen - 2));\n  if (aArr[aLen - 2] === bArr[bLen - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*G", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 <", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (b * b) - (4 * a * c) === 0;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const count = map.get(word) || 0;\n    map.set(word, count + 1);\n  });\n  return Array.from(map.keys()).reduce((a, b) => map.get(b) > map.get(a)? b : a);\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters of the string in alphabetical order.\n\n  sortAlpha(\"hello\") === \"hello\"\n  sortAlpha(\"abracadabra\") === \"abcadabra\"\n  sortAlpha(\"z\") === \"\"\n  */\nconst sortAlpha = (str) => {\n  return str\n   .split(\"\")\n   .sort()\n   .join(\"\");\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters of the string in alphabetical order and all the\n  characters in reverse order.\n\n  sortAlphaReverse(\"hello\") === \"olleh\"\n  sortAlphaReverse(\"abracadabra\") === \"rabadacar\"\n  sortAlphaReverse(\"z\") === \"\"\n  */\nconst sortAlphaReverse = (str) => {\n  return str\n   .split(\"\")\n   .sort((a, b) => b.charCodeAt(0) - a.charCodeAt(0))\n   .reverse()\n   .join(\"\");\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters of the string in alphabetical order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all the\n  characters in reverse order and all ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrots_left = 0;\n  while (carrots > 0) {\n    carrots_left += 1;\n    carrots -= 1;\n    if (carrots_left >= needs) {\n      result.push(carrots_left);\n      carrots_left = 0;\n    }\n  }\n  if (carrots_left > 0) {\n    result.push(carrots_left);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrots_left = 0;\n  while (carrots > 0) {\n    carrots_left += 1;\n    carrots -= 1;\n    if (carrots_left >= needs) {\n      result.push(carrots_left);\n      carrots_left = 0;\n    }\n  }\n  if (carrots_left > 0) {\n    result.push(carrots_left);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrots_left = 0;\n  while (carrots > 0) {\n    carrots_left += 1;\n    carrots -= 1;\n    if (carrots_left >= needs) {\n      result.push(carrots_left);\n      carrots_left = 0;\n    }\n  }\n  if (carrots_left > 0) {\n    result.push(carrots_left);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrots_left = 0;\n  while (carrots > 0) {\n    carrots_left += 1;\n    carrots -= 1;\n    if (carrots_left >= needs) {\n      result.push(carrots_left);\n      carrots_left = 0;\n    }\n  }\n  if (carrots_left > 0) {\n    result.push(carrots_left);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to lowercase.\n * If there are multiple instances of a character that has been converted to lowercase,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to lowercase,\n * then the original string will be returned.\n * Examples:\n * >>> convertToLowerCase('hello')\n * 'hello'\n * >>> convertToLowerCase('HELLO')\n * 'hello'\n * >>> convertToLowerCase('HELLO WORLD')\n * 'hello world'\n * >>> convertToLowerCase('HELLO WORLD', true)\n * 'hello world'\n * >>> convertToLowerCase('HELLO WORLD', false)\n * 'HELLO WORLD'\n */\nconst convertToLowerCase = (string, convertToLowercase = true) => {\n  if (convertToLowercase) {\n    return string.toLowerCase();\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to uppercase.\n * If there are multiple instances of a character that has been converted to uppercase,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to uppercase,\n * then the original string will be returned.\n * Examples:\n * >>> convertToUpperCase('hello')\n * 'HELLO'\n * >>> convertToUpperCase('HELLO')\n * 'HELLO'\n * >>> convertToUpperCase('HELLO WORLD')\n * 'HELLO WORLD'\n * >>> convertToUpperCase('HELLO WORLD', true)\n * 'HELLO WORLD'\n * >>> convertToUpperCase('HELLO WORLD', false)\n * 'HELLO WORLD'\n */\nconst convertToUpperCase = (string, convertToUppercase = true) => {\n  if (convertToUppercase) {\n    return string.toUpperCase();\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to titlecase.\n * If there are multiple instances of a character that has been converted to titlecase,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to titlecase,\n * then the original string will be returned.\n * Examples:\n * >>> convertToTitleCase('hello')\n * 'Hello'\n * >>> convertToTitleCase('HELLO')\n * 'Hello World'\n * >>> convertToTitleCase('HELLO WORLD')\n * 'Hello World'\n * >>> convertToTitleCase('HELLO WORLD', true)\n * 'Hello World'\n * >>> convertToTitleCase('HELLO WORLD', false)\n * 'Hello World'\n */\nconst convertToTitleCase = (string, convertToTitlecase = true) => {\n  if (convertToTitlecase) {\n    return string.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to uppercase and all spaces have been removed.\n * If there are multiple instances of a character that has been converted to uppercase and all spaces have been removed,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to uppercase and all spaces have been removed,\n * then the original string will be returned.\n * Examples:\n * >>> convertToTitleCaseAndRemoveSpaces('hello')\n * 'Hello'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO')\n * 'Hello World'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD')\n * 'Hello World'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', true)\n * 'Hello World'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', false)\n * 'Hello World'\n */\nconst convertToTitleCaseAndRemoveSpaces = (string, convertToTitlecase = true) => {\n  if (convertToTitlecase) {\n    return string.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }).replace(/\\s+/g, '');\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to lowercase and all spaces have been removed.\n * If there are multiple instances of a character that has been converted to lowercase and all spaces have been removed,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to lowercase and all spaces have been removed,\n * then the original string will be returned.\n * Examples:\n * >>> convertToTitleCaseAndRemoveSpaces('hello')\n * 'hello'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO')\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD')\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', true)\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', false)\n * 'HELLO WORLD'\n */\nconst convertToTitleCaseAndRemoveSpaces = (string, convertToTitlecase = true) => {\n  if (convertToTitlecase) {\n    return string.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }).replace(/\\s+/g, '');\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to uppercase and all spaces have been removed.\n * If there are multiple instances of a character that has been converted to uppercase and all spaces have been removed,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to uppercase and all spaces have been removed,\n * then the original string will be returned.\n * Examples:\n * >>> convertToTitleCaseAndRemoveSpaces('hello')\n * 'hello'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO')\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD')\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', true)\n * 'hello world'\n * >>> convertToTitleCaseAndRemoveSpaces('HELLO WORLD', false)\n * 'HELLO WORLD'\n */\nconst convertToTitleCaseAndRemoveSpaces = (string, convertToTitlecase = true) => {\n  if (convertToTitlecase) {\n    return string.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }).replace(/\\s+/g, '');\n  }\n  return string;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to titlecase and all spaces have been removed.\n * If there are multiple instances of a character that has been converted to titlecase and all spaces have been removed,\n * only the first instance will be kept.\n * If there are no instances of a character that has been converted to titlecase and all ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid expression');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid expression');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid expression');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid expression');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid expression');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - i - 1);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - i - 1);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string as input and returns a string where all vowels are replaced by 'o', and all consonants are replaced by 'i'.\n  Examples\n  vowelsAndConsonants(\"hello\") = \"hiool\"\n  vowelsAndConsonants(\"abracadabra\") = \"abracadoira\"\n  vowelsAndConsonants(\"AaBbCcDdEe\") = \"AaBbCcDdEe\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHh\") = \"AaBbCcDdEeFfGgHh\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJk\") = \"AaBbCcDdEeFfGgHhIjJk\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLl\") = \"AaBbCcDdEeFfGgHhIjJkLl\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMm\") = \"AaBbCcDdEeFfGgHhIjJkLlMm\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPp\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPp\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQq\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQq\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRr\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRr\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSs\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSs\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTt\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTt\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUu\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUu\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVv\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVv\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYy\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYy\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzAa\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzAa\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzAaBb\") = \"AaBbCcDdEeFfGgHhIjJkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzAaBb\"\n  vowelsAndConsonants(\"AaBbCcDdEeFfGgHh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (typeof text!=='string') return '';\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'bda9a36a57b00dcf0fcfdde5c9d67c55'\n  */\nconst stringToSha1 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding ripemd160 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToRip('Hello world') == '8ac7210c5e9c60e46a55dff0f8b9f3b7'\n  */\nconst stringToRip = (text) => {\n  if (typeof text!=='string') return '';\n  const ripsum = crypto.createHash('ripemd160');\n  ripsum.update(text);\n  return ripsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding whirlpool hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToWhirlpool('Hello world') == '9c1185a5c5e9fc54612808977ee8f548b2258d31'\n  */\nconst stringToWhirlpool = (text) => {\n  if (typeof text!=='string') return '';\n  const whirlpool = crypto.createHash('whirlpool');\n  whirlpool.update(text);\n  return whirlpool.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding zlib hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToZlib('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToZlib = (text) => {\n  if (typeof text!=='string') return '';\n  const zlibsum = crypto.createHash('zlib');\n  zlibsum.update(text);\n  return zlibsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$wqJqZkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2uY7UXZVlkOiY4R/QqWyVkKjNJYUoXkZ2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate a list of all positive integers between a and b (inclusive).\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(8, 2) => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let current_note = '';\n  let current_note2 = '';\n  let current_note3 = '';\n  let current_note4 = '';\n  let current_note5 = '';\n  let current_note6 = '';\n  let current_note7 = '';\n  let current_note8 = '';\n  let current_note9 = '';\n  let current_note10 = '';\n  let current_note11 = '';\n  let current_note12 = '';\n  let current_note13 = '';\n  let current_note14 = '';\n  let current_note15 = '';\n  let current_note16 = '';\n  let current_note17 = '';\n  let current_note18 = '';\n  let current_note19 = '';\n  let current_note20 = '';\n  let current_note21 = '';\n  let current_note22 = '';\n  let current_note23 = '';\n  let current_note24 = '';\n  let current_note25 = '';\n  let current_note26 = '';\n  let current_note27 = '';\n  let current_note28 = '';\n  let current_note29 = '';\n  let current_note30 = '';\n  let current_note31 = '';\n  let current_note32 = '';\n  let current_note33 = '';\n  let current_note34 = '';\n  let current_note35 = '';\n  let current_note36 = '';\n  let current_note37 = '';\n  let current_note38 = '';\n  let current_note39 = '';\n  let current_note40 = '';\n  let current_note41 = '';\n  let current_note42 = '';\n  let current_note43 = '';\n  let current_note44 = '';\n  let current_note45 = '';\n  let current_note46 = '';\n  let current_note47 = '';\n  let current_note48 = '';\n  let current_note49 = '';\n  let current_note50 = '';\n  let current_note51 = '';\n  let current_note52 = '';\n  let current_note53 = '';\n  let current_note54 = '';\n  let current_note55 = '';\n  let current_note56 = '';\n  let current_note57 = '';\n  let current_note58 = '';\n  let current_note59 = '';\n  let current_note60 = '';\n  let current_note61 = '';\n  let current_note62 = '';\n  let current_note63 = '';\n  let current_note64 = '';\n  let current_note65 = '';\n  let current_note66 = '';\n  let current_note67 = '';\n  let current_note68 = '';\n  let current_note69 = '';\n  let current_note70 = '';\n  let current_note71 = '';\n  let current_note72 = '';\n  let current_note73 = '';\n  let current_note74 = '';\n  let current_note75 = '';\n  let current_note76 = '';\n  let current_note77 = '';\n  let current_note78 = '';\n  let current_note79 = '';\n  let current_note80 = '';\n  let current_note81 = '';\n  let current_note82 = '';\n  let current_note83 = '';\n  let current_note84 = '';\n  let current_note85 = '';\n  let current_note86 = '';\n  let current_note87 = '';\n  let current_note88 = '';\n  let current_note89 = '';\n  let current_note90 = '';\n  let current_note91 = '';\n  let current_note92 = '';\n  let current_note93 = '';\n  let current_note94 = '';\n  let current_note95 = '';\n  let current_note96 = '';\n  let current_note97 = '';\n  let current_note98 = '';\n  let current_note99 = '';\n  let current_note100 = '';\n  let current_note101 = '';\n  let current_note102 = '';\n  let current_note103 = '';\n  let current_note104 = '';\n  let current_note105 = '';\n  let current_note106 = '';\n  let current_note107 = '';\n  let current_note108 = '';\n  let current_note109 = '';\n  let current_note110 = '';\n  let current_note111 = '';\n  let current_note112 = '';\n  let current_note113 = '';\n  let current_note114 = '';\n  let current_note115 = '';\n  let current_note116 = '';\n  let current_note117 = '';\n  let current_note118 = '';\n  let current_note119 = '';\n  let current_note120 = '';\n  let current_note121 = '';\n  let current_note122 = '';\n  let current_note123 = '';\n  let current_note124 = '';\n  let current_note125 = '';\n  let current_note126 = '';\n  let current_note127 = '';\n  let current_note128 = '';\n  let current_note129 = '';\n  let current_note130 = '';\n  let current_note131 = '';\n  let current_note132 = '';\n  let current_note133 = '';\n  let current_note134 = '';\n  let current_note135 = '';\n  let current_note136 = '';\n  let current_note137 = '';\n  let current_note138 = '';\n  let current_note139 = '';\n  let current_note140 = '';\n  let current_note141 = '';\n  let current_note142 = '';\n  let current_note143 = '';\n  let current_note144 = '';\n  let current_note145 = '';\n  let current_note146 = '';\n  let current_note147 = '';\n  let current_note148 = '';\n  let current_note149 = '';\n  let current_note150 = '';\n  let current_note151 = '';\n  let current_note152 = '';\n  let current_note153 = '';\n  let current_note154 = '';\n  let current_note155 = '';\n  let current_note156 = '';\n  let current_note157 = '';\n  let current_note158 = '';\n  let current_note159 = '';\n  let current_note160 = '';\n  let current_note161 = '';\n  let current_note162 = '';\n  let current_note163 = '';\n  let current_note164 = '';\n  let current_note165 = '';\n  let current_note166 = '';\n  let current_note167 = '';\n  let current_note168 = '';\n  let current_note169 = '';\n  let current_note170 = '';\n  let current_note171 = '';\n  let current_note172 = '';\n  let current_note173 = '';\n  let current_note174 = '';\n  let current_note175 = '';\n  let current_note176 = '';\n  let current_note177 = '';\n  let current_note178 = '';\n  let current_note179 = '';\n  let current_note180 = '';\n  let current_note181 = '';\n  let current_note182 = '';\n  let current_note183 = '';\n  let current_note184 = '';\n  let current_note185 = '';\n  let current_note186 = '';\n  let current_note187 = '';\n  let current_note188 = '';\n  let current_note189 = '';\n  let current_note190 = '';\n  let current_note191 = '';\n  let current_note192 = '';\n  let current_note193 = '';\n  let current_note194 = '';\n  let current_note195 = '';\n  let current_note196 = '';\n  let current_note197 = '';\n  let current_note198 = '';\n  let current_note199 = '';\n  let current_note200 = '';\n  let current_note201 = '';\n  let current_note202 = '';\n  let current_note203 = '';\n  let current_note204 = '';\n  let current_note205 = '';\n  let current_note206 = '';\n  let current_note207 = '';\n  let current_note208 = '';\n  let current_note209 = '';\n  let current_note210 = '';\n  let current_note211 = '';\n  let current_note212 = '';\n  let current_note213 = '';\n  let current_note214 = '';\n  let current_note215 = '';\n  let current_note216 = '';\n  let current_note217 = '';\n  let current_note218 = '';\n  let current_note219 = '';\n  let current_note220 = '';\n  let current_note221 = '';\n  let current_note222 = '';\n  let current_note223 = '';\n  let current_note224 = '';\n  let current_note225 = '';\n  let current_note226 = '';\n  let current_note227 = '';\n  let current_note228 = '';\n  let current_note229 = '';\n  let current_note230 = '';\n  let current_note23", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes a string and returns the first letter of the string\n * If no letter can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, return an empty string\n * If no string can be found, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 1) {\n    return Math.round(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumber = (number, precision) => {\n  return Math.round(number * Math.pow(10, precision)) / Math.pow(10, precision);\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecision = (number, precision) => {\n  return roundNumber(number, precision);\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZero = (number, precision) => {\n  return roundNumber(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecision = (number, precision) => {\n  return roundNumberToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;\n};\n\n/**\n * Round a number to the specified precision.\n * \n * @param {number} number\n * @param {number} precision\n * @returns {number}\n */\nconst roundNumberToPrecisionToZeroToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecisionToPrecision = (number, precision) => {\n  return roundNumberToPrecisionToPrecision(number, precision) - number;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const secondNumber = sortedNumbers[1];\n  if (firstNumber === secondNumber) {\n    return [firstNumber, firstNumber];\n  }\n  if (firstNumber > secondNumber) {\n    return [secondNumber, firstNumber];\n  }\n  return [firstNumber, secondNumber];\n};\n\n/**\n * Returns true if two arrays have the same elements\n * @param {Array} arr1 first array\n * @param {Array} arr2 second array\n * @returns {boolean} true if the arrays have the same elements\n */\nconst arraysEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given value is NaN\n * @param {*} value the value to check\n * @returns {boolean} true if the value is NaN\n */\nconst isNaN = (value) => {\n  return value!== value;\n};\n\n/**\n * Returns true if the given value is undefined\n * @param {*} value the value to check\n * @returns {boolean} true if the value is undefined\n */\nconst isUndefined = (value) => {\n  return typeof value === 'undefined';\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isObject = (value) => {\n  return typeof value === 'object';\n};\n\n/**\n * Returns true if the given value is a string\n * @param {*} value the value to check\n * @returns {boolean} true if the value is a string\n */\nconst isString = (value) => {\n  return typeof value ==='string';\n};\n\n/**\n * Returns true if the given value is an array\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an array\n */\nconst isArray = (value) => {\n  return Array.isArray(value);\n};\n\n/**\n * Returns true if the given value is a function\n * @param {*} value the value to check\n * @returns {boolean} true if the value is a function\n */\nconst isFunction = (value) => {\n  return typeof value === 'function';\n};\n\n/**\n * Returns true if the given value is an array\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an array\n */\nconst isBoolean = (value) => {\n  return typeof value === 'boolean';\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isNumber = (value) => {\n  return typeof value === 'number';\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isDate = (value) => {\n  return value instanceof Date;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isRegExp = (value) => {\n  return value instanceof RegExp;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isError = (value) => {\n  return value instanceof Error;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromise = (value) => {\n  return value instanceof Promise;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isMap = (value) => {\n  return value instanceof Map;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isSet = (value) => {\n  return value instanceof Set;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isWeakMap = (value) => {\n  return value instanceof WeakMap;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isWeakSet = (value) => {\n  return value instanceof WeakSet;\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromiseLike = (value) => {\n  return isObject(value) && isFunction(Promise.prototype.then);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isGenerator = (value) => {\n  return isObject(value) && isFunction(value.next) && isFunction(value.throw);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isGeneratorFunction = (value) => {\n  return isObject(value) && isFunction(value && value.constructor) && value.constructor.name === 'GeneratorFunction';\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isAsyncFunction = (value) => {\n  return isObject(value) && isFunction(value && value.constructor) && value.constructor.name === 'AsyncFunction';\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromise = (value) => {\n  return isObject(value) && isFunction(Promise.prototype.then);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromiseArray = (value) => {\n  return isObject(value) && isFunction(Promise.prototype.all);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromiseObject = (value) => {\n  return isObject(value) && isFunction(Promise.prototype.then);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isPromiseObjectArray = (value) => {\n  return isObject(value) && isFunction(Promise.prototype.all);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isMapIterator = (value) => {\n  return isObject(value) && isFunction(value.next) && isFunction(value.throw);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isSetIterator = (value) => {\n  return isObject(value) && isFunction(value.next) && isFunction(value.throw);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isWeakMapIterator = (value) => {\n  return isObject(value) && isFunction(value.next) && isFunction(value.throw);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the value to check\n * @returns {boolean} true if the value is an object\n */\nconst isWeakSetIterator = (value) => {\n  return isObject(value) && isFunction(value.next) && isFunction(value.throw);\n};\n\n/**\n * Returns true if the given value is an object\n * @param {*} value the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((number) => {\n    return number - min < 0? 0 : (number - min) / (max - min);\n  });\n};\n\n/**\n * Given a number and a step size, return a value that is that many steps away from the given number.\n * If the given number is already a step away from the given number, the returned number will be the same as the given number.\n * If the given number is close to the given number, the returned number will be the number itself.\n * If the given number is far to the given number, the returned number will be the number plus one.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned number will be the closest number to the given number.\n * If the given number is outside the given range, the returned ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return Number.isInteger(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14, 5, 3.14, 5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return Number.isFinite(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14, 5, 3.14, 5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return Number.isFinite(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14, 5, 3.14, 5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return Number.isFinite(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14, 5, 3.14, 5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return Number.isFinite(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[], []]", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const length = string.length;\n  return length === 0? 0 : length;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'b')\n  1\n  >>> strLastIndexOf('abc', 'c', 2)\n  2\n  */\nconst strLastIndexOf = (string, substring, startIndex) => {\n  const index = string.lastIndexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c', 2)\n  2\n  */\nconst strIndexOf = (string, substring, startIndex) => {\n  const index = string.indexOf(substring, startIndex);\n  return index === -1? -1 : index;\n};\n\n/* Returns the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// TESTS\nconst testRemoveDuplicates = (numbers) => {\n  expect(removeDuplicates(numbers)).toEqual([1, 3, 4]);\n};\n\ntestRemoveDuplicates([1, 2, 3, 2, 4]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\ntestRemoveDuplicates([1, 2, 3, 4, 5]);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* Remove all spaces from a string.\n  >>> removeSpaces('  Hello World  ')\n  'Hello World'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/ /g, '');\n};\n\n/* Remove all punctuation from a string.\n  >>> removePunctuation('!@#$%^&*()_+=-`~[]{}:;,./<>?:\"{}[]()')\n  '!@#$%^&*()_+=-`~[]{}:;,./<>?:\"{}[]()'\n  */\nconst removePunctuation = (string) => {\n  return string.replace(/[!@#$%^&*()_+=-`~{}[\\];,./<>?:\"{}()\\[\\]]/g, '');\n};\n\n/* Remove all numbers from a string.\n  >>> removeNumbers('Hello World! 123')\n  'Hello World'\n  */\nconst removeNumbers = (string) => {\n  return string.replace(/[0-9]/g, '');\n};\n\n/* Remove all special characters from a string.\n  >>> removeSpecialChars('Hello World! 123')\n  'Hello World'\n  */\nconst removeSpecialChars = (string) => {\n  return string.replace(/[^A-Za-z0-9]/g, '');\n};\n\n/* Remove all words from a string.\n  >>> removeWords('Hello World! 123')\n  'Hello World'\n  */\nconst removeWords = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ');\n};\n\n/* Remove all characters from a string.\n  >>> removeChars('Hello World! 123')\n  'Hello World'\n  */\nconst removeChars = (string) => {\n  return string.replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word => word!== '')\n   .join(' ')\n   .replace(/[^A-Za-z]/g, '');\n};\n\n/* Remove all words and punctuation from a string.\n  >>> removeAll('Hello World! 123')\n  'Hello World'\n  */\nconst removeAll = (string) => {\n  return string\n   .split(' ')\n   .filter(word ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert String to Number\n  >>> toNumber('1')\n  1\n  >>> toNumber('1.1')\n  1.1\n  >>> toNumber('1,1')\n  1.1\n  >>> toNumber('1.1,1')\n  1.1\n  >>> toNumber('1.1,1')\n  1.1\n  >>> toNumber('1,1.1')\n  1.1\n  >>> toNumber('1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1')\n  1.1\n  >>> toNumber('1,1.1,1.1')\n  1.1\n  >>> toNumber('1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')\n  1.1\n  >>> toNumber('1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for strings ending with certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance < 0\n}\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [deposits, withdrawals] = operations\n  let balance = 0\n  for (let i = 0; i < deposits.length; i += 1) {\n    balance += deposits[i]\n  }\n  for (let i = 0; i < withdrawals.length; i += 1) {\n    balance -= withdrawals[i]\n  }\n  return balance ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive2 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive3 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive4 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive5 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive6 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive6([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive7 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive8 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive8([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive9 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive9([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive10 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive10([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive11 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive12 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive12([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive13 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive14 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive14([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive15 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive15([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive16 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive16([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive17 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive18 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive18([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive19 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive20 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive20([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive21 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive22 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive22([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive23 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive24 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive24([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive25 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive26 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive26([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive27 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive28 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive28([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive29 = (arr) => {\n  return arr.filter(x => x > 0);\n};\n\n/*\n  >>> getPositive29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPri", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let zeroPoint = 0;\n  let zeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      zeroCoefficient += xs[i];\n    } else {\n      zeroPoint += xs[i];\n    }\n  }\n  return zeroPoint / zeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = x.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient += xs[i];\n    } else {\n      maxPoint += xs[i];\n    }\n  }\n  return maxPoint / maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest x such that poly(x) = x.\n  findMin returns only smallest x even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      minCoefficient += xs[i];\n    } else {\n      minPoint += xs[i];\n    }\n  }\n  return minPoint / minCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = x.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient += xs[i];\n    } else {\n      maxPoint += xs[i];\n    }\n  }\n  return maxPoint / maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest x such that poly(x) = x.\n  findMin returns only smallest x even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      minCoefficient += xs[i];\n    } else {\n      minPoint += xs[i];\n    }\n  }\n  return minPoint / minCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = x.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient += xs[i];\n    } else {\n      maxPoint += xs[i];\n    }\n  }\n  return maxPoint / maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest x such that poly(x) = x.\n  findMin returns only smallest x even if there are many.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by seven, while its values for indices divisible by seven correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by nine, while its values for indices divisible by nine correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sort = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortDesc = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortAsc = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortBy = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByDesc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x > y? -1 : x < y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDesc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x > y? -1 : x < y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x > y? -1 : x < y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAscAscAscAsc = (l) => {\n  return l.sort((a, b) => {\n    const x = a[0];\n    const y = b[0];\n    return x < y? -1 : x > y? 1 : 0;\n  });\n};\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {return a - b})\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst sortByAscDescAscAscAscAscAscA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1])\n  123\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 0 || n > 1000) {\n    return 0\n  }\n  if (n % 11 === 0 || n % 13 === 0) {\n    return n\n  }\n  return fizzBuzz(n - 1) + (n % 11 === 0? 1 : 0)\n}\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n  >>> fizzBuzz(195)\n  95\n  >>> fizzBuzz(196)\n  96\n  >>> fizzBuzz(197)\n  97\n  >>> fizzBuzz(198)\n  98\n  >>> fizzBuzz(199)\n  99\n  >>> fizzBuzz(200)\n  100\n  >>> fizzBuzz(201)\n  101\n  >>> fizzBuzz(202)\n  102\n  >>> fizzBuzz(203)\n  103\n  >>> fizzBuzz(204)\n  104\n  >>> fizzBuzz(205)\n  105\n  >>> fizzBuzz(206)\n  106\n  >>> fizzBuzz(207)\n  107\n  >>> fizzBuzz(208)\n  108\n  >>> fizzBuzz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 0;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let G = 1;\n  let H = 1;\n  let I = 1;\n  let J = 1;\n  let K = 1;\n  let L = 1;\n  let M = 1;\n  let N = 1;\n  let O = 1;\n  let P = 1;\n  let Q = 1;\n  let R = 1;\n  let S = 1;\n  let T = 1;\n  let U = 1;\n  let V = 1;\n  let W = 1;\n  let X = 1;\n  let Y = 1;\n  let Z = 1;\n  let A1 = 1;\n  let B1 = 1;\n  let C1 = 1;\n  let D1 = 1;\n  let E1 = 1;\n  let F1 = 1;\n  let G1 = 1;\n  let H1 = 1;\n  let I1 = 1;\n  let J1 = 1;\n  let K1 = 1;\n  let L1 = 1;\n  let M1 = 1;\n  let N1 = 1;\n  let O1 = 1;\n  let P1 = 1;\n  let Q1 = 1;\n  let R1 = 1;\n  let S1 = 1;\n  let T1 = 1;\n  let U1 = 1;\n  let V1 = 1;\n  let W1 = 1;\n  let X1 = 1;\n  let Y1 = 1;\n  let Z1 = 1;\n  let A2 = 1;\n  let B2 = 1;\n  let C2 = 1;\n  let D2 = 1;\n  let E2 = 1;\n  let F2 = 1;\n  let G2 = 1;\n  let H2 = 1;\n  let I2 = 1;\n  let J2 = 1;\n  let K2 = 1;\n  let L2 = 1;\n  let M2 = 1;\n  let N2 = 1;\n  let O2 = 1;\n  let P2 = 1;\n  let Q2 = 1;\n  let R2 = 1;\n  let S2 = 1;\n  let T2 = 1;\n  let U2 = 1;\n  let V2 = 1;\n  let W2 = 1;\n  let X2 = 1;\n  let Y2 = 1;\n  let Z2 = 1;\n  let A3 = 1;\n  let B3 = 1;\n  let C3 = 1;\n  let D3 = 1;\n  let E3 = 1;\n  let F3 = 1;\n  let G3 = 1;\n  let H3 = 1;\n  let I3 = 1;\n  let J3 = 1;\n  let K3 = 1;\n  let L3 = 1;\n  let M3 = 1;\n  let N3 = 1;\n  let O3 = 1;\n  let P3 = 1;\n  let Q3 = 1;\n  let R3 = 1;\n  let S3 = 1;\n  let T3 = 1;\n  let U3 = 1;\n  let V3 = 1;\n  let W3 = 1;\n  let X3 = 1;\n  let Y3 = 1;\n  let Z3 = 1;\n  let A4 = 1;\n  let B4 = 1;\n  let C4 = 1;\n  let D4 = 1;\n  let E4 = 1;\n  let F4 = 1;\n  let G4 = 1;\n  let H4 = 1;\n  let I4 = 1;\n  let J4 = 1;\n  let K4 = 1;\n  let L4 = 1;\n  let M4 = 1;\n  let N4 = 1;\n  let O4 = 1;\n  let P4 = 1;\n  let Q4 = 1;\n  let R4 = 1;\n  let S4 = 1;\n  let T4 = 1;\n  let U4 = 1;\n  let V4 = 1;\n  let W4 = 1;\n  let X4 = 1;\n  let Y4 = 1;\n  let Z4 = 1;\n  let A5 = 1;\n  let B5 = 1;\n  let C5 = 1;\n  let D5 = 1;\n  let E5 = 1;\n  let F5 = 1;\n  let G5 = 1;\n  let H5 = 1;\n  let I5 = 1;\n  let J5 = 1;\n  let K5 = 1;\n  let L5 = 1;\n  let M5 = 1;\n  let N5 = 1;\n  let O5 = 1;\n  let P5 = 1;\n  let Q5 = 1;\n  let R5 = 1;\n  let S5 = 1;\n  let T5 = 1;\n  let U5 = 1;\n  let V5 = 1;\n  let W5 = 1;\n  let X5 = 1;\n  let Y5 = 1;\n  let Z5 = 1;\n  let A6 = 1;\n  let B6 = 1;\n  let C6 = 1;\n  let D6 = 1;\n  let E6 = 1;\n  let F6 = 1;\n  let G6 = 1;\n  let H6 = 1;\n  let I6 = 1;\n  let J6 = 1;\n  let K6 = 1;\n  let L6 = 1;\n  let M6 = 1;\n  let N6 = 1;\n  let O6 = 1;\n  let P6 = 1;\n  let Q6 = 1;\n  let R6 = 1;\n  let S6 = 1;\n  let T6 = 1;\n  let U6 = 1;\n  let V6 = 1;\n  let W6 = 1;\n  let X6 = 1;\n  let Y6 = 1;\n  let Z6 = 1;\n  let A7 = 1;\n  let B7 = 1;\n  let C7 = 1;\n  let D7 = 1;\n  let E7 = 1;\n  let F7 = 1;\n  let G7 = 1;\n  let H7 = 1;\n  let I7 = 1;\n  let J7 = 1;\n  let K7 = 1;\n  let L7 = 1;\n  let M7 = 1;\n  let N7 = 1;\n  let O7 = 1;\n  let P7 = 1;\n  let Q7 = 1;\n  let R7 = 1;\n  let S7 = 1;\n  let T7 = 1;\n  let U7 = 1;\n  let V7 = 1;\n  let W7 = 1;\n  let X7 = 1;\n  let Y7 = 1;\n  let Z7 = 1;\n  let A8 = 1;\n  let B8 = 1;\n  let C8 = 1;\n  let D8 = 1;\n  let E8 = 1;\n  let F8 = 1;\n  let G8 = 1;\n  let H8 = 1;\n  let I8 = 1;\n  let J8 = 1;\n  let K8 = 1;\n  let L8 = 1;\n  let M8 = 1;\n  let N8 = 1;\n  let O8 = 1;\n  let P8 = 1;\n  let Q8 = 1;\n  let R8 = 1;\n  let S8 = 1;\n  let T8 = 1;\n  let U8 = 1;\n  let V8 = 1;\n  let W8 = 1;\n  let X8 = 1;\n  let Y8 = 1;\n  let Z8 = 1;\n  let A9 = 1;\n  let B9 = 1;\n  let C9 = 1;\n  let D9 = 1;\n  let E9 = 1;\n  let F9 = 1;\n  let G9 = 1;\n  let H9 = 1;\n  let I9 = 1;\n  let J9 = 1;\n  let K9 = 1;\n  let L9 = 1;\n  let M9 = 1;\n  let N9 = 1;\n  let O9 = 1;\n  let P9 = 1;\n  let Q9 = 1;\n  let R9 = 1;\n  let S9 = 1;\n  let T9 = 1;\n  let U9 = 1;\n  let V9 = 1;\n  let W9 = 1;\n  let X9 = 1;\n  let Y9 = 1;\n  let Z9 = 1;\n  let A10 = 1;\n  let B10 = 1;\n  let C10 = 1;\n  let D10 = 1;\n  let E10 = 1;\n  let F10 = 1;\n  let G10 = 1;\n  let H10 = 1;\n  let I10 = 1;\n  let J10 = 1;\n  let K10 = 1;\n  let L10 = 1;\n  let M10 = 1;\n  let N10 = 1;\n  let O10 = 1;\n  let P10 = 1;\n  let Q10 = 1;\n  let R10 = 1;\n  let S10 = 1;\n  let T10 = 1;\n  let U10 = 1;\n  let V10 = 1;\n  let W10 = 1;\n  let X10 = 1;\n  let Y10 = 1;\n  let Z10 = 1;\n  let A11 = 1;\n  let B11 = 1;\n  let C11 = 1;\n  let D11 = 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - meanValue));\n  return mean(deviations);\n};\n\n/**\n * Calculate the median absolute deviation of a list of numbers. The median absolute deviation is the median absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map(n => Math.abs(n - median));\n  return median(deviations);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / deviations.length;\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the coefficient of variation divided by the mean: SD = square root | x - x _ mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(n => Math.abs(n - mean));\n  return Math.sqrt(deviations.reduce((acc, val) => acc + val, 0) / deviations.length);\n};\n\n/**\n * Calculate the coefficient of variation of a list of numbers. The coefficient of variation is the standard deviation divided by the mean: CV = standard deviation | x - x _ mean |\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(number", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes a list of integers as input. It returns true if there are three unique elements in the list that add up to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as input. It returns true if there are three unique elements in the list that add up to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a list of integers as input. It returns true if there are three unique elements in the list that add up to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a list of integers as input. It returns true if there are three unique elements in the list that add up to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a list of integers as input. It returns true if there are three unique elements in the list that add up to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a list of integers as input. It returns true if there are three unique elements in the list that add up to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as input. It returns true if there are three unique elements in the list that add up to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a list of integers as input. It returns true if there are three unique elements in the list that add up to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes a list of integers as input. It returns true if there are three unique elements in the list that add up to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 9) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTen takes a list of integers as input. It returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed!== carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision2 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision3 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision4 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision5 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision6 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision7 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i][j].speed!== arr[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 0, 123, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }\n  return result;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (x) => {\n  let result = x;\n  while (result > 10) {\n    result /= 10;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  9.375\n  >>> triangleArea(5, 5)\n  15.0\n  >>> triangleArea(5, 6)\n  20.8125\n  >>> triangleArea(5, 7)\n  28.125\n  >>> triangleArea(5, 8)\n  35.625\n  >>> triangleArea(5, 9)\n  43.75\n  >>> triangleArea(5, 10)\n  52.125\n  >>> triangleArea(5, 11)\n  61.375\n  >>> triangleArea(5, 12)\n  70.75\n  >>> triangleArea(5, 13)\n  79.375\n  >>> triangleArea(5, 14)\n  88.75\n  >>> triangleArea(5, 15)\n  97.125\n  >>> triangleArea(5, 16)\n  106.25\n  >>> triangleArea(5, 17)\n  115.375\n  >>> triangleArea(5, 18)\n  124.5\n  >>> triangleArea(5, 19)\n  133.75\n  >>> triangleArea(5, 20)\n  142.125\n  >>> triangleArea(5, 21)\n  151.375\n  >>> triangleArea(5, 22)\n  160.75\n  >>> triangleArea(5, 23)\n  169.375\n  >>> triangleArea(5, 24)\n  178.75\n  >>> triangleArea(5, 25)\n  187.125\n  >>> triangleArea(5, 26)\n  196.25\n  >>> triangleArea(5, 27)\n  205.375\n  >>> triangleArea(5, 28)\n  214.5\n  >>> triangleArea(5, 29)\n  223.75\n  >>> triangleArea(5, 30)\n  232.125\n  >>> triangleArea(5, 31)\n  241.375\n  >>> triangleArea(5, 32)\n  250.75\n  >>> triangleArea(5, 33)\n  259.375\n  >>> triangleArea(5, 34)\n  268.75\n  >>> triangleArea(5, 35)\n  277.125\n  >>> triangleArea(5, 36)\n  286.25\n  >>> triangleArea(5, 37)\n  295.375\n  >>> triangleArea(5, 38)\n  304.5\n  >>> triangleArea(5, 39)\n  313.75\n  >>> triangleArea(5, 40)\n  322.125\n  >>> triangleArea(5, 41)\n  331.375\n  >>> triangleArea(5, 42)\n  340.75\n  >>> triangleArea(5, 43)\n  349.375\n  >>> triangleArea(5, 44)\n  358.75\n  >>> triangleArea(5, 45)\n  367.125\n  >>> triangleArea(5, 46)\n  376.25\n  >>> triangleArea(5, 47)\n  386.375\n  >>> triangleArea(5, 48)\n  395.5\n  >>> triangleArea(5, 49)\n  404.75\n  >>> triangleArea(5, 50)\n  413.125\n  >>> triangleArea(5, 51)\n  422.25\n  >>> triangleArea(5, 52)\n  431.25\n  >>> triangleArea(5, 53)\n  440.75\n  >>> triangleArea(5, 54)\n  449.375\n  >>> triangleArea(5, 55)\n  457.125\n  >>> triangleArea(5, 56)\n  466.25\n  >>> triangleArea(5, 57)\n  475.375\n  >>> triangleArea(5, 58)\n  484.5\n  >>> triangleArea(5, 59)\n  494.75\n  >>> triangleArea(5, 60)\n  504.125\n  >>> triangleArea(5, 61)\n  513.25\n  >>> triangleArea(5, 62)\n  522.375\n  >>> triangleArea(5, 63)\n  531.5\n  >>> triangleArea(5, 64)\n  540.75\n  >>> triangleArea(5, 65)\n  549.375\n  >>> triangleArea(5, 66)\n  558.75\n  >>> triangleArea(5, 67)\n  567.125\n  >>> triangleArea(5, 68)\n  576.25\n  >>> triangleArea(5, 69)\n  585.375\n  >>> triangleArea(5, 70)\n  594.5\n  >>> triangleArea(5, 71)\n  604.75\n  >>> triangleArea(5, 72)\n  613.125\n  >>> triangleArea(5, 73)\n  622.25\n  >>> triangleArea(5, 74)\n  631.25\n  >>> triangleArea(5, 75)\n  640.75\n  >>> triangleArea(5, 76)\n  649.375\n  >>> triangleArea(5, 77)\n  657.125\n  >>> triangleArea(5, 78)\n  666.25\n  >>> triangleArea(5, 79)\n  675.375\n  >>> triangleArea(5, 80)\n  684.5\n  >>> triangleArea(5, 81)\n  694.75\n  >>> triangleArea(5, 82)\n  704.125\n  >>> triangleArea(5, 83)\n  713.25\n  >>> triangleArea(5, 84)\n  722.375\n  >>> triangleArea(5, 85)\n  731.5\n  >>> triangleArea(5, 86)\n  740.75\n  >>> triangleArea(5, 87)\n  749.0625\n  >>> triangleArea(5, 88)\n  758.3125\n  >>> triangleArea(5, 89)\n  767.5\n  >>> triangleArea(5, 90)\n  776.75\n  >>> triangleArea(5, 91)\n  785.0625\n  >>> triangleArea(5, 92)\n  794.3125\n  >>> triangleArea(5, 93)\n  802.5\n  >>> triangleArea(5, 94)\n  811.75\n  >>> triangleArea(5, 95)\n  821.0625\n  >>> triangleArea(5, 96)\n  830.3125\n  >>> triangleArea(5, 97)\n  840.5\n  >>> triangleArea(5, 98)\n  850.75\n  >>> triangleArea(5, 99)\n  859.0625\n  >>> triangleArea(5, 100)\n  869.3125\n  >>> triangleArea(5, 101)\n  878.5\n  >>> triangleArea(5, 102)\n  887.75\n  >>> triangleArea(5, 103)\n  897.125\n  >>> triangleArea(5, 104)\n  906.25\n  >>> triangleArea(5, 105)\n  915.375\n  >>> triangleArea(5, 106)\n  925.5\n  >>> triangleArea(5, 107)\n  935.0625\n  >>> triangleArea(5, 108)\n  945.3125\n  >>> triangleArea(5, 109)\n  955.5\n  >>> triangleArea(5, 110)\n  964.0625\n  >>> triangleArea(5, 111)\n  973.3125\n  >>> triangleArea(5, 112)\n  982.5\n  >>> triangleArea(5, 113)\n  991.75\n  >>> triangleArea(5, 114)\n  1001.0625\n  >>> triangleArea(5, 115)\n  1010.3125\n  >>> triangleArea(5, 116)\n  1020.5\n  >>> triangleArea(5, 117)\n  1029.75\n  >>> triangleArea(5, 118)\n  1039.125\n  >>> triangleArea(5, 119)\n  1048.25\n  >>> triangleArea(5, 120)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3);\n};\n\n/*TThe Fibbonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib (0) - > 0 fib (1) - > 1 fib (2) - > 1 fib (3) - > 2 fib (4) - > 3 fib (5) - > 5 fib (6) - > 8 fib (7) - > 13 fib (8) - > 21 fib (9) - > 34 fib (10) - > 55 fib (11) - > 89 fib (12) - > 144 fib (13) - > 233 fib (14) - > 377 fib (15) - > 610 fib (16) - > 987 fib (17) - > 1597 fib (18) - > 2584 fib (19) - > 4181 fib (20) - > 6765 fib (21) - > 10946 fib (22) - > 17711 fib (23) - > 28657 fib (24) - > 46368 fib (25) - > 75025 fib (26) - > 121393 fib (27) - > 196418 fib (28) - > 317811 fib (29) - > 514229 fib (30) - > 832040 fib (31) - > 1346269 fib (32) - > 2178309 fib (33) - > 3524578 fib (34) - > 5702887 fib (35) - > 10848591 fib (36) - > 19074179 fib (37) - > 31752673 fib (38) - > 51422919 fib (39) - > 83204016 fib (40) - > 134626903 fib (41) - > 217830987 fib (42) - > 352457827 fib (43) - > 570288710 fib (44) - > 1084859125 fib (45) - > 1907417974 fib (46) - > 3175267331 fib (47) - > 5142291964 fib (48) - > 8320401630 fib (49) - > 13462690335 fib (50) - > 21783098713 fib (51) - > 35245782760 fib (52) - > 57028871089 fib (53) - > 10848591257 fib (54) - > 19074179743 fib (55) - > 31752673310 fib (56) - > 51422919645 fib (57) - > 83204016307 fib (58) - > 134626903353 fib (59) - > 217830987130 fib (60) - > 352457827610 fib (61) - > 570288710890 fib (62) - > 108485912570 fib (63) - > 190741797430 fib (64) - > 317526733105 fib (65) - > 514229196450 fib (66) - > 832040163077 fib (67) - > 1346269033532 fib (68) - > 2178309871300 fib (69) - > 3524578276100 fib (70) - > 5702887108900 fib (71) - > 1084859125700 fib (72) - > 1907417974300 fib (73) - > 3175267331050 fib (74) - > 5142291964500 fib (75) - > 8320401630777 fib (76) - > 13462690335321 fib (77) - > 21783098713000 fib (78) - > 35245782761000 fib (79) - > 57028871089000 fib (80) - > 10848591257000 fib (81) - > 19074179743000 fib (82) - > 31752673310500 fib (83) - > 51422919645000 fib (84) - > 83204016307777 fib (85) - > 134626903353210 fib (86) - > 217830987130000 fib (87) - > 352457827610000 fib (88) - > 570288710890000 fib (89) - > 108485912570000 fib (90) - > 19074179743000 fib (91) - > 317526733105000 fib (92) - > 51422919645000 fib (93) - > 832040163077778 fib (94) - > 1346269033532100 fib (95) - > 2178309871300000 fib (96) - > 3524578276100000 fib (97) - > 5702887108900000 fib (98) - > 1084859125700000 fib (99) - > 19074179743000 fib (100) - > 317526733105000 fib (101) - > 51422919645000 fib (102) - > 8320401630777780 fib (103) - > 13462690335321000 fib (104) - > 2178309871300000 fib (105) - > 35245782761000000 fib (106) - > 57028871089000000 fib (107) - > 10848591257000000 fib (108) - > 19074179743000 fib (109) - > 317526733105000 fib (110) - > 51422919645000 fib (111) - > 8320401630777780 fib (112) - > 13462690335321000 fib (113) - > 2178309871300000 fib (114) - > 35245782761000000 fib (115) - > 57028871089000000 fib (116) - > 10848591257000000 fib (117) - > 19074179743000 fib (118) - > 317526733105000 fib (119) - > 51422919645000 fib (120) - > 8320401630777780 fib (121) - > 13462690335321000 fib (122) - > 2178309871300000 fib (123) - > 35245782761000000 fib (124) - > 57028871089000000 fib (125) - > 10848591257000000 fib (126) - > 19074179743000 fib (127) - > 317526733105000 fib (128) - > 51422919645000 fib (129) - > 8320401630777780 fib (130) - > 13462690335321000 fib (131) - > 2178309871300000 fib (132) - > 35245782761000000 fib (133) - > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n}\n\n/*\n  >>> [1,2,3,4,5].count(2)\n  2\n  >>> [1,2,3,4,5].count(1)\n  4\n  >>> [1,2,3,4,5].count(6)\n  0\n  >>> [1,2,3,4,5].count(5)\n  0\n  >>> [1,2,3,4,5].count(10)\n  0\n  >>> [1,2,3,4,5].count(4)\n  0\n  >>> [1,2,3,4,5].count(3)\n  0\n  >>> [1,2,3,4,5].count(0)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5].count(-10)\n  0\n  >>> [1,2,3,4,5].count(-5)\n  0\n  >>> [1,2,3,4,5].count(-4)\n  0\n  >>> [1,2,3,4,5].count(-3)\n  0\n  >>> [1,2,3,4,5].count(-2)\n  0\n  >>> [1,2,3,4,5].count(-1)\n  0\n  >>> [1,2,3,4,5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('')\n  true\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('')\n  true\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalin", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  0\n  >>> divp(0, 101)\n  1\n  >>> divp(3, 11)\n  3\n  >>> divp(100, 101)\n  1\n  */\nconst divp = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  0\n  >>> divp(0, 101)\n  1\n  >>> divp(3, 11)\n  3\n  >>> divp(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0\n  >>> divm(0, 101)\n  1\n  >>> divm(3, 11)\n  3\n  >>> divm(100, 101)\n  1\n  */\nconst divm = (n, p) => {\n  let res = 0;\n  for (let i = 0; i < p; i++) {\n    res = (res / n) % p;\n  }\n  return res;\n};\n\n/*Return n / p modulo p (Division).\n  >>> divm(3, 5)\n  1\n  >>> divm(1101, 101)\n  0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    index += 1;\n  }\n  return result;\n};\n\n/**\n * Returns a new array with the elements of the given array concatenated (joined) to the given delimiter.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single space is used.\n * If no delimiter is given, a single ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes strings and returns strings without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abgjlm'\n  >>> removeConsonants('abcdef')\n  'abgj'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes strings and returns strings without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeNewline is a function that takes strings and returns strings without newlines.\n  >>> removeNewline('')\n  ''\n  >>> removeNewline(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewline('abcdef')\n  'abcdef'\n  >>> removeNewline('aaaaa')\n  ''\n  >>> removeNewline('aaBAA')\n  'BAA'\n  >>> removeNewline('zbcd')\n  'zbc'\n  */\nconst removeNewline = (text) => {\n  return text.replace(/\\n/g, '');\n};\n\n/*\n  removeNewlines is a function that takes strings and returns strings without newlines.\n  >>> removeNewlines('')\n  ''\n  >>> removeNewlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewlines('abcdef')\n  'abcdef'\n  >>> removeNewlines('aaaaa')\n  ''\n  >>> removeNewlines('aaBAA')\n  'BAA'\n  >>> removeNewlines('zbcd')\n  'zbc'\n  */\nconst removeNewlines = (text) => {\n  return text.replace(/[\\n]/g, '');\n};\n\n/*\n  removeNewlinesBefore is a function that takes strings and returns strings without newlines before a specified string.\n  >>> removeNewlinesBefore('', '')\n  ''\n  >>> removeNewlinesBefore('abc', 'abc')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'def')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'ghi')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'jkl')\n  'abc'\n  >>> removeNewlinesBefore('abc','mno')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'pqr')\n  'abc'\n  >>> removeNewlinesBefore('abc','stu')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'vwx')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'yza')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zbc')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zcd')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zde')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdf')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdg')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdh')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdi')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdj')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdk')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdl')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdm')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdn')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdo')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdp')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdq')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdr')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zds')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdt')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdu')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdv')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdw')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdx')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdy')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdz')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zda')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdb')\n  'abc'\n  >>> removeNewlinesBefore('abc', 'zdc')\n  'abc", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold2([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold2([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold2([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold2([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold3([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold3([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold4([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold4([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold5([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold5([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold6 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold6([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold6([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold7 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold7([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold7([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold8 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold8([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold8([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold9 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold9([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold9([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold10 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold10([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold10([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold11 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold11([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold11([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold12 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold12([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold12([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold13 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold13([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold13([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold14 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold14([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold14([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold15 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold15([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold15([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold16 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold16([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold16([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold17 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold17([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold17([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold18 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.33\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Raise a number to an exponent\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  121\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Return the square root of a number\n  >>> sqrt(2)\n  1.41421356237\n  >>> sqrt(5)\n  2.82842712474\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Return the cube root of a number\n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Return the reciprocal of a number\n  >>> reciprocal(2)\n  0.5\n  >>> reciprocal(5)\n  0.25\n  */\nconst reciprocal = (x) => {\n  return 1 / x;\n};\n\n/*Return the natural logarithm of a number\n  >>> log(2)\n  0\n  >>> log(5)\n  0\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*Return the base 10 logarithm of a number\n  >>> log10(2)\n  0\n  >>> log10(5)\n  0\n  */\nconst log10 = (x) => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Return the base 2 logarithm of a number\n  >>> log2(2)\n  0\n  >>> log2(5)\n  1\n  */\nconst log2 = (x) => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Return the base e logarithm of a number\n  >>> loge(2)\n  0\n  >>> loge(5)\n  1\n  */\nconst loge = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the natural logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*Return the base 2 logarithm of e to the power of x\n  >>> log2e(5)\n  1.6094379124341\n  >>> log2e(2)\n  1.6094379124341\n  */\nconst log2e = (x) => {\n  return Math.log(x) / Math.LN2;\n};\n\n/*Return the base 10 logarithm of e to the power of x\n  >>> log10e(5)\n  2.302585092994046\n  >>> log10e(2)\n  2.302585092994046\n  */\nconst log10e = (x) => {\n  return Math.log(x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<(.*?)>/);\n  const closingBrackets = brackets.match(/<(.*?)>/);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length && openingBrackets.length === 2;\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n * Example:\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp; World\"\n *\n * input: \"Hello & World\"\n * output: \"Hello &amp", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (k > i) {\n      j++;\n    } else if (k < i) {\n      i++;\n    } else {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 0])\n  false\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n  true\n  >>> monotonic([4, 1, 10, -10, -10, -10, -10, -10, -10, -10, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list2) => {\n  const set1 = new Set(list1);\n  const set2 = new Set(list2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  set2.forEach((item) => {\n    if (!set1.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/**\n * Given two lists, find the common elements between them and return them\n * as a new list.\n *\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n *\n * @param {Array} list1 First list\n * @param {Array} list2 Second list\n * @returns {Array} Common elements between list1 and list2\n */\nconst common = (list1, list", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(1001)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(1009)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(1099)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(123)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const nested_parens = [];\n  let level = 0;\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n    if (char ==='' && paren_count === 0) {\n      nested_parens.push(level);\n      level++;\n    }\n  }\n  return nested_parens;\n};\n\n/**\n * Takes a string representing a mathematical expression and returns the parsed expression as a nested list.\n * \n * E.g.\n * \n * >>> parseExpression('(1 + 2)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       ')'\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2\n *       ],\n *       [\n *         3,\n *         '+',\n *         4\n *       ],\n *       [\n *         5,\n *         '+',\n *         6\n *       ]\n *     ]\n *   ]\n * ]\n * \n * >>> parseExpression('(1 + 2)(3 + 4)(5 + 6)')\n * [\n *   [\n *     '(',\n *     [\n *       [\n *         1,\n *         '+',\n *         2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isWord = (word) => {\n  return /^[A-Za-z0-9]+$/.test(word);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWord = (word) => {\n  return!isWord(word);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWords = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNot = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNots = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssssssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|;':,./<>?\")\n  false\n  */\nconst isNotWordsNotsssssssssssssssssss = (words) => {\n  return words.every(isNotWord);\n};\n\n/* returns true if a word is entirely made up of letters and numbers, false otherwise\n\n  >>> isWord(\"hello\")\n  true\n  >>> isWord(\"123\")\n  false\n  >>> isWord(\"!@#$%^&*()_+-={}[]|", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  let x = 0;\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i]);\n    x += xs[i];\n  }\n  derivatives.push(1);\n  return derivatives;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where a is the starting point and b is the end point. \n * \n * f(x) is the function to be integrated and xs is the array of x-values.\n * \n * Example: \n * \n * f(x) = x + x^2 + x^3\n * xs = [0, 1, 2, 3]\n * \n * Trapezoidal rule is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, 2]\n * \n * Integral is calculated as:\n * \n * f(x) = 1 + 2x + 3x^2\n * xs = [0, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. For example, fibonacci (0) = = 0, fibonacci (1) = = 1, fibonacci (2) = = 1, fibonacci (3) = = 2, fibonacci (4) = = 3, fibonacci (5) = = 5, fibonacci (6) = = 8, fibonacci (7) = = 13, fibonacci (8) = = 21, fibonacci (9) = = 34, fibonacci (10) = = 55, fibonacci (11) = = 89, fibonacci (12) = = 144, fibonacci (13) = = 233, fibonacci (14) = = 377, fibonacci (15) = = 610, fibonacci (16) = = 987, fibonacci (17) = = 1597. Write a function that efficiently calculates the nth element of the Fibonacci sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. For example, fibonacci (0) = = 0, fibonacci (1) = = 1, fibonacci (2) = = 1, fibonacci (3) = = 2, fibonacci (4) = = 3, fibonacci (5) = = 5, fibonacci (6) = = 8, fibonacci (7) = = 13, fibonacci (8) = = 21, fibonacci (9) = = 34, fibonacci (10) = = 55, fibonacci (11) = = 89, fibonacci (12) = = 144, fibonacci (13) = = 233, fibonacci (14) = = 377, fibonacci (15) = = 610, fibonacci (16) = = 987, fibonacci (17) = = 1597. Write a function that efficiently calculates the nth element of the Fibonacci sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. For example, fibonacci (0) = = 0, fibonacci (1) = = 1, fibonacci (2) = = 1, fibonacci (3) = = 2, fibonacci (4) = = 3, fibonacci (5) = = 5, fibonacci (6) = = 8, fibonacci (7) = = 13, fibonacci (8) = = 21, fibonacci (9) = = 34, fibonacci (10) = = 55, fibonacci (11) = = 89, fibonacci (12) = = 144, fibonacci (13) = = 233, fibonacci (14) = = 377, fibonacci (15) = = 610, fibonacci (16) = = 987, fibonacci (17) = = 1597. Write a function that efficiently calculates the nth element of the Fibonacci sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. For example, fibonacci (0) = = 0, fibonacci (1) = = 1, fibonacci (2) = = 1, fibonacci (3) = = 2, fibonacci (4) = = 3, fibonacci (5) = = 5, fibonacci (6) = = 8, fibonacci (7) = = 13, fibonacci (8) = = 21, fibonacci (9) = = 34, fibonacci (10) = = 55, fibonacci (11) = = 89, fibonacci (12) = = 144, fibonacci (13) = = 233, fibonacci (14) = = 377, fibonacci (15) = = 610, fibonacci (16) = = 987, fibonacci (17) = = 1597. Write a function that efficiently calculates the nth element of the Fibonacci sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. For example, fibonacci (0) = = 0, fibonacci (1) = = 1, fibonacci (2) = = 1, fibonacci (3) = = 2, fibonacci (4) = = 3, fibonacci (5) = = 5, fibonacci (6) = = 8, fibonacci (7) = = 13, fibonacci (8) = = 21, fibonacci (9) = = 34, fibonacci (10) = = 55, fibonacci (11) = = 89, fibonacci (12) = = 144, fibonacci (13) = = 233, fibonacci (14) = = 377, fibonacci (15) = = 610, fibonacci (16) = = 987, fibonacci (17) = = 1597. Write a function that efficiently calculates the nth element of the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const str = x.toString();\n  const len = str.length;\n  let result = \"\";\n  let i = 0;\n  while (i < len) {\n    const digit = str.charAt(i);\n    result += digit + str.charAt(len - i - shift);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> get", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits] = s.split(\" \").map(Number);\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  const [appleCount, orangeCount, mangoCount] = s.split(\" \").map(Number);\n  const [appleFruits, orangeFruits, mangoFruits", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(x => x % 2 === 0);\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndexAndValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValueIndex = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndexAndValueIndex };\n\n/*\n  \"Given an array representing a branch of a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the smallest integer number, which is less than zero and has a frequency less than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice();\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else if (d === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else if (d === c) \n    return a / 2\n  else if (e === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  if (a === b) \n    return c / 2\n  else if (a === c) \n    return b / 2\n  else if (b === c) \n    return a / 2\n  else if (d === c) \n    return a / 2\n  else if (e === c) \n    return a / 2\n  else if (f === c) \n    return a / 2\n  else \n    return -1\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  if (a === b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\nconst isPalindromic = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalanced = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList2 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList3 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList4 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList5 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList6 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList7 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList8 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList9 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList10 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList11 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList12 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList13 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList14 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList15 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList16 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList17 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList18 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList19 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList20 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList21 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList22 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList23 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList24 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList25 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList26 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList27 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList28 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList29 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList30 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList31 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList32 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList33 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList34 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList35 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList36 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList37 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList38 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList39 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList40 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList41 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList42 = (arr) => {\n  const str = arr.join('');\n  return str === str.split('').reverse().join('');\n};\n\nconst isBalancedList43 = (arr) => {\n  const str = arr.join('');\n  return str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minDiff = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[minIndex];\n    if (diff < minDiff) {\n      minDiff = diff;\n      minIndex = i;\n    }\n  }\n  return minDiff;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abracadabra\") == \"abracadarba\"\n  reverseString(\"\") == \"\"\n  */\nconst reverseString = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicates = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast2 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast3 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast4 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast5 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast6 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast7 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given an array of strings, return a new array where all duplicate strings have been merged together.\n\n  For example:\n  mergeDuplicates([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\", \"b\", \"c\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"a\"]\n  mergeDuplicates([\"a\"]) == [\"a\"]\n  mergeDuplicates([]) == []\n  */\nconst mergeDuplicatesFast8 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    if (!map.has(str)) {\n      map.set(str, true);\n      arr.splice(i, 1);\n    } else {\n      map.set(str, map.get(str) + 1);\n    }\n  }\n  return arr;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ 'Hello'\n*/\nconst capitalize = str => {\n  const words = str.split(' ');\n  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns a string with the first letter of each word capitalized. For example, capitalize('hello') ➞ '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. K", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return isSimplePower(x, n - 1);\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOfTwo(1) => true\n  isPowerOfTwo(2) => true\n  isPowerOfTwo(8) => true\n  isPowerOfTwo(9) => false\n  isPowerOfTwo(10) => false\n  isPowerOfTwo(11) => false\n  isPowerOfTwo(12) => false\n  isPowerOfTwo(13) => false\n  isPowerOfTwo(14) => false\n  isPowerOfTwo(15) => false\n  isPowerOfTwo(16) => false\n  isPowerOfTwo(17) => false\n  isPowerOfTwo(18) => false\n  isPowerOfTwo(19) => false\n  isPowerOfTwo(20) => false\n  isPowerOfTwo(21) => false\n  isPowerOfTwo(22) => false\n  isPowerOfTwo(23) => false\n  isPowerOfTwo(24) => false\n  isPowerOfTwo(25) => false\n  isPowerOfTwo(26) => false\n  isPowerOfTwo(27) => false\n  isPowerOfTwo(28) => false\n  isPowerOfTwo(29) => false\n  isPowerOfTwo(30) => false\n  isPowerOfTwo(31) => false\n  isPowerOfTwo(32) => false\n  isPowerOfTwo(33) => false\n  isPowerOfTwo(34) => false\n  isPowerOfTwo(35) => false\n  isPowerOfTwo(36) => false\n  isPowerOfTwo(37) => false\n  isPowerOfTwo(38) => false\n  isPowerOfTwo(39) => false\n  isPowerOfTwo(40) => false\n  isPowerOfTwo(41) => false\n  isPowerOfTwo(42) => false\n  isPowerOfTwo(43) => false\n  isPowerOfTwo(44) => false\n  isPowerOfTwo(45) => false\n  isPowerOfTwo(46) => false\n  isPowerOfTwo(47) => false\n  isPowerOfTwo(48) => false\n  isPowerOfTwo(49) => false\n  isPowerOfTwo(50) => false\n  isPowerOfTwo(51) => false\n  isPowerOfTwo(52) => false\n  isPowerOfTwo(53) => false\n  isPowerOfTwo(54) => false\n  isPowerOfTwo(55) => false\n  isPowerOfTwo(56) => false\n  isPowerOfTwo(57) => false\n  isPowerOfTwo(58) => false\n  isPowerOfTwo(59) => false\n  isPowerOfTwo(60) => false\n  isPowerOfTwo(61) => false\n  isPowerOfTwo(62) => false\n  isPowerOfTwo(63) => false\n  isPowerOfTwo(64) => false\n  isPowerOfTwo(65) => false\n  isPowerOfTwo(66) => false\n  isPowerOfTwo(67) => false\n  isPowerOfTwo(68) => false\n  isPowerOfTwo(69) => false\n  isPowerOfTwo(70) => false\n  isPowerOfTwo(71) => false\n  isPowerOfTwo(72) => false\n  isPowerOfTwo(73) => false\n  isPowerOfTwo(74) => false\n  isPowerOfTwo(75) => false\n  isPowerOfTwo(76) => false\n  isPowerOfTwo(77) => false\n  isPowerOfTwo(78) => false\n  isPowerOfTwo(79) => false\n  isPowerOfTwo(80) => false\n  isPowerOfTwo(81) => false\n  isPowerOfTwo(82) => false\n  isPowerOfTwo(83) => false\n  isPowerOfTwo(84) => false\n  isPowerOfTwo(85) => false\n  isPowerOfTwo(86) => false\n  isPowerOfTwo(87) => false\n  isPowerOfTwo(88) => false\n  isPowerOfTwo(89) => false\n  isPowerOfTwo(90) => false\n  isPowerOfTwo(91) => false\n  isPowerOfTwo(92) => false\n  isPowerOfTwo(93) => false\n  isPowerOfTwo(94) => false\n  isPowerOfTwo(95) => false\n  isPowerOfTwo(96) => false\n  isPowerOfTwo(97) => false\n  isPowerOfTwo(98) => false\n  isPowerOfTwo(99) => false\n  isPowerOfTwo(100) => false\n  isPowerOfTwo(101) => false\n  isPowerOfTwo(102) => false\n  isPowerOfTwo(103) => false\n  isPowerOfTwo(104) => false\n  isPowerOfTwo(105) => false\n  isPowerOfTwo(106) => false\n  isPowerOfTwo(107) => false\n  isPowerOfTwo(108) => false\n  isPowerOfTwo(109) => false\n  isPowerOfTwo(110) => false\n  isPowerOfTwo(111) => false\n  isPowerOfTwo(112) => false\n  isPowerOfTwo(113) => false\n  isPowerOfTwo(114) => false\n  isPowerOfTwo(115) => false\n  isPowerOfTwo(116) => false\n  isPowerOfTwo(117) => false\n  isPowerOfTwo(118) => false\n  isPowerOfTwo(119) => false\n  isPowerOfTwo(120) => false\n  isPowerOfTwo(121) => false\n  isPowerOfTwo(122) => false\n  isPowerOfTwo(123) => false\n  isPowerOfTwo(124) => false\n  isPowerOfTwo(125) => false\n  isPowerOfTwo(126) => false\n  isPowerOfTwo(127) => false\n  isPowerOfTwo(128) => false\n  isPowerOfTwo(129) => false\n  isPowerOfTwo(130) => false\n  isPowerOfTwo(131) => false\n  isPowerOfTwo(132) => false\n  isPowerOfTwo(133) => false\n  isPowerOfTwo(134) => false\n  isPowerOfTwo(135) => false\n  isPowerOfTwo(136) => false\n  isPowerOfTwo(137) => false\n  isPowerOfTwo(138) => false\n  isPowerOfTwo(139) => false\n  isPowerOfTwo(140) => false\n  isPowerOfTwo(141) => false\n  isPowerOfTwo(142) => false\n  isPowerOfTwo(143) => false\n  isPowerOfTwo(144) => false\n  isPowerOfTwo(145) => false\n  isPowerOfTwo(146) => false\n  isPowerOfTwo(147) => false\n  isPowerOfTwo(148) => false\n  isPowerOfTwo(149) => false\n  isPowerOfTwo(150) => false\n  isPowerOfTwo(151) => false\n  isPowerOfTwo(152) => false\n  isPower", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n  if (a === 200) return true", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  for (let i = 0; i < hexNumLength; i++) {\n    let hexChar = hexNum.charAt(i);\n    if (hexChar === \"0\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let hexKey = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  for (let i = 0; i < hexNumLength; i++) {\n    let hexChar = hexNum.charAt(i);\n    if (hexChar === \"0\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey3 = (num) => {\n  let hexKey = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  for (let i = 0; i < hexNumLength; i++) {\n    let hexChar = hexNum.charAt(i);\n    if (hexChar === \"0\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey4 = (num) => {\n  let hexKey = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  for (let i = 0; i < hexNumLength; i++) {\n    let hexChar = hexNum.charAt(i);\n    if (hexChar === \"0\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey5 = (num) => {\n  let hexKey = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  for (let i = 0; i < hexNumLength; i++) {\n    let hexChar = hexNum.charAt(i);\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let remainder;\n\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  in binary form.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let remainder;\n\n  for (let i = 0; i < binary.length; i++) {\n    remainder = parseInt(binary[i]);\n    decimal = decimal + remainder * Math.pow(2, i);\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to a binary number. The decimal number will\n  be given as a number. The function should return a string, with the binary number represented in\n  decimal form.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let remainder;\n\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with the hexadecimal number represented\n  in binary form.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") # returns \"F\"\n  binaryToHexadecimal(\"100000\") # returns \"A\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let remainder;\n\n  for (let i = 0; i < binary.length; i++) {\n    remainder = parseInt(binary[i]);\n    hexadecimal = remainder + hexadecimal;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return a string, with the binary number represented in\n  hexadecimal form.\n\n  Examples:\n  hexadecimalToBinary(\"F\") # returns \"1111\"\n  hexadecimalToBinary(\"A\") # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let remainder;\n\n  for (let i = 0; i < hexadecimal.length; i++) {\n    remainder = parseInt(hexadecimal[i]);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with the hexadecimal number represented\n  in binary form.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") # returns \"F\"\n  binaryToHexadecimal(\"100000\") # returns \"A\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let remainder;\n\n  for (let i = 0; i < binary.length; i++) {\n    remainder = parseInt(binary[i]);\n    hexadecimal = remainder + hexadecimal;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return a string, with the binary number represented in\n  hexadecimal form.\n\n  Examples:\n  hexadecimalToBinary(\"F\") # returns \"1111\"\n  hexadecimalToBinary(\"A\") # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let remainder;\n\n  for (let i = 0; i < hexadecimal.length; i++) {\n    remainder = parseInt(hexadecimal[i]);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with the hexadecimal number represented\n  in binary form.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") # returns \"F\"\n  binaryToHexadecimal(\"100000\") # returns \"A\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let remainder;\n\n  for (let i = 0; i < binary.length; i++) {\n    remainder = parseInt(binary[i]);\n    hexadecimal = remainder + hexadecimal;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return a string, with the binary number represented in\n  hexadecimal form.\n\n  Examples:\n  hexadecimalToBinary(\"F\") # returns \"1111\"\n  hexadecimalToBinary(\"A\") # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let remainder;\n\n  for (let i = 0; i < hexadecimal.length; i++) {\n    remainder = parseInt(hexadecimal[i]);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with the hexadecimal number represented\n  in binary form.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") # returns \"F\"\n  binaryToHexadecimal(\"100000\") # returns \"A\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let remainder;\n\n  for (let i = 0; i < binary.length; i++) {\n    remainder = parseInt(binary[i]);\n    hexadecimal = remainder + hexadecimal;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return a string, with the binary number represented in\n  hexadecimal form.\n\n  Examples:\n  hexadecimalToBinary(\"F\") # returns \"1111\"\n  hexadecimalToBinary(\"A\") # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let remainder;\n\n  for (let i = 0; i < hexadecimal.length; i++) {\n    remainder = parseInt(hexadecimal[i]);\n    binary = remainder + binary;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with the hexadecimal number represented\n  in binary form.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const arr = [...s]\n  const n = arr.length\n  if (n < 3) return false\n  for (let i = 0; i < n - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string.\n  For example:\n  count('abcabc') => 3\n  count('adadad') => 1\n  count('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst countIgnoreCase = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  For example:\n  countIgnoreCase('abcabc') => 3\n  countIgnoreCase('adadad') => 1\n  countIgnoreCase('') => 0\n*/\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of times the string appears in the input string ignoring case.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.4)\n  let gradesSum = gradesArray.reduce((a, b) => a + b)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetterArray = gradesArray.map(grade => {\n    if (grade >= gradesAverage) return 'A+'\n    if (grade >= gradesAverage - 0.1) return 'A'\n    if (grade >= gradesAverage - 0.05) return 'A-'\n    if (grade >= gradesAverage - 0.01) return 'B+'\n    if (grade >= gradesAverage - 0.005) return 'B'\n    if (grade >= gradesAverage - 0.001) return 'B-'\n    if (grade >= gradesAverage - 0.0001) return 'C+'\n    if (grade >= gradesAverage - 0.00005) return 'C'\n    if (grade >= gradesAverage - 0.00001) return 'C-'\n    if (grade >= gradesAverage - 0.000001) return 'D+'\n    if (grade >= gradesAverage - 0.0000005) return 'D'\n    if (grade >= gradesAverage - 0.0000001) return 'D-'\n    if (grade >= gradesAverage - 0.00000001) return 'E'\n  })\n  return gradesLetterArray\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst letterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.4)\n  let gradesSum = gradesArray.reduce((a, b) => a + b)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetterArray = gradesArray.map(grade => {\n    if (grade >= gradesAverage) return 'A+'\n    if (grade >= gradesAverage - 0.1) return 'A'\n    if (grade >= gradesAverage - 0.05) return 'A-'\n    if (grade >= gradesAverage - 0.01) return 'B+'\n    if (grade >= gradesAverage - 0.005) return 'B'\n    if (grade >= gradesAverage - 0.001) return 'B-'\n    if (grade >= gradesAverage - 0.0001) return 'C+'\n    if (grade >= gradesAverage - 0.00005) return 'C'\n    if (grade >= gradesAverage - 0.00001) return 'C-'\n    if (grade >= gradesAverage - 0.000001) return 'D+'\n    if (grade >= gradesAverage - 0.0000005) return 'D'\n    if (grade >= gradesAverage - 0.0000001) return 'D-'\n    if (grade >= gradesAverage - 0.00000001) return 'E'\n  })\n  return gradesLetterArray\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst letterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.4)\n  let gradesSum = gradesArray.reduce((a, b) => a + b)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetterArray = gradesArray.map(grade => {\n    if (grade >= gradesAverage) return 'A+'\n    if (grade >= gradesAverage - 0.1) return 'A'\n    if (grade >= gradesAverage - 0.05) return 'A-'\n    if (grade >= gradesAverage - 0.01) return 'B+'\n    if (grade >= gradesAverage - 0.005) return 'B'\n    if (grade >= gradesAverage - 0.001) return 'B-'\n    if (grade >= gradesAverage - 0.0001) return 'C+'\n    if (grade >= gradesAverage - 0.00005) return 'C'\n    if (grade >= gradesAverage - 0.00001) return 'C-'\n    if (grade >= gradesAverage - 0.000001) return 'D+'\n    if (grade >= gradesAverage - 0.0000005) return 'D'\n    if (grade >= gradesAverage - 0.0000001) return 'D-'\n    if (grade >= gradesAverage - 0.00000001) return 'E'\n  })\n  return gradesLetterArray\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst letterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.4)\n  let gradesSum = gradesArray.reduce((a, b) => a + b)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetterArray = gradesArray.map(grade => {\n    if (grade >= gradesAverage) return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) return false\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) continue\n    for (let j = i + 1; j < string.length; j++) {\n      if (string.charAt(j)!== string.charAt(j - 1)) continue\n      if (string.charAt(i) + string.charAt(j)!== string.charAt(i + j)) return false\n    }\n  }\n  return true\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('abba') == true\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    return n < 10? 1 : n < 100? 2 : n < 1000? 3 : n < 10000? 4 : n < 100000? 5 : n < 1000000? 6 : n < 10000000? 7 : n < 100000000? 8 : n < 1000000000? 9 : n < 10000000000? 10 : n < 100000000000? 11 : n < 1000000000000? 12 : n < 10000000000000? 13 : n < 100000000000000? 14 : n < 1000000000000000? 15 : n < 10000000000000000? 16 : n < 100000000000000000? 17 : n < 1000000000000000010? 18 : n < 1000000000000000010? 19 : n < 1000000000000000010? 20 : n < 1000000000000000010? 21 : n < 1000000000000000010? 22 : n < 1000000000000000010? 23 : n < 1000000000000000010? 24 : n < 1000000000000000010? 25 : n < 1000000000000000010? 26 : n < 1000000000000000010? 27 : n < 1000000000000000010? 28 : n < 1000000000000000010? 29 : n < 1000000000000000010? 30 : n < 1000000000000000010? 31 : n < 1000000000000000010? 32 : n < 1000000000000000010? 33 : n < 1000000000000000010? 34 : n < 1000000000000000010? 35 : n < 1000000000000000010? 36 : n < 1000000000000000010? 37 : n < 1000000000000000010? 38 : n < 1000000000000000010? 39 : n < 1000000000000000010? 40 : n < 1000000000000000010? 41 : n < 1000000000000000010? 42 : n < 1000000000000000010? 43 : n < 1000000000000000010? 44 : n < 1000000000000000010? 45 : n < 1000000000000000010? 46 : n < 1000000000000000010? 47 : n < 1000000000000000010? 48 : n < 1000000000000000010? 49 : n < 1000000000000000010? 50 : n < 1000000000000000010? 51 : n < 1000000000000000010? 52 : n < 1000000000000000010? 53 : n < 1000000000000000010? 54 : n < 1000000000000000010? 55 : n < 1000000000000000010? 56 : n < 1000000000000000010? 57 : n < 1000000000000000010? 58 : n < 1000000000000000010? 59 : n < 1000000000000000010? 60 : n < 1000000000000000010? 61 : n < 1000000000000000010? 62 : n < 1000000000000000010? 63 : n < 1000000000000000010? 64 : n < 1000000000000000010? 65 : n < 1000000000000000010? 66 : n < 1000000000000000010? 67 : n < 1000000000000000010? 68 : n < 1000000000000000010? 69 : n < 1000000000000000010? 70 : n < 1000000000000000010? 71 : n < 1000000000000000010? 72 : n < 1000000000000000010? 73 : n < 1000000000000000010? 74 : n < 1000000000000000010? 75 : n < 1000000000000000010? 76 : n < 1000000000000000010? 77 : n < 1000000000000000010? 78 : n < 1000000000000000010? 79 : n < 1000000000000000010? 80 : n < 1000000000000000010? 81 : n < 1000000000000000010? 82 : n < 1000000000000000010? 83 : n < 1000000000000000010? 84 : n < 1000000000000000010? 85 : n < 1000000000000000010? 86 : n < 1000000000000000010? 87 : n < 1000000000000000010? 88 : n < 1000000000000000010? 89 : n < 1000000000000000010? 90 : n < 1000000000000000010? 91 : n < 1000000000000000010? 92 : n < 1000000000000000010? 93 : n < 1000000000000000010? 94 : n < 1000000000000000010? 95 : n < 1000000000000000010? 96 : n < 1000000000000000010? 97 : n < 1000000000000000010? 98 : n < 1000000000000000010? 99 : n < 1000000000000000010? 100 : n < 1000000000000000010? 101 : n < 1000000000000000010? 102 : n < 1000000000000000010? 103 : n < 1000000000000000010? 104 : n < 1000000000000000010? 105 : n < 1000000000000000010? 106 : n < 1000000000000000010? 107 : n < 1000000000000000010? 108 : n < 1000000000000000010? 109 : n < 1000000000000000010? 110 : n < 1000000000000000010? 111 : n < 1000000000000000010? 112 : n < 1000000000000000010? 113 : n < 1000000000000000010? 114 : n < 1000000000000000010? 115 : n < 1000000000000000010? 116 : n < 1000000000000000010? 117 : n < 1000000000000000010? 118 : n < 1000000000000000010? 119 : n < 1000000000000000010? 120 : n < 1000000000000000010? 121 : n < 1000000000000000010? 122 : n < 1000000000000000010? 123 : n < 1000000000000000010? 124 : n < 1000000000000000010? 125 : n < 1000000000000000010? 126 : n < 1000000000000000010? 127 : n < 1000000000000000010? 128 : n < 1000000000000000010? 129 : n < 1000000000000000010? 130 : n < 1000000000000000010? 131 : n < 1000000000000000010? 132 : n < 1000000000000000010? 133 : n < 1000000000000000010? 134 : n < 1000000000000000010? 135 : n < 1000000000000000010? 136 : n < 1000000000000000010? 137 : n < 1000000000000000010? 138 : n < 1000000000000000010? 139 : n < 1000000000000000010? 140 : n < 1000000000000000010? 141 : n < 1000000000000000010? 142 : n < 1000000000000000010? 143 : n < 1000000000000000010? 144 : n < 1000000000000000010? 145 : n < 1000000000000000010? 146 : n < 1000000000000000010? 147 : n < 1000000000000000010? 148 : n < 1000000000000000010? 149 : n < 1000000000000000010? 150 : n < 1000000000000000010? 151 : n < 1000000000000000010? 152 : n < 1000000000000000010? 153 : n < 1000000000000000010? 154 : n < 1000000000000000010? 155 : n < 1000000000000000010? 156 : n < 1000000000000000010? 157 : n < 1000000000000000010? 158 : n < 1000000000000000010? 159 : n < 1000000000000000010? 160 : n < 1000000000000000010? 161 : n < 1000000000000000010? 162 : n < 1000000000000000010? 163 : n < 1000000000000000010? 164 : n < 1000000000000000010? 165 : n < 1000000000000000010? 166 : n < 1000000000000000010? 167 : n < 1000000000000000010? 168 : n < 1000000000000000010? 169 : n < 1000000000000000010? 170 : n < 1000000000000000010? 171 : n < 1000000000000000010? 172 : n < 1000000000000000010? 173 : n < 1000000000000000010? 174 : n < 1000000000000000010? 175 : n < 1000000000000000010? 176 : n < 1000000000000000010? 177 : n < 1000000000000000010? 178 : n < 1000000000000000010? 179 : n < 1000000000000000010? 180 : n < 1000000000000000010? 181 : n < 1000000000000000010? 182 : n < 1000000000000000010? 183 : n < 1000000000000000010? 184 : n < 1000000000000000010? 185 : n < 1000000000000000010? 186 : n < 1000000000000000010? 187 : n < 1000000000000000010? 188 : n < 1000000000000000010? 189 : n < 10000000000000000", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < 8) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*GIf you use a positive integer N, return the sum of its ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEven = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index - 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index - 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const index = char.charCodeAt(0);\n      newString += String.fromCharCode(index + 65);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescDescDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  const rows = lst.map(row => row.map(val => val === x? 1 : 0));\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0]);\n  const colsSorted = rowsSorted.sort((a, b) => b[1] - a[1]);\n  rowsSorted.forEach((row, i) => {\n    row.forEach((col, j) => {\n      result.push([i, j, col]);\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  const cols = lst.map(row => row.map(val => val === x? 1 : 0));\n  const colsSorted = cols.sort((a, b) => a[1] - b[1]);\n  const rowsSorted = colsSorted.sort((a, b) => b[0] - a[0]);\n  colsSorted.forEach((col, i) => {\n    row.forEach((row, j) => {\n      result.push([i, j, row]);\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 1), (4, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  const diagSorted = diag.sort((a, b) => a[1] - b[1]);\n  const diagRowSorted = diagSorted.sort((a, b) => b[0] - a[0]);\n  diagRowSorted.forEach((row, i) => {\n    row.forEach((col, j) => {\n      result.push([i, j, diag[i][j]]);\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 2) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 1), (4, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  const diagSorted = diag.sort((a, b) => a[1] - b[1]);\n  const diagRowSorted = diagSorted.sort((a, b) => b[0] - a[0]);\n  diagRowSorted.forEach((row, i) => {\n    row.forEach((col, j) => {\n      result.push([i, j, diag[i][j]]);\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 3) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 1), (4, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  const diagSorted = diag.sort((a, b) => a[1] - b[1]);\n  const diagRowSorted = diagSorted.sort((a, b) => b[0] - a[0]);\n  diagRowSorted.forEach((row, i) => {\n    row.forEach((col, j) => {\n      result.push([i, j, diag[i][j]]);\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 4) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 4) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  if (sortedArray.reduce((sum, value) => sum + value, 0) % 2 === 0) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Given a string, return a new string with all duplicate characters removed. Note: * Do not change the given string.\n\n  Examples:\n  * removeDuplicates('abcabc') => 'abc'\n  * removeDuplicates('abca') => 'ab'\n  * removeDuplicates('ab') => 'a'\n  */\nconst removeDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-.]/g, '#');\n};\n\n/*\n  Given a string, return a new string with all duplicate characters replaced with the character '#'. You do not need to remove any duplicate characters. Note: * Do not change the given string.\n\n  Examples:\n  * replaceDuplicates('abcabc') => 'ab##c#'\n  * replaceDuplicates('abca') => 'ab##a'\n  * replaceDuplicates('ab') => 'a#'\n  */\nconst replaceDuplicates = (string) => {\n  return string.replace(/[,-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = alphabet.split('').map(c => c + 1).join('');\n  let newAlphabetLength = newAlphabet.length;\n  let newAlphabetReverse = newAlphabet.split('').reverse().join('');\n  let newAlphabetReverseLength = newAlphabetReverse.length;\n  let newAlphabetReverseReverse = newAlphabetReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseLength = newAlphabetReverseReverse.length;\n  let newAlphabetReverseReverseReverse = newAlphabetReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseLength = newAlphabetReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverse = newAlphabetReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split('').reverse().join('');\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating minimum elements found up to a certain moment in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating sum elements found up to a certain moment in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 4, 4, 5]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating product elements found up to a certain moment in the sequence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingProduct = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(product);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(remainder);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(remainder);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(remainder);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(remainder);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(remainder);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating quotient elements found up to a certain moment in the sequence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingQuotient = (numbers) => {\n  const result = [];\n  let quotient = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    quotient /= numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(quotient);\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating remainder elements found up to a certain moment in the sequence.\n  >>> rollingRemainder([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 24, 120, 720]\n  */\nconst rollingRemainder = (numbers) => {\n  const result = [];\n  let remainder = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    remainder *= numbers[i];\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n*/\n\n// Write a function nextLargest () that returns the largest element in the list. Returns zero if there is no such element. nextLargest ([1, 2, 3, 4, 5]) = = 5 nextLargest ([5, 1, 4, 3, 2]) = = 5 nextLargest ([]) = = null * / const nextLargest = (lst) = > {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1]\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. nextSmallestIndex ([1, 2, 3, 4, 5]) = = 2 nextSmallestIndex ([5, 1, 4, 3, 2]) = = 2 nextSmallestIndex ([]) = = null nextSmallestIndex ([1, 1]) = = null * / const nextSmallestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextLargestIndex () that returns the index of the largest element in the list. Returns zero if there is no such element. nextLargestIndex ([1, 2, 3, 4, 5]) = = 5 nextLargestIndex ([5, 1, 4, 3, 2]) = = 5 nextLargestIndex ([]) = = null * / const nextLargestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. nextSmallestIndex ([1, 2, 3, 4, 5]) = = 2 nextSmallestIndex ([5, 1, 4, 3, 2]) = = 2 nextSmallestIndex ([]) = = null nextSmallestIndex ([1, 1]) = = null * / const nextSmallestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextLargestIndex () that returns the index of the largest element in the list. Returns zero if there is no such element. nextLargestIndex ([1, 2, 3, 4, 5]) = = 5 nextLargestIndex ([5, 1, 4, 3, 2]) = = 5 nextLargestIndex ([]) = = null * / const nextLargestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. nextSmallestIndex ([1, 2, 3, 4, 5]) = = 2 nextSmallestIndex ([5, 1, 4, 3, 2]) = = 2 nextSmallestIndex ([]) = = null nextSmallestIndex ([1, 1]) = = null * / const nextSmallestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextLargestIndex () that returns the index of the largest element in the list. Returns zero if there is no such element. nextLargestIndex ([1, 2, 3, 4, 5]) = = 5 nextLargestIndex ([5, 1, 4, 3, 2]) = = 5 nextLargestIndex ([]) = = null * / const nextLargestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. nextSmallestIndex ([1, 2, 3, 4, 5]) = = 2 nextSmallestIndex ([5, 1, 4, 3, 2]) = = 2 nextSmallestIndex ([]) = = null nextSmallestIndex ([1, 1]) = = null * / const nextSmallestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextLargestIndex () that returns the index of the largest element in the list. Returns zero if there is no such element. nextLargestIndex ([1, 2, 3, 4, 5]) = = 5 nextLargestIndex ([5, 1, 4, 3, 2]) = = 5 nextLargestIndex ([]) = = null * / const nextLargestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. nextSmallestIndex ([1, 2, 3, 4, 5]) = = 2 nextSmallestIndex ([5, 1, 4, 3, 2]) = = 2 nextSmallestIndex ([]) = = null nextSmallestIndex ([1, 1]) = = null * / const nextSmallestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextLargestIndex () that returns the index of the largest element in the list. Returns zero if there is no such element. nextLargestIndex ([1, 2, 3, 4, 5]) = = 5 nextLargestIndex ([5, 1, 4, 3, 2]) = = 5 nextLargestIndex ([]) = = null * / const nextLargestIndex = (lst) = > {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      index = i\n    }\n  }\n  return index\n}\n\n// Write a function nextSmallestIndex () that returns the index of the second smallest element in the list. Returns zero if there is no such element. next", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].startsWith(\"I.\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n  For example:\n  >>> noBoredom(\"Hello world\")\n  0\n  >>> noBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst noBoredom = (S) => {\n  let bored = 0;\n  let sentences = S.split(\".\");\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes(\"boredom\")) {\n      bored = 1;\n      break;\n    }\n  }\n  return bored;\n};\n\n/*\n  A sentence is said to have \"no boredom\" if it does not contain any instances of \"boredom\".\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return false;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that decodes a message that has been encoded so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  >>> decode('TGST')\n  'test'\n  */\nconst decode = (message) => {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) + 96;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels contained in the string. Examples:\n  >>> vowels('test')\n  1\n  >>> vowels('This is a message')\n  4\n  */\nconst vowels = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of consonants contained in the string. Examples:\n  >>> consonants('This is a message')\n  3\n  >>> consonants('test')\n  0\n  */\nconst consonants = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels. Examples:\n  >>> vowelsCount('This is a message')\n  4\n  >>> vowelsCount('test')\n  0\n  */\nconst vowelsCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are consonants. Examples:\n  >>> consonantsCount('This is a message')\n  3\n  >>> consonantsCount('test')\n  0\n  */\nconst consonantsCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels and consonants. Examples:\n  >>> vowelsAndConsonantsCount('This is a message')\n  7\n  >>> vowelsAndConsonantsCount('test')\n  0\n  */\nconst vowelsAndConsonantsCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels, consonants, and letters. Examples:\n  >>> vowelsAndLettersCount('This is a message')\n  10\n  >>> vowelsAndLettersCount('test')\n  0\n  */\nconst vowelsAndLettersCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels, consonants, and letters. Examples:\n  >>> vowelsAndLettersCount('This is a message')\n  10\n  >>> vowelsAndLettersCount('test')\n  0\n  */\nconst vowelsAndLettersCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels, consonants, and letters. Examples:\n  >>> vowelsAndLettersCount('This is a message')\n  10\n  >>> vowelsAndLettersCount('test')\n  0\n  */\nconst vowelsAndLettersCount = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n    if (letter!== \"a\" && letter!== \"e\" && letter!== \"i\" && letter!== \"o\" && letter!== \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters contained in the string that are vowels, consonants, and letters. Examples:\n  >>> vowelsAndLettersCount('This is a message')\n  10\n  >>> vowelsAndLettersCount('test')\n  0\n  */\nconst vowelsAndLetter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toLowerCase() && dict[key]!== key.toUpperCase()) {\n      isCase = false;\n    }\n  }\n  return isCase;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownToAndUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndUpToAndDownToAndUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a > 9 || b > 9) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return multiply(a, b - 10);\n  }\n  return multiply(a - 10, b);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a > 9 || b > 9) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return sum(a, b - 10);\n  }\n  return sum(a - 10, b);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst product = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a > 9 || b > 9) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return product(a, b - 10);\n  }\n  return product(a - 10, b);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14,-15) should return 20.\n  */\nconst sumOfDigits = a => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a = Math.floor(a / 10);\n  }\n  return sum;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst productOfDigits = a => {\n  let product = 1;\n  while (a > 0) {\n    product *= a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14,-15) should return 20.\n  */\nconst sumOfDigits2 = a => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a = Math.floor(a / 10);\n  }\n  return sum;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst productOfDigits2 = a => {\n  let product = 1;\n  while (a > 0) {\n    product *= a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14,-15) should return 20.\n  */\nconst sumOfDigits3 = a => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a = Math.floor(a / 10);\n  }\n  return sum;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst productOfDigits3 = a => {\n  let product = 1;\n  while (a > 0) {\n    product *= a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14,-15) should return 20.\n  */\nconst sumOfDigits4 = a => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a = Math.floor(a / 10);\n  }\n  return sum;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst productOfDigits4 = a => {\n  let product = 1;\n  while (a > 0) {\n    product *= a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14,-15) should return 20.\n  */\nconst sumOfDigits5 = a => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a = Math.floor(a / 10);\n  }\n  return sum;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product148, 412) should return 16.\n  product19, 28) should return 72.\n  product2020, 1851) should return 0.\n  product14,-15) should return 20.\n  */\nconst productOfDigits5 = a => {\n  let product = 1;\n  while (a > 0) {\n    product *= a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum148, 412) should return 16.\n  sum19, 28) should return 72.\n  sum2020, 1851) should return 0.\n  sum14", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s and a dictionary d, determine if s can be segmented into a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  \n  For example, given\n  s = \"racecar\"\n  d = { \"a\": \"e\", \"e\": \"a\", \"c\": \"r\", \"r\": \"c\" }\n  \n  Return true because \"racecar\" can be segmented as \"racecar\".\n  \n  Given s = \"aab\", d = { \"a\": \"a\" }\n  Return false because \"aab\" cannot be segmented as \"aa\".\n  \n  Note:\n  A palindrome is a string that reads the same backward as forward.\n  A dictionary is a set of strings. A dictionary can have strings as keys and integers as values.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n  Update (2015-02-10):\n  Added test cases for when s is a palindrome and when s cannot be segmented.\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  if (int1 > int2) {\n    return Math.round(int1);\n  }\n  return Math.round(int2);\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
