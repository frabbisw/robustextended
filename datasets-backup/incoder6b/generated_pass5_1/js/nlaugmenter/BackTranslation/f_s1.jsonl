{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check that in the given list of numbers, any two ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups6 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let close_brackets = 0;\n  let current_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brackets++;\n      current_group.push(char);\n    }\n    if (char === ')') {\n      close_brackets++;\n      if (open_brackets!== close_brackets) {\n        open_brackets--;\n      }\n      current_group.push(char);\n    }\n    if (char ==='') {\n      current_string += char;\n    }\n    if (char === ',') {\n      groups.push(current_string);\n      current_string = '';\n    }\n  }\n  groups.push(current_string);\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balance", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePostfix = '';\n  let longestPalindromeReverse = '';\n\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentCharLength = currentChar.length;\n\n    // If current character is a palindrome and current string length is greater than longestPalindromeLength\n    if (currentChar == longestPalindrome[longestPalindromeLength] && currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar;\n      longestPalindromeSuffix = longestPalindromePrefix + longestPalindromeReverse;\n      longestPalindromePostfix = longestPalindromeSuffix + currentChar;\n      longestPalindromeReverse = longestPalindromePostfix;\n    }\n  }\n\n  return longestPalindromePostfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePostfix = '';\n  let longestPalindromeReverse = '';\n\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentCharLength = currentChar.length;\n\n    // If current character is a palindrome and current string length is greater than longestPalindromeLength\n    if (currentChar == longestPalindrome[longestPalindromeLength] && currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar;\n      longestPalindromeSuffix = longestPalindromePrefix + longestPalindromeReverse;\n      longestPalindromePostfix = longestPalindromeSuffix + currentChar;\n      longestPalindromeReverse = longestPalindromePostfix;\n    }\n  }\n\n  return longestPalindromePostfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePostfix = '';\n  let longestPalindromeReverse = '';\n\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentCharLength = currentChar.length;\n\n    // If current character is a palindrome and current string length is greater than longestPalindromeLength\n    if (currentChar == longestPalindrome[longestPalindromeLength] && currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar;\n      longestPalindromeSuffix = longestPalindromePrefix + longestPalindromeReverse;\n      longestPalindromePostfix = longestPalindromeSuffix + currentChar;\n      longestPalindromeReverse = longestPalindromePostfix;\n    }\n  }\n\n  return longestPalindromePostfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePostfix = '';\n  let longestPalindromeReverse = '';\n\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentCharLength = currentChar.length;\n\n    // If current character is a palindrome and current string length is greater than longestPalindromeLength\n    if (currentChar == longestPalindrome[longestPalindromeLength] && currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar;\n      longestPalindromeSuffix = longestPalindromePrefix + longestPalindromeReverse;\n      longestPalindromePostfix = longestPalindromeSuffix + currentChar;\n      longestPalindromeReverse = longestPalindromePostfix;\n    }\n  }\n\n  return longestPalindromePostfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindro", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stone", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits. If the number is negative, return 0.\n*/\nconst sumDigits = n => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigits(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = n => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a positive integer and returns the sum of its digits, excluding any multiples of 3. For example, sumDigitsExcept3(12) should return 1 + 2 + 3 = 6.\n*/\nconst sumDigitsExcept3 = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const binaryString = (n) => {\n    const binaryStringArray = [];\n    for (let i = 0; i <= n; i++) {\n      binaryStringArray.push(\n        n.toString(2).padStart(Math.ceil(Math.log2(i)), 0)\n      );\n    }\n    return binaryStringArray;\n  };\n  const binaryArray = binaryString(n);\n  const binarySum = binaryArray.reduce((acc, curr) => {\n    return acc + parseInt(curr, 2);\n  }, 0);\n  const binaryAverage = binarySum / binaryArray.length;\n  const roundedAverage = binaryAverage.toString(2).padStart(\n    Math.ceil(Math.log2(binaryAverage)),\n    0\n  );\n  return roundedAverage;\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the number of integers from n to m (including n and m).\n  Example:\n  numBetween(1, 5) => 3\n  numBetween(7, 5) => -1\n  numBetween(10, 20) => 5\n  numBetween(20, 33) => 10\n  numBetween(33, 100) => -1\n  numBetween(100, 200) => 0\n*/\nconst numBetween = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return n - m;\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the sum of integers from n to m (including n and m).\n  Example:\n  sumBetween(1, 5) => 6\n  sumBetween(7, 5) => -1\n  sumBetween(10, 20) => 15\n  sumBetween(20, 33) => 30\n  sumBetween(33, 100) => -1\n  sumBetween(100, 200) => 0\n*/\nconst sumBetween = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return n + m;\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the product of integers from n to m (including n and m).\n  Example:\n  productBetween(1, 5) => 1\n  productBetween(7, 5) => -1\n  productBetween(10, 20) => 20\n  productBetween(20, 33) => 100\n  productBetween(33, 100) => -1\n  productBetween(100, 200) => 0\n*/\nconst productBetween = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return n * m;\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the smallest positive integer that is divisible by both n and m.\n  Example:\n  divisibleByBoth(1, 5) => 1\n  divisibleByBoth(7, 5) => -1\n  divisibleByBoth(10, 20) => 10\n  divisibleByBoth(20, 33) => 20\n  divisibleByBoth(33, 100) => -1\n  divisibleByBoth(100, 200) => 0\n*/\nconst divisibleByBoth = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.min(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the largest positive integer that is divisible by both n and m.\n  Example:\n  divisibleByBoth(1, 5) => 5\n  divisibleByBoth(7, 5) => -1\n  divisibleByBoth(10, 20) => 20\n  divisibleByBoth(20, 33) => 33\n  divisibleByBoth(33, 100) => -1\n  divisibleByBoth(100, 200) => 0\n*/\nconst divisibleByBoth = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.max(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the smallest positive integer that is divisible by n.\n  Example:\n  divisibleByN(1, 5) => 1\n  divisibleByN(7, 5) => -1\n  divisibleByN(10, 20) => 10\n  divisibleByN(20, 33) => 20\n  divisibleByN(33, 100) => -1\n  divisibleByN(100, 200) => 0\n*/\nconst divisibleByN = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.min(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the largest positive integer that is divisible by n.\n  Example:\n  divisibleByN(1, 5) => 5\n  divisibleByN(7, 5) => -1\n  divisibleByN(10, 20) => 20\n  divisibleByN(20, 33) => 33\n  divisibleByN(33, 100) => -1\n  divisibleByN(100, 200) => 0\n*/\nconst divisibleByN = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.max(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the smallest positive integer that is divisible by m.\n  Example:\n  divisibleByM(1, 5) => 1\n  divisibleByM(7, 5) => -1\n  divisibleByM(10, 20) => 10\n  divisibleByM(20, 33) => 20\n  divisibleByM(33, 100) => -1\n  divisibleByM(100, 200) => 0\n*/\nconst divisibleByM = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.min(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the largest positive integer that is divisible by m.\n  Example:\n  divisibleByM(1, 5) => 5\n  divisibleByM(7, 5) => -1\n  divisibleByM(10, 20) => 20\n  divisibleByM(20, 33) => 33\n  divisibleByM(33, 100) => -1\n  divisibleByM(100, 200) => 0\n*/\nconst divisibleByM = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.max(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the smallest positive integer that is divisible by both n and m.\n  Example:\n  divisibleByBoth(1, 5) => 1\n  divisibleByBoth(7, 5) => -1\n  divisibleByBoth(10, 20) => 10\n  divisibleByBoth(20, 33) => 20\n  divisibleByBoth(33, 100) => -1\n  divisibleByBoth(100, 200) => 0\n*/\nconst divisibleByBoth = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  return Math.min(n, m);\n};\n\n/*\n  Write a function that takes two positive integers n and m and returns the largest positive integer that is divisible by both n and m.\n  Example:\n  divisibleByBoth(1, 5) => 5\n  divisibleByBoth(7, 5) => -1\n  divisibleByBoth(10, 20) => 20\n  divisibleByBoth(20, 33) => 33\n  divisibleByBoth(33, 100) => -1\n  divisibleByBoth(100, 200) => 0\n*/\nconst divisibleByBoth = (n, m) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits2 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits3 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits4 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits5 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits6 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits7 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits8 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits9 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits10 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits11 = (x) => {\n  const unique = [];\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(name);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength12 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength13 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength14 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength15 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength16 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength17 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength18 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength19 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];\n    const name = reversed[i];\n    result.push(`${name}${num}`);\n  }\n  return result;\n};\n\nconst byLength20 = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = sorted[i];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function g, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function h, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function i, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 9, 27, 81]\n  */\nconst i = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function j, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function k, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function l, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 9, 27, 81]\n  */\nconst l = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function m, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function n, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 9, 27, 81]\n  */\nconst n = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function o, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function p, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function q, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 3, 9, 27, 81]\n  */\nconst q = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function r, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  r(5) == [1, 3, 9, 27, 81]\n  */\nconst r = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"aecb\"\n\n  Example 2:\n\n      Input: \"A man, a plan, a canal: Panama\"\n      Output: \"aman aplanacanal: panamA\"\n      Explanation: \"aman aplanacanal: panamA\" -> \"aman planacanal: panama\"\n\n  Example 3:\n\n      Input: \"race a car\"\n      Output: \"race car\"\n      Explanation: \"race car\" -> \"racecar\"\n*/\nconst reverseString = (str) => {\n  const newStr = str.split('').reverse().join('');\n  return newStr;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" -> \"a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and are also positive integers. For example, 123 has digits 1, 2, and 3, and 123 is positive, so it counts. However, 123 has digits -1, 2, and 3, and is not positive, so it does not.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 0\n  >>> countNums([1, 1, 2]) == 1\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      count++;\n    }\n  }\n  return count;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  let flag = true;\n  \n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(arr[j] > arr[j+1]){\n        flag = false;\n        break;\n      }\n    }\n    if(flag){\n      count++;\n      flag = true;\n    }\n  }\n  \n  if(count === 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and print it on the screen. \n  \n  Input Format:\n  \n  First line contains N, the number of elements in the given array.\n  \n  Next line contains N space separated integers arr[1], arr[2],..., arr[N].\n  \n  Output Format:\n  \n  Print the maximum element in the given array on the screen.\n  \n  Constraints:\n  \n  1 <= N <= 10^5\n  0 <= arr[i] <= 10^9\n  \n  Sample Input:\n  \n  5\n  1 2 3 4 5\n  \n  Sample Output:\n  \n  5\n  \n  Explanation:\n  \n  Maximum element in the given array is 5.\n  \n  Time Complexity: O(N)\n  \n  Space Complexity: O(1)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMin = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMax = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramAvg = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMedian = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMode = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeMin = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeMax = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeAvg = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramModeMedian = (test", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.charAt(i);\n      newC += c.charAt(0);\n      s = s.substr(1);\n      c = c.substr(1);\n    } else {\n      newS += s.charAt(i);\n      newC += c.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        oddCount++;\n      }\n    }\n    oddCountArr.push(`${oddCount} odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even elements in the string i of input,\" with all i's being replaced by the number of even digits in the i'th string of input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} even elements in the str${i} of ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenOddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenOddCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        evenOddCount++;\n      }\n    }\n    evenOddCountArr.push(`${evenOddCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return evenOddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenOddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenOddCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        evenOddCount++;\n      }\n    }\n    evenOddCountArr.push(`${evenOddCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return evenOddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenOddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenOddCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        evenOddCount++;\n      }\n    }\n    evenOddCountArr.push(`${evenOddCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return evenOddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenOddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenOddCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        evenOddCount++;\n      }\n    }\n    evenOddCountArr.push(`${evenOddCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return evenOddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum < minSum) {\n      minSum = currentSum;\n      minSumIndex = i;\n    }\n  }\n  return nums[minSumIndex];\n};\n\n/*\n  Given an array of integers, find the maximum sum of all non-empty sub-arrays of numbers.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxSumIndex = i;\n    }\n  }\n  return nums[maxSumIndex];\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers.\n  Example\n  sumSubArrays([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArrays([-1, -2, -3]) == -3\n  */\nconst sumSubArrays = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > 0) {\n      sum += currentSum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the product of all non-empty sub-arrays of numbers.\n  Example\n  productSubArrays([2, 3, 4, 1, 2, 4]) == 24\n  productSubArrays([-1, -2, -3]) == -3\n  */\nconst productSubArrays = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const currentProduct = nums.reduce((acc, val) => acc * val, 1);\n    if (currentProduct > 0) {\n      product *= currentProduct;\n    }\n  }\n  return product;\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  sumSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 10\n  sumSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst sumSubArraysExceeding = (nums, num) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > num) {\n      sum += currentSum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the product of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  productSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 24\n  productSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst productSubArraysExceeding = (nums, num) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const currentProduct = nums.reduce((acc, val) => acc * val, 1);\n    if (currentProduct > num) {\n      product *= currentProduct;\n    }\n  }\n  return product;\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  sumSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 10\n  sumSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst sumSubArraysExceeding = (nums, num) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > num) {\n      sum += currentSum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the product of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  productSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 24\n  productSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst productSubArraysExceeding = (nums, num) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const currentProduct = nums.reduce((acc, val) => acc * val, 1);\n    if (currentProduct > num) {\n      product *= currentProduct;\n    }\n  }\n  return product;\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  sumSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 10\n  sumSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst sumSubArraysExceeding = (nums, num) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > num) {\n      sum += currentSum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the product of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  productSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 24\n  productSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst productSubArraysExceeding = (nums, num) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const currentProduct = nums.reduce((acc, val) => acc * val, 1);\n    if (currentProduct > num) {\n      product *= currentProduct;\n    }\n  }\n  return product;\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  sumSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 10\n  sumSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst sumSubArraysExceeding = (nums, num) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum > num) {\n      sum += currentSum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the product of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  productSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 24\n  productSubArraysExceeding([-1, -2, -3, 4], 4) == -4\n  */\nconst productSubArraysExceeding = (nums, num) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const currentProduct = nums.reduce((acc, val) => acc * val, 1);\n    if (currentProduct > num) {\n      product *= currentProduct;\n    }\n  }\n  return product;\n};\n\n/*\n  Given an array of integers, find the sum of all non-empty sub-arrays of numbers that do not exceed a given value.\n  Example\n  sumSubArraysExceeding([2, 3, 4, 1, 2, 4], 4) == 10\n  sumSubArraysExceeding([-1, -2, -3, 4], 4) == -4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = Array.from({ length: capacity }, () => new Array(bucketCapacity).fill(0));\n  const wells = grid.map((row, rowIndex) => {\n    return row.map((well, wellIndex) => {\n      if (well === 1) {\n        buckets[wellIndex][rowIndex] = 1;\n      }\n      return well;\n    });\n  });\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      if (buckets[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.\n\n  Example 1:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 3\n\n  Example 2:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 2\n\n  Example 3:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 0\n\n  Constraints:\n      * wells.length <= 10^5\n      * wells[i] -> 0 | 1\n      * bucket_capacity <= 10\n      * wells contains at least one 1\n*/\nconst maxFill2 = (wells, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill2 };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.\n\n  Example 1:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 3\n\n  Example 2:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 2\n\n  Example 3:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 0\n\n  Constraints:\n      * wells.length <= 10^5\n      * wells[i] -> 0 | 1\n      * bucket_capacity <= 10\n      * wells contains at least one 1\n*/\nconst maxFill3 = (wells, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill3 };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.\n\n  Example 1:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 3\n\n  Example 2:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 2\n\n  Example 3:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 0\n\n  Constraints:\n      * wells.length <= 10^5\n      * wells[i] -> 0 | 1\n      * bucket_capacity <= 10\n      * wells contains at least one 1\n*/\nconst maxFill4 = (wells, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill4 };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.\n\n  Example 1:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 3\n\n  Example 2:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 2\n\n  Example 3:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 0\n\n  Constraints:\n      * wells.length <= 10^5\n      * wells[i] -> 0 | 1\n      * bucket_capacity <= 10\n      * wells contains at least one 1\n*/\nconst maxFill5 = (wells, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill5 };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.\n\n  Example 1:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 3\n\n  Example 2:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 2\n\n  Example 3:\n      Input: \n          wells = [1,1,1,1]\n          bucket_capacity = 3\n      Output: 0\n\n  Constraints:\n      * wells.length <= 10^5\n      * wells[i] -> 0 | 1\n      * bucket_capacity <= 10\n      * wells contains at least one 1\n*/\nconst maxFill6 = (wells, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill6 };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  well. The array represents how many of each kind of water are in the well. \n  You can assume that there is at least one type of water in the well.\n  You want to know how many wells you can fill with water without exceeding \n  the capacity of the water bucket.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones.sort((a, b) => a - b);\n  const decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  const sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n};\n\n// Tests\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n  let ones = arr.map((x) => parseInt(x.toString(2), 10));\n  let sortedOnes = ones.sort((a, b) => a - b);\n  let decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  let sortedDecimals = decimals.sort((a, b) => a - b);\n  return sortedOnes.concat(sortedDecimals);\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n        if (s.charAt(i) === s.charAt(i + j)) {\n          words.push(s.slice(i, j + i));\n        }\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(\"\");\n    } else {\n      for (let j = 0; j < n; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArray = vowels.split(\"\");\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayIndexMax = vowelsArray.length - 1;\n  let vowelsArrayIndexMin = 0;\n  let vowelsArrayIndexMaxMin = vowelsArray.length - 2;\n  let vowelsArrayIndexMinMax = vowelsArray.length - 3;\n  let vowelsArrayIndexMinMaxMin = vowelsArray.length - 4;\n  let vowelsArrayIndexMinMaxMinMax = vowelsArray.length - 5;\n  let vowelsArrayIndexMinMaxMinMaxMin = vowelsArray.length - 6;\n  let vowelsArrayIndexMinMaxMinMaxMinMax = vowelsArray.length - 7;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMin = vowelsArray.length - 8;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 9;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 10;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 11;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 12;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 13;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 14;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 15;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 16;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 17;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 18;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 19;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 20;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length -21;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 22;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 23;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 24;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 25;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 26;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 27;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 28;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 29;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 30;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 31;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 32;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 33;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 34;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 35;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 36;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArray.length - 37;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 38;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 39;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 40;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 41;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 42;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 43;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 44;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 45;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 46;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 47;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArray.length - 48;\n  let vowelsArrayIndexMinMaxMinMaxMinMaxMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n  const maxLength = Math.max.apply(null, strings.map(s => s.length));\n  return strings.find(s => s.length === maxLength)? maxLength : 0;\n};\n\n/**\n * Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n  const minLength = Math.min.apply(null, strings.map(s => s.length));\n  return strings.find(s => s.length === minLength)? minLength : 0;\n};\n\n/**\n * Returns the index of the first occurrence of the given string in the given array, or -1 if the string is not found.\n  >>> indexOf(['a', 'b', 'c', 'd'], 'a')\n  0\n  >>> indexOf(['a', 'b', 'c', 'd'], 'b')\n  1\n  >>> indexOf(['a', 'b', 'c', 'd'], 'c')\n  2\n  >>> indexOf(['a', 'b', 'c', 'd'], 'd')\n  -1\n  */\nconst indexOf = (array, string) => {\n  return array.indexOf(string);\n};\n\n/**\n * Returns the index of the last occurrence of the given string in the given array, or -1 if the string is not found.\n  >>> lastIndexOf(['a', 'b', 'c', 'd'], 'a')\n  3\n  >>> lastIndexOf(['a', 'b', 'c', 'd'], 'b')\n  2\n  >>> lastIndexOf(['a', 'b', 'c', 'd'], 'c')\n  -1\n  */\nconst lastIndexOf = (array, string) => {\n  return array.lastIndexOf(string);\n};\n\n/**\n * Returns the string at the given index in the given array, or the empty string if the index is out of bounds.\n  >>> getAt(['a', 'b', 'c', 'd'], 1)\n  'b'\n  >>> getAt(['a', 'b', 'c', 'd'], 3)\n  'd'\n  >>> getAt(['a', 'b', 'c', 'd'], -1)\n  ''\n  */\nconst getAt = (array, index) => {\n  return array[index] || '';\n};\n\n/**\n * Returns the string at the given index in the given array, or the empty string if the index is out of bounds.\n  >>> getAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefault = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAt(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAt(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAt(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefault = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAt(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAt(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAt(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 3, 0)\n  'd'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], -1, 0)\n  '0'\n  */\nconst getAtOrDefaultAtOrDefaultAt = (array, index, defaultValue) => {\n  return array[index] || defaultValue;\n};\n\n/**\n * Returns the string at the given index in the given array, or the given default value if the index is out of bounds.\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', 'b', 'c', 'd'], 1, 0)\n  'b'\n  >>> getAtOrDefaultAtOrDefaultAtOrDefault(['a', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  maximum,\n};\n\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr[maxIndex];\n}\n\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1]));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maximum (arr) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an integer array arr and an integer k, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(next);\n    prev = next;\n    current = next;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(next);\n    prev = next;\n    current = next;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are 1, 5, and 16.\n  */\nconst getCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(next);\n    prev = next;\n    current = next;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are 1, 5, and 16.\n  */\nconst getReverseCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(next);\n    prev = next;\n    current = next;\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are 1, 5, and 16.\n  */\nconst getReverseCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(next);\n    prev = next;\n    current = next;\n  }\n  return result.sort((a, b) => b - a, true);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatzDesc(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are 1, 5, and 16.\n  */\nconst getReverseCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  let next = 1;\n  while (current < n) {\n    if (prev % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3 + 1;\n    }\n    result.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let dayArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = monthArray.length;\n  let dayArrayLength = dayArray.length;\n  let monthIndex = -1;\n  let dayIndex = -1;\n  let yearIndex = -1;\n  let month = 0;\n  let day = 0;\n  let year = 0;\n\n  if (dateArrayLength < 3 || dateArrayLength > 4) {\n    return false;\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '') {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '' || dateArray[i] === '-') {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      month = parseInt(dateArray[i]);\n      if (month < 1 || month > 12) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      day = parseInt(dateArray[i]);\n      if (day < 1 || day > dayArray[month - 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      year = parseInt(dateArray[i]);\n      if (year < 1000 || year > 9999) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n/*\n  Write a function that takes a date string and returns the number of days \n  between the current date and the date in the string in mm-dd-yyyy format.\n  If the date string is not in the correct format or if the date string \n  is empty return -1.\n  \n  example: \n  daysBetween('03-11-2000') => 3\n\n  daysBetween('15-01-2012') => -1\n\n  daysBetween('04-0-2040') => -1\n\n  daysBetween('06-04-2020') => 31\n\n  daysBetween('06/04/2020') => -1\n  */\nconst daysBetween = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let dayArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = monthArray.length;\n  let dayArrayLength = dayArray.length;\n  let monthIndex = -1;\n  let dayIndex = -1;\n  let yearIndex = -1;\n  let month = 0;\n  let day = 0;\n  let year = 0;\n\n  if (dateArrayLength < 3 || dateArrayLength > 4) {\n    return -1;\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '') {\n      return -1;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '' || dateArray[i] === '-') {\n      return -1;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      month = parseInt(dateArray[i]);\n      if (month < 1 || month > 12) {\n        return -1;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      day = parseInt(dateArray[i]);\n      if (day < 1 || day > dayArray[month - 1]) {\n        return -1;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      year = parseInt(dateArray[i]);\n      if (year < 1000 || year > 9999) {\n        return -1;\n      }\n    }\n  }\n\n  return new Date(date).getTime() - new Date(dateArray[0] + '-' + dateArray[1] + '-' + dateArray[2]).getTime();\n};\n\n/*\n  Write a function that takes a date string and returns the number of days \n  between the current date and the date in the string in mm-dd-yyyy format.\n  If the date string is not in the correct format or if the date string \n  is empty return -1.\n  \n  example: \n  daysBetween('03-11-2000') => 3\n\n  daysBetween('15-01-2012') => -1\n\n  daysBetween('04-0-2040') => -1\n\n  daysBetween('06-04-2020') => 31\n\n  daysBetween('06/04/2020') => -1\n  */\nconst daysBetween = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let dayArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = monthArray.length;\n  let dayArrayLength = dayArray.length;\n  let monthIndex = -1;\n  let dayIndex = -1;\n  let yearIndex = -1;\n  let month = 0;\n  let day = 0;\n  let year = 0;\n\n  if (dateArrayLength < 3 || dateArrayLength > 4) {\n    return -1;\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '') {\n      return -1;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i] === '' || dateArray[i] === '-') {\n      return -1;\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      month = parseInt(dateArray[i]);\n      if (month < 1 || month > 12) {\n        return -1;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      day = parseInt(dateArray[i]);\n      if (day < 1 || day > dayArray[month - 1]) {\n        return -1;\n      }\n    }\n  }\n\n  for (let i = 0; i < dateArrayLength; i++) {\n    if (dateArray[i]!== '-') {\n      year = parseInt(dateArray[i]);\n      if (year < 1000 || year > 9999) {\n        return -1;\n      }\n    }\n  }\n\n  return new Date(date).getTime() - new Date(dateArray[0] + '-' + dateArray[1] + '-' + dateArray[2]).getTime();\n};\n\n/*\n  Write a function that takes a date string and returns the number of days \n  between the current date and the date in the string in mm-dd-yyyy format.\n  If the date string is not in the correct format or if the date string \n  is empty return -1.\n  \n  example: \n  daysBetween('03-11-2000') => 3\n\n  daysBetween('15-01-2012') => -1\n\n  daysBetween('04-0-2040') => -1\n\n  daysBetween('06-04-2020') => 31\n\n  daysBetween('06/04/2020') => -1\n  */\nconst daysBetween = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let dayArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = monthArray.length;\n  let dayArrayLength = dayArray.length;\n  let monthIndex = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.match(/\\w+/g);\n  const spaces = txt.match(/\\s/g);\n  const commas = txt.match(/,/g);\n  const letters = txt.match(/[a-z]+/g);\n  const numbers = txt.match(/\\d+/g);\n  const letterOrNumber = letters.length % 2 === 0\n   ? letters.length / 2\n    : letters.length / 2 + 1;\n  const splitWords = words.map((word) => {\n    if (spaces.includes(word)) {\n      return word.split(' ');\n    }\n    if (commas.includes(word)) {\n      return word.split(',');\n    }\n    if (letters.includes(word)) {\n      return word.split('');\n    }\n    if (numbers.includes(word)) {\n      return word.split('');\n    }\n    return word.split('').map((letter) => {\n      if (letter === 'a') {\n        return 'a';\n      }\n      if (letter === 'b') {\n        return 'b';\n      }\n      if (letter === 'c') {\n        return 'c';\n      }\n      if (letter === 'd') {\n        return 'd';\n      }\n      if (letter === 'e') {\n        return 'e';\n      }\n      if (letter === 'f') {\n        return 'f';\n      }\n      if (letter === 'g') {\n        return 'g';\n      }\n      if (letter === 'h') {\n        return 'h';\n      }\n      if (letter === 'i') {\n        return 'i';\n      }\n      if (letter === 'j') {\n        return 'j';\n      }\n      if (letter === 'k') {\n        return 'k';\n      }\n      if (letter === 'l') {\n        return 'l';\n      }\n      if (letter ==='m') {\n        return'm';\n      }\n      if (letter === 'n') {\n        return 'n';\n      }\n      if (letter === 'o') {\n        return 'o';\n      }\n      if (letter === 'p') {\n        return 'p';\n      }\n      if (letter === 'q') {\n        return 'q';\n      }\n      if (letter === 'r') {\n        return 'r';\n      }\n      if (letter ==='s') {\n        return's';\n      }\n      if (letter === 't') {\n        return 't';\n      }\n      if (letter === 'u') {\n        return 'u';\n      }\n      if (letter === 'v') {\n        return 'v';\n      }\n      if (letter === 'w') {\n        return 'w';\n      }\n      if (letter === 'x') {\n        return 'x';\n      }\n      if (letter === 'y') {\n        return 'y';\n      }\n      if (letter === 'z') {\n        return 'z';\n      }\n    });\n  });\n  return splitWords;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.match(/\\w+/g);\n  const spaces = txt.match(/\\s/g);\n  const commas = txt.match(/,/g);\n  const letters = txt.match(/[a-z]+/g);\n  const numbers = txt.match(/\\d+/g);\n  const letterOrNumber = letters.length % 2 === 0\n   ? letters.length / 2\n    : letters.length / 2 + 1;\n  const splitWords = words.map((word) => {\n    if (spaces.includes(word)) {\n      return word.split(' ');\n    }\n    if (commas.includes(word)) {\n      return word.split(',');\n    }\n    if (letters.includes(word)) {\n      return word.split('');\n    }\n    if (numbers.includes(word)) {\n      return word.split('');\n    }\n    return word.split('').map((letter) => {\n      if (letter === 'a') {\n        return 'a';\n      }\n      if (letter === 'b') {\n        return 'b';\n      }\n      if (letter === 'c') {\n        return 'c';\n      }\n      if (letter === 'd') {\n        return 'd';\n      }\n      if (letter === 'e') {\n        return 'e';\n      }\n      if (letter === 'f') {\n        return 'f';\n      }\n      if (letter === 'g') {\n        return 'g';\n      }\n      if (letter === 'h') {\n        return 'h';\n      }\n      if (letter === 'i') {\n        return 'i';\n      }\n      if (letter === 'j') {\n        return 'j';\n      }\n      if (letter === 'k') {\n        return 'k';\n      }\n      if (letter === 'l') {\n        return 'l';\n      }\n      if (letter ==='m') {\n        return'm';\n      }\n      if (letter === 'n') {\n        return 'n';\n      }\n      if (letter === 'o') {\n        return 'o';\n      }\n      if (letter === 'p') {\n        return 'p';\n      }\n      if (letter === 'q') {\n        return 'q';\n      }\n      if (letter === 'r') {\n        return 'r';\n      }\n      if (letter ==='s') {\n        return's';\n      }\n      if (letter === 't') {\n        return 't';\n      }\n      if (letter === 'u') {\n        return 'u';\n      }\n      if (letter === 'v') {\n        return 'v';\n      }\n      if (letter === 'w') {\n        return 'w';\n      }\n      if (letter === 'x') {\n        return 'x';\n      }\n      if (letter === 'y') {\n        return 'y';\n      }\n      if (letter === 'z') {\n        return 'z';\n      }\n    });\n  });\n  return splitWords;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.match(/\\w+/g);\n  const spaces = txt.match(/\\s/g);\n  const commas = txt.match(/,/g);\n  const letters = txt.match(/[a-z]+/g);\n  const numbers = txt.match(/\\d+/g);\n  const letterOrNumber = letters.length % 2 === 0\n   ? letters.length / 2\n    : letters.length / 2 + 1;\n  const splitWords = words.map((word) => {\n    if (spaces.includes(word)) {\n      return word.split(' ');\n    }\n    if (commas.includes(word)) {\n      return word.split(',');\n    }\n    if (letters.includes(word)) {\n      return word.split('');\n    }\n    if (numbers.includes(word)) {\n      return word.split('');\n    }\n    return word.split('').map((letter) => {\n      if (letter === 'a') {\n        return 'a';\n      }\n      if (letter === 'b') {\n        return 'b';\n      }\n      if (letter === 'c') {\n        return 'c';\n      }\n      if (letter === 'd') {\n        return 'd';\n      }\n      if (letter === 'e') {\n        return 'e';", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start1, end1] = interval1\n  let [start2, end2] = interval2\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      end1 = end2\n    } else {\n      start2 = start1\n      end2 = end1\n    }\n  }\n  \n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const result = [];\n  const visited = new Array(N).fill(0);\n  const stack = [];\n  \n  for (let i = 0; i < N; i++) {\n    stack[i] = i;\n  }\n  \n  while (stack.length > 0) {\n    const top = stack.pop();\n    \n    if (top === N - 1) {\n      result.push(M[top]);\n      continue;\n    }\n    \n    for (let j = 0; j < N; j++) {\n      if (visited[j] === 0) {\n        M[top] = grid[top][j];\n        visited[j] = 1;\n        stack.push(j);\n      }\n    }\n  }\n  \n  return result;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a |>\n<| c |>\nI believe this solution will fail if you have a grid like `[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]`\n<|/ c |>\n<| c |>\nYes, it will. That's why I said \"a grid like `[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]`\"\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment. Sorry about that. Your solution works perfectly for that case. Thanks for your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  let path = [];\n  let visited = [];\n  let minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    visited[i] = 0;\n  }\n  for (let i = 0; i < grid.length; i++) {\n    path.push(grid[i]);\n  }\n  while (path.length > 0) {\n    let top = path.pop();\n    if (top === k) {\n      minPath.push(top);\n      continue;\n    }\n    for (let j = 0; j < grid.length; j++) {\n      if (visited[j] === 0) {\n        visited[j] = 1;\n        path.push(grid[j]);\n      }\n    }\n  }\n  return minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  let path = [];\n  let visited = [];\n  let minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    visited[i] = 0;\n  }\n  for (let i = 0; i < grid.length; i++) {\n    path.push(grid[i]);\n  }\n  while (path.length > 0) {\n    let top = path.pop();\n    if (top === k) {\n      minPath.push(top);\n      continue;\n    }\n    for (let j = 0; j < grid.length; j++) {\n      if (visited[j] === 0) {\n        visited[j] = 1;\n        path.push(grid[j]);\n      }\n    }\n  }\n  return minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n  let path = [];\n  let visited = [];\n  let minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    visited[i] = 0;\n  }\n  for (let i = 0; i < grid.length; i++) {\n    path.push(grid[i]);\n  }\n  while (path.length > 0) {\n    let top = path.pop();\n    if (top === k) {\n      minPath.push(top);\n      continue;\n    }\n    for (let j = 0; j < grid.length; j++) {\n      if (visited[j] === 0) {\n        visited[j] = 1;\n        path.push(grid[j]);\n      }\n    }\n  }\n  return minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  let path = [];\n  let visited = [];\n  let minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    visited[i] = 0;\n  }\n  for (let i = 0; i < grid.length; i++) {\n    path.push(grid[i]);\n  }\n  while (path.length > 0) {\n    let top = path.pop();\n    if (top === k) {\n      minPath.push(top);\n      continue;\n    }\n    for (let j = 0; j < grid.length; j++) {\n      if (visited[j] === 0) {\n        visited[j] = 1;\n        path.push(grid[j]);\n      }\n    }\n  }\n  return minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  let path = [];\n  let visited = [];\n  let minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    visited[i] = 0;\n  }\n  for (let i = 0; i < grid.length; i++) {\n    path.push(grid[i]);\n  }\n  while (path.length > 0) {\n    let top = path.pop();\n    if (top === k) {\n      minPath.push(top);\n      continue;\n    }\n    for (let j = 0; j < grid.length; j++) {\n      if (visited[j] === 0) {\n        visited[j] = 1;\n        path.push(grid[j]);\n      }\n    }\n  }\n  return minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result = minPath(grid, 3);\nconsole.log(result);</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greatestCommonDivisor(b, a % b);\n  return greatestCommonDivisor(a, b % a);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * least common multiple of a and b\n * >>> leastCommonMultiple(7, 3)\n * 21\n * >>> leastCommonMultiple(7, 9)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 71\n * >>> leastCommonMultiple(7, 11)\n * 71\n * >>> leastCommonMultiple(7, 12)\n * 14\n * >>> leastCommonMultiple(7, 13)\n * 14\n * >>> leastCommonMultiple(7, 14)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 21\n * >>> leastCommonMultiple(7, 16)\n * 28\n * >>> leastCommonMultiple(7, 17)\n * 28\n * >>> leastCommonMultiple(7, 18)\n * 38\n * >>> leastCommonMultiple(7, 19)\n * 38\n * >>> leastCommonMultiple(7, 20)\n * 57\n * >>> leastCommonMultiple(7, 21)\n * 57\n * >>> leastCommonMultiple(7, 22)\n * 72\n * >>> leastCommonMultiple(7, 23)\n * 72\n * >>> leastCommonMultiple(7, 24)\n * 78\n * >>> leastCommonMultiple(7, 25)\n * 78\n * >>> leastCommonMultiple(7, 26)\n * 85\n * >>> leastCommonMultiple(7, 27)\n * 85\n * >>> leastCommonMultiple(7, 28)\n * 91\n * >>> leastCommonMultiple(7, 29)\n * 91\n * >>> leastCommonMultiple(7, 30)\n * 97\n * >>> leastCommonMultiple(7, 31)\n * 97\n * >>> leastCommonMultiple(7, 32)\n * 103\n * >>> leastCommonMultiple(7, 33)\n * 103\n * >>> leastCommonMultiple(7, 34)\n * 107\n * >>> leastCommonMultiple(7, 35)\n * 107\n * >>> leastCommonMultiple(7, 36)\n * 113\n * >>> leastCommonMultiple(7, 37)\n * 113\n * >>> leastCommonMultiple(7, 38)\n * 119\n * >>> leastCommonMultiple(7, 39)\n * 119\n * >>> leastCommonMultiple(7, 40)\n * 121\n * >>> leastCommonMultiple(7, 41)\n * 121\n * >>> leastCommonMultiple(7, 42)\n * 123\n * >>> leastCommonMultiple(7, 43)\n * 123\n * >>> leastCommonMultiple(7, 44)\n * 127\n * >>> leastCommonMultiple(7, 45)\n * 127\n * >>> leastCommonMultiple(7, 46)\n * 131\n * >>> leastCommonMultiple(7, 47)\n * 131\n * >>> leastCommonMultiple(7, 48)\n * 135\n * >>> leastCommonMultiple(7, 49)\n * 135\n * >>> leastCommonMultiple(7, 50)\n * 139\n * >>> leastCommonMultiple(7, 51)\n * 139\n * >>> leastCommonMultiple(7, 52)\n * 141\n * >>> leastCommonMultiple(7, 53)\n * 141\n * >>> leastCommonMultiple(7, 54)\n * 143\n * >>> leastCommonMultiple(7, 55)\n * 143\n * >>> leastCommonMultiple(7, 56)\n * 145\n * >>> leastCommonMultiple(7, 57)\n * 145\n * >>> leastCommonMultiple(7, 58)\n * 147\n * >>> leastCommonMultiple(7, 59)\n * 147\n * >>> leastCommonMultiple(7, 60)\n * 151\n * >>> leastCommonMultiple(7, 61)\n * 151\n * >>> leastCommonMultiple(7, 62)\n * 153\n * >>> leastCommonMultiple(7, 63)\n * 153\n * >>> leastCommonMultiple(7, 64)\n * 157\n * >>> leastCommonMultiple(7, 65)\n * 157\n * >>> leastCommonMultiple(7, 66)\n * 159\n * >>> leastCommonMultiple(7, 67)\n * 159\n * >>> leastCommonMultiple(7, 68)\n * 161\n * >>> leastCommonMultiple(7, 69)\n * 161\n * >>> leastCommonMultiple(7, 70)\n * 163\n * >>> leastCommonMultiple(7, 71)\n * 163\n * >>> leastCommonMultiple(7, 72)\n * 165\n * >>> leastCommonMultiple(7, 73)\n * 165\n * >>> leastCommonMultiple(7, 74)\n * 167\n * >>> leastCommonMultiple(7, 75)\n * 167\n * >>> leastCommonMultiple(7, 76)\n * 169\n * >>> leastCommonMultiple(7, 77)\n * 169\n * >>> leastCommonMultiple(7, 78)\n * 171\n * >>> leastCommonMultiple(7, 79)\n * 171\n * >>> leastCommonMultiple(7, 80)\n * 173\n * >>> leastCommonMultiple(7, 81)\n * 173\n * >>> leastCommonMultiple(7, 82)\n * 175\n * >>> leastCommonMultiple(7, 83)\n * 175\n * >>> leastCommonMultiple(7, 84)\n * 177\n * >>> leastCommonMultiple(7, 85)\n * 177\n * >>> leastCommonMultiple(7, 86)\n * 179\n * >>> leastCommonMultiple(7, 87)\n * 179\n * >>> leastCommonMultiple(7, 88)\n * 181\n * >>> leastCommonMultiple(7, 89)\n * 181\n * >>> leastCommonMultiple(7, 90)\n * 183\n * >>> leastCommonMultiple(7, 91)\n * 183\n * >>> leastCommonMultiple(7, 92)\n * 185\n * >>> leastCommonMultiple(7, 93)\n * 185\n * >>> leastCommonMultiple(7, 94)\n * 187\n * >>> leastCommonMultiple(7, 95)\n * 187\n * >>> leastCommonMultiple(7, 96)\n * 189\n * >>> leastCommonMultiple(7, 97)\n * 189\n * >>> leastCommonMultiple(7, 98)\n * 191\n * >>> leastCommonMultiple(7, 99)\n * 191\n * >>> leastCommonMultiple(7, 100)\n * 193\n * >>> leastCommonMultiple(7, 101)\n * 193\n * >>> leastCommonMultiple(7, 102)\n * 195\n * >>> leastCommonMultiple(7, 103)\n * 195\n * >>> leastCommonMultiple(7, 104)\n * 197\n * >>> leastCommonMultiple(7, 105)\n * 197\n * >>> leastCommonMultiple(7, 106)\n * 199\n * >>> leastCommonMultiple(7, 107)\n * 199\n * >>> leastCommonMultiple(7, 108)\n * 201\n * >>> leastCommonMultiple(7, 109)\n * 201\n * >>> leastCommonMultiple(7, 110)\n * 203\n * >>> leastCommonMultiple(7, 111)\n * 203\n * >>> leastCommonMultiple(7, 112)\n * 205\n * >>> leastCommonMultiple(7, 113)\n * 205\n * >>> leastCommonMultiple(7, 114)\n * 207\n * >>> leastCommonMultiple(7, 115)\n * 207\n * >>> leastCommonMultiple(7, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  arr.push(4);\n  arr.push(5);\n  arr.push(6);\n  arr.push(7);\n  arr.push(8);\n  arr.push(9);\n  arr.push(10);\n  arr.push(11);\n  arr.push(12);\n  arr.push(13);\n  arr.push(14);\n  arr.push(15);\n  arr.push(16);\n  arr.push(17);\n  arr.push(18);\n  arr.push(19);\n  arr.push(20);\n  arr.push(21);\n  arr.push(22);\n  arr.push(23);\n  arr.push(24);\n  arr.push(25);\n  arr.push(26);\n  arr.push(27);\n  arr.push(28);\n  arr.push(29);\n  arr.push(30);\n  arr.push(31);\n  arr.push(32);\n  arr.push(33);\n  arr.push(34);\n  arr.push(35);\n  arr.push(36);\n  arr.push(37);\n  arr.push(38);\n  arr.push(39);\n  arr.push(40);\n  arr.push(41);\n  arr.push(42);\n  arr.push(43);\n  arr.push(44);\n  arr.push(45);\n  arr.push(46);\n  arr.push(47);\n  arr.push(48);\n  arr.push(49);\n  arr.push(50);\n  arr.push(51);\n  arr.push(52);\n  arr.push(53);\n  arr.push(54);\n  arr.push(55);\n  arr.push(56);\n  arr.push(57);\n  arr.push(58);\n  arr.push(59);\n  arr.push(60);\n  arr.push(61);\n  arr.push(62);\n  arr.push(63);\n  arr.push(64);\n  arr.push(65);\n  arr.push(66);\n  arr.push(67);\n  arr.push(68);\n  arr.push(69);\n  arr.push(70);\n  arr.push(71);\n  arr.push(72);\n  arr.push(73);\n  arr.push(74);\n  arr.push(75);\n  arr.push(76);\n  arr.push(77);\n  arr.push(78);\n  arr.push(79);\n  arr.push(80);\n  arr.push(81);\n  arr.push(82);\n  arr.push(83);\n  arr.push(84);\n  arr.push(85);\n  arr.push(86);\n  arr.push(87);\n  arr.push(88);\n  arr.push(89);\n  arr.push(90);\n  arr.push(91);\n  arr.push(92);\n  arr.push(93);\n  arr.push(94);\n  arr.push(95);\n  arr.push(96);\n  arr.push(97);\n  arr.push(98);\n  arr.push(99);\n  arr.push(100);\n  arr.push(101);\n  arr.push(102);\n  arr.push(103);\n  arr.push(104);\n  arr.push(105);\n  arr.push(106);\n  arr.push(107);\n  arr.push(108);\n  arr.push(109);\n  arr.push(110);\n  arr.push(111);\n  arr.push(112);\n  arr.push(113);\n  arr.push(114);\n  arr.push(115);\n  arr.push(116);\n  arr.push(117);\n  arr.push(118);\n  arr.push(119);\n  arr.push(120);\n  arr.push(121);\n  arr.push(122);\n  arr.push(123);\n  arr.push(124);\n  arr.push(125);\n  arr.push(126);\n  arr.push(127);\n  arr.push(128);\n  arr.push(129);\n  arr.push(130);\n  arr.push(131);\n  arr.push(132);\n  arr.push(133);\n  arr.push(134);\n  arr.push(135);\n  arr.push(136);\n  arr.push(137);\n  arr.push(138);\n  arr.push(139);\n  arr.push(140);\n  arr.push(141);\n  arr.push(142);\n  arr.push(143);\n  arr.push(144);\n  arr.push(145);\n  arr.push(146);\n  arr.push(147);\n  arr.push(148);\n  arr.push(149);\n  arr.push(150);\n  arr.push(151);\n  arr.push(152);\n  arr.push(153);\n  arr.push(154);\n  arr.push(155);\n  arr.push(156);\n  arr.push(157);\n  arr.push(158);\n  arr.push(159);\n  arr.push(160);\n  arr.push(161);\n  arr.push(162);\n  arr.push(163);\n  arr.push(164);\n  arr.push(165);\n  arr.push(166);\n  arr.push(167);\n  arr.push(168);\n  arr.push(169);\n  arr.push(170);\n  arr.push(171);\n  arr.push(172);\n  arr.push(173);\n  arr.push(174);\n  arr.push(175);\n  arr.push(176);\n  arr.push(177);\n  arr.push(178);\n  arr.push(179);\n  arr.push(180);\n  arr.push(181);\n  arr.push(182);\n  arr.push(183);\n  arr.push(184);\n  arr.push(185);\n  arr.push(186);\n  arr.push(187);\n  arr.push(188);\n  arr.push(189);\n  arr.push(190);\n  arr.push(191);\n  arr.push(192);\n  arr.push(193);\n  arr.push(194);\n  arr.push(195);\n  arr.push(196);\n  arr.push(197);\n  arr.push(198);\n  arr.push(199);\n  arr.push(200);\n  arr.push(201);\n  arr.push(202);\n  arr.push(203);\n  arr.push(204);\n  arr.push(205);\n  arr.push(206);\n  arr.push(207);\n  arr.push(208);\n  arr.push(209);\n  arr.push(210);\n  arr.push(211);\n  arr.push(212);\n  arr.push(213);\n  arr.push(214);\n  arr.push(215);\n  arr.push(216);\n  arr.push(217);\n  arr.push(218);\n  arr.push(219);\n  arr.push(220);\n  arr.push(221);\n  arr.push(222);\n  arr.push(223);\n  arr.push(224);\n  arr.push(225);\n  arr.push(226);\n  arr.push(227);\n  arr.push(228);\n  arr.push(229);\n  arr.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, digits(235) returns 50.\n  For example:\n  digits(235) == 50\n  digits(12) == 120\n  */\nconst reverseDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n/*GIf you return a positive integer n, you get the product of the digits of the number in reverse order. For example, evenDigits(235) returns 50.\n  For example:\n  evenDigits(235) == 50\n  evenDigits(12) == 120\n  */\nconst reverseEvenDigits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 10;\n  }\n  return product;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastOpeningBrackets = 0;\n  let lastClosingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        return false;\n      }\n      openingBrackets--;\n    } else if (char === ']' && openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      closingBrackets--;\n    }\n\n    if (openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      lastOpeningBrackets = openingBrackets;\n      lastClosingBrackets = closingBrackets;\n    }\n  }\n\n  return lastOpeningBrackets === 0 && lastClosingBrackets === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastOpeningBrackets = 0;\n  let lastClosingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        return false;\n      }\n      openingBrackets--;\n    } else if (char === ']' && openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      closingBrackets--;\n    }\n\n    if (openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      lastOpeningBrackets = openingBrackets;\n      lastClosingBrackets = closingBrackets;\n    }\n  }\n\n  return lastOpeningBrackets === 0 && lastClosingBrackets === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastOpeningBrackets = 0;\n  let lastClosingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        return false;\n      }\n      openingBrackets--;\n    } else if (char === ']' && openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      closingBrackets--;\n    }\n\n    if (openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      lastOpeningBrackets = openingBrackets;\n      lastClosingBrackets = closingBrackets;\n    }\n  }\n\n  return lastOpeningBrackets === 0 && lastClosingBrackets === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastOpeningBrackets = 0;\n  let lastClosingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        return false;\n      }\n      openingBrackets--;\n    } else if (char === ']' && openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      closingBrackets--;\n    }\n\n    if (openingBrackets === 0 && closingBrackets === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      lastOpeningBrackets = openingBrackets;\n      lastClosingBrackets = closingBrackets;\n    }\n  }\n\n  return lastOpeningBrackets === 0 && lastClosingBrackets === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastOpeningBrackets = 0;\n  let lastClosingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        return false;\n      }\n      openingBrackets--;\n    } else if (char === ']' && openingBrackets === 0 && closing", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter =!lastChar.match(/[a-z]/);\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a digit and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharANumber =!lastChar.match(/[0-9]/);\n  return isLastCharANumber;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsASpecialChar(\"apple pie\") ➞ false\n  checkIfLastCharIsASpecialChar(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpecialChar(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpecialChar(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpecialChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharASpecialChar =!lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,)]/);\n  return isLastCharASpecialChar;\n};\n\n/* Create a function that returns true if the last character in a given string is a symbol and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsASymbol(\"apple pie\") ➞ false\n  checkIfLastCharIsASymbol(\"apple pi e\") ➞ true\n  checkIfLastCharIsASymbol(\"apple pi e \") ➞ false\n  checkIfLastCharIsASymbol(\"\") ➞ false\n  */\nconst checkIfLastCharIsASymbol = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharASymbol =!lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,)]/);\n  return isLastCharASymbol;\n};\n\n/* Create a function that returns true if the last character in a given string is a word and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsAWord(\"apple pie\") ➞ false\n  checkIfLastCharIsAWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsAWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsAWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAWord =!lastChar.match(/[a-z]/) &&!lastChar.match(/[0-9]/) &&!lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,)]/);\n  return isLastCharAWord;\n};\n\n/* Create a function that returns true if the last character in a given string is a sentence and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsASentence(\"apple pie\") ➞ false\n  checkIfLastCharIsASentence(\"apple pi e\") ➞ true\n  checkIfLastCharIsASentence(\"apple pi e \") ➞ false\n  checkIfLastCharIsASentence(\"\") ➞ false\n  */\nconst checkIfLastCharIsASentence = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharASentence =!lastChar.match(/[a-z]/) &&!lastChar.match(/[0-9]/) &&!lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,)]/) &&!lastChar.match(/[A-Z]/);\n  return isLastCharASentence;\n};\n\n/* Create a function that returns true if the last character in a given string is a sentence and is not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsANonWord(\"apple pie\") ➞ false\n  checkIfLastCharIsANonWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsANonWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsANonWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsANonWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharANonWord =!lastChar.match(/[a-z]/) &&!lastChar.match(/[0-9]/) &&!lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~,(,)]/) &&!lastChar.match(/[A-Z]/);\n  return isLastCharANonWord;\n};\n\n/* Create a function that returns true if the last character in a given string is a sentence and is not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsANonWord(\"apple pie\") ➞ false\n  checkIfLastCharIsANonWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsANonWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsANonWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsANonWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharANonWord =!lastChar.match(/[a-z]/) &&!lastChar.match(/[0-9]/) &&!lastChar.match(/[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReturns the smallest index of an element that is not smaller than or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverse = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*CReturns the index of the first element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeFirst = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the last element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLast = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndex = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the first element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeFirstIndex = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the last element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLastIndex = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndexReverse = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the first element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeFirstIndexReverse = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the last element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLastIndexReverse = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndexFirst = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndexLast = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndex = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the first element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeFirstIndexFirst = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndexFirst = (arr, condition) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the last element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLastIndexLast = (arr, condition) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*CReturns the index of the element that satisfies the given condition. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeIndexLast = (arr, condition) => {\n  for (let i = arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegative = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersPositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegative = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersPositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegative = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersPositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      largest = Math.max(largest, lst[i]);\n    } else {\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer and \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"==\") return b\n  if (b === \"==\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!\") return b\n  if (b === \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even and odd numbers\n  Example\n  isEqualToSumEvenOdd(-4) == false\n  isEqualToSumEvenOdd(-6) == false\n  isEqualToSumEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenNegative(4) == false\n  isEqualToSumEvenNegative(6) == false\n  isEqualToSumEvenNegative(8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddNegative(4) == false\n  isEqualToSumOddNegative(6) == false\n  isEqualToSumOddNegative(8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(-4) == false\n  isEqualToSumOddNegative(-6) == false\n  isEqualToSumOddNegative(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even and odd numbers\n  Example\n  isEqualToSumEvenOddNegative(4) == false\n  isEqualToSumEvenOddNegative(6) == false\n  isEqualToSumEvenOddNegative(8) == true\n  */\nconst isEqualToSumEvenOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even and odd numbers\n  Example\n  isEqualToSumEvenOddNegative(-4) == false\n  isEqualToSumEvenOddNegative(-6) == false\n  isEqualToSumEvenOddNegative(-8) == true\n  */\nconst isEqualToSumEvenOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(4) == false\n  isEqualToSumEvenNegative(6) == false\n  isEqualToSumEvenNegative(8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(4) == false\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials = (arr) => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(specialFactorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials2 = (arr) => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials3 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials4 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials5 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials6 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials7 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials8 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials9 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials10 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials11 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials12 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials13 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials14 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials15 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials16 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials17 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials18 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials19 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials20 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials21 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials22 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));\n  }\n  return factorials;\n};\n\n/*\n  A function that receives an array of integers and returns an array of\n  factorials of the integers given.\n*/\nconst factorials23 = arr => {\n  let factorials = [];\n  for (let i = 0; i < arr.length; i++) {\n    factorials.push(factorial(arr[i]));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = minLength - 1; i >= 0; i--) {\n    suffixes.push(string.slice(i));\n  }\n  return suffixes;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 2)\n  ['ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 3)\n  ['abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 4)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 5)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 6)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 7)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 8)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 9)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 10)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 11)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 12)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 13)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 14)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 15)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIMUM_STRING_LENGTH);\n  for (let i = 0; i < minLength; i++) {\n    substrings.push(string.slice(0, i));\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 16)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  let minLength = Math.min(string.length, MINIM", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/ /g, \"_\")\n   .replace(/  +/g, \"_\")\n   .replace(/  +/g, \"-\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");\n};\n\n/*\n  A simple function to convert a number to a string with leading zeros.\n  Example: numToString(5) == \"05\"\n*/\nconst numToString = (num) => {\n  return String(num).padStart(2, \"0\");", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Your code here\n  let file_name = file_name.toLowerCase();\n  let dot_index = file_name.indexOf(\".\");\n  let first_letter = file_name.substring(0, dot_index);\n  let valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let has_valid_chars = false;\n  for (let i = 0; i < file_name.length; i++) {\n    if (valid_chars.indexOf(file_name[i]) == -1) {\n      has_valid_chars = false;\n      break;\n    } else {\n      has_valid_chars = true;\n    }\n  }\n  if (has_valid_chars && dot_index > 0 && first_letter.length == 1 && first_letter >= \"a\" && first_letter <= \"z\") {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Your code here\n  let file_name = file_name.toLowerCase();\n  let dot_index = file_name.indexOf(\".\");\n  let first_letter = file_name.substring(0, dot_index);\n  let valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let has_valid_chars = false;\n  for (let i = 0; i < file_name.length; i++) {\n    if (valid_chars.indexOf(file_name[i]) == -1) {\n      has_valid_chars = false;\n      break;\n    } else {\n      has_valid_chars = true;\n    }\n  }\n  if (has_valid_chars && dot_index > 0 && first_letter.length == 1 && first_letter >= \"a\" && first_letter <= \"z\") {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Your code here\n  let file_name = file_name.toLowerCase();\n  let dot_index = file_name.indexOf(\".\");\n  let first_letter = file_name.substring(0, dot_index);\n  let valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let has_valid_chars = false;\n  for (let i = 0; i < file_name.length; i++) {\n    if (valid_chars.indexOf(file_name[i]) == -1) {\n      has_valid_chars = false;\n      break;\n    } else {\n      has_valid_chars = true;\n    }\n  }\n  if (has_valid_chars && dot_index > 0 && first_letter.length == 1 && first_letter >= \"a\" && first_letter <= \"z\") {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Your code here\n  let file_name = file_name.toLowerCase();\n  let dot_index = file_name.indexOf(\".\");\n  let first_letter = file_name.substring(0, dot_index);\n  let valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let has_valid_chars = false;\n  for (let i = 0; i < file_name.length; i++) {\n    if (valid_chars.indexOf(file_name[i]) == -1) {\n      has_valid_chars = false;\n      break;\n    } else {\n      has_valid_chars = true;\n    }\n  }\n  if (has_valid_chars && dot_index > 0 && first_letter.length == 1 && first_letter >= \"a\" && first_letter <= \"z\") {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Your code here\n  let file_name = file_name.toLowerCase();\n  let dot_index = file_name.indexOf(\".\");\n  let first_letter = file_name.substring(0, dot_index);\n  let valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let has_valid_chars = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4. The function shall not change the entries in the list whose indexes are not divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  let prime = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      prime = words[i]\n      primes.push(prime)\n    } else {\n      if (primes.includes(prime)) {\n        prime = `${prime} ${words[i]}`\n      } else {\n        prime = words[i]\n        primes.push(prime)\n      }\n    }\n  }\n  return primes.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));\nconsole.log(simplify(\"1/3\", \"1/2\"));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, digit) => acc + parseInt(digit), 0);\n    return sum < acc? sum : acc;\n  }, 0);\n  return nums.sort((a, b) => sums - orderByDigits(a) - orderByDigits(b));\n};\n\n/*\n  Write a function that returns the first element of the specified array that has the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 1 since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 4 since it occurs four times.\n*/\nconst firstOccurence = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).find(key => counts[key] === val);\n};\n\n/*\n  Write a function that returns the last element of the specified array that has the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 3 since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 2 since it occurs twice. Given the array [1, 2, 3, 4, 3, 2] and the value 1, the function should return 2 since it occurs twice.\n*/\nconst lastOccurence = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).find(key => counts[key] === val);\n};\n\n/*\n  Write a function that returns all elements of the specified array that have the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return [1, 3] since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return [2, 4] since it occurs four times.\n*/\nconst allOccurences = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(key => counts[key] === val);\n};\n\n/*\n  Write a function that returns all elements of the specified array that do not have the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return [1, 3] since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return [2, 3, 4] since it occurs four times.\n*/\nconst uniqueOccurences = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(key => counts[key] === val);\n};\n\n/*\n  Write a function that returns the number of elements in the specified array that do not have the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 1 since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 3 since it occurs four times.\n*/\nconst uniqueOccurencesCount = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(key => counts[key] === val).length;\n};\n\n/*\n  Write a function that returns the number of elements in the specified array that have the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 3 since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 2 since it occurs twice. Given the array [1, 2, 3, 4, 3, 2] and the value 1, the function should return 2 since it occurs twice.\n*/\nconst countOccurences = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(key => counts[key] === val);\n};\n\n/*\n  Write a function that returns the number of elements in the specified array that do not have the specified number of occurrences of the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 2 since it only occurs once. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 1 since it occurs four times.\n*/\nconst countOccurencesCount = (arr, val) => {\n  const counts = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(key => counts[key] === val).length;\n};\n\n/*\n  Write a function that returns true if the specified array contains the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return true since it contains the value 2. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return false since it does not contain the value 3.\n*/\nconst contains = (arr, val) => {\n  return arr.indexOf(val)!== -1;\n};\n\n/*\n  Write a function that returns true if the specified array does not contain the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return false since it does not contain the value 2. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return true since it contains the value 3.\n*/\nconst doesNotContain = (arr, val) => {\n  return arr.indexOf(val) === -1;\n};\n\n/*\n  Write a function that returns the specified value if the specified array contains the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 1 since it contains the value 2. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 3 since it contains the value 3.\n*/\nconst indexOf = (arr, val) => {\n  return arr.indexOf(val);\n};\n\n/*\n  Write a function that returns the specified value if the specified array does not contain the specified value. For example, given the array [1, 1, 2, 3] and the value 2, the function should return 2 since it does not contain the value 2. Given the array [1, 2, 3, 4, 3, 2] and the value 3, the function should return 3 since it contains the value 3.\n*/\nconst lastIndexOf = (arr, val) => {\n  return arr.lastIndexOf(val);\n};\n\n/*\n  Write a function that returns true if the specified string contains the specified substring in any order. For example, given the string \"banana\" and the substring \"an\", the function should return true since it contains the substring \"an\" in the specified order. Given the string \"banana\" and the substring \"na\", the function should return false since it does not contain the substring \"na\" in the specified order.\n*/\nconst containsSubstring = (str, substr) => {\n  return str.includes(substr);\n};\n\n/*\n  Write a function that returns true if the specified string contains the specified substring in any order ignoring case. For example, given the string \"banana\" and the substring \"an\", the function should return true since it contains the substring \"an\" in the specified order. Given the string \"banana\" and the substring \"na\", the function should return false since it does not contain the substring \"na\" in the specified order.\n*/\nconst containsSubstringIgnoreCase = (str, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 6, 9, 12, 15).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (4, 8, 12, 16, 20).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (5, 10, 15, 20, 25).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (6, 12, 18, 24, 30).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (7, 14, 21, 28, 35).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (8, 16, 24, 32, 40).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (9, 12, 18, 24, 30).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (10, 18, 24, 30, 36).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (11, 24, 30, 36, 42).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (12, 30, 36, 42, 48).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (13, 36, 42, 48, 54).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a[n];\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that sums to 8. \n  */\nconst findNode = (root, sum) => {\n  if (root === null) return null;\n  if (root.val === sum) return root;\n  if (root.val > sum) return findNode(root.left, sum);\n  return findNode(root.right, sum);\n};\n\n/*\n  Given a binary tree and a sum, find the node in the tree that sums to the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 8\n      Output: 5\n      Explanation: \n      Node with value 4 is the only node that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = getOrbit(planet1, planets);\n  const orbit2 = getOrbit(planet2, planets);\n  const distance = getDistance(orbit1, orbit2);\n  const planetsBetween = planets.filter(\n    planet => getDistance(orbit1, getOrbit(planet, planets)) <= distance\n  );\n  return planetsBetween.sort((a, b) => getDistance(orbit1, getOrbit(b, planets)));\n};\n\n// Tests\nconst tests = [\n  [\"Mercury\", \"Venus\"],\n  [\"Earth\", \"Mars\"],\n  [\"Jupiter\", \"Saturn\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Mercury\"],\n  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"U", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        sortedList = sortedList.sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListEvenSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        sortedList = sortedList.sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListOddSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        sortedList = sortedList.sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListEvenSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        sortedList = sortedList.sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListOddSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        sortedList = sortedList.sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListOddSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        sortedList.push(currentWord);\n        ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpaces = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero('0', 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZeroAndSpacesAndZero = (s, n) => {\n  const spaces = stringSequence(n);\n  return `${spaces} ${s}`;\n};\n\n/**\n * Returns a string containing spaces from 0 to ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 2 * 2 * 0 = 24\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are even in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are odd in the original list. Ignore numbers that are negative or\n  not integers.\n  doubleTheDifference([1, 3, 2, 0]) == [1, 3, 2]\n  doubleTheDifference([-1, -2, 0]) == [-1, -2]\n  doubleTheDifference([9, -2]) == [9]\n  doubleTheDifference([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let guessesCorrect = 0;\n  let guessesIncorrect = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount = 0;\n  let guessesIncorrectCount = 0;\n  let guessesCorrectCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return `${class_name}.${strongest_name}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example, the string 'abracadabra' has 4 appearances.\n*/\nconst countString = (str) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n  if (a.includes(b)) return true;\n  if (b.includes(a)) return true;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*G", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber;\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toUpperCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toLowerCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toUpperCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toLowerCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toUpperCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  const romanNumbers = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  for (let i = 0; i < romanNumbers.length; i++) {\n    const romanNumber = romanNumbers[i];\n    if (number >= romanNumber) {\n      roman += romanNumber.toLowerCase();\n      number -= romanNumber;\n    }\n  }\n  return roman;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLXVI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ac = Math.sqrt(a * a + b * b);\n  const bc = Math.sqrt(b * b + c * c);\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ((ac * bc + bc * ab) >= 0) && ((bc * ac + ac * ab) >= 0);\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degree", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  findMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of\n  unique characters. If multiple strings have minimum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  findMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMinUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words that contains all characters\n  in another string. For example, findWords([\"string\", \"game\", \"game\"]) returns [\"game\"].\n\n  findWords([\"string\", \"game\", \"game\"]) === \"game\"\n  findWords([\"string\", \"game\", \"game\"]) === \"game\"\n  findWords([\"string\", \"game\", \"game\"]) === \"game\"\n  */\nconst findWords = (words) => {\n  let wordList = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      wordList.push(words[i]);\n    }\n  }\n  return wordList;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words that contains all characters\n  in another string. For example, findWordsUnique([\"string\", \"game\", \"game\"]) returns [\"game\"].\n\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  */\nconst findWordsUnique = (words) => {\n  let wordList = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      wordList.push(words[i]);\n    }\n  }\n  return wordList;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words that contains all characters\n  in another string. For example, findWordsUnique([\"string\", \"game\", \"game\"]) returns [\"game\"].\n\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  */\nconst findWordsUnique = (words) => {\n  let wordList = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      wordList.push(words[i]);\n    }\n  }\n  return wordList;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words that contains all characters\n  in another string. For example, findWordsUnique([\"string\", \"game\", \"game\"]) returns [\"game\"].\n\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  findWordsUnique([\"string\", \"game\", \"game\"]) === \"game\"\n  */\nconst findWordsUnique = (words) => {\n  let wordList = [];\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to lowercase.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toLowerCase = (str) => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to uppercase.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toUpperCase = (str) => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to title case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to camel case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to pascal case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toPascalCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toSnakeCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to kebab case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toKebabCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to pascal case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toPascalCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to camel case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toSnakeCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to kebab case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toKebabCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to pascal case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toPascalCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to camel case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toSnakeCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to kebab case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toKebabCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to pascal case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toPascalCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to camel case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toSnakeCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to kebab case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toKebabCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/**\n * Given a string, return a new string where all characters have been converted to snake case.\n * \n * @param {string} str\n * @returns {string}\n */\nconst toCamelCase = (str) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i) + s.charAt(s.length - 1 - i);\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'c10e10c98aafb8b7e557d24fcf4ea4dd9a09e'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = text => {\n  if (text === '') {\n    return 0;\n  }\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = text => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding ripemd160 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToRip('Hello world') == '8cbfd0d670fbe1ed0c40bdc7a994fd4'\n  */\nconst stringToRip = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const ripsum = crypto.createHash('ripemd160');\n  ripsum.update(text);\n  return ripsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding whirlpool hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToWhirlpool('Hello world') == 'd79e1c7aeae3ced8b866a2d9d6b9f5b9'\n  */\nconst stringToWhirlpool = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const whirlpool = crypto.createHash('whirlpool');\n  whirlpool.update(text);\n  return whirlpool.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding zlib hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToZlib('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToZlib = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const zlibsum = crypto.createHash('zlib');\n  zlibsum.update(text);\n  return zlibsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$sOQj8VuUO/jxuyUZYKK/O3jY9u4O0l6yR/OujrQ/q'\n  */\nconst stringToBcrypt = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const bcryptsum = crypto.createHash('bcrypt');\n  bcryptsum.update(text);\n  return bcryptsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$sOQj8VuUO/jxuyUZYKK/O3jY9u4O0l6yR/OujrQ/q'\n  */\nconst stringToBcrypt = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const bcryptsum = crypto.createHash('bcrypt');\n  bcryptsum.update(text);\n  return bcryptsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$sOQj8VuUO/jxuyUZYKK/O3jY9u4O0l6yR/OujrQ/q'\n  */\nconst stringToBcrypt = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const bcryptsum = crypto.createHash('bcrypt');\n  bcryptsum.update(text);\n  return bcryptsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$sOQj8VuUO/jxuyUZYKK/O3jY9u4O0l6yR/OujrQ/q'\n  */\nconst stringToBcrypt = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const bcryptsum = crypto.createHash('bcrypt');\n  bcryptsum.update(text);\n  return bcryptsum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding bcrypt hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBcrypt('Hello world') == '$2a$10$sOQj8VuUO/jxuyUZYKK/O3jY9u4O0l6yR/OujrQ/q'\n  */\nconst stringToBcrypt = (text) => {\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (result.indexOf(i) < 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) => [2, 4, 6, 8]\n  generateDivisibleIntegers(10, 14) => []\n  */\nconst generateDivisibleIntegers = (a, b, d) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % d === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of integers between a and b (both inclusive) where each integer is divisible by d.\n\n  For example:\n  generateDivisibleIntegers(2, 8) => [2, 4, 6, 8]\n  generateDivisibleIntegers(8, 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  let current_note = '';\n  let current_beat = 0;\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(current_beat);\n      current_beat = 0;\n      current_note = '';\n    } else if (music_array[i] === '|') {\n      current_beat += 1;\n    } else {\n      current_note += music_array[i];\n    }\n  }\n  music_notes.push(current_beat);\n  return music_notes;\n};\n\n// Tests\nconst testParseMusic = (music_string) => {\n  expect(parseMusic(music_string)).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n};\n\nconst testParseMusicWithError = (music_string) => {\n  expect(() => parseMusic(music_string)).toThrow();\n};\n\n// Run tests\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusicWithError('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');\ntestParseMusic('o o|.| o| o|.|.|.|.| o o');", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a new string with the first letter capitalized.\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  */\nconst capitalizeFirstLetter = (string) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart > 0? integerPart + '.' + decimalPart : integerPart;\n};\n\n/**\n * Formats a number with thousand separators and a decimal point.\n * If thousand separator is not provided, the decimal point is omitted.\n * If decimal point is not provided, the thousand separator is omitted.\n * If both thousand separator and decimal point are omitted, the number is returned as is.\n * If thousand separator is provided but decimal point is not, the number is rounded with 2 decimal places.\n * If thousand separator is provided but decimal point is provided, the number is rounded with 0 decimal places.\n * If thousand separator and decimal point are provided, the number is rounded with both decimal places.\n * @param {number} number\n * @param {string} [thousandSeparator=,]\n * @param {string} [decimalPoint=.]\n * @returns {string}\n */\nconst formatNumber = (number, thousandSeparator, decimalPoint) => {\n  const numberString = number.toString();\n  const thousandSeparatorString = thousandSeparator || ',';\n  const decimalPointString = decimalPoint || '.';\n  const integerPart = numberString.split('.')[0];\n  const decimalPart = numberString.split('.')[1];\n  const integerPartString = integerPart.toString();\n  const decimalPartString = decimalPart.toString();\n\n  if (decimalPartString.length > 0) {\n    return integerPartString + decimalPointString + decimalPartString;\n  }\n\n  if (decimalPartString.length === 0) {\n    return integerPartString + thousandSeparatorString;\n  }\n\n  if (integerPartString.length === 0) {\n    return decimalPartString;\n  }\n\n  return integerPartString + thousandSeparatorString + decimalPartString;\n};\n\n/**\n * Formats a number with thousand separators and a decimal point.\n * If thousand separator is not provided, the decimal point is omitted.\n * If decimal point is not provided, the thousand separator is omitted.\n * If both thousand separator and decimal point are omitted, the number is returned as is.\n * If thousand separator is provided but decimal point is not, the number is rounded with 2 decimal places.\n * If thousand separator is provided but decimal point is provided, the number is rounded with 0 decimal places.\n * If thousand separator and decimal point are provided, the number is rounded with both decimal places.\n * @param {number} number\n * @param {string} [thousandSeparator=,]\n * @param {string} [decimalPoint=.]\n * @returns {string}\n */\nconst formatNumberWithPrecision = (number, precision, thousandSeparator, decimalPoint) => {\n  const numberString = number.toString();\n  const thousandSeparatorString = thousandSeparator || ',';\n  const decimalPointString = decimalPoint || '.';\n  const integerPart = numberString.split('.')[0];\n  const decimalPart = numberString.split('.')[1];\n  const integerPartString = integerPart.toString();\n  const decimalPartString = decimalPart.toString();\n\n  if (decimalPartString.length > 0) {\n    return integerPartString + decimalPointString + decimalPartString;\n  }\n\n  if (decimalPartString.length === 0) {\n    return integerPartString + thousandSeparatorString;\n  }\n\n  if (integerPartString.length === 0) {\n    return decimalPartString;\n  }\n\n  const integerPartPrecision = integerPartString.length + decimalPartString.length;\n  const integerPartPrecisionWithPrecision = integerPartPrecision + precision;\n  const integerPartPrecisionWithPrecisionString = integerPartPrecisionWithPrecision.toString();\n\n  if (integerPartPrecisionWithPrecisionString.length < precision) {\n    return integerPartString + thousandSeparatorString + decimalPartString;\n  }\n\n  if (integerPartPrecisionWithPrecisionString.length > precision) {\n    return integerPartString + thousandSeparatorString + decimalPartString.substr(0, precision);\n  }\n\n  return integerPartString + thousandSeparatorString + decimalPartString;\n};\n\n/**\n * Formats a number with thousand separators and a decimal point.\n * If thousand separator is not provided, the decimal point is omitted.\n * If decimal point is not provided, the thousand separator is omitted.\n * If both thousand separator and decimal point are omitted, the number is returned as is.\n * If thousand separator is provided but decimal point is not, the number is rounded with 2 decimal places.\n * If thousand separator is provided but decimal point is provided, the number is rounded with 0 decimal places.\n * If thousand separator and decimal point are provided, the number is rounded with both decimal places.\n * @param {number} number\n * @param {string} [thousandSeparator=,]\n * @param {string} [decimalPoint=.]\n * @returns {string}\n */\nconst formatNumberWithPrecision2 = (number, precision, thousandSeparator, decimalPoint) => {\n  const numberString = number.toString();\n  const thousandSeparatorString = thousandSeparator || ',';\n  const decimalPointString = decimalPoint || '.';\n  const integerPart = numberString.split('.')[0];\n  const decimalPart = numberString.split('.')[1];\n  const integerPartString = integerPart.toString();\n  const decimalPartString = decimalPart.toString();\n\n  if (decimalPartString.length > 0) {\n    return integerPartString + decimalPointString + decimalPartString;\n  }\n\n  if (decimalPartString.length === 0) {\n    return integerPartString + thousandSeparatorString;\n  }\n\n  if (integerPartString.length === 0) {\n    return decimalPartString;\n  }\n\n  const integerPartPrecision = integerPartString.length + decimalPartString.length;\n  const integerPartPrecisionWithPrecision = integerPartPrecision + precision;\n  const integerPartPrecisionWithPrecisionString = integerPartPrecisionWithPrecision.toString();\n\n  if (integerPartPrecisionWithPrecisionString.length < precision) {\n    return integerPartString + thousandSeparatorString + decimalPartString;\n  }\n\n  if (integerPartPrecisionWithPrecisionString.length > precision) {\n    return integerPartString + thousandSeparatorString + decimalPartString.substr(0, precision);\n  }\n\n  return integerPartString + thousandSeparatorString + decimalPartString;\n};\n\n/**\n * Formats a number with thousand separators and a decimal point.\n * If thousand separator is not provided, the decimal point is omitted.\n * If decimal point is not provided, the thousand separator is omitted.\n * If both thousand separator and decimal point are omitted, the number is returned as is.\n * If thousand separator is provided but decimal point is not, the number is rounded with 2 decimal places.\n * If thousand separator is provided but decimal point is provided, the number is rounded with 0 decimal places.\n * If thousand separator and decimal point are provided, the number is rounded with both decimal places.\n * @param {number} number\n * @param {string} [thousandSeparator=,]\n * @param {string} [decimalPoint=.]\n * @returns {string}\n */\nconst formatNumberWithPrecision3 = (number, precision, thousandSeparator, decimalPoint) => {\n  const numberString = number.toString();\n  const thousandSeparatorString = thousandSeparator || ',';\n  const decimalPointString = decimalPoint || '.';\n  const integerPart = numberString.split('.')[0];\n  const decimalPart = numberString.split('.')[1];\n  const integerPartString = integerPart.toString();\n  const decimalPartString = decimalPart.toString();\n\n  if (decimalPartString.length > 0) {\n    return integerPartString + decimalPointString + decimalPartString;\n  }\n\n  if (decimalPartString.length === 0) {\n    return integerPartString + thousandSeparatorString;\n  }\n\n  if (integerPartString.length === 0) {\n    return decimalPartString;\n  }\n\n  const integerPartPrecision = integerPartString.length + decimalPartString.length;\n  const integerPartPrecisionWithPrecision = integerPartPrecision + precision;\n  const integerPartPrecisionWithPrecisionString = integerPartPrecisionWithPrecision.toString();\n\n  if (integerPart", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const diff = numbers[i] - numbers[minIndex];\n    if (diff < minDiff) {\n      minDiff = diff;\n      minIndex = i;\n    }\n    if (diff > maxDiff) {\n      maxDiff = diff;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/**\n * Return the sum of the numbers in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i += 1) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/**\n * Return the average of the numbers in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst average = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr) / arr.length;\n};\n\n/**\n * Return the median of the numbers in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst median = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  return sortedArr[middleIndex];\n};\n\n/**\n * Return the standard deviation of the numbers in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst standardDeviation = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  const mean = average(arr);\n  const variance = arr.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b);\n  return Math.sqrt(variance);\n};\n\n/**\n * Return the minimum number in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst min = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return Math.min(...arr);\n};\n\n/**\n * Return the maximum number in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst max = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return Math.max(...arr);\n};\n\n/**\n * Return the number of numbers in the given array.\n * If the given array is empty return 0.\n * @param {Array} arr\n */\nconst count = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.length;\n};\n\n/**\n * Return the number of numbers in the given array that are greater than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countGreaterThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x > number).length;\n};\n\n/**\n * Return the number of numbers in the given array that are less than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countLessThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x < number).length;\n};\n\n/**\n * Return the number of numbers in the given array that are equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countEquals = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x === number).length;\n};\n\n/**\n * Return the number of numbers in the given array that are greater than or equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countGreaterThanOrEqual = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x >= number).length;\n};\n\n/**\n * Return the number of numbers in the given array that are less than or equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countLessThanOrEqual = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x <= number).length;\n};\n\n/**\n * Return the number of numbers in the given array that do not equal the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst countNotEquals = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return arr.filter((x) => x!== number).length;\n};\n\n/**\n * Return the sum of the numbers in the given array that are greater than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumGreaterThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x > number));\n};\n\n/**\n * Return the sum of the numbers in the given array that are less than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumLessThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x < number));\n};\n\n/**\n * Return the sum of the numbers in the given array that are equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumEquals = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x === number));\n};\n\n/**\n * Return the sum of the numbers in the given array that are greater than or equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumGreaterThanOrEqual = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x >= number));\n};\n\n/**\n * Return the sum of the numbers in the given array that are less than or equal to the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumLessThanOrEqual = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x <= number));\n};\n\n/**\n * Return the sum of the numbers in the given array that do not equal the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst sumNotEquals = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return sum(arr.filter((x) => x!== number));\n};\n\n/**\n * Return the average of the numbers in the given array that are greater than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst averageGreaterThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return average(arr.filter((x) => x > number));\n};\n\n/**\n * Return the average of the numbers in the given array that are less than the given number.\n * If the given array is empty return 0.\n * @param {Array} arr\n * @param {Number} number\n */\nconst averageLessThan = (arr, number) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return average(arr.filter((x) => x < number));\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/**\n * Given a number and a range, return a number in the range that is the closest to the number provided.\n * If the number is outside the range, it will be returned as-is.\n * If the number is within the range, it will be returned as-is.\n * If the number is exactly in the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or greater than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to or equal to the range, it will be returned as-is.\n * If the number is exactly in the range but greater than the range, it will be returned as-is.\n * If the number is exactly in the range but less than the range, it will be returned as-is.\n * If the number is exactly in the range but equal to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false, true, false, true]\n  */\nconst filterBooleans = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDates(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterDates = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDates(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterDateTimes = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDateTimes(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterDateTimes([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterTimes = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterTimes(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterTimes([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterDateTimeOffsets = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDateTimeOffsets(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterDateTimeOffsets([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterPeriods = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterPeriods(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterPeriods([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterIntervals = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(new Date(value));\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2020, 0, 1), new Date(2020, 0, 2), new Date(2020, 0, 3), new Date(2020, 0, 4), new Date(2020, 0, 5), new Date(2020, 0, 6)]\n  */\nconst filterNumeric = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterNumeric(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumeric([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNumerics = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterNumerics(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumerics([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterInteger = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterInteger(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterInteger([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterString = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterString(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterString([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  let factors = [];\n  let i = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (newNumbers.indexOf(number) === -1) {\n      newNumbers.push(number);\n    }\n  }\n  return newNumbers;\n};\n\n// Complete the countOccurrences function below.\n\n/*\n  Given an array of integers, return an array where each element appears only once and the order of the elements does not matter.\n\n  Example:\n\n  countOccurrences([1, 1, 2, 3, 4, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  countOccurrences([1, 2, 3, 4, 5]) ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n * Capitalizes the first letter of a string.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLetters = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('');\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().toLowerCase();\n};\n\n/**\n * Capitalizes the first letter of a string and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest and lowercase the rest and flips the case and uppercase the rest.\n * \n * @param {string} string The string to capitalize.\n * @returns {string} The capitalized string.\n */\nconst capitalizeAllLettersAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRestAndLowercaseTheRestAndFlipCaseAndUppercaseTheRest = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).split('').reverse().join('').toUpperCase().", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Split String into Array of Strings\n  >>> split('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> split('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings\n  >>> toArray('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst toArray = (str) => {\n  return str.split(\",\");\n};\n\n/* Convert String into Array of Strings", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings ending with certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPri", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoint = i;\n    }\n  }\n  return zeroPoint + (maxCoefficient / xs[zeroPoint]);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds maximum coefficient of xs.\n  findMax returns only maximum coefficient of xs.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  11.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds minimum coefficient of xs.\n  findMin returns only minimum coefficient of xs.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -6.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      minCoefficient = Math.min(minCoefficient, xs[i]);\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds roots of polynomial with coefficients xs.\n  findRoots returns only roots of polynomial with coefficients xs.\n  Moreover, findRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findRoots = (xs) => {\n  let roots = [];\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoint = i;\n    }\n  }\n  for (let i = zeroPoint; i < xs.length; i++) {\n    let x = i - zeroPoint;\n    let y = xs[i] / Math.pow(x, maxCoefficient);\n    roots.push(x);\n    roots.push(y);\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubic finds cubic polynomial with coefficients xs.\n  findCubic returns only cubic polynomial with coefficients xs.\n  Moreover, findCubic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubic([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findCubic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findCubic = (xs) => {\n  let roots = [];\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoint = i;\n    }\n  }\n  for (let i = zeroPoint; i < xs.length; i++) {\n    let x = i - zeroPoint;\n    let y = xs[i] / Math.pow(x, maxCoefficient);\n    let z = xs[i] / Math.pow(x, maxCoefficient * 3);\n    roots.push(x);\n    roots.push(y);\n    roots.push(z);\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findQuadratic finds quadratic polynomial with coefficients xs.\n  findQuadratic returns only quadratic polynomial with coefficients xs.\n  Moreover, findQuadratic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findQuadratic([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findQuadratic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findQuadratic = (xs) => {\n  let roots = [];\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoint = i;\n    }\n  }\n  for (let i = zeroPoint; i < xs.length; i++) {\n    let x = i - zeroPoint;\n    let y = xs[i] / Math.pow(x, maxCoefficient);\n    let z = xs[i] / Math.pow(x, maxCoefficient * 2);\n    roots.push(x);\n    roots.push(y);\n    roots.push(z);\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubicRoots finds cubic roots of polynomial with coefficients xs.\n  findCubicRoots returns only cubic roots of polynomial with coefficients xs.\n  Moreover, findCubicRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubicRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findCubicRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by seven, while its values for indices divisible by seven correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by nine, while its values for indices divisible by nine correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by ten, while its values for indices divisible by ten correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty or more, while its values for indices divisible by twenty or more correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty or less, while its values for indices divisible by twenty or less correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwentyOrLess([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrLess([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrLess = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 < 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty or less, while its values for indices divisible by twenty or less correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwentyOrLessOrEqual([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrLessOrEqual([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrLessOrEqual = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 < 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty or more, while its values for indices divisible by twenty or more correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwentyOrMoreOrEqual([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMoreOrEqual([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMoreOrEqual = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty or more, while its values for indices divisible by twenty or more correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwentyOrLessOrEqual([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrLessOrEqual([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrLessOrEqual = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 1, 2, 3, 5, 9, 123]\n*/\nconst uniqueBy = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueBy([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProp = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProp({ a: 1, b: 2, c: 3 }, 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: 2 }, { a: 3 }], 'a')\n  [1, 3]\n*/\nconst uniqueByProps = (arr, key) => {\n  const u = {}\n  for (let i = 0; i < arr.length; i++) {\n    const v = arr[i][key]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> uniqueByProps([{ a: 1 }, { a: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n*/\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n*/\nconst sumElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n*/\nconst sumOfElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 8)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 9)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 11)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 12)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 13)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 14)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 15)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 16)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 17)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 18)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 19)\n  -23\n*/\nconst sumOfElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 20)\n  -23\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return n\n  return fizzBuzz(n % 11) + fizzBuzz(n % 13)\n}\n\n/*\n  >>> fizzBuzz(100)\n  FizzBuzz\n  >>> fizzBuzz(101)\n  Fizz\n  >>> fizzBuzz(102)\n  Buzz\n  >>> fizzBuzz(103)\n  Fizz\n  >>> fizzBuzz(104)\n  Buzz\n  >>> fizzBuzz(105)\n  Fizz\n  >>> fizzBuzz(106)\n  Buzz\n  >>> fizzBuzz(107)\n  Fizz\n  >>> fizzBuzz(108)\n  Buzz\n  >>> fizzBuzz(109)\n  Fizz\n  >>> fizzBuzz(110)\n  Buzz\n  >>> fizzBuzz(111)\n  Fizz\n  >>> fizzBuzz(112)\n  Buzz\n  >>> fizzBuzz(113)\n  Fizz\n  >>> fizzBuzz(114)\n  Buzz\n  >>> fizzBuzz(115)\n  Fizz\n  >>> fizzBuzz(116)\n  Buzz\n  >>> fizzBuzz(117)\n  Fizz\n  >>> fizzBuzz(118)\n  Buzz\n  >>> fizzBuzz(119)\n  Fizz\n  >>> fizzBuzz(120)\n  Buzz\n  >>> fizzBuzz(121)\n  Fizz\n  >>> fizzBuzz(122)\n  Buzz\n  >>> fizzBuzz(123)\n  Fizz\n  >>> fizzBuzz(124)\n  Buzz\n  >>> fizzBuzz(125)\n  Fizz\n  >>> fizzBuzz(126)\n  Buzz\n  >>> fizzBuzz(127)\n  Fizz\n  >>> fizzBuzz(128)\n  Buzz\n  >>> fizzBuzz(129)\n  Fizz\n  >>> fizzBuzz(130)\n  Buzz\n  >>> fizzBuzz(131)\n  Fizz\n  >>> fizzBuzz(132)\n  Buzz\n  >>> fizzBuzz(133)\n  Fizz\n  >>> fizzBuzz(134)\n  Buzz\n  >>> fizzBuzz(135)\n  Fizz\n  >>> fizzBuzz(136)\n  Buzz\n  >>> fizzBuzz(137)\n  Fizz\n  >>> fizzBuzz(138)\n  Buzz\n  >>> fizzBuzz(139)\n  Fizz\n  >>> fizzBuzz(140)\n  Buzz\n  >>> fizzBuzz(141)\n  Fizz\n  >>> fizzBuzz(142)\n  Buzz\n  >>> fizzBuzz(143)\n  Fizz\n  >>> fizzBuzz(144)\n  Buzz\n  >>> fizzBuzz(145)\n  Fizz\n  >>> fizzBuzz(146)\n  Buzz\n  >>> fizzBuzz(147)\n  Fizz\n  >>> fizzBuzz(148)\n  Buzz\n  >>> fizzBuzz(149)\n  Fizz\n  >>> fizzBuzz(150)\n  Buzz\n  >>> fizzBuzz(151)\n  Fizz\n  >>> fizzBuzz(152)\n  Buzz\n  >>> fizzBuzz(153)\n  Fizz\n  >>> fizzBuzz(154)\n  Buzz\n  >>> fizzBuzz(155)\n  Fizz\n  >>> fizzBuzz(156)\n  Buzz\n  >>> fizzBuzz(157)\n  Fizz\n  >>> fizzBuzz(158)\n  Buzz\n  >>> fizzBuzz(159)\n  Fizz\n  >>> fizzBuzz(160)\n  Buzz\n  >>> fizzBuzz(161)\n  Fizz\n  >>> fizzBuzz(162)\n  Buzz\n  >>> fizzBuzz(163)\n  Fizz\n  >>> fizzBuzz(164)\n  Buzz\n  >>> fizzBuzz(165)\n  Fizz\n  >>> fizzBuzz(166)\n  Buzz\n  >>> fizzBuzz(167)\n  Fizz\n  >>> fizzBuzz(168)\n  Buzz\n  >>> fizzBuzz(169)\n  Fizz\n  >>> fizzBuzz(170)\n  Buzz\n  >>> fizzBuzz(171)\n  Fizz\n  >>> fizzBuzz(172)\n  Buzz\n  >>> fizzBuzz(173)\n  Fizz\n  >>> fizzBuzz(174)\n  Buzz\n  >>> fizzBuzz(175)\n  Fizz\n  >>> fizzBuzz(176)\n  Buzz\n  >>> fizzBuzz(177)\n  Fizz\n  >>> fizzBuzz(178)\n  Buzz\n  >>> fizzBuzz(179)\n  Fizz\n  >>> fizzBuzz(180)\n  Buzz\n  >>> fizzBuzz(181)\n  Fizz\n  >>> fizzBuzz(182)\n  Buzz\n  >>> fizzBuzz(183)\n  Fizz\n  >>> fizzBuzz(184)\n  Buzz\n  >>> fizzBuzz(185)\n  Fizz\n  >>> fizzBuzz(186)\n  Buzz\n  >>> fizzBuzz(187)\n  Fizz\n  >>> fizzBuzz(188)\n  Buzz\n  >>> fizzBuzz(189)\n  Fizz\n  >>> fizzBuzz(190)\n  Buzz\n  >>> fizzBuzz(191)\n  Fizz\n  >>> fizzBuzz(192)\n  Buzz\n  >>> fizzBuzz(193)\n  Fizz\n  >>> fizzBuzz(194)\n  Buzz\n  >>> fizzBuzz(195)\n  Fizz\n  >>> fizzBuzz(196)\n  Buzz\n  >>> fizzBuzz(197)\n  Fizz\n  >>> fizzBuzz(198)\n  Buzz\n  >>> fizzBuzz(199)\n  Fizz\n  >>> fizzBuzz(200)\n  Buzz\n  >>> fizzBuzz(201)\n  Fizz\n  >>> fizzBuzz", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 1) {\n    groups.push(s.slice(i, i + 1));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + primeFib(n - 2);\n  return primeFib(n - 1) + primeFib(n - 2) + primeFib(n - 3) + primeFib(n - 4);\n};\n\n/*\n  primeSum returns the sum of the primes less than or equal to n.\n  >>> primeSum(10)\n  55\n  >>> primeSum(100)\n  1303\n  >>> primeSum(1000)\n  12376\n  >>> primeSum(10000)\n  12376\n  >>> primeSum(100000)\n  12376\n  >>> primeSum(1000000)\n  12376\n  >>> primeSum(10000000)\n  12376\n  >>> primeSum(100000000)\n  12376\n  >>> primeSum(1000000000)\n  12376\n  >>> primeSum(10000000000)\n  12376\n  >>> primeSum(100000000000)\n  12376\n  >>> primeSum(1000000000000)\n  12376\n  >>> primeSum(10000000000000)\n  12376\n  >>> primeSum(100000000000000)\n  12376\n  >>> primeSum(1000000000000000)\n  12376\n  >>> primeSum(10000000000000000)\n  12376\n  >>> primeSum(100000000000000000)\n  12376\n  >>> primeSum(1000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  12376\n  >>> primeSum(100000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation2 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation3 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation4 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation5 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation6 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation7 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation8 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation9 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation10 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation11 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation12 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. This is the same as calculating the mean absolute deviation of a list of numbers, except that it takes the mean of the numbers instead of the sum.\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation13 = numbers => {\n  let meanValue = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    meanValue += numbers[i];\n    sumOfSquares += Math.pow(numbers[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquares / numbers.length);\n};\n\n/**\n * Calculate the mean absolute deviation of a list of numbers. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne takes a list of integers as input. It returns true if there are three unique elements in the list that add up to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as input. It returns true if there are three unique elements in the list that add up to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToThree takes a list of integers as input. It returns true if there are three unique elements in the list that add up to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToFour takes a list of integers as input. It returns true if there are three unique elements in the list that add up to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToFive takes a list of integers as input. It returns true if there are three unique elements in the list that add up to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToSix takes a list of integers as input. It returns true if there are three unique elements in the list that add up to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as input. It returns true if there are three unique elements in the list that add up to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToEight takes a list of integers as input. It returns true if there are three unique elements in the list that add up to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToNine takes a list of integers as input. It returns true if there are three unique elements in the list that add up to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSumToNine = (l) => {\n  const set = new Set();\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j + 1].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision2 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision3 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision4 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision5 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision6 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision7 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i].speed === arr[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision8", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and divided by 2.\n  >>> multDivDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 8, 10, 12, 15]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Converts a number to a string with leading zeros.\n  >>> padZeros(0)\n  '0'\n  >>> padZeros(1)\n  '01'\n  >>> padZeros(2)\n  '002'\n  >>> padZeros(3)\n  '0003'\n  >>> padZeros(4)\n  '00004'\n  >>> padZeros(5)\n  '00000500'\n  >>> padZeros(6)\n  '000000600'\n  >>> padZeros(7)\n  '000000070'\n  >>> padZeros(8)\n  '0000000080'\n  >>> padZeros(9)\n  '0000000009'\n  >>> padZeros(10)\n  '000000000010'\n  >>> padZeros(11)\n  '000000000011'\n  >>> padZeros(12)\n  '000000000100'\n  >>> padZeros(13)\n  '000000000130'\n  >>> padZeros(14)\n  '000000000140'\n  >>> padZeros(15)\n  '000000000150'\n  >>> padZeros(16)\n  '000000000160'\n  >>> padZeros(17)\n  '000000000170'\n  >>> padZeros(18)\n  '000000000180'\n  >>> padZeros(19)\n  '000000000190'\n  >>> padZeros(20)\n  '000000000200'\n  >>> padZeros(21)\n  '000000000210'\n  >>> padZeros(22)\n  '000000000222'\n  >>> padZeros(23)\n  '000000000233'\n  >>> padZeros(24)\n  '000000000244'\n  >>> padZeros(25)\n  '000000000250'\n  >>> padZeros(26)\n  '000000000260'\n  >>> padZeros(27)\n  '000000000270'\n  >>> padZeros(28)\n  '000000000280'\n  >>> padZeros(29)\n  '000000000290'\n  >>> padZeros(30)\n  '000000000300'\n  >>> padZeros(31)\n  '000000000310'\n  >>> padZeros(32)\n  '000000000322'\n  >>> padZeros(33)\n  '000000000333'\n  >>> padZeros(34)\n  '000000000344'\n  >>> padZeros(35)\n  '000000000350'\n  >>> padZeros(36)\n  '000000000360'\n  >>> padZeros(37)\n  '000000000370'\n  >>> padZeros(38)\n  '000000000380'\n  >>> padZeros(39)\n  '000000000390'\n  >>> padZeros(40)\n  '000000000400'\n  >>> padZeros(41)\n  '000000000410'\n  >>> padZeros(42)\n  '000000000422'\n  >>> padZeros(43)\n  '000000000433'\n  >>> padZeros(44)\n  '000000000444'\n  >>> padZeros(45)\n  '000000000450'\n  >>> padZeros(46)\n  '000000000460'\n  >>> padZeros(47)\n  '000000000470'\n  >>> padZeros(48)\n  '000000000480'\n  >>> padZeros(49)\n  '000000000490'\n  >>> padZeros(50)\n  '000000000500'\n  >>> padZeros(51)\n  '000000000510'\n  >>> padZeros(52)\n  '000000000522'\n  >>> padZeros(53)\n  '000000000533'\n  >>> padZeros(54)\n  '000000000544'\n  >>> padZeros(55)\n  '000000000550'\n  >>> padZeros(56)\n  '000000000560'\n  >>> padZeros(57)\n  '000000000570'\n  >>> padZeros(58)\n  '000000000580'\n  >>> padZeros(59)\n  '000000000590'\n  >>> padZeros(60)\n  '000000000600'\n  >>> padZeros(61)\n  '000000000610'\n  >>> padZeros(62)\n  '000000000622'\n  >>> padZeros(63)\n  '000000000633'\n  >>> padZeros(64)\n  '000000000644'\n  >>> padZeros(65)\n  '000000000650'\n  >>> padZeros(66)\n  '000000000660'\n  >>> padZeros(67)\n  '000000000670'\n  >>> padZeros(68)\n  '000000000680'\n  >>> padZeros(69)\n  '000000000699'\n  >>> padZeros(70)\n  '000000000700'\n  >>> padZeros(71)\n  '000000000710'\n  >>> padZeros(72)\n  '000000000722'\n  >>> padZeros(73)\n  '000000000733'\n  >>> padZeros(74)\n  '000000000743'\n  >>> padZeros(75)\n  '000000000751'\n  >>> padZeros(76)\n  '000000000760'\n  >>> padZeros(77)\n  '000000000770'\n  >>> padZeros(78)\n  '000000000780'\n  >>> padZeros(79)\n  '000000000790'\n  >>> padZeros(80)\n  '000000000800'\n  >>> padZeros(81)\n  '000000000810'\n  >>> padZeros(82)\n  '000000000822'\n  >>> padZeros(83)\n  '000000000833'\n  >>> padZeros(84)\n  '000000000843'\n  >>> padZeros(85)\n  '000000000850'\n  >>> padZeros(86)\n  '000000000851'\n  >>> padZeros(87)\n  '000000000860'\n  >>> padZeros(88)\n  '000000000861'\n  >>> padZeros(89)\n  '000000000862'\n  >>> padZeros(90)\n  '000000000863'\n  >>> padZeros(91)\n  '000000000864'\n  >>> padZeros(92)\n  '000000000865'\n  >>> padZeros(93)\n  '000000000866'\n  >>> padZeros(94)\n  '000000000867'\n  >>> padZeros(95)\n  '000000000868'\n  >>> padZeros(96)\n  '000000000869'\n  >>> padZeros(97)\n  '000000000870'\n  >>> padZeros(98)\n  '000000000871'\n  >>> padZeros(99)\n  '000000000872'\n  >>> padZeros(100)\n  '000000000873'\n  >>> padZeros(101)\n  '000000000874'\n  >>> padZeros(102)\n  '000000000875'\n  >>> padZeros(103)\n  '000000000876'\n  >>> padZeros(104)\n  '000000000877'\n  >>> padZeros(105)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea18 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea19 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea20 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea21 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea22 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea23 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea24 = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6\n}\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  11.8\n  >>> triangleArea(5, 5)\n  20\n  */\nconst triangleArea25 = (a, h) => {\n  return a * (h * (h + 1) * (h", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3);\n};\n\n/*\n  >>> fib5(5)\n  55\n  >>> fib5(6)\n  89\n  >>> fib5(7)\n  144\n  */\nconst fib5 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*\n  >>> fib6(6)\n  144\n  >>> fib6(7)\n  729\n  >>> fib6(8)\n  1597\n  */\nconst fib6 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5);\n};\n\n/*\n  >>> fib7(7)\n  729\n  >>> fib7(8)\n  1597\n  >>> fib7(9)\n  2584\n  */\nconst fib7 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6);\n};\n\n/*\n  >>> fib8(8)\n  1597\n  >>> fib8(9)\n  2584\n  >>> fib8(10)\n  4181\n  */\nconst fib8 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7);\n};\n\n/*\n  >>> fib9(9)\n  2584\n  >>> fib9(10)\n  4181\n  >>> fib9(11)\n  6765\n  */\nconst fib9 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8);\n};\n\n/*\n  >>> fib10(10)\n  4181\n  >>> fib10(11)\n  6765\n  >>> fib10(12)\n  9876\n  */\nconst fib10 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9);\n};\n\n/*\n  >>> fib11(11)\n  6765\n  >>> fib11(12)\n  9876\n  >>> fib11(13)\n  15971\n  */\nconst fib11 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10);\n};\n\n/*\n  >>> fib12(12)\n  9876\n  >>> fib12(13)\n  15971\n  >>> fib12(14)\n  2584\n  */\nconst fib12 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4) + fib12(n - 5) + fib12(n - 6) + fib12(n - 7) + fib12(n - 8) + fib12(n - 9) + fib12(n - 10) + fib12(n - 11);\n};\n\n/*\n  >>> fib13(13)\n  15971\n  >>> fib13(14)\n  2584\n  >>> fib13(15)\n  4181\n  */\nconst fib13 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2) + fib13(n - 3) + fib13(n - 4) + fib13(n - 5) + fib13(n - 6) + fib13(n - 7) + fib13(n - 8) + fib13(n - 9) + fib13(n - 10) + fib13(n - 11) + fib13(n - 12);\n};\n\n/*\n  >>> fib14(14)\n  4181\n  >>> fib14(15)\n  6765\n  >>> fib14(16)\n  9876\n  */\nconst fib14 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2) + fib14(n - 3) + fib14(n - 4) + fib14(n - 5) + fib14(n - 6) + fib14(n - 7) + fib14(n - 8) + fib14(n - 9) + fib14(n - 10) + fib14(n - 11) + fib14(n - 12) + fib14(n - 13) + fib14(n - 14);\n};\n\n/*\n  >>> fib15(15)\n  6765\n  >>> fib15(16)\n  9876\n  >>> fib15(17)\n  15971\n  */\nconst fib15 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2) + fib15(n - 3) + fib15(n - 4) + fib15(n - 5) + fib15(n - 6) + fib15(n - 7) + fib15(n - 8) + fib15(n - 9) + fib15(n - 10) + fib15(n - 11) + fib15(n - 12) + fib15(n - 13) + fib15(n - 14) + fib15(n - 15);\n};\n\n/*\n  >>> fib16(16)\n  9876\n  >>> fib16(17)\n  15971\n  >>> fib16(18)\n  2584\n  */\nconst fib16 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2) + fib16(n - 3) + fib16(n - 4) + fib16(n - 5) + fib16(n - 6) + fib16(n - 7) + fib16(n - 8) + fib16(n - 9) + fib16(n - 10) + fib16(n - 11) + fib16(n - 12) + fib16(n - 13) + fib16(n - 14) + fib16(n - 15) + fib16(n - 16);\n};\n\n/*\n  >>> fib17(17)\n  15971\n  >>> fib17(18)\n  2584\n  >>> fib17(19)\n  4181\n  */\nconst fib17 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib17(n - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return a-b})\n  [1, 2, 3, 4, 5]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n  >>> [1,2,3,4,5].sort(function(a, b){return b-a})\n  [5, 4, 3, 2, 1]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome (with case)\n  >>> isPalindromeCase('aba')\n  true\n  >>> isPalindromeCase('aaaaa')\n  true\n  >>> isPalindromeCase('zbcd')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (p === 0) {\n    return 1\n  }\n  if (p === 1) {\n    return n\n  }\n  if (p === 2) {\n    return n & 1\n  }\n  if (p === 3) {\n    return n & 2\n  }\n  if (p === 4) {\n    return n & 3\n  }\n  if (p === 5) {\n    return n & 4\n  }\n  if (p === 6) {\n    return n & 5\n  }\n  if (p === 7) {\n    return n & 6\n  }\n  if (p === 8) {\n    return n & 7\n  }\n  if (p === 9) {\n    return n & 8\n  }\n  if (p === 10) {\n    return n & 9\n  }\n  if (p === 11) {\n    return n & 10\n  }\n  if (p === 12) {\n    return n & 11\n  }\n  if (p === 13) {\n    return n & 12\n  }\n  if (p === 14) {\n    return n & 13\n  }\n  if (p === 15) {\n    return n & 14\n  }\n  if (p === 16) {\n    return n & 15\n  }\n  if (p === 17) {\n    return n & 16\n  }\n  if (p === 18) {\n    return n & 17\n  }\n  if (p === 19) {\n    return n & 18\n  }\n  if (p === 20) {\n    return n & 19\n  }\n  if (p === 21) {\n    return n & 20\n  }\n  if (p === 22) {\n    return n & 21\n  }\n  if (p === 23) {\n    return n & 22\n  }\n  if (p === 24) {\n    return n & 23\n  }\n  if (p === 25) {\n    return n & 24\n  }\n  if (p === 26) {\n    return n & 25\n  }\n  if (p === 27) {\n    return n & 26\n  }\n  if (p === 28) {\n    return n & 27\n  }\n  if (p === 29) {\n    return n & 28\n  }\n  if (p === 30) {\n    return n & 29\n  }\n  if (p === 31) {\n    return n & 30\n  }\n  if (p === 32) {\n    return n & 31\n  }\n  if (p === 33) {\n    return n & 32\n  }\n  if (p === 34) {\n    return n & 33\n  }\n  if (p === 35) {\n    return n & 34\n  }\n  if (p === 36) {\n    return n & 35\n  }\n  if (p === 37) {\n    return n & 36\n  }\n  if (p === 38) {\n    return n & 37\n  }\n  if (p === 39) {\n    return n & 38\n  }\n  if (p === 40) {\n    return n & 39\n  }\n  if (p === 41) {\n    return n & 40\n  }\n  if (p === 42) {\n    return n & 41\n  }\n  if (p === 43) {\n    return n & 42\n  }\n  if (p === 44) {\n    return n & 43\n  }\n  if (p === 45) {\n    return n & 44\n  }\n  if (p === 46) {\n    return n & 45\n  }\n  if (p === 47) {\n    return n & 46\n  }\n  if (p === 48) {\n    return n & 47\n  }\n  if (p === 49) {\n    return n & 48\n  }\n  if (p === 50) {\n    return n & 49\n  }\n  if (p === 51) {\n    return n & 50\n  }\n  if (p === 52) {\n    return n & 51\n  }\n  if (p === 53) {\n    return n & 52\n  }\n  if (p === 54) {\n    return n & 53\n  }\n  if (p === 55) {\n    return n & 54\n  }\n  if (p === 56) {\n    return n & 55\n  }\n  if (p === 57) {\n    return n & 56\n  }\n  if (p === 58) {\n    return n & 57\n  }\n  if (p === 59) {\n    return n & 58\n  }\n  if (p === 60) {\n    return n & 59\n  }\n  if (p === 61) {\n    return n & 60\n  }\n  if (p === 62) {\n    return n & 61\n  }\n  if (p === 63) {\n    return n & 62\n  }\n  if (p === 64) {\n    return n & 63\n  }\n  if (p === 65) {\n    return n & 64\n  }\n  if (p === 66) {\n    return n & 65\n  }\n  if (p === 67) {\n    return n & 66\n  }\n  if (p === 68) {\n    return n & 67\n  }\n  if (p === 69) {\n    return n & 68\n  }\n  if (p === 70) {\n    return n & 69\n  }\n  if (p === 71) {\n    return n & 70\n  }\n  if (p === 72) {\n    return n & 71\n  }\n  if (p === 73) {\n    return n & 72\n  }\n  if (p === 74) {\n    return n & 73\n  }\n  if (p === 75) {\n    return n & 74\n  }\n  if (p === 76) {\n    return n & 75\n  }\n  if (p === 77) {\n    return n & 76\n  }\n  if (p === 78) {\n    return n & 77\n  }\n  if (p === 79) {\n    return n & 78\n  }\n  if (p === 80) {\n    return n & 79\n  }\n  if (p === 81) {\n    return n & 80\n  }\n  if (p === 82) {\n    return n & 81\n  }\n  if (p === 83) {\n    return n & 82\n  }\n  if (p === 84) {\n    return n & 83\n  }\n  if (p === 85) {\n    return n & 84\n  }\n  if (p === 86) {\n    return n & 85\n  }\n  if (p === 87) {\n    return n & 86\n  }\n  if (p === 88) {\n    return n & 87\n  }\n  if (p === 89) {\n    return n & 88\n  }\n  if (p === 90) {\n    return n & 89\n  }\n  if (p === 91) {\n    return n & 90\n  }\n  if (p === 92) {\n    return n & 91\n  }\n  if (p === 93) {\n    return n & 92\n  }\n  if (p === 94) {\n    return n & 93\n  }\n  if (p === 95) {\n    return n & 94\n  }\n  if (p === 96) {\n    return n & 95\n  }\n  if (p === 97) {\n    return n & 96\n  }\n  if (p === 98) {\n    return n & 97\n  }\n  if (p === 99) {\n    return n & 98\n  }\n  if (p === 100) {\n    return n & 99\n  }\n  if (p === 101) {\n    return n & 100\n  }\n  if (p === 102) {\n    return n & 101\n  }\n  if (p === 103) {\n    return n & 102\n  }\n  if (p === 104) {\n    return n & 103\n  }\n  if (p === 105) {\n    return n & 104\n  }\n  if (p === 106) {\n    return n & 105\n  }\n  if (p === 107) {\n    return n & 106\n  }\n  if (p === 108) {\n    return n & 107\n  }\n  if (p === 109) {\n    return n & 108\n  }\n  if (p === 110) {\n    return n & 109\n  }\n  if (p === 111) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    index++;\n  }\n  return result;\n};\n\n/**\n * Returns the first element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const firstElement = list?.[0];\n * console.log(firstElement); // logs 'foo'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const firstElement = list[0];\n * console.log(firstElement); // logs 'foo'\n * ```\n *\n * @param {List} list The list to retrieve the first element from.\n * @returns {*} The first element of the list or `undefined` if the list is empty.\n */\nconst first = (list) => list?.[0];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list?.[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n * const lastElement = list[list.length - 1];\n * console.log(lastElement); // logs 'baz'\n * ```\n *\n * @param {List} list The list to retrieve the last element from.\n * @returns {*} The last element of the list or `undefined` if the list is empty.\n */\nconst last = (list) => list?.[list.length - 1];\n\n/**\n * Returns the last element of the given list or `undefined` if the list is empty.\n * Useful for optional chaining.\n *\n * Examples:\n *\n * ``` javascript\n * const list = ['foo', 'bar', 'baz'];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftminus1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encodeShiftminus2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encodeShiftminus3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encodeShiftminus4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encodeShiftminus5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encodeShiftminus6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encodeShiftminus7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus7 = (s) => {\n  return s.split(\"\").", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i].toLowerCase()) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNonLetters is a function that takes strings and returns strings without non-letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonLetters('abcdef')\n  'bcdf'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'B'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='' || text[i] === '\\n' || text[i] === '\\t' || text[i] ==='') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '.' || text[i] === ',' || text[i] === '?' || text[i] === '!' || text[i] === '-' || text[i] === '/' || text[i] === '\\\\' || text[i] === '(' || text[i] === ')' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '*' || text[i] === '+' || text[i] === '^' || text[i] === '$' || text[i] === '|' || text[i] === '~' || text[i] === '@' || text[i] === '#' || text[i] === '$' || text[i] === '%' || text[i] === '^' || text[i] === '&' || text[i] === '*' || text[i] === '(' || text[i] === ')' || text[i] === '<' || text[i] === '>' || text[i] === '=' || text[i] === '+' || text[i] === '-' || text[i] === '_' || text[i] === '|' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] === '{' || text[i] === '}' || text[i] === '(' || text[i] === ')' || text[i] === '{' || text[i] === '}' || text[i] === '[' || text[i] === ']' || text[i] ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold6 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold7 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold8 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold9 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold10 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold11 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold12 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold13 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold14 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold15 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold16 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold17 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold18 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-5)\n  5\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-5)\n  5\n  >>> cbrt(5)\n  5\n  */\nconst cbrt = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-5)\n  -5\n  >>> ceil(5)\n  5\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-5)\n  -5\n  >>> floor(5)\n  5\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the nearest integer value of number x\n  >>> nearest(-5)\n  -5\n  >>> nearest(5)\n  5\n  */\nconst nearest = x => {\n  return Math.round(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs2(-5)\n  5\n  >>> abs2(5)\n  5\n  */\nconst abs2 = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt_2(-5)\n  5\n  >>> sqrt_2(5)\n  5\n  */\nconst sqrt_2 = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt_2(-5)\n  5\n  >>> cbrt_2(5)\n  5\n  */\nconst cbrt_2 = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil_2(-5)\n  -5\n  >>> ceil_2(5)\n  5\n  */\nconst ceil_2 = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor_2(-5)\n  -5\n  >>> floor_2(5)\n  5\n  */\nconst floor_2 = x => {\n  return Math.floor(x);\n};\n\n/*Get the rounded value of number x\n  >>> round_2(3.4)\n  3\n  >>> round_2(3.6)\n  4\n  */\nconst round_2 = x => {\n  return Math.round(x);\n};\n\n/*Get the nearest integer value of number x\n  >>> nearest_2(-5)\n  -5\n  >>> nearest_2(5)\n  5\n  */\nconst nearest_2 = x => {\n  return Math.round(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs3(-5)\n  5\n  >>> abs3(5)\n  5\n  */\nconst abs3 = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt_3(-5)\n  5\n  >>> sqrt_3(5)\n  5\n  */\nconst sqrt_3 = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt_3(-5)\n  5\n  >>> cbrt_3(5)\n  5\n  */\nconst cbrt_3 = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil_3(-5)\n  -5\n  >>> ceil_3(5)\n  5\n  */\nconst ceil_3 = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor_3(-5)\n  -5\n  >>> floor_3(5)\n  5\n  */\nconst floor_3 = x => {\n  return Math.floor(x);\n};\n\n/*Get the rounded value of number x\n  >>> round_3(3.4)\n  3\n  >>> round_3(3.6)\n  4\n  */\nconst round_3 = x => {\n  return Math.round(x);\n};\n\n/*Get the nearest integer value of number x\n  >>> nearest_3(-5)\n  -5\n  >>> nearest_3(5)\n  5\n  */\nconst nearest_3 = x => {\n  return Math.round(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs4(-5)\n  5\n  >>> abs4(5)\n  5\n  */\nconst abs4 = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt_4(-5)\n  5\n  >>> sqrt_4(5)\n  5\n  */\nconst sqrt_4 = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt_4(-5)\n  5\n  >>> cbrt_4(5)\n  5\n  */\nconst cbrt_4 = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil_4(-5)\n  -5\n  >>> ceil_4(5)\n  5\n  */\nconst ceil_4 = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor_4(-5)\n  -5\n  >>> floor_4(5)\n  5\n  */\nconst floor_4 = x => {\n  return Math.floor(x);\n};\n\n/*Get the rounded value of number x\n  >>> round_4(3.4)\n  3\n  >>> round_4(3.6)\n  4\n  */\nconst round_4 = x => {\n  return Math.round(x);\n};\n\n/*Get the nearest integer value of number x\n  >>> nearest_4(-5)\n  -5\n  >>> nearest_4(5)\n  5\n  */\nconst nearest_4 = x => {\n  return Math.round(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs5(-5)\n  5\n  >>> abs5(5)\n  5\n  */\nconst abs5 = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt_5(-5)\n  5\n  >>> sqrt_5(5)\n  5\n  */\nconst sqrt_5 = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt_5(-5)\n  5\n  >>> cbrt_5(5)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n  >>> fib(3)\n  7\n  >>> fib(4)\n  8\n  >>> fib(5)\n  10\n  >>> fib(6)\n  13\n  >>> fib(7)\n  21\n  >>> fib(8)\n  55\n  >>> fib(9)\n  89\n  >>> fib(10)\n  89\n  >>> fib(11)\n  144\n  >>> fib(12)\n  233\n  >>> fib(13)\n  377\n  >>> fib(14)\n  610\n  >>> fib(15)\n  987\n  >>> fib(16)\n  1597\n  >>> fib(17)\n  2584\n  >>> fib(18)\n  4181\n  >>> fib(19)\n  6765\n  >>> fib(20)\n  10946\n  >>> fib(21)\n  17711\n  >>> fib(22)\n  28657\n  >>> fib(23)\n  47516\n  >>> fib(24)\n  82317\n  >>> fib(25)\n  121444\n  >>> fib(26)\n  196418\n  >>> fib(27)\n  251799\n  >>> fib(28)\n  405548\n  >>> fib(29)\n  570288\n  >>> fib(30)\n  922828\n  >>> fib(31)\n  14930352\n  >>> fib(32)\n  24157817\n  >>> fib(33)\n  39088169\n  >>> fib(34)\n  63245986\n  >>> fib(35)\n  102334155\n  >>> fib(36)\n  165580141\n  >>> fib(37)\n  267914296\n  >>> fib(38)\n  433494437\n  >>> fib(39)\n  701408733\n  >>> fib(40)\n  1134903170\n  >>> fib(41)\n  1861990353\n  >>> fib(42)\n  2971215073\n  >>> fib(43)\n  4807526976\n  >>> fib(44)\n  6871947673\n  >>> fib(45)\n  1094196624\n  >>> fib(46)\n  175921860444\n  >>> fib(47)\n  267914296\n  >>> fib(48)\n  433494437\n  >>> fib(49)\n  701408733\n  >>> fib(50)\n  1134903170\n  >>> fib(51)\n  1861990353\n  >>> fib(52)\n  2971215073\n  >>> fib(53)\n  4807526976\n  >>> fib(54)\n  6871947673\n  >>> fib(55)\n  1094196624\n  >>> fib(56)\n  175921860444\n  >>> fib(57)\n  267914296\n  >>> fib(58)\n  433494437\n  >>> fib(59)\n  701408733\n  >>> fib(60)\n  1134903170\n  >>> fib(61)\n  1861990353\n  >>> fib(62)\n  2971215073\n  >>> fib(63)\n  4807526976\n  >>> fib(64)\n  6871947673\n  >>> fib(65)\n  1094196624\n  >>> fib(66)\n  175921860444\n  >>> fib(67)\n  267914296\n  >>> fib(68)\n  433494437\n  >>> fib(69)\n  701408733\n  >>> fib(70)\n  1134903170\n  >>> fib(71)\n  1861990353\n  >>> fib(72)\n  2971215073\n  >>> fib(73)\n  4807526976\n  >>> fib(74)\n  6871947673\n  >>> fib(75)\n  1094196624\n  >>> fib(76)\n  175921860444\n  >>> fib(77)\n  267914296\n  >>> fib(78)\n  433494437\n  >>> fib(79)\n  701408733\n  >>> fib(80)\n  1134903170\n  >>> fib(81)\n  1861990353\n  >>> fib(82)\n  2971215073\n  >>> fib(83)\n  4807526976\n  >>> fib(84)\n  6871947673\n  >>> fib(85)\n  1094196624\n  >>> fib(86)\n  175921860444\n  >>> fib(87)\n  267914296\n  >>> fib(88)\n  433494437\n  >>> fib(89)\n  701408733\n  >>> fib(90)\n  1134903170\n  >>> fib(91)\n  1861990353\n  >>> fib(92)\n  2971215073\n  >>> fib(93)\n  4807526976\n  >>> fib(94)\n  6871947673\n  >>> fib(95)\n  1094196624\n  >>> fib(96)\n  175921860444\n  >>> fib(97)\n  267914296\n  >>> fib(98)\n  433494437\n  >>> fib(99)\n  701408733\n  >>> fib(100)\n  1134903170\n  >>> fib(101)\n  1861990353\n  >>> fib(102)\n  2971215073\n  >>> fib(103)\n  4807526976\n  >>> fib(104)\n  6871947673\n  >>> fib(105)\n  1094196624\n  >>> fib(106)\n  175921860444\n  >>> fib(107)\n  267914296\n  >>> fib(108)\n  433494437\n  >>> fib(109)\n  701408733\n  >>> fib(110)\n  1134903170\n  >>> fib(111)\n  1861990353\n  >>> fib(112)\n  297121507", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n\n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> escapeHTML(\"foo & bar\")\n  'foo &amp; bar'\n */\nconst escapeHTML = (string) => {\n  return string.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> unescapeHTML(\"foo &amp; bar\")\n  'foo & bar'\n */\nconst unescapeHTML = (string) => {\n  return string.replace(/&amp;/g, \"&\").replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURI(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURI = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURI(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURI = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar\")\n  'foo & bar'\n */\nconst decodeURIComponent = (string) => {\n  return string.replace(/%20/g, \" \").replace(/&amp;/g, \"&\").replace(/%3C/g, \"<\").replace(/%3E/g, \">\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> encodeURIComponent(\"foo & bar\")\n  'foo%20%26%20bar'\n */\nconst encodeURIComponent = (string) => {\n  return string.replace(/&/g, \"%26\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\");\n};\n\n/**\n * Takes a string and returns the string with all instances of \"&\" replaced with \"&amp;\".\n *\n  >>> decodeURIComponent(\"foo%20%26%20bar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = null;\n  let curr = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const next = l[i];\n    if (curr!== next) {\n      if (prev === null) {\n        return true;\n      }\n      if (next > prev) {\n        return false;\n      }\n      prev = curr;\n      curr = next;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given list is monotonically increasing.\n *\n * Monotonically increasing lists go from left to right and from right to left.\n * For example, a list [1, 2, 3] monotonically increases from left to right\n * is [3, 2, 1] and from right to left is [1, 3, 2].\n *\n * If the given list is empty, then the result is true.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isMonotonicIncreasing = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  return monotonic(l);\n};\n\n/**\n * Returns true if the given list is monotonically decreasing.\n *\n * Monotonically decreasing lists go from left to right and from right to left.\n * For example, a list [1, 2, 3] monotonically decreases from left to right\n * is [1, 3, 2] and from right to left is [3, 2, 1].\n *\n * If the given list is empty, then the result is true.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isMonotonicDecreasing = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  return!monotonic(l);\n};\n\n/**\n * Returns true if the given list is strictly increasing.\n *\n * Strictly increasing lists go from left to right and from right to left.\n * For example, a list [1, 2, 3] strictly increases from left to right\n * is [3, 2, 1] and from right to left is [1, 3, 2].\n *\n * If the given list is empty, then the result is true.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isStrictlyIncreasing = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  return l.every((val, i) => {\n    return val > l[i - 1];\n  });\n};\n\n/**\n * Returns true if the given list is strictly decreasing.\n *\n * Strictly decreasing lists go from left to right and from right to left.\n * For example, a list [1, 2, 3] strictly decreases from left to right\n * is [1, 3, 2] and from right to left is [3, 2, 1].\n *\n * If the given list is empty, then the result is true.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isStrictlyDecreasing = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  return l.every((val, i) => {\n    return val < l[i - 1];\n  });\n};\n\n/**\n * Returns true if the given list is strictly decreasing or increasing.\n *\n * Strictly decreasing or increasing lists go from left to right and from right to left.\n * For example, a list [1, 2, 3] strictly decreases or increases from left to right\n * is [3, 2, 1] and from right to left is [1, 3, 2].\n *\n * If the given list is empty, then the result is true.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isStrictlyIncreasingOrDecreasing = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  return isStrictlyIncreasing(l) || isStrictlyDecreasing(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUnique = (l) => {\n  return l.length === l.filter((val, i) => {\n    return l.indexOf(val) === i;\n  }).length;\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmpty = (l) => {\n  return l.length === 0 || isUnique(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyStrictly = (l) => {\n  return l.length === 0 || isUniqueStrictly(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyMonotonic = (l) => {\n  return l.length === 0 || isUniqueMonotonic(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyMonotonicStrictly = (l) => {\n  return l.length === 0 || isUniqueMonotonicStrictly(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyStrictlyMonotonic = (l) => {\n  return l.length === 0 || isUniqueStrictlyMonotonic(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyStrictlyMonotonicStrictly = (l) => {\n  return l.length === 0 || isUniqueStrictlyMonotonicStrictly(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyMonotonicMonotonic = (l) => {\n  return l.length === 0 || isUniqueMonotonicMonotonic(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyMonotonicMonotonicStrictly = (l) => {\n  return l.length === 0 || isUniqueMonotonicMonotonicStrictly(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or is empty.\n *\n * Time complexity: O(n)\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst isUniqueOrEmptyStrictlyMonotonicMonotonic = (l) => {\n  return l.length === 0 || isUniqueStrictlyMonotonicMonotonic(l);\n};\n\n/**\n * Returns true if the given list contains only unique elements or ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set(l1);\n  const result = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return Math.floor(n / 2);\n  if (n % 3 === 0) return Math.floor(n / 3);\n  if (n % 5 === 0) return Math.floor(n / 5);\n  if (n % 7 === 0) return Math.floor(n / 7);\n  return largestPrimeFactor(n / 2);\n};\n\n/*\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n  [1, 1, 2, 5, 13, 41, 121, 353, 729, 1401, 1477, 3257, 5439, 12797, 134941]\n  >>> primeFactors(13195)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const parens = paren_string.match(/[^()]+/g);\n  const levels = [];\n  let level = 0;\n  let paren_count = 0;\n  let last_paren_level = 0;\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        levels[level] = last_paren_level;\n        level++;\n        last_paren_level = level;\n      }\n    } else {\n      paren_count++;\n      last_paren_level = level;\n    }\n  }\n  return levels;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences2 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences3 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences4 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences5 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences6 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences7 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences8 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences9 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences10 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns the number of times a substring appears in the string. E.g.\n * 'abcabc' has two 'a's and 'b's in it.\n * \n * >>> countOccurrences('abcabc', 'a')\n * 2\n * \n * >>> countOccurrences('abcabc', 'b')\n * 1\n * \n * >>> countOccurrences('abcabc', 'c')\n * 0\n */\nconst countOccurrences11 = (string, substring) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string of text, returns a string with each word capitalized.\n * \n  >>> capitalizeWords('hello world')\n  'Hello World'\n  >>> capitalizeWords('hello, world')\n  'Hello, World'\n  >>> capitalizeWords('hello, world, how are you?')\n  'Hello, World, How Are You?'\n  >>> capitalizeWords('')\n  ''\n  >>> capitalizeWords('  ')\n ' '\n  >>> capitalizeWords('  hello  ')\n ' Hello  '\n  >>> capitalizeWords('hello  ')\n  'Hello  '\n  >>> capitalizeWords('hello  world  ')\n  'Hello  World  '\n  >>> capitalizeWords('hello  world  how are you?')\n  'Hello  World  How Are You?'\n  >>> capitalizeWords('hello  world  how are you? are you ok?')\n  'Hello  World  How Are You? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok?')\n  'Hello  World  How Are You? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok? Are You Ok?'\n  >>> capitalizeWords('hello  world  how are you? are you ok? are you ok? are you ok? are you ok? are you ok? are you ok? are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  return [xs[0] + derivative(xs.slice(1))]\n}\n\n// returns true if two polynomials are equal\nconst equal = (p1, p2) => {\n  if (p1.length!== p2.length) return false\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPoly = (p1, p2) => {\n  if (p1.length!== p2.length) return false\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i].length!== p2.length) return false\n    for (let j = 0; j < p1[i].length; j++) {\n      if (p1[i][j]!== p2[i][j]) return false\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolys = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j]!== poly2[i][j]) return false\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPoly = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k]!== poly2[i][j][k]) return false\n      }\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPolys = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k].length!== poly2[i][j][k].length) return false\n        for (let l = 0; l < poly1[i][j][k].length; l++) {\n          if (poly1[i][j][k][l]!== poly2[i][j][k][l]) return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPolysPoly = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k].length!== poly2[i][j][k].length) return false\n        for (let l = 0; l < poly1[i][j][k].length; l++) {\n          if (poly1[i][j][k][l].length!== poly2[i][j][k][l].length) return false\n          for (let m = 0; m < poly1[i][j][k][l].length; m++) {\n            if (poly1[i][j][k][l][m]!== poly2[i][j][k][l][m]) return false\n          }\n        }\n      }\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPolysPolys = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k].length!== poly2[i][j][k].length) return false\n        for (let l = 0; l < poly1[i][j][k].length; l++) {\n          if (poly1[i][j][k][l].length!== poly2[i][j][k][l].length) return false\n          for (let m = 0; m < poly1[i][j][k][l].length; m++) {\n            if (poly1[i][j][k][l][m].length!== poly2[i][j][k][l][m].length) return false\n            for (let n = 0; n < poly1[i][j][k][l][m].length; n++) {\n              if (poly1[i][j][k][l][m][n]!== poly2[i][j][k][l][m][n]) return false\n            }\n          }\n        }\n      }\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPolysPolysPoly = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k].length!== poly2[i][j][k].length) return false\n        for (let l = 0; l < poly1[i][j][k].length; l++) {\n          if (poly1[i][j][k][l].length!== poly2[i][j][k][l].length) return false\n          for (let m = 0; m < poly1[i][j][k][l].length; m++) {\n            if (poly1[i][j][k][l][m].length!== poly2[i][j][k][l][m].length) return false\n            for (let n = 0; n < poly1[i][j][k][l][m].length; n++) {\n              if (poly1[i][j][k][l][m][n].length!== poly2[i][j][k][l][m][n]) return false\n            }\n          }\n        }\n      }\n    }\n  }\n  return true\n}\n\n// returns true if two polynomials are equal\nconst equalPolysPolysPolysPolys = (poly1, poly2) => {\n  if (poly1.length!== poly2.length) return false\n  for (let i = 0; i < poly1.length; i++) {\n    if (poly1[i].length!== poly2.length) return false\n    for (let j = 0; j < poly1[i].length; j++) {\n      if (poly1[i][j].length!== poly2[i][j].length) return false\n      for (let k = 0; k < poly1[i][j].length; k++) {\n        if (poly1[i][j][k].length!== poly2[i][j][k].length) return false\n        for (let l = 0; l < poly1[i][j][k].length; l++) {\n          if (poly1[i][j][k][l].length!== poly2[i][j][k][l].length) return false\n          for (let m = 0; m < poly1[i][j][k][l].length; m++) {\n            if (poly1[i][j][k][l][m].length!== poly2[i][j][k][l][m].length) return false\n            for (let n = 0; n < poly1[i][j][k][l][m].length; n++) {\n              if (poly1[i][j][k][l][m][n].length!== poly2[i][j][k][l][m][n]) return false\n            }\n          }\n        }\n      }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on. For example, 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 1258626905 20365011074 32951280099 49267447341 81111595103 139920338969 217261922994 352474187459 5702887493 92274660077 149303523637 241578171610 390881692639 632459861210 1023341552189 1655801410841 267914296487 4334944371711 7014087331707 1134903170183 1836311903229 2971215073248 4807526976770 7778742049161 1258626905177 20365011074181 32951280099167 4926744734161 8111159510329 13992033896916 217261922994167 35247418745916 57028874931701 92274660077167 14930352363716 24157817161016 39088169263916 63245986121016 10233415521896 165580141084108 26791429648710 43349443717104 70140873317070 11349031701830 18363119032290 29712150732478 48075269767698 77787420491610 12586269051768 20365011074176 32951280099166 49267447341610 81111595103288 139920338969157 217261922994176 352474187459157 57028874931700 92274660077157 149303523637156 241578171610148 390881692639156 632459861210148 102334155218952 165580141084106 267914296487096 433494437170952 701408733170704 113490317018304 183631190322896 297121507324768 480752697676968 777874204916096 125862690517676 203650110741756 329512800991656 492674473416096 811115951032876 1399203389691556 2172619229941756 3524741874591556 570288749317004 922746600771556 1493035236371554 2415781716101464 3908816926391554 6324598612101464 1023341552189524 1655801410841056 2679142964870954 4334944371709536 7014087331707040 1134903170183036 1836311903228964 2971215073247672 4807526976769672 7778742049160964 1258626905176756 2036501107417556 3295128009916556 4926744734160964 8111159510328754 13992033896915544 21726192299417556 35247418745915544 5702887493170036 9227466007715544 14930352363715542 2415781716101464 39088169263915542 6324598612101464 10233415521895240 16558014108410560 26791429648709540 43349443717095360 70140873317070400 11349031701830360 18363119032289640 29712150732476720 48075269767696720 77787420491609640 12586269051767560 20365011074175560 32951280099165560 49267447341609640 81111595103287548 139920338969155440 217261922994175560 352474187459155440 57028874931700360 92274660077155440 149303523637155428 24157817161014648 390881692639155428 63245986121014648 102334155218952400 165580141084105600 267914296487095400 433494437170953600 701408733170704000 113490317018303600 183631190322896400 297121507324767200 480752697676967200 777874204916096400 125862690517675600 203650110741755600 329512800991655600 492674473416096400 811115951032875480 1399203389691554400 2172619229941755600 3524741874591554400 570288749317003600 922746600771554400 1493035236371554280 241578171610146480 3908816926", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\"\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const str = x.toString();\n  const len = str.length;\n  const result = \"\";\n  let displacement = shift;\n  while (displacement >= len) {\n    displacement -= len;\n    result += str.charAt(len - displacement);\n  }\n  while (displacement < 0) {\n    displacement += len;\n    result += str.charAt(displacement);\n  }\n  return result;\n};\n\n/*\n  >>> toBinary(0)\n  \"0\"\n  >>> toBinary(1)\n  \"1\"\n  >>> toBinary(2)\n  \"10\"\n  >>> toBinary(3)\n  \"11\"\n  >>> toBinary(4)\n  \"100\"\n  >>> toBinary(5)\n  \"101\"\n  >>> toBinary(6)\n  \"110\"\n  >>> toBinary(7)\n  \"111\"\n  >>> toBinary(8)\n  \"1000\"\n  >>> toBinary(9)\n  \"1001\"\n  >>> toBinary(10)\n  \"1010\"\n  >>> toBinary(11)\n  \"1011\"\n  >>> toBinary(12)\n  \"1100\"\n  >>> toBinary(13)\n  \"1101\"\n  >>> toBinary(14)\n  \"1110\"\n  >>> toBinary(15)\n  \"1111\"\n  >>> toBinary(16)\n  \"10000\"\n  >>> toBinary(17)\n  \"10001\"\n  >>> toBinary(18)\n  \"10010\"\n  >>> toBinary(19)\n  \"10011\"\n  >>> toBinary(20)\n  \"10100\"\n  >>> toBinary(21)\n  \"10101\"\n  >>> toBinary(22)\n  \"10110\"\n  >>> toBinary(23)\n  \"10111\"\n  >>> toBinary(24)\n  \"11000\"\n  >>> toBinary(25)\n  \"11001\"\n  >>> toBinary(26)\n  \"11010\"\n  >>> toBinary(27)\n  \"11011\"\n  >>> toBinary(28)\n  \"11100\"\n  >>> toBinary(29)\n  \"11101\"\n  >>> toBinary(30)\n  \"11110\"\n  >>> toBinary(31)\n  \"11111\"\n  >>> toBinary(32)\n  \"100000\"\n  >>> toBinary(33)\n  \"100001\"\n  >>> toBinary(34)\n  \"100010\"\n  >>> toBinary(35)\n  \"100011\"\n  >>> toBinary(36)\n  \"100100\"\n  >>> toBinary(37)\n  \"100101\"\n  >>> toBinary(38)\n  \"100110\"\n  >>> toBinary(39)\n  \"100111\"\n  >>> toBinary(40)\n  \"101000\"\n  >>> toBinary(41)\n  \"101001\"\n  >>> toBinary(42)\n  \"101010\"\n  >>> toBinary(43)\n  \"101011\"\n  >>> toBinary(44)\n  \"101100\"\n  >>> toBinary(45)\n  \"101101\"\n  >>> toBinary(46)\n  \"101110\"\n  >>> toBinary(47)\n  \"101111\"\n  >>> toBinary(48)\n  \"110000\"\n  >>> toBinary(49)\n  \"110001\"\n  >>> toBinary(50)\n  \"110010\"\n  >>> toBinary(51)\n  \"110011\"\n  >>> toBinary(52)\n  \"110100\"\n  >>> toBinary(53)\n  \"110101\"\n  >>> toBinary(54)\n  \"110110\"\n  >>> toBinary(55)\n  \"110111\"\n  >>> toBinary(56)\n  \"111000\"\n  >>> toBinary(57)\n  \"111001\"\n  >>> toBinary(58)\n  \"111010\"\n  >>> toBinary(59)\n  \"111011\"\n  >>> toBinary(60)\n  \"111100\"\n  >>> toBinary(61)\n  \"111101\"\n  >>> toBinary(62)\n  \"111110\"\n  >>> toBinary(63)\n  \"111111\"\n  >>> toBinary(64)\n  \"10000000\"\n  >>> toBinary(65)\n  \"10000001\"\n  >>> toBinary(66)\n  \"10000010\"\n  >>> toBinary(67)\n  \"10000011\"\n  >>> toBinary(68)\n  \"10000100\"\n  >>> toBinary(69)\n  \"10000101\"\n  >>> toBinary(70)\n  \"10000110\"\n  >>> toBinary(71)\n  \"10000111\"\n  >>> toBinary(72)\n  \"10001000\"\n  >>> toBinary(73)\n  \"10001001\"\n  >>> toBinary(74)\n  \"10001010\"\n  >>> toBinary(75)\n  \"10001011\"\n  >>> toBinary(76)\n  \"10001100\"\n  >>> toBinary(77)\n  \"10001101\"\n  >>> toBinary(78)\n  \"10001110\"\n  >>> toBinary(79)\n  \"10001111\"\n  >>> toBinary(80)\n  \"10010000\"\n  >>> toBinary(81)\n  \"10010001\"\n  >>> toBinary(82)\n  \"10010010\"\n  >>> toBinary(83)\n  \"10010011\"\n  >>> toBinary(84)\n  \"10010100\"\n  >>> toBinary(85)\n  \"10010101\"\n  >>> toBinary(86)\n  \"10010110\"\n  >>> toBinary(87)\n  \"10010111\"\n  >>> toBinary(88)\n  \"10011000\"\n  >>> toBinary(89)\n  \"10011001\"\n  >>> toBinary(90)\n  \"10011010\"\n  >>> toBinary(91)\n  \"10011011\"\n  >>> toBinary(92)\n  \"10011100\"\n  >>> toBinary(93)\n  \"10011101\"\n  >>> toBinary(94)\n  \"10011110\"\n  >>> toBinary(95)\n  \"10011111\"\n  >>> toBinary(96)\n  \"10100000\"\n  >>> toBinary(97)\n  \"10100001\"\n  >>> toBinary(98)\n  \"10100010\"\n  >>> toBinary(99)\n  \"10100011\"\n  >>> toBinary(100)\n  \"10100100\"\n  >>> toBinary(101)\n  \"10100101\"\n  >>> toBinary(102)\n  \"10100110\"\n  >>> toBinary(103)\n  \"10100111\"\n  >>> toBinary(104)\n  \"10101000\"\n  >>> toBinary(105)\n  \"10101001\"\n  >>> toBinary(106)\n  \"10101010\"\n  >>> toBinary(107)\n  \"10101011\"\n  >>> toBinary(108)\n  \"10101100\"\n  >>> toBinary(109)\n  \"10101101\"\n  >>> toBinary(1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLowerUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  const [appleCount, orangeCount, mangoCount] = [\n    Number(apples),\n    Number(oranges),\n    Number(mango),\n  ];\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = n - totalFruits;\n  return fruitsInBasket;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| c |>\nNo problem, glad I could help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);\n  const totalFruits = appleCount + orangeCount + mangoCount;\n  const fruitsInBasket = totalFruits - appleCount + orangeCount + mangoCount;\n  return fruitsInBasket;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(apples, oranges, mango) {\n  const appleCount = Number(apples);\n  const orangeCount = Number(oranges);\n  const mangoCount = Number(mango);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((acc, val) => {\n    return val < acc? val : acc;\n  });\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((acc, val) => {\n    return val < acc? val : acc;\n  });\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((acc, val) => {\n    return val < acc? val : acc;\n  });\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((acc, val) => {\n    return val < acc? val : acc;\n  });\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndexAndValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the smallest integer number, which is less than zero and has a frequency less than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the sum of all positive integers in the list. Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 25\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the product of all positive integers in the list. Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns a list of all positive integers in the list except the one passed as argument. Examples:\n      remove([4, 1, 2, 2, 3, 1], 2)\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4], 4)\n      remove([5, 5, 4, 4, 4], 4)\n      remove([5, 5, 4, 4, 4], 5)\n      remove([5, 5, 4, 4, 4], 6)\n      remove([5, 5, 4, 4, 4], 7)\n      remove([5, 5, 4, 4, 4], 8)\n      remove([5, 5, 4, 4, 4], 9)\n      remove([5, 5, 4, 4, 4], 10)\n      remove([5, 5, 4, 4, 4], 11)\n      remove([5, 5, 4, 4, 4], 12)\n      remove([5, 5, 4, 4, 4], 13)\n      remove([5, 5, 4, 4, 4], 14)\n      remove([5, 5, 4, 4, 4], 15)\n      remove([5, 5, 4, 4, 4], 16)\n      remove([5, 5, 4, 4, 4], 17)\n      remove([5, 5, 4, 4, 4], 18)\n      remove([5, 5, 4, 4, 4], 19)\n      remove([5, 5, 4, 4, 4], 20)\n      remove([5, 5, 4, 4, 4], 21)\n      remove([5, 5, 4, 4, 4], 22)\n      remove([5, 5, 4, 4, 4], 23)\n      remove([5, 5, 4, 4, 4], 24)\n      remove([5, 5, 4, 4, 4], 25)\n      remove([5, 5, 4, 4, 4], 26)\n      remove([5, 5, 4, 4, 4], 27)\n      remove([5, 5, 4, 4, 4], 28)\n      remove([5, 5, 4, 4, 4], 29)\n      remove([5, 5, 4, 4, 4], 30)\n      remove([5, 5, 4, 4, 4], 31)\n      remove([5, 5, 4, 4, 4], 32)\n      remove([5, 5, 4, 4, 4], 33)\n      remove([5, 5, 4, 4, 4], 34)\n      remove([5, 5, 4, 4, 4], 35)\n      remove([5, 5, 4, 4, 4], 36)\n      remove([5, 5, 4, 4, 4], 37)\n      remove([5, 5, 4, 4, 4], 38)\n      remove([5, 5, 4, 4, 4], 39)\n      remove([5, 5, 4, 4, 4], 40)\n      remove([5, 5, 4, 4, 4], 41)\n      remove([5, 5, 4, 4, 4], 42)\n      remove([5, 5, 4, 4, 4], 43)\n      remove([5, 5, 4, 4, 4], 44)\n      remove([5, 5, 4, 4, 4], 45)\n      remove([5, 5, 4, 4, 4], 46)\n      remove([5, 5, 4, 4, 4], 47)\n      remove([5, 5, 4, 4, 4], 48)\n      remove([5, 5, 4, 4, 4], 49)\n      remove([5, 5, 4, 4, 4], 50)\n      remove([5, 5, 4, 4, 4], 51)\n      remove([5, 5, 4, 4, 4], 52)\n      remove([5, 5, 4, 4, 4], 53)\n      remove([5, 5, 4, 4, 4], 54)\n      remove([5, 5, 4, 4, 4], 55)\n      remove([5, 5, 4, 4, 4], 56)\n      remove([5, 5, 4, 4, 4], 57)\n      remove([5, 5, 4, 4, 4], 58)\n      remove([5, 5, 4, 4, 4], 59)\n      remove([5, 5, 4, 4, 4], 60)\n      remove([5, 5, 4, 4, 4], 61)\n      remove([5, 5, 4, 4, 4], 62)\n      remove([5, 5, 4, 4, 4], 63)\n      remove([5, 5, 4, 4, 4], 64)\n      remove([5, 5, 4, 4, 4], 65)\n      remove([5, 5, 4, 4, 4], 66)\n      remove([5, 5, 4, 4, 4], 67)\n      remove([5, 5, 4, 4, 4], 68)\n      remove([5, 5, 4, 4, 4], 69)\n      remove([5, 5, 4, 4, 4], 70)\n      remove([5, 5, 4, 4, 4], 71)\n      remove([5, 5, 4, 4, 4], 72)\n      remove([5, 5, 4, 4, 4], 73)\n      remove([5, 5, 4, 4, 4], 74)\n      remove([5, 5, 4, 4, 4], 75)\n      remove([5, 5, 4, 4, 4], 76)\n      remove([5, 5, 4, 4, 4], 77)\n      remove([5, 5, 4, 4, 4], 78)\n      remove([5, 5, 4, 4, 4], 79)\n      remove([5, 5, 4, 4, 4], 80)\n      remove([5, 5, 4, 4, 4], 81)\n      remove([5, 5, 4, 4, 4], 82)\n      remove([5, 5, 4, 4, 4], 83)\n      remove([5, 5, 4, 4, 4], 84)\n      remove([5, 5, 4, 4, 4], 85)\n      remove([5, 5, 4, 4, 4], 86)\n      remove([5, 5, 4, 4, 4], 87)\n      remove([5, 5, 4, 4, 4], 88)\n      remove([5, 5, 4, 4, 4], 89)\n      remove([5, 5, 4, 4, 4], 90)\n      remove([5, 5, 4, 4, 4], 91)\n      remove([5, 5, 4, 4, 4], 92)\n      remove([5, 5, 4, 4, 4], 93)\n      remove([5, 5, 4, 4, 4], 94)\n      remove([5, 5, 4, 4, 4], 95)\n      remove([5, 5, 4, 4, 4], 96)\n      remove([5, 5, 4, 4, 4], 97)\n      remove([5, 5, 4, 4, 4], 98)\n      remove([5, 5, 4, 4, 4], 99)\n      remove([5, 5, 4, 4, 4], 100)\n      remove([5, 5, 4, 4, 4], 101)\n      remove([5, 5, 4, 4, 4], 102)\n      remove([5, 5, 4, 4, 4], 103)\n      remove([5, 5, 4, 4, 4], 104)\n      remove([5, 5, 4, 4, 4], 105)\n      remove([5, 5, 4, 4, 4], 106)\n      remove([5, 5, 4, 4, 4], 107)\n      remove([5, 5, 4, 4, 4], 108)\n      remove([5, 5, 4, 4, 4], 109)\n      remove([5, 5, 4, 4, 4], 110)\n      remove([5, 5, 4, 4, 4], 111)\n      remove([5, 5, 4, 4, 4], 112)\n      remove([5, 5, 4, 4, 4], 113)\n      remove([5, 5, 4, 4, 4], 114)\n      remove([5, 5, 4, 4, 4], 115)\n      remove([5, 5, 4, 4, 4], 116)\n      remove", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return!string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that start with a specific substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.startsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that end with a specific substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.endsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that contain a specific substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return!string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that start with a specific substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.startsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that end with a specific substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.endsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that contain a specific substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return!string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that start with a specific substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.startsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that end with a specific substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.endsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that contain a specific substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return!string.includes(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that start with a specific substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.startsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that end with a specific substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  const filteredStrings = strings.filter(string => {\n    return string.endsWith(substring);\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for strings that contain a specific ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b * c))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b * c))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b * c))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b * c))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const s = a + b + c\n  if (s > a * a + b * b + c * c) {\n    return -1\n  }\n  return Math.round(s / (a * b))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s > a * a + b * b + c * c + d * d) {\n    return -1\n  }\n  return Math.round(s / (a * b * c * d))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s > a * a + b * b + c * c + d * d) {\n    return -1\n  }\n  return Math.round(s / (a * b * c * d))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s > a * a + b * b + c * c + d * d) {\n    return -1\n  }\n  return Math.round(s / (a * b * c * d))\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s > a * a + b * b + c * c + d * d) {\n    return -1\n  }\n  return Math.round(s / (a * b * c * d))\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea13 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s > a * a + b * b + c * c + d * d) {\n    return -1\n  }\n  return Math.round(s / (a * b * c * d))\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let smallestChange = 0;\n  let currentChange = 0;\n  let currentIndex = 0;\n  let nextIndex = 0;\n  while (currentIndex < arr.length - 1) {\n    currentChange = arr[currentIndex] - arr[nextIndex];\n    nextIndex++;\n    if (currentChange < smallestChange) {\n      smallestChange = currentChange;\n    }\n    currentIndex++;\n  }\n  return smallestChange;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"\") == \"\"\n*/\nconst reverseString = (str) => {\n  let reversedString = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedString += str[i];\n  }\n  return reversedString;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abba\") == \"abba\"\n  reverseString(\"abba\") == \"abba\"\n  reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list greater than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    for (let i = 2; i < a; i++) {\n      if (isPrime(i) && isPrime(a - i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. K", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 0) return false;\n  if (x === 1) return false;\n  if (x === -1) return true;\n  if (x === -2) return true;\n  if (x === -3) return true;\n  if (x === -4) return true;\n  if (x === -5) return true;\n  if (x === -6) return true;\n  if (x === -7) return true;\n  if (x === -8) return true;\n  if (x === -9) return true;\n  if (x === -10) return true;\n  if (x === -11) return true;\n  if (x === -12) return true;\n  if (x === -13) return true;\n  if (x === -14) return true;\n  if (x === -15) return true;\n  if (x === -16) return true;\n  if (x === -17) return true;\n  if (x === -18) return true;\n  if (x === -19) return true;\n  if (x === -20) return true;\n  if (x === -21) return true;\n  if (x === -22) return true;\n  if (x === -23) return true;\n  if (x === -24) return true;\n  if (x === -25) return true;\n  if (x === -26) return true;\n  if (x === -27) return true;\n  if (x === -28) return true;\n  if (x === -29) return true;\n  if (x === -30) return true;\n  if (x === -31) return true;\n  if (x === -32) return true;\n  if (x === -33) return true;\n  if (x === -34) return true;\n  if (x === -35) return true;\n  if (x === -36) return true;\n  if (x === -37) return true;\n  if (x === -38) return true;\n  if (x === -39) return true;\n  if (x === -40) return true;\n  if (x === -41) return true;\n  if (x === -42) return true;\n  if (x === -43) return true;\n  if (x === -44) return true;\n  if (x === -45) return true;\n  if (x === -46) return true;\n  if (x === -47) return true;\n  if (x === -48) return true;\n  if (x === -49) return true;\n  if (x === -50) return true;\n  if (x === -51) return true;\n  if (x === -52) return true;\n  if (x === -53) return true;\n  if (x === -54) return true;\n  if (x === -55) return true;\n  if (x === -56) return true;\n  if (x === -57) return true;\n  if (x === -58) return true;\n  if (x === -59) return true;\n  if (x === -60) return true;\n  if (x === -61) return true;\n  if (x === -62) return true;\n  if (x === -63) return true;\n  if (x === -64) return true;\n  if (x === -65) return true;\n  if (x === -66) return true;\n  if (x === -67) return true;\n  if (x === -68) return true;\n  if (x === -69) return true;\n  if (x === -70) return true;\n  if (x === -71) return true;\n  if (x === -72) return true;\n  if (x === -73) return true;\n  if (x === -74) return true;\n  if (x === -75) return true;\n  if (x === -76) return true;\n  if (x === -77) return true;\n  if (x === -78) return true;\n  if (x === -79) return true;\n  if (x === -80) return true;\n  if (x === -81) return true;\n  if (x === -82) return true;\n  if (x === -83) return true;\n  if (x === -84) return true;\n  if (x === -85) return true;\n  if (x === -86) return true;\n  if (x === -87) return true;\n  if (x === -88) return true;\n  if (x === -89) return true;\n  if (x === -90) return true;\n  if (x === -91) return true;\n  if (x === -92) return true;\n  if (x === -93) return true;\n  if (x === -94) return true;\n  if (x === -95) return true;\n  if (x === -96) return true;\n  if (x === -97) return true;\n  if (x === -98) return true;\n  if (x === -99) return true;\n  if (x === -100) return true;\n  if (x === -101) return true;\n  if (x === -102) return true;\n  if (x === -103) return true;\n  if (x === -104) return true;\n  if (x === -105) return true;\n  if (x === -106) return true;\n  if (x === -107) return true;\n  if (x === -108) return true;\n  if (x === -109) return true;\n  if (x === -110) return true;\n  if (x === -111) return true;\n  if (x === -112) return true;\n  if (x === -113) return true;\n  if (x === -114) return true;\n  if (x === -115) return true;\n  if (x === -116) return true;\n  if (x === -117) return true;\n  if (x === -118) return true;\n  if (x === -119) return true;\n  if (x === -120) return true;\n  if (x === -121) return true;\n  if (x === -122) return true;\n  if (x === -123) return true;\n  if (x === -124) return true;\n  if (x === -125) return true;\n  if (x === -126) return true;\n  if (x === -127) return true;\n  if (x === -128) return true;\n  if (x === -129) return true;\n  if (x === -130) return true;\n  if (x === -131) return true;\n  if (x === -132) return true;\n  if (x === -133) return true;\n  if (x === -134) return true;\n  if (x === -135) return true;\n  if (x === -136) return true;\n  if (x === -137) return true;\n  if (x === -138) return true;\n  if (x === -139) return true;\n  if (x === -140) return true;\n  if (x === -141) return true;\n  if (x === -142) return true;\n  if (x === -143) return true;\n  if (x === -144) return true;\n  if (x === -145) return true;\n  if (x === -146) return true;\n  if (x === -147) return true;\n  if (x === -148) return true;\n  if (x === -149) return true;\n  if (x === -150) return true;\n  if (x === -151) return true;\n  if (x === -152) return true;\n  if (x === -153) return true;\n  if (x === -154) return true;\n  if (x === -155) return true;\n  if (x === -156) return true;\n  if (x === -157) return true;\n  if (x === -158) return true;\n  if (x === -159) return true;\n  if (x === -160) return true;\n  if (x === -161) return true;\n  if (x === -162) return true;\n  if (x === -163) return true;\n  if (x === -164) return true;\n  if (x === -165) return true;\n  if (x === -166) return true;\n  if (x === -167) return true;\n  if (x === -168) return true;\n  if (x === -169) return true;\n  if (x === -170) return true;\n  if (x === -171) return true;\n  if (x === -172) return true;\n  if (x === -173) return true;\n  if (x === -174) return true;\n  if (x === -175) return true;\n  if (x === -176) return true;\n  if (x === -177) return true;\n  if (x === -178) return true;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === 200) return true;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = 0;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = 0;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = 0;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = 0;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = 0;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = 0;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = 0;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = 0;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = 0;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = 0;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = 0;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = 0;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = 0;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = 0;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = 0;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = 0;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = 0;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = 0;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = 0;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = 0;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = 0;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = 0;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = 0;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = 0;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = 0;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = 0;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = 0;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = 0;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = 0;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = 0;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = 0;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = 0;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = 0;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = 0;\n  let hexNumArrayA2 = [];\n  let hexNumArrayA2Length = 0;\n  let hexNumArrayB2 = [];\n  let hexNumArrayB2Length = 0;\n  let hexNumArrayC2 = [];\n  let hexNumArrayC2Length = 0;\n  let hexNumArrayD2 = [];\n  let hexNumArrayD2Length = 0;\n  let hexNumArrayE2 = [];\n  let hexNumArrayE2Length = 0;\n  let hexNumArrayF2 = [];\n  let hexNumArrayF2Length = 0;\n  let hexNumArrayG2 = [];\n  let hexNumArrayG2Length = 0;\n  let hexNumArrayH2 = [];\n  let hexNumArrayH2Length = 0;\n  let hexNumArrayI2 = [];\n  let hexNumArrayI2Length = 0;\n  let hexNumArrayJ2 = [];\n  let hexNumArrayJ2Length = 0;\n  let hexNumArrayK2 = [];\n  let hexNumArrayK2Length = 0;\n  let hexNumArrayL2 = [];\n  let hexNumArrayL2Length = 0;\n  let hexNumArrayM2 = [];\n  let hexNumArrayM2Length = 0;\n  let hexNumArrayN2 = [];\n  let hexNumArrayN2Length = 0;\n  let hexNumArrayO2 = [];\n  let hexNumArrayO2Length = 0;\n  let hexNumArrayP2 = [];\n  let hexNumArrayP2Length = 0;\n  let hexNumArrayQ2 = [];\n  let hexNumArrayQ2Length = 0;\n  let hexNumArrayR2 = [];\n  let hexNumArrayR2Length = 0;\n  let hexNumArrayS2 = [];\n  let hexNumArrayS2Length = 0;\n  let hexNumArrayT2 = [];\n  let hexNumArrayT2Length = 0;\n  let hexNumArrayU2 = [];\n  let hexNumArrayU2Length = 0;\n  let hexNumArrayV2 = [];\n  let hexNumArrayV2Length = 0;\n  let hexNumArrayW2 = [];\n  let hexNumArrayW2Length = 0;\n  let hexNumArrayX2 = [];\n  let hexNumArrayX2Length = 0;\n  let hexNumArrayY2 = [];\n  let hexNumArrayY2Length = 0;\n  let hexNumArrayZ2 = [];\n  let hexNumArrayZ2Length = 0;\n  let hexNumArrayA3 = [];\n  let hexNumArrayA3Length = 0;\n  let hexNumArrayB3 = [];\n  let hexNumArrayB3Length = 0;\n  let hexNumArrayC3 = [];\n  let hexNumArrayC3Length = 0;\n  let hexNumArrayD3 = [];\n  let hexNumArrayD3Length = 0;\n  let hexNumArrayE3 = [];\n  let hexNumArrayE3Length = 0;\n  let hexNumArrayF3 = [];\n  let hexNumArrayF3Length = 0;\n  let hexNumArrayG3 = [];\n  let hexNumArrayG3Length = 0;\n  let hexNumArrayH3 = [];\n  let hexNumArrayH3Length = 0;\n  let hexNumArrayI3 = [];\n  let hexNumArrayI3Length = 0;\n  let hexNumArrayJ3 = [];\n  let hexNumArrayJ3Length = 0;\n  let hexNumArrayK3 = [];\n  let hexNumArrayK3Length = 0;\n  let hexNumArrayL3 = [];\n  let hexNumArrayL3Length = 0;\n  let hexNumArrayM3 = [];\n  let hexNumArrayM3Length = 0;\n  let hexNumArrayN3 = [];\n  let hexNumArrayN3Length = 0;\n  let hexNumArrayO3 = [];\n  let hexNumArrayO3Length = 0;\n  let hexNumArrayP3 = [];\n  let hexNumArrayP3Length = 0;\n  let hexNumArrayQ3 = [];\n  let hexNumArrayQ3Length = 0;\n  let hexNumArrayR3 = [];\n  let hexNumArrayR3Length = 0;\n  let hexNumArrayS3 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimalToBinaryHelper(decimal, binary)}`;\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += binaryToDecimalHelper(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary number. The decimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  decimalToBinary(\"15\") # returns \"1111\"\n  decimalToBinary(\"32\") # returns \"100000\"\n  */\nconst decimalToBinaryHelper = (decimal, binary) => {\n  if (decimal === 0) {\n    return binary;\n  }\n  return decimalToBinaryHelper(decimal / 2, binary + decimalToBinaryHelper(decimal % 2, 0));\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal number. The decimal number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  decimalToHexadecimal(\"15\") # returns \"f1\"\n  decimalToHexadecimal(\"32\") # returns \"100\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal > 0) {\n    hexadecimal = `${decimalToHexadecimalHelper(decimal, hexadecimal)}`;\n    decimal--;\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  as a string.\n\n  Examples:\n  hexadecimalToDecimal(\"f1\") # returns 15\n  hexadecimalToDecimal(\"100\") # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal += hexadecimalToDecimalHelper(hexadecimal[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexadecimalToBinary(\"f1\") # returns \"1111\"\n  hexadecimalToBinary(\"100\") # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  while (hexadecimal.length > 0) {\n    binary = `${hexadecimalToBinaryHelper(hexadecimal, binary)}`;\n    hexadecimal = hexadecimal.slice(0, -1);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal number. The binary number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimalHelper = (binary, decimal) => {\n  if (binary === '0') {\n    return decimal;\n  }\n  return binaryToDecimalHelper(binary.slice(1), decimal + parseInt(binary, 2));\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") # returns \"f1\"\n  binaryToHexadecimal(\"100000\") # returns \"100\"\n  */\nconst binaryToHexadecimalHelper = (binary, hexadecimal) => {\n  if (binary === '0') {\n    return hexadecimal;\n  }\n  return binaryToHexadecimalHelper(binary.slice(1), hexadecimal + parseInt(binary, 2).toString(16));\n};\n\n/*\n  Write a function that will convert a decimal number to octal number. The decimal number will\n  be given as a string. The function should return an integer, with the octal number represented\n  as a string.\n\n  Examples:\n  decimalToOctal(\"15\") # returns \"15\"\n  decimalToOctal(\"32\") # returns \"11\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  while (decimal > 0) {\n    octal = `${decimalToOctalHelper(decimal, octal)}`;\n    decimal--;\n  }\n  return octal;\n};\n\n/*\n  Write a function that will convert an octal number to decimal number. The octal number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  as a string.\n\n  Examples:\n  octalToDecimal(\"15\") # returns 15\n  octalToDecimal(\"11\") # returns 32\n  */\nconst octalToDecimal = (octal) => {\n  let decimal = 0;\n  for (let i = 0; i < octal.length; i++) {\n    decimal += octalToDecimalHelper(octal[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert an octal number to binary number. The octal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  octalToBinary(\"15\") # returns \"1111\"\n  octalToBinary(\"11\") # returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  while (octal.length > 0) {\n    binary = `${octalToBinaryHelper(octal, binary)}`;\n    octal = octal.slice(0, -1);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert an octal number to hexadecimal number. The octal number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  octalToHexadecimal(\"15\") # returns \"f1\"\n  octalToHexadecimal(\"11\") # returns \"100\"\n  */\nconst octalToHexadecimal = (octal) => {\n  let hexadecimal = '';\n  while (octal.length > 0) {\n    hexadecimal = `${octalToHexadecimalHelper(octal, hexadecimal)}`;\n    octal = octal.slice(0, -1);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The hexadecimal number will\n  be given as a string. The ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [0, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([0, 1])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'l') {\n      count += 1;\n    } else if (s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'r') {\n      count += 1;\n    } else if (s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'l') {\n      count += 1;\n    } else if (s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'r') {\n      count += 1;\n    } else if (s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'l') {\n      count += 1;\n    } else if (s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'r') {\n      count += 1;\n    } else if (s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'l') {\n      count += 1;\n    } else if (s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10)\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverage = gradesSum / gradesArray.length\n  const gradesSumOfSquares = gradesArray.map(grade => grade * grade)\n  const gradesAverageOfSquares = gradesSumOfSquares.reduce((sum, grade) => sum + grade, 0)\n  const gradesVariance = gradesAverageOfSquares / gradesArray.length\n  const gradesStandardDeviation = Math.sqrt(gradesVariance)\n  const gradesStandardDeviationOfSquares = gradesStandardDeviation * gradesStandardDeviation\n  const gradesVarianceOfSquares = gradesSumOfSquares.map(grade => grade * grade)\n  const gradesVarianceOfSquareSum = gradesVarianceOfSquares.reduce((sum, grade) => sum + grade, 0)\n  const gradesStandardDeviationOfSquareSum = gradesStandardDeviationOfSquareSum / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquares = gradesStandardDeviationOfSquareSum * gradesStandardDeviationOfSquares\n  const gradesVarianceOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquares.reduce((sum, grade) => sum + grade, 0)\n  const gradesStandardDeviationOfSquareSumOfSquareSum = gradesStandardDeviationOfSquareSumOfSquareSum / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSum = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSum / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesStandardDeviationOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares / gradesArray.length\n  const gradesVarianceOfSquareSumOfSquareSumOfSquareSumOfSquareSumOfSquares = gradesVari", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'e' && string[i]!== 'i' && string[i]!== 'o' && string[i]!== 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome2 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome3 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome4 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome5 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome6 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome7 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome8 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome9 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome10 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome11 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome12 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('Hello') == true\n  palindrome('abba') == true\n  palindrome('kittens') == true\n  palindrome('orange') == false\n  */\nconst palindrome13 = (string) => {\n  let reversedString = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .reverse()\n   .toString();\n  return string === reversedString;\n};\n\n/*Write is a function that takes a string and returns true if the string is a palindrome ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    n <= 0? 0 : (n = n % 10) + 1;\n    return startsOneEnds(n);\n  };\n  \n  \n  /*\n  Returns the number of digits in the given integer n, where n >= 0.\n  \n  Examples:\n  \n  digits(0); // => 0\n  digits(1); // => 1\n  digits(-1); // => 1\n  digits(100); // => 2\n  digits(-100); // => 2\n  digits(1000); // => 3\n  digits(-1000); // => 3\n  digits(100000000000000000000); // => 10\n  digits(-100000000000000000000); // => 10\n  digits(1000000000000000000000); // => 20\n  digits(-1000000000000000000000); // => 20\n  digits(1000000000000000000000000); // => 30\n  digits(-1000000000000000000000000); // => 30\n  digits(1000000000000000000000000000); // => 40\n  digits(-1000000000000000000000000000); // => 40\n  digits(1000000000000000000000000000000); // => 50\n  digits(-1000000000000000000000000000000); // => 50\n  digits(100000000000000000000000000000000); // => 60\n  digits(-100000000000000000000000000000000); // => 60\n  digits(1000000000000000000000000000000000); // => 70\n  digits(-1000000000000000000000000000000000); // => 70\n  digits(100000000000000000000000000000000000); // => 80\n  digits(-100000000000000000000000000000000000); // => 80\n  digits(100000000000000000000000000000000000000); // => 90\n  digits(-100000000000000000000000000000000000000); // => 90\n  digits(10000000000000000000000000000000000000000); // => 100\n  digits(-10000000000000000000000000000000000000000); // => 100\n  digits(100000000000000000000000000000000000000000); // => 200\n  digits(-100000000000000000000000000000000000000000); // => 200\n  digits(1000000000000000000000000000000000000000000); // => 300\n  digits(-1000000000000000000000000000000000000000000); // => 300\n  digits(100000000000000000000000000000000000000000000); // => 400\n  digits(-100000000000000000000000000000000000000000000); // => 400\n  digits(1000000000000000000000000000000000000000000000); // => 500\n  digits(-1000000000000000000000000000000000000000000000); // => 500\n  digits(1000000000000000000000000000000000000000000000000); // => 600\n  digits(-1000000000000000000000000000000000000000000000000); // => 600\n  digits(10000000000000000000000000000000000000000000000000); // => 700\n  digits(-10000000000000000000000000000000000000000000000000); // => 700\n  digits(1000000000000000000000000000000000000000000000000000); // => 800\n  digits(-1000000000000000000000000000000000000000000000000000); // => 800\n  digits(1000000000000000000000000000000000000000000000000000000); // => 900\n  digits(-1000000000000000000000000000000000000000000000000000000); // => 900\n  digits(100000000000000000000000000000000000000000000000000000000); // => 1000\n  digits(-100000000000000000000000000000000000000000000000000000000); // => 1000\n  digits(1000000000000000000000000000000000000000000000000000000000); // => 2000\n  digits(-1000000000000000000000000000000000000000000000000000000000); // => 2000\n  digits(100000000000000000000000000000000000000000000000000000000000); // => 3000\n  digits(-100000000000000000000000000000000000000000000000000000000000); // => 3000\n  digits(100000000000000000000000000000000000000000000000000000000000000); // => 4000\n  digits(-100000000000000000000000000000000000000000000000000000000000000); // => 4000\n  digits(10000000000000000000000000000000000000000000000000000000000000000); // => 5000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000); // => 5000\n  digits(100000000000000000000000000000000000000000000000000000000000000000); // => 6000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000); // => 6000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000); // => 7000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000); // => 7000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000); // => 8000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000); // => 8000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000); // => 9000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000); // => 9000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000000); // => 10000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000000); // => 10000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000); // => 11000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000); // => 11000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 12000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 12000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 13000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 13000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 14000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 14000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 15000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 15000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 16000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 16000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 17000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 17000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 18000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 18000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 19000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 19000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 20000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 20000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 21000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 21000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 22000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 22000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 23000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 23000\n  digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 24000\n  digits(-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 24000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 25000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 25000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 26000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 26000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 27000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 27000\n  digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 28000\n  digits(-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 28000\n  digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); // => 29000\n  digits(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1)? 1 : 0;\n  }\n  return sum;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26 + 26);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAscDescAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26 + 26 + 26);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAscDescAndAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26 + 26 + 26 + 26);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAscDescAndAscDescAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26 + 26 + 26 + 26 + 26);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAndAscDescAndAscDescAndAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode > 96 && asciiCode < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiCode - 32 + 26 + 26 + 26 + 26 + 26 + 26);\n    }\n  }\n  return newString;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  const rows = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  rows.sort((a, b) => a[0] - b[0]);\n  rows.sort((a, b) => b[1] - a[1]);\n  rows.forEach(([row, col]) => {\n    result.push([row, col]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  const cols = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  cols.sort((a, b) => a[1] - b[1]);\n  cols.sort((a, b) => b[0] - a[0]);\n  cols.forEach(([row, col]) => {\n    result.push([row, col]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (0, 0), (3, 5), (3, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  diag.sort((a, b) => a[1] - b[1]);\n  diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach(([row, col]) => {\n    result.push([row, col]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (0, 0), (3, 5), (3, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  diag.sort((a, b) => a[1] - b[1]);\n  diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach(([row, col]) => {\n    result.push([row, col]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (0, 0), (3, 5), (3, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diag = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  diag.sort((a, b) => a[1] - b[1]);\n  diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach(([row, col]) => {\n    result.push([row, col]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (0, 0), (3, 5), (3, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string with each character replaced by the number of times it appears in the original string. Note: * Do not change the given string.\n\n  Examples:\n  * countChar(\"abcabc\") => \"abc4\"\n  * countChar(\"abcabc\", 2) => \"abca4\"\n  * countChar(\"abcabc\", 3) => \"abcabc2\"\n  */\nconst countChar = (string, char) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    charCount[string[i]] = charCount[string[i]]? charCount[string[i]] + 1 : 1;\n  }\n  const charCountString = Object.keys(charCount).join(\"\");\n  return charCountString;\n};\n\n/*\n  Given a string, return a new string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = alphabet.split('').reverse().join('');\n  let newAlphabetLength = newAlphabet.length;\n  let newAlphabetLength = newAlphabetLength / 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabetLength.split('');\n  let newAlphabetLength = newAlphabetLength.length;\n  let newAlphabetLength = newAlphabetLength.map(Number);\n  let newAlphabetLength = newAlphabetLength.reduce((a, b) => a + b, 0);\n  let newAlphabetLength = newAlphabetLength;\n  let newAlphabetLength = newAlphabetLength + 2;\n  let newAlphabetLength = newAlphabetLength.toString(2);\n  let newAlphabetLength = newAlphabet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n      currentIndex = i;\n    }\n    if (numbers[i] === max) {\n      currentMax = Math.max(currentMax, numbers[i]);\n    }\n  }\n  result.push(currentMax);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n      currentIndex = i;\n    }\n    if (numbers[i] === max) {\n      currentMax = Math.max(currentMax, numbers[i]);\n    }\n  }\n  result.push(currentMax);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating minimum elements found up to a certain moment in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n      currentIndex = i;\n    }\n    if (numbers[i] === min) {\n      currentMin = Math.min(currentMin, numbers[i]);\n    }\n  }\n  result.push(currentMin);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n      currentIndex = i;\n    }\n    if (numbers[i] === min) {\n      currentMin = Math.min(currentMin, numbers[i]);\n    }\n  }\n  result.push(currentMin);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating average elements found up to a certain moment in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];\n    }\n    if (numbers[i] === 0) {\n      currentSum = sum / numbers[i];\n    }\n    result.push(currentSum);\n    if (numbers[i] > 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    if (numbers[i] === 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating median elements found up to a certain moment in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];\n    }\n    if (numbers[i] === 0) {\n      currentSum = sum / numbers[i];\n    }\n    result.push(currentSum);\n    if (numbers[i] > 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    if (numbers[i] === 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating mode elements found up to a certain moment in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let currentMode = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > mode) {\n      mode = numbers[i];\n      currentMode = mode;\n      currentIndex = i;\n    }\n    if (numbers[i] === mode) {\n      currentMode = mode;\n    }\n  }\n  result.push(currentMode);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] > mode) {\n      mode = numbers[i];\n      currentMode = mode;\n      currentIndex = i;\n    }\n    if (numbers[i] === mode) {\n      currentMode = mode;\n    }\n  }\n  result.push(currentMode);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating sum elements found up to a certain moment in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 4, 4, 5]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];\n    }\n    if (numbers[i] === 0) {\n      currentSum = sum / numbers[i];\n    }\n    result.push(currentSum);\n    if (numbers[i] > 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    if (numbers[i] === 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating variance elements found up to a certain moment in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];\n    }\n    if (numbers[i] === 0) {\n      currentSum = sum / numbers[i];\n    }\n    result.push(currentSum);\n    if (numbers[i] > 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    if (numbers[i] === 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating standard deviation elements found up to a certain moment in the sequence.\n  >>> rollingStddev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingStddev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];\n    }\n    if (numbers[i] === 0) {\n      currentSum = sum / numbers[i];\n    }\n    result.push(currentSum);\n    if (numbers[i] > 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    if (numbers[i] === 0) {\n      sum = sum - numbers[i] * currentSum;\n    }\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating interquartile elements found up to a certain moment in the sequence.\n  >>> rollingInterquartile([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingInterquartile = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > 0) {\n      currentSum = sum / numbers[i];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  const smallest = lst[0]\n  const secondSmallest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest\n      smallest = lst[i]\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i]\n    }\n  }\n  return secondSmallest\n}\n*/\n\n// Write a function nextLargest () that returns the largest element in the list. Returns zero if there is no such element. nextLargest ([1, 2, 3, 4, 5]) = = 5 nextLargest ([5, 1, 4, 3, 2]) = = 5 nextLargest ([]) = = null nextLargest ([1, 1]) = = null * / const nextLargest = (lst) = > {\n  const largest = lst[0]\n  const secondLargest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      secondLargest = largest\n      largest = lst[i]\n    } else if (lst[i] > secondLargest) {\n      secondLargest = lst[i]\n    }\n  }\n  return secondLargest\n}\n\n// Write a function nextGreatest () that returns the greatest element in the list. Returns zero if there is no such element. nextGreatest ([1, 2, 3, 4, 5]) = = 5 nextGreatest ([5, 1, 4, 3, 2]) = = 5 nextGreatest ([]) = = null nextGreatest ([1, 1]) = = null * / const nextGreatest = (lst) = > {\n  const greatest = lst[0]\n  const secondGreatest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > greatest) {\n      secondGreatest = greatest\n      greatest = lst[i]\n    } else if (lst[i] > secondGreatest) {\n      secondGreatest = lst[i]\n    }\n  }\n  return secondGreatest\n}\n\n// Write a function nextEven () that returns the next even element in the list. Returns zero if there is no such element. nextEven ([1, 2, 3, 4, 5]) = = 4 nextEven ([5, 1, 4, 3, 2]) = = 4 nextEven ([]) = = null nextEven ([1, 1]) = = null * / const nextEven = (lst) = > {\n  const even = lst[0]\n  const secondEven = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      secondEven = even\n      even = lst[i]\n    } else if (lst[i] % 2!== 0) {\n      secondEven = lst[i]\n    }\n  }\n  return secondEven\n}\n\n// Write a function nextOdd () that returns the next odd element in the list. Returns zero if there is no such element. nextOdd ([]) = = null nextOdd ([1]) = = 1 nextOdd ([1]) = = 1 nextOdd ([1]) = = null * / const nextOdd = (lst) = > {\n  const odd = lst[0]\n  const secondOdd = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      secondOdd = odd\n      odd = lst[i]\n    } else if (lst[i] % 2 === 0) {\n      secondOdd = lst[i]\n    }\n  }\n  return secondOdd\n}\n\n// Write a function nextPrime () that returns the next prime element in the list. Returns zero if there is no such element. nextPrime ([2, 3, 5, 7, 11, 13]) = = 7 nextPrime ([2, 3, 5, 7, 11, 13]) = = 7 nextPrime ([2, 3, 5, 7, 11, 13]) = = 7 nextPrime ([2, 3, 5, 7, 11, 13]) = = 7 * / const nextPrime = (lst) = > {\n  const prime = lst[0]\n  const secondPrime = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      secondPrime = prime\n      prime = lst[i]\n    } else if (lst[i] % 2!== 0) {\n      secondPrime = lst[i]\n    }\n  }\n  return secondPrime\n}\n\n// Write a function nextPrimeFactors () that returns the prime factors of the number in the list. Returns zero if there is no such element. nextPrimeFactors ([]) = = [] nextPrimeFactors ([1]) = = [1] nextPrimeFactors ([1]) = = [1] nextPrimeFactors ([1]) = = [1] * / const nextPrimeFactors = (lst) = > {\n  const primeFactors = []\n  const secondPrimeFactors = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      primeFactors.push(lst[i])\n    } else if (lst[i] % 2!== 0) {\n      secondPrimeFactors.push(lst[i])\n    }\n  }\n  return primeFactors\n}\n\n// Write a function nextFactors () that returns the factors of the number in the list. Returns zero if there is no such element. nextFactors ([]) = = [] nextFactors ([1]) = = [1] nextFactors ([1]) = = [1] nextFactors ([1]) = = [1] * / const nextFactors = (lst) = > {\n  const factors = []\n  const secondFactors = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      factors.push(lst[i])\n    } else if (lst[i] % 2!== 0) {\n      secondFactors.push(lst[i])\n    }\n  }\n  return factors\n}\n\n// Write a function nextPower () that returns the next power of 2 that is less than or equal to the number in the list. Returns zero if there is no such element. nextPower ([]) = = null nextPower ([1]) = = 1 nextPower ([1]) = = 1 nextPower ([1]) = = null * / const nextPower = (lst) = > {\n  const power = lst[0]\n  const secondPower = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < power) {\n      secondPower = power\n      power = lst[i]\n    } else if (lst[i] < secondPower) {\n      secondPower = lst[i]\n    }\n  }\n  return secondPower\n}\n\n// Write a function nextPowerOfTwo () that returns the next power of 2 that is less than or equal to the number in the list. Returns zero if there is no such element. nextPowerOfTwo ([]) = = null nextPowerOfTwo ([1]) = = 1 nextPowerOfTwo ([1]) = = 1 nextPowerOfTwo ([1]) = = null * / const nextPowerOfTwo = (lst) = > {\n  const powerOfTwo = lst[0]\n  const secondPowerOfTwo = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < powerOfTwo) {\n      secondPowerOfTwo = powerOfTwo\n      powerOfTwo = lst[i]\n    } else if (lst[i] < secondPowerOfTwo) {\n      secondPowerOfTwo = lst[i]\n    }\n  }\n  return secondPowerOfTwo\n}\n\n// Write a function nextPowerOfTwo () that returns the next power of 2 that is less than or equal to the number in the list. Returns zero if there is no such element. nextPowerOfTwo ([]) = = null nextPowerOfTwo ([1]) = = 1 nextPowerOfTwo ([1]) = = 1 nextPowerOfTwo ([1]) = = null * / const nextPowerOfTwo = (lst) = > {\n  const powerOfTwo = lst[0]\n  const secondPowerOfTwo = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < powerOfTwo) {\n      secondPowerOfTwo = powerOfTwo\n      power", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const sentences = S.split(\".\");\n  const bored = sentences.some(sentence => sentence.includes(\"I.\"));\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n  return false\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return false\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      encodedMessage += alphabet[(index - 2) % 26] + alphabet[index];\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Write a function that decodes a message that has been encoded so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      decodedMessage += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      decodedMessage += alphabet[(index - 2) % 26] + alphabet[index];\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let count = 0;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a message and returns the number of times the letter \"a\" appears in the message. Let's just say letters. Examples:\n  >>> countLetters('test')\n  1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndBoth = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndBothAndBoth = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndBothAndBothAndBoth = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndBothAndBothAndBothAndBoth = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndBothAndBothAndBothAndBothAndBoth = (n) => {\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA * digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA + digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the difference of the unit digits. Suppose the input is always valid.\n  Examples:\n  diff(148, 412) should return 16.\n  diff(19, 28) should return 72.\n  diff(2020, 1851) should return 0.\n  diff(14,-15) should return 20.\n  */\nconst diff = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA - digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product2(148, 412) should return 16.\n  product2(19, 28) should return 72.\n  product2(2020, 1851) should return 0.\n  product2(14,-15) should return 20.\n  */\nconst product2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA * digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum2(148, 412) should return 16.\n  sum2(19, 28) should return 72.\n  sum2(2020, 1851) should return 0.\n  sum2(14,-15) should return 20.\n  */\nconst sum2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA + digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the difference of the unit digits. Suppose the input is always valid.\n  Examples:\n  diff2(148, 412) should return 16.\n  diff2(19, 28) should return 72.\n  diff2(2020, 1851) should return 0.\n  diff2(14,-15) should return 20.\n  */\nconst diff2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA - digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product3(148, 412) should return 16.\n  product3(19, 28) should return 72.\n  product3(2020, 1851) should return 0.\n  product3(14,-15) should return 20.\n  */\nconst product3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA * digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum3(148, 412) should return 16.\n  sum3(19, 28) should return 72.\n  sum3(2020, 1851) should return 0.\n  sum3(14,-15) should return 20.\n  */\nconst sum3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA + digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that takes two integers and returns the difference of the unit digits. Suppose the input is always valid.\n  Examples:\n  diff3(148, 412) should return 16.\n  diff3(19, 28) should return 72.\n  diff3(2020, 1851) should return 0.\n  diff3(14,-15) should return 20.\n  */\nconst diff3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let result = 0;\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const digitA = a.charAt(i) - '0';\n    const digitB = b.charAt(i) - '0';\n    const product = digitA - digitB + carry;\n    carry = product / 10;\n    result = result + product % 10;\n  }\n  if (carry > 0) {\n    result = result + carry;\n  }\n  return result;\n};\n\n/*CComplete the function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      upperCount += 1;\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string, return a new string where all characters have been converted to lowercase.\n  \n  For example:\n  toLower('ABCdEf') returns 'abcdEF'\n  toLower('dBBE') returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  toLower('dBBE', true) returns 'dbe'\n  toLower('dBBE', false) returns 'dbe'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestInteger = (integerValue + decimalValue) / 2\n  return closestInteger === decimalValue? closestInteger : closestInteger.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return 15 and closestIntegerTo(\"-14.5\") should return -15.\n  */\nconst closestIntegerTo = (value) => {\n  const [integerValue, decimalValue] = value.split('.')\n  const integerValue = parseInt(integerValue)\n  const decimalValue = parseFloat(decimalValue)\n  const closestIntegerTo = (integerValue + decimalValue) / 2\n  return closestIntegerTo === decimalValue? closestIntegerTo : closestIntegerTo.toString()\n}\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerTo(\"10\")\n  10\n  >>> closestIntegerTo(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerTo(\"14.5\") should\n  return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
