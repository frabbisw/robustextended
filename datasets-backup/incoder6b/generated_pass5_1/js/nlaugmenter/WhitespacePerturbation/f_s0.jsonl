{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const middleElement = sortedNumbers[Math.floor((sortedNumbers.length - 1) / 2)];\n  const middleElementDistance = middleElement - firstElement;\n  const middleElementDistanceAbs = Math.abs(middleElementDistance);\n  const middleElementDistanceAbsThreshold = Math.abs(middleElementDistance - threshold);\n  const middleElementDistanceThreshold = middleElementDistance - threshold;\n  const isMiddleElementCloseToFirst = middleElementDistanceAbs < middleElementDistanceThreshold;\n  const isMiddleElementCloseToLast = middleElementDistanceAbs < middleElementDistanceThreshold;\n  const isMiddleElementCloseToFirstAndLast = middleElementDistanceAbsThreshold < middleElementDistanceAbs;\n  return isMiddleElementCloseToFirst || isMiddleElementCloseToLast || isMiddleElementCloseToFirstAndLast;\n};\n\n/**\n * Get a random element from given array.\n * If array is empty, return undefined.\n * If array has only one element, return that element.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random element from that array.\n * If array has more than one element, return random ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let opening_paren_groups = [];\n  let opening_paren_groups_len = 0;\n  let opening_paren_groups_string = '';\n  let opening_paren_groups_string_reversed = '';\n  let opening_paren_groups_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed = '';\n  let opening_paren_groups_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_len = 0;\n  let opening_paren_groups_string_reversed_string_reversed_string_reversed_string_reversed_string = '';\n  let opening_paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let palindrome = '';\n let suffix = '';\n let prefix = '';\n let longestPalindrome = 0;\n let longestPalindromeLength = 0;\n let longestPalindromeSuffix = 0;\n let longestPalindromePrefix = 0;\n let longestPalindromeSuffixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromeSuffixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromeSuffixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestPalindromePrefixLength = 0;\n let longestP", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(2 * i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = s.split(/,|\\s+/);\n  return letters.map(letter => letter.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = s.split(/,|\\s+/);\n  return letters.map(letter => letter.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = s.split(/,|\\s+/);\n  return letters.map(letter => letter.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = s.split(/,|\\s+/);\n  return letters.map(letter => letter.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = s.split(/,|\\s+/);\n  return letters.map(letter => letter.trim());\n};\n\n/*\n  You will be given a string of numberssepar ated by commas or spaces. Your task is\n  to split the string into numbersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  numbersString(\"1, 5, 10, 15, 20, 25\") == [\"1\", \"5\", \"10\", \"15\", \"20\", \"25\"]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s+/);\n  return numbers.map(number => parseInt(number));\n};\n\n/*\n  You will be given a string of letterssepar ated by commas or spaces. Your task is\n  to split the string into lettersand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  lettersString(\"a, b, c, d, e, f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  lettersString(\"a, b c, d e, f\") == [\"a\", \"b c\", \"d e\", \"f\"]\n  */\nconst lettersString = (s) => {\n  const letters = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary.length === 1? `0b${binary}` : `0b${binary}1`;\n};\n\n/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits2 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits3 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits4 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits5 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits6 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits7 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits8 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits9 = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit and odd digit.\n\n  Note:Retur ned lis ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let finalArr = reversedArr.map((num) => {\n    if (num < 10) return `0${num}`;\n    return num;\n  });\n  return finalArr;\n};\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let finalArr = reversedArr.map((num) => {\n    if (num < 10) return `0${num}`;\n    return num;\n  });\n  return finalArr;\n};\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let finalArr = reversedArr.map((num) => {\n    if (num < 10) return `0${num}`;\n    return num;\n  });\n  return finalArr;\n};\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let finalArr = reversedArr.map((num) => {\n    if (num < 10) return `0${num}`;\n    return num;\n  });\n  return finalArr;\n};\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let finalArr = reversedArr.map((num) => {\n    if (num < 10) return `0${num}`;\n    return num;\n  });\n  return finalArr;\n};\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...f(n - i));\n    }\n  }\n  return result;\n};\n\nconsole.log(`f(${n}) = ${f(n)}`);</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 tags=recursion,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=recursion,javascript |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,javascript |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    const isEven = str === reverseStr;\n    const isOdd = str === reverseStr.split(\"\").reverse().join(\"\");\n    arr.push(isEven, isOdd);\n  }\n  return arr;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits <0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =1.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =2.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =3.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 3) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =4.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 4) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =5.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 5) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =6.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 6) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =7.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 7) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =8.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 8) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits =9.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di g", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let sortedArr = arr.slice();\n  let sortedArrLength = sortedArr.length;\n  let sortedArrIndex = 0;\n  let sortedArrIndex2 = 0;\n  let sortedArrIndex3 = 0;\n  let sortedArrIndex4 = 0;\n  let sortedArrIndex5 = 0;\n  let sortedArrIndex6 = 0;\n  let sortedArrIndex7 = 0;\n  let sortedArrIndex8 = 0;\n  let sortedArrIndex9 = 0;\n  let sortedArrIndex10 = 0;\n  let sortedArrIndex11 = 0;\n  let sortedArrIndex12 = 0;\n  let sortedArrIndex13 = 0;\n  let sortedArrIndex14 = 0;\n  let sortedArrIndex15 = 0;\n  let sortedArrIndex16 = 0;\n  let sortedArrIndex17 = 0;\n  let sortedArrIndex18 = 0;\n  let sortedArrIndex19 = 0;\n  let sortedArrIndex20 = 0;\n  let sortedArrIndex21 = 0;\n  let sortedArrIndex22 = 0;\n  let sortedArrIndex23 = 0;\n  let sortedArrIndex24 = 0;\n  let sortedArrIndex25 = 0;\n  let sortedArrIndex26 = 0;\n  let sortedArrIndex27 = 0;\n  let sortedArrIndex28 = 0;\n  let sortedArrIndex29 = 0;\n  let sortedArrIndex30 = 0;\n  let sortedArrIndex31 = 0;\n  let sortedArrIndex32 = 0;\n  let sortedArrIndex33 = 0;\n  let sortedArrIndex34 = 0;\n  let sortedArrIndex35 = 0;\n  let sortedArrIndex36 = 0;\n  let sortedArrIndex37 = 0;\n  let sortedArrIndex38 = 0;\n  let sortedArrIndex39 = 0;\n  let sortedArrIndex40 = 0;\n  let sortedArrIndex41 = 0;\n  let sortedArrIndex42 = 0;\n  let sortedArrIndex43 = 0;\n  let sortedArrIndex44 = 0;\n  let sortedArrIndex45 = 0;\n  let sortedArrIndex46 = 0;\n  let sortedArrIndex47 = 0;\n  let sortedArrIndex48 = 0;\n  let sortedArrIndex49 = 0;\n  let sortedArrIndex50 = 0;\n  let sortedArrIndex51 = 0;\n  let sortedArrIndex52 = 0;\n  let sortedArrIndex53 = 0;\n  let sortedArrIndex54 = 0;\n  let sortedArrIndex55 = 0;\n  let sortedArrIndex56 = 0;\n  let sortedArrIndex57 = 0;\n  let sortedArrIndex58 = 0;\n  let sortedArrIndex59 = 0;\n  let sortedArrIndex60 = 0;\n  let sortedArrIndex61 = 0;\n  let sortedArrIndex62 = 0;\n  let sortedArrIndex63 = 0;\n  let sortedArrIndex64 = 0;\n  let sortedArrIndex65 = 0;\n  let sortedArrIndex66 = 0;\n  let sortedArrIndex67 = 0;\n  let sortedArrIndex68 = 0;\n  let sortedArrIndex69 = 0;\n  let sortedArrIndex70 = 0;\n  let sortedArrIndex71 = 0;\n  let sortedArrIndex72 = 0;\n  let sortedArrIndex73 = 0;\n  let sortedArrIndex74 = 0;\n  let sortedArrIndex75 = 0;\n  let sortedArrIndex76 = 0;\n  let sortedArrIndex77 = 0;\n  let sortedArrIndex78 = 0;\n  let sortedArrIndex79 = 0;\n  let sortedArrIndex80 = 0;\n  let sortedArrIndex81 = 0;\n  let sortedArrIndex82 = 0;\n  let sortedArrIndex83 = 0;\n  let sortedArrIndex84 = 0;\n  let sortedArrIndex85 = 0;\n  let sortedArrIndex86 = 0;\n  let sortedArrIndex87 = 0;\n  let sortedArrIndex88 = 0;\n  let sortedArrIndex89 = 0;\n  let sortedArrIndex90 = 0;\n  let sortedArrIndex91 = 0;\n  let sortedArrIndex92 = 0;\n  let sortedArrIndex93 = 0;\n  let sortedArrIndex94 = 0;\n  let sortedArrIndex95 = 0;\n  let sortedArrIndex96 = 0;\n  let sortedArrIndex97 = 0;\n  let sortedArrIndex98 = 0;\n  let sortedArrIndex99 = 0;\n  let sortedArrIndex100 = 0;\n  let sortedArrIndex101 = 0;\n  let sortedArrIndex102 = 0;\n  let sortedArrIndex103 = 0;\n  let sortedArrIndex104 = 0;\n  let sortedArrIndex105 = 0;\n  let sortedArrIndex106 = 0;\n  let sortedArrIndex107 = 0;\n  let sortedArrIndex108 = 0;\n  let sortedArrIndex109 = 0;\n  let sortedArrIndex110 = 0;\n  let sortedArrIndex111 = 0;\n  let sortedArrIndex112 = 0;\n  let sortedArrIndex113 = 0;\n  let sortedArrIndex114 = 0;\n  let sortedArrIndex115 = 0;\n  let sortedArrIndex116 = 0;\n  let sortedArrIndex117 = 0;\n  let sortedArrIndex118 = 0;\n  let sortedArrIndex119 = 0;\n  let sortedArrIndex120 = 0;\n  let sortedArrIndex121 = 0;\n  let sortedArrIndex122 = 0;\n  let sortedArrIndex123 = 0;\n  let sortedArrIndex124 = 0;\n  let sortedArrIndex125 = 0;\n  let sortedArrIndex126 = 0;\n  let sortedArrIndex127 = 0;\n  let sortedArrIndex128 = 0;\n  let sortedArrIndex129 = 0;\n  let sortedArrIndex130 = 0;\n  let sortedArrIndex131 = 0;\n  let sortedArrIndex132 = 0;\n  let sortedArrIndex133 = 0;\n  let sortedArrIndex134 = 0;\n  let sortedArrIndex135 = 0;\n  let sortedArrIndex136 = 0;\n  let sortedArrIndex137 = 0;\n  let sortedArrIndex138 = 0;\n  let sortedArrIndex139 = 0;\n  let sortedArrIndex140 = 0;\n  let sortedArrIndex141 = 0;\n  let sortedArrIndex142 = 0;\n  let sortedArrIndex143 = 0;\n  let sortedArrIndex144 = 0;\n  let sortedArrIndex145 = 0;\n  let sortedArrIndex146 = 0;\n  let sortedArrIndex147 = 0;\n  let sortedArrIndex148 = 0;\n  let sortedArrIndex149 = 0;\n  let sortedArrIndex150 = 0;\n  let sortedArrIndex151 = 0;\n  let sortedArrIndex152 = 0;\n  let sortedArrIndex153 = 0;\n  let sortedArrIndex154 = 0;\n  let sortedArrIndex155 = 0;\n  let sortedArrIndex156 = 0;\n  let sortedArrIndex157 = 0;\n  let sortedArrIndex158 = 0;\n  let sortedArrIndex159 = 0;\n  let sortedArrIndex160 = 0;\n  let sortedArrIndex161 = 0;\n  let sortedArrIndex162 = 0;\n  let sortedArrIndex163 = 0;\n  let sortedArrIndex164 = 0;\n  let sortedArrIndex165 = 0;\n  let sortedArrIndex166 = 0;\n  let sortedArrIndex167 = 0;\n  let sortedArrIndex168 = 0;\n  let sortedArrIndex169 = 0;\n  let sortedArrIndex170 = 0;\n  let sortedArrIndex171 = 0;\n  let sortedArrIndex172 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor2('010', '110')\n  '100'\n  */\nconst stringXor3 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor3('010', '110')\n  '100'\n  */\nconst stringXor4 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor4('010', '110')\n  '100'\n  */\nconst stringXor5 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor5('010', '110')\n  '100'\n  */\nconst stringXor6 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor6('010', '110')\n  '100'\n  */\nconst stringXor7 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor7('010', '110')\n  '100'\n  */\nconst stringXor8 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor8('010', '110')\n  '100'\n  */\nconst stringXor9 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor9('010', '110')\n  '100'\n  */\nconst stringXor10 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor10('010', '110')\n  '100'\n  */\nconst stringXor11 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor11('010', '110')\n  '100'\n  */\nconst stringXor12 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor12('010', '110')\n  '100'\n  */\nconst stringXor13 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor13('010', '110')\n  '100'\n  */\nconst stringXor14 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor14('010', '110')\n  '100'\n  */\nconst stringXor15 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor15('010', '110')\n  '100'\n  */\nconst stringXor16 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor16('010', '110')\n  '100'\n  */\nconst stringXor17 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor17('010', '110')\n  '100'\n  */\nconst stringXor18 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor18('010', '110')\n  '100'\n  */\nconst stringXor19 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* Given two strings s and t, perform XOR on these two strings and return the\n  resultant string.\n  >>> stringXor19('010', '110')\n  '100'\n  */\nconst stringXor20 = (s, t) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    res.push(s[i] ^ t[i]);\n  }\n  return res.join('');\n};\n\n/* ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i] > odd[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\n/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i] > odd[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\n/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i] > odd[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\n/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i] > odd[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\n/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i] > odd[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\n/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space s epara ted lowercase letters, return a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = ''\n  let check = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      check = false\n    }\n  }\n  if (check) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, check]\n}\n\n/*Task\n  We are given two strings s and  c, y ou have to delete all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of odd elements ${oddCount} of the ${lst.length} input.`,\n    `the number of odd elements ${evenCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n    `the number of even elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n    `the number of even elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n    `the number of even elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n    `the number of even elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n    `the number of even elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of evendelements in the\n  string i o ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  const minSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  const maxSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -36\n  */\nconst maxSubArrayProduct = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  const maxProduct = nums[0];\n  for (let i = 1; i < n; i++) {\n    maxProduct = Math.max(maxProduct, nums[i] * nums[i]);\n  }\n  return maxProduct;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -36\n  */\nconst minSubArrayProduct = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  const minProduct = nums[0];\n  for (let i = 1; i < n; i++) {\n    minProduct = Math.min(minProduct, nums[i] * nums[i]);\n  }\n  return minProduct;\n};\n\n/*\n  Given an array of integers nums, fin d the  sum of all elements in the array.\n  Example\n  sumOfArray([1, 2, 3]) == 6\n  sumOfArray([-1, -2, -3]) == 6\n  */\nconst sumOfArray = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, fin d the  product of all elements in the array.\n  Example\n  productOfArray([1, 2, 3]) == 6\n  productOfArray([-1, -2, -3]) == -1\n  */\nconst productOfArray = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, fin d the  sum of all elements in the array up to and including n.\n  Example\n  sumOfArrayUpToN([1, 2, 3], 2) == 6\n  sumOfArrayUpToN([-1, -2, -3], 2) == 6\n  */\nconst sumOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += nums[i];\n    if (i === n) break;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, fin d the  product of all elements in the array up to and including n.\n  Example\n  productOfArrayUpToN([1, 2, 3], 2) == 6\n  productOfArrayUpToN([-1, -2, -3], 2) == -1\n  */\nconst productOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= nums[i];\n    if (i === n) break;\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, fin d the  sum of all elements in the array up to and including n.\n  Example\n  sumOfArrayUpToN([1, 2, 3], 2) == 6\n  sumOfArrayUpToN([-1, -2, -3], 2) == 6\n  */\nconst sumOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += nums[i];\n    if (i === n) break;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, fin d the  product of all elements in the array up to and including n.\n  Example\n  productOfArrayUpToN([1, 2, 3], 2) == 6\n  productOfArrayUpToN([-1, -2, -3], 2) == -1\n  */\nconst productOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= nums[i];\n    if (i === n) break;\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, fin d the  sum of all elements in the array up to and including n.\n  Example\n  sumOfArrayUpToN([1, 2, 3], 2) == 6\n  sumOfArrayUpToN([-1, -2, -3], 2) == 6\n  */\nconst sumOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += nums[i];\n    if (i === n) break;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, fin d the  product of all elements in the array up to and including n.\n  Example\n  productOfArrayUpToN([1, 2, 3], 2) == 6\n  productOfArrayUpToN([-1, -2, -3], 2) == -1\n  */\nconst productOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= nums[i];\n    if (i === n) break;\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, fin d the  sum of all elements in the array up to and including n.\n  Example\n  sumOfArrayUpToN([1, 2, 3], 2) == 6\n  sumOfArrayUpToN([-1, -2, -3], 2) == 6\n  */\nconst sumOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += nums[i];\n    if (i === n) break;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, fin d the  product of all elements in the array up to and including n.\n  Example\n  productOfArrayUpToN([1, 2, 3], 2) == 6\n  productOfArrayUpToN([-1, -2, -3], 2) == -1\n  */\nconst productOfArrayUpToN = (nums, n) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= nums[i];\n    if (i === n) break;\n  }\n  return product;\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells2 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells3 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells4 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells5 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells6 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells7 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells8 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells9 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells10 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells11 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells12 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells13 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells14 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells15 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells16 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells17 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells18 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells19 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells20 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil((bucket_capacity - grid[i][j]) / grid[i].length);\n      }\n    }\n  }\n  return count;\n};\n\nconst fillWells21 = (grid, bucket_capacity) => {\n  let count = 0;\n  for (let i = 0; i < ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let sortedArr = [];\n  let temp = 0;\n  for (let i = 0; i < len; i++) {\n    temp = arr[i];\n    sortedArr[i] = temp;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] > arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let i = 0;\n  while (i < s.length && s.length!== 0) {\n    if (s.charAt(i) === s.charAt(i + n)) {\n      res.push(s.substr(i, n));\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightFromLeft = vowelsCount - 3;\n  let vowelsCountFromLeftFromRight = vowelsCount - 4;\n  let vowelsCountFromLeftFromRightFromLeft = vowelsCount - 5;\n  let vowelsCountFromRightFromLeftFromRight = vowelsCount - 6;\n  let vowelsCountFromLeftFromRightFromLeftFromRight = vowelsCount - 7;\n  let vowelsCountFromRightFromLeftFromLeftFromRight = vowelsCount - 8;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeft = vowelsCount - 9;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRight = vowelsCount - 10;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft = vowelsCount - 11;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRight = vowelsCount - 12;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft = vowelsCount - 13;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRight = vowelsCount - 14;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft = vowelsCount - 15;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRight = vowelsCount - 16;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 17;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 18;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 19;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 20;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 21;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 22;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 23;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 24;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 25;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 26;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 27;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 28;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 29;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 30;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 31;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 32;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 33;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 34;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 35;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 36;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 37;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 38;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 39;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 40;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 41;\n  let vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 42;\n  let vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFrom = vowelsCount - 43;\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a string of parentheses and a number N. Your task is to find the\n  number of ways to make N parentheses using the given parentheses.\n  Examples:\n  countParentheses('(())', 2) == 'Yes'\n  countParentheses('(())', 3) == 'No'\n  countParentheses('(())', 4) == 'No'\n  countParentheses('(())', 5) == 'Yes'\n  countParentheses('(())', 6) == 'Yes'\n  countParentheses('(())', 7) == 'No'\n  countParentheses('(())', 8) == 'No'\n  countParentheses('(())', 9) == 'No'\n  countParentheses('(())', 10) == 'Yes'\n  countParentheses('(())', 11) == 'Yes'\n  countParentheses('(())', 12) == 'No'\n  countParentheses('(())', 13) == 'No'\n  countParentheses('(())', 14) == 'No'\n  countParentheses('(())', 15) == 'No'\n  countParentheses('(())', 16) == 'No'\n  countParentheses('(())', 17) == 'No'\n  countParentheses('(())', 18) == 'No'\n  countParentheses('(())', 19) == 'No'\n  countParentheses('(())', 20) == 'No'\n  countParentheses('(())', 21) == 'No'\n  countParentheses('(())', 22) == 'No'\n  countParentheses('(())', 23) == 'No'\n  countParentheses('(())', 24) == 'No'\n  countParentheses('(())', 25) == 'No'\n  countParentheses('(())', 26) == 'No'\n  countParentheses('(())', 27) == 'No'\n  countParentheses('(())', 28) == 'No'\n  countParentheses('(())', 29) == 'No'\n  countParentheses('(())', 30) == 'No'\n  countParentheses('(())', 31) == 'No'\n  countParentheses('(())', 32) == 'No'\n  countParentheses('(())', 33) == 'No'\n  countParentheses('(())', 34) == 'No'\n  countParentheses('(())', 35) == 'No'\n  countParentheses('(())', 36) == 'No'\n  countParentheses('(())', 37) == 'No'\n  countParentheses('(())', 38) == 'No'\n  countParentheses('(())', 39) == 'No'\n  countParentheses('(())', 40) == 'No'\n  countParentheses('(())', 41) == 'No'\n  countParentheses('(())', 42) == 'No'\n  countParentheses('(())', 43) == 'No'\n  countParentheses('(())', 44) == 'No'\n  countParentheses('(())', 45) == 'No'\n  countParentheses('(())', 46) == 'No'\n  countParentheses('(())', 47) == 'No'\n  countParentheses('(())', 48) == 'No'\n  countParentheses('(())', 49) == 'No'\n  countParentheses('(())', 50) == 'No'\n  countParentheses('(())', 51) == 'No'\n  countParentheses('(())', 52) == 'No'\n  countParentheses('(())', 53) == 'No'\n  countParentheses('(())', 54) == 'No'\n  countParentheses('(())', 55) == 'No'\n  countParentheses('(())', 56) == 'No'\n  countParentheses('(())', 57) == 'No'\n  countParentheses('(())', 58) == 'No'\n  countParentheses('(())', 59) == 'No'\n  countParentheses('(())', 60) == 'No'\n  countParentheses('(())', 61) == 'No'\n  countParentheses('(())', 62) == 'No'\n  countParentheses('(())', 63) == 'No'\n  countParentheses('(())', 64) == 'No'\n  countParentheses('(())', 65) == 'No'\n  countParentheses('(())', 66) == 'No'\n  countParentheses('(())', 67) == 'No'\n  countParentheses('(())', 68) == 'No'\n  countParentheses('(())', 69) == 'No'\n  countParentheses('(())', 70) == 'No'\n  countParentheses('(())', 71) == 'No'\n  countParentheses('(())', 72) == 'No'\n  countParentheses('(())', 73) == 'No'\n  countParentheses('(())', 74) == 'No'\n  countParentheses('(())', 75) == 'No'\n  countParentheses('(())', 76) == 'No'\n  countParentheses('(())', 77) == 'No'\n  countParentheses('(())', 78) == 'No'\n  countParentheses('(())', 79) == 'No'\n  countParentheses('(())', 80) == 'No'\n  countParentheses('(())', 81) == 'No'\n  countParentheses('(())', 82) == 'No'\n  countParentheses('(())', 83) == 'No'\n  countParentheses('(())', 84) == 'No'\n  countParentheses('(())', 85) == 'No'\n  countParentheses('(())', 86) == 'No'\n  countParentheses('(())', 87) == 'No'\n  countParentheses('(())', 88) == 'No'\n  countParentheses('(())', 89) == 'No'\n  countParentheses('(())', 90) == 'No'\n  countParentheses('(())', 91) == 'No'\n  countParentheses('(())', 92) == 'No", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings[0].length > strings[1].length? strings[0] : strings[1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> contains('a', 'abc')\n  'a'\n  >>> contains('a', 'ab')\n  null\n  */\nconst contains = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[index]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[0]\n}\n\n/* Return the last string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> last('a', 'abc')\n  'c'\n  >>> last('a', 'ab')\n  null\n  */\nconst last = (string, strings) => {\n  const index = strings.lastIndexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the longest string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> longest('a', 'abc')\n  'a'\n  >>> longest('a', 'ab')\n  null\n  */\nconst longest = (string, strings) => {\n  const index = strings.indexOf(string, 0)\n  return index === -1? null : strings[strings.length - 1]\n}\n\n/* Return the first string in the list that contains the given string. Return null if the given string is not in the list.\n  >>> first('a', 'abc')\n  'a'\n  >>> first('a', 'ab')\n  null\n  */\nconst first = (string, strings) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n    max = Math.max(max, arr[i]);\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return the k largest \n  elements in arr in decreasing order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [1, 6]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [3]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n    max = Math.max(max, arr[i]);\n  }\n  return result;\n};\n\nexport { kLargest, kLargest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted \n  list of length k with the minimum number in arr in ascending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [1, 3, 6, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [1, 2, 3]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(min);\n    min = Math.min(min, arr[i]);\n  }\n  return result;\n};\n\nexport { minimum, minimum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted \n  list of length k with the maximum number in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [6, 4, 2, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [3, 2, 1]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximumDesc = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n    max = Math.max(max, arr[i]);\n  }\n  return result;\n};\n\nexport { maximumDesc, maximumDesc2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return the k smallest \n  elements in arr in ascending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [1, 3, 6, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [1, 2, 3]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(min);\n    min = Math.min(min, arr[i]);\n  }\n  return result;\n};\n\nexport { kSmallest, kSmallest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted \n  list of length k with the minimum number in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [6, 4, 2, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [3, 2, 1]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimumDesc = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(min);\n    min = Math.min(min, arr[i]);\n  }\n  return result;\n};\n\nexport { minimumDesc, minimumDesc2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted \n  list of length k with the maximum number in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [6, 4, 2, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [3, 2, 1]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximumDesc2 = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n    max = Math.max(max, arr[i]);\n  }\n  return result;\n};\n\nexport { maximumDesc2, maximumDesc3 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted \n  list of length k with the minimum number in arr in ascending order.\n\n  Example 1:\n\n      Input: arr = [10, 5, 1, 3, 6, 4, 2], k = 2\n      Output: [1, 3, 6, 10]\n\n  Example 2:\n\n      Input: arr = [1, 2], k = 1\n      Output: [1, 2]\n\n  Example 3:\n\n      Input: arr = [3, 2, 1], k = 1\n      Output: [1, 2, 3]\n\n  Note:\n      1. You may use at most k operations.\n      2. Elements in the array will be in the range of [-10000, 10000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sumOddEven(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOddEven([5, 8, 7, 1]));\nconsole.log(sumOddEven([3, 3, 3, 3, 3]));\nconsole.log(sumOddEven([30, 13, 24, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most three digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most four digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most five digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most six digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most seven digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most eight digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most nine digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most ten digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most eleven digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most twelve digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most thirteen digit s fro m the f i rst k e ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = i * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a  sort ed list that has the even numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2!== 0) {\n      i = i / 2;\n    } else {\n      i = i * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a  sort ed list that has the even numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2!== 0) {\n      i = i / 2;\n    } else {\n      i = i * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a  sort ed list that has the even numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2!== 0) {\n      i = i / 2;\n    } else {\n      i = i * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a  sort ed list that has the even numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2!== 0) {\n      i = i / 2;\n    } else {\n      i = i * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a  sort ed list that has the even numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArray2 = date.split('/');\n  const dateArray3 = date.split(' ');\n  const dateArray4 = date.split(' ');\n  const dateArray5 = date.split(' ');\n  const dateArray6 = date.split(' ');\n  const dateArray7 = date.split(' ');\n  const dateArray8 = date.split(' ');\n  const dateArray9 = date.split(' ');\n  const dateArray10 = date.split(' ');\n  const dateArray11 = date.split(' ');\n  const dateArray12 = date.split(' ');\n  const dateArray13 = date.split(' ');\n  const dateArray14 = date.split(' ');\n  const dateArray15 = date.split(' ');\n  const dateArray16 = date.split(' ');\n  const dateArray17 = date.split(' ');\n  const dateArray18 = date.split(' ');\n  const dateArray19 = date.split(' ');\n  const dateArray20 = date.split(' ');\n  const dateArray21 = date.split(' ');\n  const dateArray22 = date.split(' ');\n  const dateArray23 = date.split(' ');\n  const dateArray24 = date.split(' ');\n  const dateArray25 = date.split(' ');\n  const dateArray26 = date.split(' ');\n  const dateArray27 = date.split(' ');\n  const dateArray28 = date.split(' ');\n  const dateArray29 = date.split(' ');\n  const dateArray30 = date.split(' ');\n  const dateArray31 = date.split(' ');\n  const dateArray32 = date.split(' ');\n  const dateArray33 = date.split(' ');\n  const dateArray34 = date.split(' ');\n  const dateArray35 = date.split(' ');\n  const dateArray36 = date.split(' ');\n  const dateArray37 = date.split(' ');\n  const dateArray38 = date.split(' ');\n  const dateArray39 = date.split(' ');\n  const dateArray40 = date.split(' ');\n  const dateArray41 = date.split(' ');\n  const dateArray42 = date.split(' ');\n  const dateArray43 = date.split(' ');\n  const dateArray44 = date.split(' ');\n  const dateArray45 = date.split(' ');\n  const dateArray46 = date.split(' ');\n  const dateArray47 = date.split(' ');\n  const dateArray48 = date.split(' ');\n  const dateArray49 = date.split(' ');\n  const dateArray50 = date.split(' ');\n  const dateArray51 = date.split(' ');\n  const dateArray52 = date.split(' ');\n  const dateArray53 = date.split(' ');\n  const dateArray54 = date.split(' ');\n  const dateArray55 = date.split(' ');\n  const dateArray56 = date.split(' ');\n  const dateArray57 = date.split(' ');\n  const dateArray58 = date.split(' ');\n  const dateArray59 = date.split(' ');\n  const dateArray60 = date.split(' ');\n  const dateArray61 = date.split(' ');\n  const dateArray62 = date.split(' ');\n  const dateArray63 = date.split(' ');\n  const dateArray64 = date.split(' ');\n  const dateArray65 = date.split(' ');\n  const dateArray66 = date.split(' ');\n  const dateArray67 = date.split(' ');\n  const dateArray68 = date.split(' ');\n  const dateArray69 = date.split(' ');\n  const dateArray70 = date.split(' ');\n  const dateArray71 = date.split(' ');\n  const dateArray72 = date.split(' ');\n  const dateArray73 = date.split(' ');\n  const dateArray74 = date.split(' ');\n  const dateArray75 = date.split(' ');\n  const dateArray76 = date.split(' ');\n  const dateArray77 = date.split(' ');\n  const dateArray78 = date.split(' ');\n  const dateArray79 = date.split(' ');\n  const dateArray80 = date.split(' ');\n  const dateArray81 = date.split(' ');\n  const dateArray82 = date.split(' ');\n  const dateArray83 = date.split(' ');\n  const dateArray84 = date.split(' ');\n  const dateArray85 = date.split(' ');\n  const dateArray86 = date.split(' ');\n  const dateArray87 = date.split(' ');\n  const dateArray88 = date.split(' ');\n  const dateArray89 = date.split(' ');\n  const dateArray90 = date.split(' ');\n  const dateArray91 = date.split(' ');\n  const dateArray92 = date.split(' ');\n  const dateArray93 = date.split(' ');\n  const dateArray94 = date.split(' ');\n  const dateArray95 = date.split(' ');\n  const dateArray96 = date.split(' ');\n  const dateArray97 = date.split(' ');\n  const dateArray98 = date.split(' ');\n  const dateArray99 = date.split(' ');\n  const dateArray100 = date.split(' ');\n  const dateArray101 = date.split(' ');\n  const dateArray102 = date.split(' ');\n  const dateArray103 = date.split(' ');\n  const dateArray104 = date.split(' ');\n  const dateArray105 = date.split(' ');\n  const dateArray106 = date.split(' ');\n  const dateArray107 = date.split(' ');\n  const dateArray108 = date.split(' ');\n  const dateArray109 = date.split(' ');\n  const dateArray110 = date.split(' ');\n  const dateArray111 = date.split(' ');\n  const dateArray112 = date.split(' ');\n  const dateArray113 = date.split(' ');\n  const dateArray114 = date.split(' ');\n  const dateArray115 = date.split(' ');\n  const dateArray116 = date.split(' ');\n  const dateArray117 = date.split(' ');\n  const dateArray118 = date.split(' ');\n  const dateArray119 = date.split(' ');\n  const dateArray120 = date.split(' ');\n  const dateArray121 = date.split(' ');\n  const dateArray122 = date.split(' ');\n  const dateArray123 = date.split(' ');\n  const dateArray124 = date.split(' ');\n  const dateArray125 = date.split(' ');\n  const dateArray126 = date.split(' ');\n  const dateArray127 = date.split(' ');\n  const dateArray128 = date.split(' ');\n  const dateArray129 = date.split(' ');\n  const dateArray130 = date.split(' ');\n  const dateArray13", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in descending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    return `${start1} and ${end2}`;\n  }\n  return `${start2} and ${end1}`;\n};\n\n/*You are given two intervals,\n  whereeachinterval isa pair of integers. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const gridArray = grid.map(row => row.map(val => val + 1));\n  const visited = new Array(N * N).fill(false);\n  let minPath = [];\n  for (let i = 0; i < N * N; i++) {\n    if (visited[i]) {\n      continue;\n    }\n    let minVal = Number.MAX_SAFE_INTEGER;\n    let minIndex = -1;\n    for (let j = 0; j < N; j++) {\n      if (gridArray[i][j] < minVal) {\n        minVal = gridArray[i][j];\n        minIndex = j;\n      }\n    }\n    if (minVal === gridArray[minIndex][minIndex]) {\n      minPath.push(minIndex);\n    }\n    visited[minIndex] = true;\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const gridArray = grid.map(row => row.map(val => val + 1));\n  const visited = new Array(N * N).fill(false);\n  let minPath = [];\n  for (let i = 0; i < N * N; i++) {\n    if (visited[i]) {\n      continue;\n    }\n    let minVal = Number.MAX_SAFE_INTEGER;\n    let minIndex = -1;\n    for (let j = 0; j < N; j++) {\n      if (gridArray[i][j] < minVal) {\n        minVal = gridArray[i][j];\n        minIndex = j;\n      }\n    }\n    if (minVal === gridArray[minIndex][minIndex]) {\n      minPath.push(minIndex);\n    }\n    visited[minIndex] = true;\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath3 = (grid, k) => {\n  const N = grid.length;\n  const gridArray = grid.map(row => row.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n/**\n * Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while (b!== 0) {\n    const ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 || j === 0 || i === n - 1 || j === n - 1) {\n        arr[i][j] = 1;\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  You are given an n x n matrix filled with zeros and you have to fill the matrix \n  with 1's in such a way that no two adjacent ones horizontally or vertically \n  meet. \n  Example:\n  Input:\n  [[0,0,0,0],\n  [0,0,0,0],\n  [0,0,0,0]]\n  Output: \n  [[1,1,1,1],\n  [1,1,1,1],\n  [1,1,1,1]]\n  Explanation: \n  No two adjacent ones horizontally or vertically meet.\n*/\nconst matrix = (n) => {\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr[i] = [];\n    for (let j = 0; j < n; j++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum % 2!== 0;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsProduct = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsProduct = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsProductSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsProductSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsProductProduct = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsProductProduct = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsProductProductSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsProductProductSum = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theeven digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 15\n  */\nconst evenDigitsProductProductProduct = (n) => {\n  let sum = 0;\n  let digit;\n  while (n) {\n    digit = n % 10;\n    sum += digit * digit;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst oddDigitsProductProductProduct = (n) => {\n  let sum = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  let n = str.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yo u nee d to returnthe product of numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/);\n  const isLastCharNotAlpha = lastChar.match(/[^a-z]/);\n  return isLastCharAlpha &&!isLastCharNotAlpha;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a vowel and is not part of a consonant.\n  Examples:\n  checkIfLastCharIsAVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowel(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowel(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowel = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharVowel = lastChar.match(/[aeiou]/);\n  const isLastCharNotVowel = lastChar.match(/[^aeiou]/);\n  return isLastCharVowel &&!isLastCharNotVowel;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConson = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharConsonant = lastChar.match(/[bcdfghjklmnpqrstvwxyz]/);\n  const isLastCharNotConsonant = lastChar.match(/[^bcdfghjklmnpqrstvwxyz]/);\n  return isLastCharConsonant &&!isLastCharNotConsonant;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConson = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharConsonant = lastChar.match(/[bcdfghjklmnpqrstvwxyz]/);\n  const isLastCharNotConsonant = lastChar.match(/[^bcdfghjklmnpqrstvwxyz]/);\n  return isLastCharConsonant &&!isLastCharNotConsonant;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConson = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharConsonant = lastChar.match(/[bcdfghjklmnpqrstvwxyz]/);\n  const isLastCharNotConsonant = lastChar.match(/[^bcdfghjklmnpqrstvwxyz]/);\n  return isLastCharConsonant &&!isLastCharNotConsonant;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConson = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharConsonant = lastChar.match(/[bcdfghjklmnpqrstvwxyz]/);\n  const isLastCharNotConsonant = lastChar.match(/[^bcdfghjklmnpqrstvwxyz]/);\n  return isLastCharConsonant &&!isLastCharNotConsonant;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConson = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharConsonant = lastChar.match(/[bcdfghjklmnpqrstvwxyz]/);\n  const isLastCharNotConsonant = lastChar.match(/[^bcdfghjklmnpqrstvwxyz]/);\n  return isLastCharConsonant &&!isLastCharNotConsonant;\n};\n\n/* Create a function that returns trueif the last character\n  of a given string is a consonant and is not part of a vowel.\n  Examples:\n  checkIfLastCharIsAConson(\"apple pie\") ➞ false\n  checkIfLastCharIsAConson(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConson(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConson(\"\") ➞ false\n  */\nconst checkIfLastCharIsAC", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let count = 0;\n  let flag = false;\n  while (i < l) {\n    flag = false;\n    j = i;\n    while (j < l) {\n      k = j;\n      while (k < l) {\n        if (arr[j] < arr[k]) {\n          temp = arr[k];\n          arr[k] = arr[j];\n          arr[j] = temp;\n          k = k + 1;\n        } else {\n          k = k + 1;\n        }\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  count = 0;\n  while (i < l) {\n    if (arr[i]!== arr[0]) {\n      count = count + 1;\n    }\n    i = i + 1;\n  }\n  return count;\n};\n\n/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length;\n  let i = 0;\n  let j = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tup le (a, b), where'a' is\n  the smallest of positive integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative integers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive real numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative real numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative integers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive real numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative real numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative integers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive real numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.reduce((acc, val) => acc + val, 0);\n  return sumEven === 4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative real numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.reduce((acc, val) => acc + val, 0);\n  return sumOdd === -4;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n This function will receive a number as input and will return the factorial of\n this number.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      prefixes.push(currentPrefix);\n      currentPrefix = '';\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === '/') {\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    } else {\n      currentSuffix += string[i];\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '/') {\n      substrings.push(currentSubstring);\n      currentSubstring = '';\n    } else {\n      currentSubstring += string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from sho rtest  to longestof the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst allSubstrings = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/[\\s\\S]/g);\n  const spCharsLength = spChars.length;\n  const newText = text.replace(/[\\s\\S]/g, '_');\n  if (spCharsLength > 2) {\n    const newText = newText.replace(/\\s+/g, '-');\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spChars = text.match(/", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.trim();\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\".\")[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall cube theint eger entry ifits index isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyBy8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted[i].trim();\n    if (word.length!== 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = [];\n  const re = new RegExp(/\\s+/);\n  const splitted = sentence.split(re);\n  for (let i = 0; i < splitted.length; i++) {\n    const word = splitted", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\");\n  const [num1, num2] = numer.split(\"/\");\n  const [den1, den2] = denom.split(\"/\");\n  const [num1Int, num2Int] = [parseInt(num1), parseInt(num2)];\n  const [den1Int, den2Int] = [parseInt(den1), parseInt(den2)];\n  const [num1Int, den1Int] = [parseInt(num1), parseInt(den1)];\n  const [num2Int, den2Int] = [parseInt(num2), parseInt(den2)];\n  const [num1Int, num2Int] = [num1Int, num2Int];\n  const [den1Int, den2Int] = [den1Int, den2Int];\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2Int) {\n    return true;\n  }\n  if (num1Int === num2Int && den1Int === den2Int) {\n    return true;\n  }\n  if (num1Int === den1Int && num2Int === den2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - a - b;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {\n    result.push(num);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const sumOfDigits = nums.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const sortedNums = nums.sort((a, b) => {\n    return sumOfDigits - b - a;\n  });\n  sortedNums.forEach((num, index) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  return oddNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are even (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const evenNums = nums.filter(num => num % 2 === 0);\n  return evenNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  return oddNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are even (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const evenNums = nums.filter(num => num % 2 === 0);\n  return evenNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  return oddNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are even (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const evenNums = nums.filter(num => num % 2 === 0);\n  return evenNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  return oddNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are even (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const evenNums = nums.filter(num => num % 2 === 0);\n  return evenNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  return oddNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are even (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const evenNums = nums.filter(num => num % 2 === 0);\n  return evenNums.length;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3 * i) {\n          max = Math.max(max, i + j + k);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,1,0,0,1,1,1,1]\n  Output: 4\n  Explanation: There are 4 1s in the array.\n*/\nconst countOnes = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countOnes([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]));\n\n/*\n  You are given an integer array nums consisting only of 0s and 1s.\n  You have to find the number of 1s in the array.\n  Input: nums = [1,1,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planetsOfPlanet1 = planets.filter(planet => planet === planet1);\n  const planetsOfPlanet2 = planets.filter(planet => planet === planet2);\n  const planetsOfPlanet1AndPlanet2 = planetsOfPlanet1.concat(planetsOfPlanet2);\n  const planetsOfPlanet1AndPlanet2Sorted = planetsOfPlanet1AndPlanet2.sort();\n  const planetsOfPlanet1AndPlanet2SortedByProximityToSun = planetsOfPlanet1AndPlanet2Sorted.filter(\n    planet => planet === \"Sun\"\n  );\n  return planetsOfPlanet1AndPlanet2SortedByProximityToSun;\n};\n\n/*\n  Write a  funct  ion  that  takes  a  planet  name  as string  planet  and  a  number  number\n  as  an  argument  and  returns  a  tupl  e  containing  all  planets  whose  orbits  are\n  located between  the orbit of planet and the  orbit of planet + number  and  sorted\n  by  the  proximity  to  the sun.  The  funct  ion  should return an empty tuple if  planet\n  or  planet + number  arenot  correc tplanet name  or  number.\n  Examples\n  cf(\"Jupiter\", 1) ==> (\"Saturn\", \"Uranus\")\n  cf(\"Earth\", 2) ==> (\"Venus\")\n  cf(\"Mercury\", 3) ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst cf = (planet, number) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planetsOfPlanet = planets.filter(planet => planet === planet);\n  const planetsOfPlanetPlusNumber = planetsOfPlanet.concat(planet);\n  const planetsOfPlanetPlusNumberSorted = planetsOfPlanetPlusNumber.sort();\n  const planetsOfPlanetPlusNumberSortedByProximityToSun = planetsOfPlanetPlusNumberSorted.filter(\n    planet => planet === \"Sun\"\n  );\n  return planetsOfPlanetPlusNumberSortedByProximityToSun;\n};\n\n/*\n  Write a  funct  ion  that  takes  a  planet  name  as string  planet  and  a  number  number\n  as  an  argument  and  returns  a  tupl  e  containing  all  planets  whose  orbits  are\n  located between  the orbit of planet and the  orbit of planet - number  and  sorted\n  by  the  proximity  to  the sun.  The  funct  ion  should return an empty tuple if  planet\n  or  planet - number  arenot  correc tplanet name  or  number.\n  Examples\n  cf(\"Jupiter\", 1) ==> (\"Saturn\", \"Uranus\")\n  cf(\"Earth\", 2) ==> (\"Venus\")\n  cf(\"Mercury\", 3) ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst ct = (planet, number) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planetsOfPlanet = planets.filter(planet => planet === planet);\n  const planetsOfPlanetMinusNumber = planetsOfPlanet.concat(planet);\n  const planetsOfPlanetMinusNumberSorted = planetsOfPlanetMinusNumber.sort();\n  const planetsOfPlanetMinusNumberSortedByProximityToSun = planetsOfPlanetMinusNumberSorted.filter(\n    planet => planet === \"Sun\"\n  );\n  return planetsOfPlanetMinusNumberSortedByProximityToSun;\n};\n\n/*\n  Write a  funct  ion  that  takes  a  planet  name  as string  planet  and  a  number  number\n  as  an  argument  and  returns  a  tupl  e  containing  all  planets  whose  orbits  are\n  located between  the orbit of planet and the  orbit of planet * number  and  sorted\n  by  the  proximity  to  the sun.  The  funct  ion  should return an empty tuple if  planet\n  or  planet * number  arenot  correc tplanet name  or  number.\n  Examples\n  cf(\"Jupiter\", 1) ==> (\"Saturn\", \"Uranus\")\n  cf(\"Earth\", 2) ==> (\"Venus\")\n  cf(\"Mercury\", 3) ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst ctt = (planet, number) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planetsOfPlanet = plan", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) continue\n    sum += lst[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst == []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare2 = (g1, g2) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < g1.length; i++) {\n    scores.push(g1[i]);\n    guesses.push(g2[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare3 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare4 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare5 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare6 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare7 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare8 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare9 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare10 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare11 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare12 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare13 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst compare14 = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const results = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const score = scores[i];\n    const guess = guesses[i];\n    const difference = Math.abs(guess - score);\n    if (difference > 0) {\n      results.push([difference, score]);\n    }\n  }\n  return results;\n};\n\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest.name}`;\n};\n\n/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest.name}`;\n};\n\n/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest.name}`;\n};\n\n/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest.name}`;\n};\n\n/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let re = a.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  let re2 = b.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  return re.includes(re2);\n};\n\n/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let re = a.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  let re2 = b.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  return re.includes(re2);\n};\n\n/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let re = a.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  let re2 = b.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  return re.includes(re2);\n};\n\n/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let re = a.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  let re2 = b.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  return re.includes(re2);\n};\n\n/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let re = a.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  let re2 = b.split(\"\").reduce((acc, cur) => {\n    let newAcc = acc.split(\"\").reduce((acc, cur) => {\n      if (cur === cur.toUpperCase()) {\n        return cur;\n      }\n      return acc += cur;\n    }, \"\");\n    return newAcc + cur;\n  }, \"\");\n  return re.includes(re2);\n};\n\n/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toLowerCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  >>> intToRomanAndUpper(152) == 'CLLI'\n  >>> intToRomanAndUpper(426) == 'CDXXVI'\n  */\nconst intToRomanAndUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n  const roman = romanNumerals(number)\n  const romanString = roman.join('')\n  return romanString.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtain its roma n numeral equivalent as a string,\n and return it in lowercase and uppercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToRomanAndUpper(19) == 'XIX'\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar > maxNum) {\n      maxNum = numOfChar;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with minimum number of uniquecharacter s. If multiple strings\n  havemin imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMin([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"bb\"\n  */ \nconst findMin = (words) => {\n  let minNum = 0;\n  let minWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar < minNum) {\n      minNum = numOfChar;\n      minWord = word;\n    }\n  });\n  return minWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with maximum number of uniquecharacter s. If multiple strings\n  havemax imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"cc\"\n  */ \nconst findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar > maxNum) {\n      maxNum = numOfChar;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with minimum number of uniquecharacter s. If multiple strings\n  havemin imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMin([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"bb\"\n  */ \nconst findMin = (words) => {\n  let minNum = 0;\n  let minWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar < minNum) {\n      minNum = numOfChar;\n      minWord = word;\n    }\n  });\n  return minWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with maximum number of uniquecharacter s. If multiple strings\n  havemax imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"cc\"\n  */ \nconst findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar > maxNum) {\n      maxNum = numOfChar;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with minimum number of uniquecharacter s. If multiple strings\n  havemin imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMin([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"bb\"\n  */ \nconst findMin = (words) => {\n  let minNum = 0;\n  let minWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar < minNum) {\n      minNum = numOfChar;\n      minWord = word;\n    }\n  });\n  return minWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with maximum number of uniquecharacter s. If multiple strings\n  havemax imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"cc\"\n  */ \nconst findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar > maxNum) {\n      maxNum = numOfChar;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with minimum number of uniquecharacter s. If multiple strings\n  havemin imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMin([\"na me\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name \", \"enam\", \"game\"]) === \"name \"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"bb\"\n  */ \nconst findMin = (words) => {\n  let minNum = 0;\n  let minWord = \"\";\n  words.forEach((word) => {\n    let numOfChar = word.length;\n    if (numOfChar < minNum) {\n      minNum = numOfChar;\n      minWord = word;\n    }\n  });\n  return minWord;\n};\n\n/*Write a function that accepts a listof st rings.\n  Return the word with maximum number of uniquecharacter s. If multiple strings\n  havemax imum number of uniquecharacters, return the one wh ich comes first in\n  lexi c ograph ical order.\n\n  fin dMax([\"na me\", \"of\", \"string\"]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(number > 0 && left < need) {\n    total += number;\n    left += number;\n    number--;\n  }\n  \n  if(left < need) {\n    total++;\n    left++;\n  }\n  \n  return [total, left];\n}\n\n/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(number > 0 && left < need) {\n    total += number;\n    left += number;\n    number--;\n  }\n  \n  if(left < need) {\n    total++;\n    left++;\n  }\n  \n  return [total, left];\n}\n\n/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(number > 0 && left < need) {\n    total += number;\n    left += number;\n    number--;\n  }\n  \n  if(left < need) {\n    total++;\n    left++;\n  }\n  \n  return [total, left];\n}\n\n/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(number > 0 && left < need) {\n    total += number;\n    left += number;\n    number--;\n  }\n  \n  if(left < need) {\n    total++;\n    left++;\n  }\n  \n  return [total, left];\n}\n\n/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    counts[character] = counts[character]? counts[character] + 1 : 1;\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are in the string that are not in the alphabet\n  >>> countNonAlphaCharacters('xyzXYZ')\n  3\n  >>> countNonAlphaCharacters('Jerry')\n  4\n  */\nconst countNonAlphaCharacters = (string) => {\n  const characters = string.split('');\n  const counts = {};\n  characters.forEach((character) => {\n    if (counts[character]) {\n      counts[character] = counts[character] - 1;\n    } else {\n      counts[character] = 1;\n    }\n  });\n  return counts;\n};\n\n/* Given a string, find out how many characters are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*You are given a string s.\n  Your task is to find and print the number of vowels present in the string.\n  A vowel is a character that appears more than once in the string.\n  Examples\n  vowels(\"aba\") → 2\n  vowels(\"aba\") → 3\n  vowels(\"aba\") → 0\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") → -1\n  vowels(\"aba\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of times the number n\n  appears in the given array.\n\n  For example:\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 3\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 1\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, 3, 4, 5]) => 0\n  countOccurrences(10, [1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  let current_beat = 0;\n  let current_note = 0;\n  let current_note_length = 0;\n  let current_note_duration = 0;\n  let current_note_duration_in_beats = 0;\n  let current_note_duration_in_beats_array = [];\n  let current_note_duration_in_beats_array_index = 0;\n  let current_note_duration_in_beats_array_length = 0;\n  let current_note_duration_in_beats_array_element = 0;\n  let current_note_duration_in_beats_array_element_index = 0;\n  let current_note_duration_in_beats_array_element_length = 0;\n  let current_note_duration_in_beats_array_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_index = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_length = 0;\n  let current_note_duration_in_beats_array_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_value_element_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(' ');\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized.\n  >>> capitalizeWords('one two three')\n  'One Two Three'\n  */\nconst capitalizeWords = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes.\n  >>> capitalizeAndDashes('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashes = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-');\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces.\n  >>> capitalizeAndDashesAndSpace('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpace = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods.\n  >>> capitalizeAndDashesAndSpaceAndPeriod('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriod = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashes('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashes = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpace('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpace = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriod('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriod = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashes('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashes = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriod('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriod = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashes('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashes = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join('-') +'';\n};\n\n/* Input is a string with words separated by spaces. Return the string with each word capitalized and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes and each word separated by spaces and each word separated by periods and each word separated by dashes.\n  >>> capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashes('one two three')\n  'One-Two-Three'\n  */\nconst capitalizeAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndDashesAndSpaceAndPeriodAndD", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n}\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[sortedNumbers.length - 1]];\n  return closestElements;\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\nconst getRandomColor = ({ hue, saturation, lightness }) => {\n  const hueValue = hue * 360 / 360;\n  const saturationValue = saturation * 100;\n  const lightnessValue = lightness * 100;\n  const colorValues = [hueValue, saturationValue, lightnessValue];\n  return `hsl(${colorValues.join(',')})`;\n};\n\nconst getRandomColorString = ({ hue, saturation, lightness }) => {\n  const color = getRandomColor({\n    hue,\n    saturation,\n    lightness,\n  });\n  return `#${color}`;\n};\n\nconst getRandomColorStringFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `#${color}`;\n};\n\nconst getRandomColorFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `#${color}`;\n};\n\nconst getRandomColorFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArray = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join(',')}, ${colorArray[3]})`;\n};\n\nconst getRandomColorFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacityFromArrayWithOpacity = (colorArray) => {\n  const color = getRandomColor({\n    hue: colorArray[0],\n    saturation: colorArray[1],\n    lightness: colorArray[2],\n  });\n  return `rgba(${colorArray.join('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python valu es on ly for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isFinite(value));\n};\n\n/* Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/* Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python valu es on ly for nones\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python valu es on ly for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python valu es on ly for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  []\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/* Filter given list of any python valu es on ly for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  []\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  []\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  []\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  []\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  []\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  []\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  []\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  []\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  []\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Object.keys(value).length);\n};\n\n/* Filter given list of any python valu es on ly for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  []\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyTuples = (value", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      length++;\n    } else {\n      break;\n    }\n  }\n  return length;\n};\n\n/**\n * Return true if given string ends with given suffix\n  >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'aba')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n  >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'ab')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0;\n};\n\n/**\n * Return true if given string contains given substring\n  >>> contains('abc', 'a')\n  true\n  >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'b')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'ab')\n  true\n  >>> containsAtIndex('abc', 2, 'b')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNum = n;\n  while (maxNum % 2 === 0) {\n    maxDivisor *= 2;\n    maxNum /= 2;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNum = n;\n  while (minNum % 2 === 0) {\n    minDivisor *= 2;\n    minNum /= 2;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.match(/[A-Z]/g)? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return the first character in lowercase.\n  >>> firstChar('Hello')\n  'H'\n  */\nconst firstChar = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the last character in lowercase.\n  >>> lastChar('Hello')\n  'o'\n  */\nconst lastChar = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Given a string, return the first character in uppercase.\n  >>> firstChar('Hello')\n  'H'\n  */\nconst firstCharUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the last character in uppercase.\n  >>> lastChar('Hello')\n  'O'\n  */\nconst lastCharUpper = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLast = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string with the first letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeFirstUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.charAt(0).toUpperCase();\n};\n\n/* Given a string, return the string with the last letter capitalized.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalizeLastUpper = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(string.length - 1).toUpperCase();\n};\n\n/* Given a string, return the string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a pattern\n  >>> remove(\"abc def\", \"[a-h]\")\n  'bc'\n  */\nconst remove = (str, pattern) => {\n  return str.replace(pattern, \"\");\n};\n\n/* Remove all characters from string that match a ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only  forones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position.\n  >>> filterBySubstringPosition([], 'a', 0)\n  []\n  >>> filterBySubstringPosition(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc']\n  */\nconst filterBySubstringPosition = (strings, substring, position) => {\n  return strings.filter(string => string.includes(substring, position));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length.\n  >>> filterBySubstringPositionLength([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLength = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty.\n  >>> filterBySubstringPositionLengthNotEmpty([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmpty(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmpty = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes(''));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique.\n  >>> filterBySubstringPositionLengthNotEmptyUnique([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmptyUnique(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmptyUnique = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes('') && string.split('').filter((item, index) => string.includes(item, index)).join().length === string.length);\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique and are ordered.\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrdered([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrdered(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmptyUniqueOrdered = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes('') && string.split('').filter((item, index) => string.includes(item, index)).join().length === string.length && string.split('').sort().join().length === string.length);\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique and are ordered and are in order.\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrder([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrder(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrder = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes('') && string.split('').filter((item, index) => string.includes(item, index)).join().length === string.length && string.split('').sort().join().length === string.length && string.split('').sort().join().includes(string.split('').sort().join()));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique and are ordered and are in order and are in order.\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrder([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrder(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrder = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes('') && string.split('').filter((item, index) => string.includes(item, index)).join().length === string.length && string.split('').sort().join().length === string.length && string.split('').sort().join().includes(string.split('').sort().join()) && string.split('').sort().join().includes(string.split('').sort().reverse().join()));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique and are ordered and are in order and are in order and are in order.\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrderInOrder([], 'a', 0, 2)\n  []\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrderInOrder(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['abc']\n  */\nconst filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrderInOrder = (strings, substring, position, length) => {\n  return strings.filter(string => string.includes(substring, position, length) &&!string.includes('') && string.split('').filter((item, index) => string.includes(item, index)).join().length === string.length && string.split('').sort().join().length === string.length && string.split('').sort().join().includes(string.split('').sort().join()) && string.split('').sort().join().includes(string.split('').sort().reverse().join()) && string.split('').sort().join().includes(string.split('').sort().reverse().join()));\n};\n\n/* Filter an input list of strings only  forones that contain a given substring in a given position and length and that are not empty and are unique and are ordered and are in order and are in order and are in order and are in order.\n  >>> filterBySubstringPositionLengthNotEmptyUniqueOrderedInOrderInOrderInOrderInOrder([], 'a', 0, 2)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative numbers in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n) => n % n === 0);\n};\n\n/*Return only numbers in the l ist that are divisible by n.\n  >>> getDivisibleByN([-1, 2, -4, 5, 6], 3)\n  [-1, -4, 6]\n  >>> getDivisibleByN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [5, -3, -3, 9, 123, 1]\n  */\nconst getDivisibleByN = (l, n) => {\n  return l.filter((n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n!== 2 && n!== 3) return false;\n  if (n === 5) return true;\n  if (n === 10) return true;\n  if (n === 13) return true;\n  if (n === 17) return true;\n  if (n === 19) return true;\n  if (n === 23) return true;\n  if (n === 29) return true;\n  if (n === 31) return true;\n  if (n === 37) return true;\n  if (n === 43) return true;\n  if (n === 47) return true;\n  if (n === 53) return true;\n  if (n === 59) return true;\n  if (n === 61) return true;\n  if (n === 67) return true;\n  if (n!== 9) return false;\n  if (n!== 13) return false;\n  if (n!== 19) return false;\n  if (n!== 23) return false;\n  if (n!== 29) return false;\n  if (n!== 31) return false;\n  if (n!== 37) return false;\n  if (n!== 43) return false;\n  if (n!== 47) return false;\n  if (n!== 53) return false;\n  if (n!== 59) return false;\n  if (n!== 61) return false;\n  if (n!== 67) return false;\n  return true;\n};\n\n/*\n  >>> primeFactors(6)\n  2\n  >>> primeFactors(7)\n  2\n  >>> primeFactors(8)\n  2\n  >>> primeFactors(9)\n  3\n  >>> primeFactors(10)\n  2\n  >>> primeFactors(11)\n  3\n  >>> primeFactors(13)\n  5\n  >>> primeFactors(14)\n  5\n  >>> primeFactors(15)\n  7\n  >>> primeFactors(16)\n  7\n  >>> primeFactors(17)\n  7\n  >>> primeFactors(18)\n  7\n  >>> primeFactors(19)\n  7\n  >>> primeFactors(20)\n  7\n  >>> primeFactors(21)\n  7\n  >>> primeFactors(23)\n  7\n  >>> primeFactors(29)\n  7\n  >>> primeFactors(30)\n  7\n  >>> primeFactors(31)\n  7\n  >>> primeFactors(37)\n  7\n  >>> primeFactors(43)\n  7\n  >>> primeFactors(47)\n  7\n  >>> primeFactors(53)\n  7\n  >>> primeFactors(59)\n  7\n  >>> primeFactors(61)\n  7\n  >>> primeFactors(67)\n  7\n  >>> primeFactors(73)\n  7\n  >>> primeFactors(79)\n  7\n  >>> primeFactors(81)\n  7\n  >>> primeFactors(89)\n  7\n  >>> primeFactors(97)\n  7\n  >>> primeFactors(101)\n  7\n  >>> primeFactors(103)\n  7\n  >>> primeFactors(105)\n  7\n  >>> primeFactors(107)\n  7\n  >>> primeFactors(109)\n  7\n  >>> primeFactors(111)\n  7\n  >>> primeFactors(113)\n  7\n  >>> primeFactors(115)\n  7\n  >>> primeFactors(117)\n  7\n  >>> primeFactors(121)\n  7\n  >>> primeFactors(123)\n  7\n  >>> primeFactors(125)\n  7\n  >>> primeFactors(127)\n  7\n  >>> primeFactors(131)\n  7\n  >>> primeFactors(139)\n  7\n  >>> primeFactors(141)\n  7\n  >>> primeFactors(143)\n  7\n  >>> primeFactors(145)\n  7\n  >>> primeFactors(147)\n  7\n  >>> primeFactors(151)\n  7\n  >>> primeFactors(153)\n  7\n  >>> primeFactors(155)\n  7\n  >>> primeFactors(157)\n  7\n  >>> primeFactors(159)\n  7\n  >>> primeFactors(161)\n  7\n  >>> primeFactors(163)\n  7\n  >>> primeFactors(165)\n  7\n  >>> primeFactors(167)\n  7\n  >>> primeFactors(169)\n  7\n  >>> primeFactors(171)\n  7\n  >>> primeFactors(173)\n  7\n  >>> primeFactors(175)\n  7\n  >>> primeFactors(177)\n  7\n  >>> primeFactors(179)\n  7\n  >>> primeFactors(181)\n  7\n  >>> primeFactors(183)\n  7\n  >>> primeFactors(185)\n  7\n  >>> primeFactors(187)\n  7\n  >>> primeFactors(191)\n  7\n  >>> primeFactors(193)\n  7\n  >>> primeFactors(195)\n  7\n  >>> primeFactors(197)\n  7\n  >>> primeFactors(199)\n  7\n  >>> primeFactors(201)\n  7\n  >>> primeFactors(203)\n  7\n  >>> primeFactors(205)\n  7\n  >>> primeFactors(207)\n  7\n  >>> primeFactors(209)\n  7\n  >>> primeFactors(211)\n  7\n  >>> primeFactors(213)\n  7\n  >>> primeFactors(215)\n  7\n  >>> primeFactors(217)\n  7\n  >>> primeFactors(219)\n  7\n  >>> primeFactors(221)\n  7\n  >>> primeFactors(223)\n  7\n  >>> primeFactors(225)\n  7\n  >>> primeFactors(227)\n  7\n  >>> primeFactors(229)\n  7\n  >>> primeFactors(231)\n  7\n  >>> primeFactors(233)\n  7\n  >>> primeFactors(235)\n  7\n  >>> primeFactors(237)\n  7\n  >>> primeFactors(239)\n  7\n  >>> primeFactors(241)\n  7\n  >>> primeFactors(243)\n  7\n  >>> primeFactors(245)\n  7\n  >>> primeFactors(247)\n  7\n  >>> primeFactors(249)\n  7\n  >>> primeFactors(251)\n  7\n  >>> primeFactors(253)\n  7\n  >>> primeFactors(255)\n  7\n  >>> primeFactors(257)\n  7\n  >>> primeFactors(259)\n  7\n  >>> primeFactors(261)\n  7\n  >>> primeFactors(263)\n  7\n  >>> primeFactors(265)\n  7\n  >>> primeFactors(267)\n  7\n  >>> primeFactors(269)\n  7\n  >>> primeFactors(271)\n  7\n  >>> primeFactors(273)\n  7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if(xs.length % 2 === 0){\n    return poly(xs, xs[0]);\n  }\n  else{\n    let maxCoeff = 0;\n    let maxCoeffIndex = 0;\n    let maxCoeffValue = 0;\n    for(let i = 0; i< xs.length; i+=2){\n      if(poly(xs, xs[i]) > maxCoeff){\n        maxCoeff = poly(xs, xs[i]);\n        maxCoeffIndex = i;\n        maxCoeffValue = xs[i];\n      }\n    }\n    return maxCoeffValue;\n  }\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findMax find x suchthat poly(x) = max.\n  fin dMax returns only only max o point,ev en if there are many.\n  Moreove r, findMax only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  if(xs.length % 2 === 0){\n    return poly(xs, xs[0]);\n  }\n  else{\n    let maxCoeff = 0;\n    let maxCoeffIndex = 0;\n    let maxCoeffValue = 0;\n    for(let i = 0; i< xs.length; i+=2){\n      if(poly(xs, xs[i]) > maxCoeff){\n        maxCoeff = poly(xs, xs[i]);\n        maxCoeffIndex = i;\n        maxCoeffValue = xs[i];\n      }\n    }\n    return maxCoeffValue;\n  }\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findMin find x suchthat poly(x) = min.\n  fin dMin returns only min o point,ev en if there are many.\n  Moreove r, findMin only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  if(xs.length % 2 === 0){\n    return poly(xs, xs[0]);\n  }\n  else{\n    let minCoeff = 0;\n    let minCoeffIndex = 0;\n    let minCoeffValue = 0;\n    for(let i = 0; i< xs.length; i+=2){\n      if(poly(xs, xs[i]) < minCoeff){\n        minCoeff = poly(xs, xs[i]);\n        minCoeffIndex = i;\n        minCoeffValue = xs[i];\n      }\n    }\n    return minCoeffValue;\n  }\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findMin find x suchthat poly(x) = min.\n  fin dMin returns only min o point,ev en if there are many.\n  Moreove r, findMin only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  if(xs.length % 2 === 0){\n    return poly(xs, xs[0]);\n  }\n  else{\n    let minCoeff = 0;\n    let minCoeffIndex = 0;\n    let minCoeffValue = 0;\n    for(let i = 0; i< xs.length; i+=2){\n      if(poly(xs, xs[i]) < minCoeff){\n        minCoeff = poly(xs, xs[i]);\n        minCoeffIndex = i;\n        minCoeffValue = xs[i];\n      }\n    }\n    return minCoeffValue;\n  }\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findMax find x suchthat poly(x) = max.\n  fin dMax returns only max o point,ev en if there are many.\n  Moreove r, findMax only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  if(xs.length % 2 === 0){\n    return poly(xs, xs[0]);\n  }\n  else{\n    let maxCoeff = 0;\n    let maxCoeffIndex = 0;\n    let maxCoeffValue = 0;\n    for(let i = 0; i< xs.length; i+=2){\n      if(poly(xs, xs[i]) > maxCoeff){\n        maxCoeff = poly(xs, xs[i]);\n        maxCoeffIndex = i;\n        maxCoeffValue = xs[i];\n      }\n    }\n    return maxCoeffValue;\n  }\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findMin find x suchthat poly(x) = min.\n  fin dMin returns only min o point,ev en if there are many.\n  Moreove r, findMin only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let l200 = [];\n  let l201 = [];\n  let l202 = [];\n  let l203 = [];\n  let l204 = [];\n  let l205 = [];\n  let l206 = [];\n  let l207 = [];\n  let l208 = [];\n  let l209 = [];\n  let l210 = [];\n  let l211 = [];\n  let l212 = [];\n  let l213 = [];\n  let l214 = [];\n  let l215 = [];\n  let l216 = [];\n  let l217 = [];\n  let l218 = [];\n  let l219 = [];\n  let l220 = [];\n  let l221 = [];\n  let l222 = [];\n  let l223 = [];\n  let l224 = [];\n  let l225 = [];\n  let l226 = [];\n  let l227 = [];\n  let l228 = [];\n  let l229 = [];\n  let l230 = [];\n  let l231 = [];\n  let l232 = [];\n  let l233 = [];\n  let l234 = [];\n  let l235 = [];\n  let l236 = [];\n  let l237 = [];\n  let l238 = [];\n  let l239 = [];\n  let l240 = [];\n  let l241 = [];\n  let l242 = [];\n  let l243 = [];\n  let l244 = [];\n  let l245 = [];\n  let l246 = [];\n  let l247 = [];\n  let l248 = [];\n  let l249 = [];\n  let l250 = [];\n  let l251 = [];\n  let l252 = [];\n  let l253 = [];\n  let l254 = [];\n  let l255 = [];\n  let l256 = [];\n  let l257 = [];\n  let l258 = [];\n  let l259 = [];\n  let l260 = [];\n  let l261 = [];\n  let l262 = [];\n  let l263 = [];\n  let l264 = [];\n  let l265 = [];\n  let l266 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInArray = (arr) => {\n  return unique(arr).sort();\n};\n\n/*Return unique elements in an array\n  >>> uniqueInArray([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return median of all elements in the list.\n  >>> medianElements([1, 2, 3])\n  2\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst medianElements = (l) => {\n  let middle = Math.floor(l.length / 2);\n  let median = l[middle];\n  for (let i = middle - 1; i >= 0; i--) {\n    if (l[i] < median) {\n      median = l[i];\n    }\n  }\n  return median;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      modes[maxCountIndex] = l[i];\n      maxCount++;\n    } else {\n      if (maxCount > 0) {\n        maxCount--;\n      }\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement([...modes, l[i]])) {\n      mode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenIndex2 = 0;\n  let evenValue2 = 0;\n  let evenIndex3 = 0;\n  let evenValue3 = 0;\n  let evenIndex4 = 0;\n  let evenValue4 = 0;\n  let evenIndex5 = 0;\n  let evenValue5 = 0;\n  let evenIndex6 = 0;\n  let evenValue6 = 0;\n  let evenIndex7 = 0;\n  let evenValue7 = 0;\n  let evenIndex8 = 0;\n  let evenValue8 = 0;\n  let evenIndex9 = 0;\n  let evenValue9 = 0;\n  let evenIndex10 = 0;\n  let evenValue10 = 0;\n  let evenIndex11 = 0;\n  let evenValue11 = 0;\n  let evenIndex12 = 0;\n  let evenValue12 = 0;\n  let evenIndex13 = 0;\n  let evenValue13 = 0;\n  let evenIndex14 = 0;\n  let evenValue14 = 0;\n  let evenIndex15 = 0;\n  let evenValue15 = 0;\n  let evenIndex16 = 0;\n  let evenValue16 = 0;\n  let evenIndex17 = 0;\n  let evenValue17 = 0;\n  let evenIndex18 = 0;\n  let evenValue18 = 0;\n  let evenIndex19 = 0;\n  let evenValue19 = 0;\n  let evenIndex20 = 0;\n  let evenValue20 = 0;\n  let evenIndex21 = 0;\n  let evenValue21 = 0;\n  let evenIndex22 = 0;\n  let evenValue22 = 0;\n  let evenIndex23 = 0;\n  let evenValue23 = 0;\n  let evenIndex24 = 0;\n  let evenValue24 = 0;\n  let evenIndex25 = 0;\n  let evenValue25 = 0;\n  let evenIndex26 = 0;\n  let evenValue26 = 0;\n  let evenIndex27 = 0;\n  let evenValue27 = 0;\n  let evenIndex28 = 0;\n  let evenValue28 = 0;\n  let evenIndex29 = 0;\n  let evenValue29 = 0;\n  let evenIndex30 = 0;\n  let evenValue30 = 0;\n  let evenIndex31 = 0;\n  let evenValue31 = 0;\n  let evenIndex32 = 0;\n  let evenValue32 = 0;\n  let evenIndex33 = 0;\n  let evenValue33 = 0;\n  let evenIndex34 = 0;\n  let evenValue34 = 0;\n  let evenIndex35 = 0;\n  let evenValue35 = 0;\n  let evenIndex36 = 0;\n  let evenValue36 = 0;\n  let evenIndex37 = 0;\n  let evenValue37 = 0;\n  let evenIndex38 = 0;\n  let evenValue38 = 0;\n  let evenIndex39 = 0;\n  let evenValue39 = 0;\n  let evenIndex40 = 0;\n  let evenValue40 = 0;\n  let evenIndex41 = 0;\n  let evenValue41 = 0;\n  let evenIndex42 = 0;\n  let evenValue42 = 0;\n  let evenIndex43 = 0;\n  let evenValue43 = 0;\n  let evenIndex44 = 0;\n  let evenValue44 = 0;\n  let evenIndex45 = 0;\n  let evenValue45 = 0;\n  let evenIndex46 = 0;\n  let evenValue46 = 0;\n  let evenIndex47 = 0;\n  let evenValue47 = 0;\n  let evenIndex48 = 0;\n  let evenValue48 = 0;\n  let evenIndex49 = 0;\n  let evenValue49 = 0;\n  let evenIndex50 = 0;\n  let evenValue50 = 0;\n  let evenIndex51 = 0;\n  let evenValue51 = 0;\n  let evenIndex52 = 0;\n  let evenValue52 = 0;\n  let evenIndex53 = 0;\n  let evenValue53 = 0;\n  let evenIndex54 = 0;\n  let evenValue54 = 0;\n  let evenIndex55 = 0;\n  let evenValue55 = 0;\n  let evenIndex56 = 0;\n  let evenValue56 = 0;\n  let evenIndex57 = 0;\n  let evenValue57 = 0;\n  let evenIndex58 = 0;\n  let evenValue58 = 0;\n  let evenIndex59 = 0;\n  let evenValue59 = 0;\n  let evenIndex60 = 0;\n  let evenValue60 = 0;\n  let evenIndex61 = 0;\n  let evenValue61 = 0;\n  let evenIndex62 = 0;\n  let evenValue62 = 0;\n  let evenIndex63 = 0;\n  let evenValue63 = 0;\n  let evenIndex64 = 0;\n  let evenValue64 = 0;\n  let evenIndex65 = 0;\n  let evenValue65 = 0;\n  let evenIndex66 = 0;\n  let evenValue66 = 0;\n  let evenIndex67 = 0;\n  let evenValue67 = 0;\n  let evenIndex68 = 0;\n  let evenValue68 = 0;\n  let evenIndex69 = 0;\n  let evenValue69 = 0;\n  let evenIndex70 = 0;\n  let evenValue70 = 0;\n  let evenIndex71 = 0;\n  let evenValue71 = 0;\n  let evenIndex72 = 0;\n  let evenValue72 = 0;\n  let evenIndex73 = 0;\n  let evenValue73 = 0;\n  let evenIndex74 = 0;\n  let evenValue74 = 0;\n  let evenIndex75 = 0;\n  let evenValue75 = 0;\n  let evenIndex76 = 0;\n  let evenValue76 = 0;\n  let evenIndex77 = 0;\n  let evenValue77 = 0;\n  let evenIndex78 = 0;\n  let evenValue78 = 0;\n  let evenIndex79 = 0;\n  let evenValue79 = 0;\n  let evenIndex80 = 0;\n  let evenValue80 = 0;\n  let evenIndex81 = 0;\n  let evenValue81 = 0;\n  let evenIndex82 = 0;\n  let evenValue82 = 0;\n  let evenIndex83 = 0;\n  let evenValue83 = 0;\n  let evenIndex84 = 0;\n  let evenValue84 = 0;\n  let evenIndex85 = 0;\n  let evenValue85 = 0;\n  let evenIndex86 = 0;\n  let evenValue86 = 0;\n  let evenIndex87 = 0;\n  let evenValue87 = 0;\n  let evenIndex88 = 0;\n  let evenValue88 = 0;\n  let evenIndex89 = 0;\n  let evenValue89 = 0;\n  let evenIndex90 = 0;\n  let evenValue90 = 0;\n  let evenIndex91 = 0;\n  let evenValue91 = 0;\n  let evenIndex92 = 0;\n  let evenValue92 = 0;\n  let evenIndex93 = 0;\n  let evenValue93 = 0;\n  let evenIndex94 = 0;\n  let evenValue94 = 0;\n  let evenIndex95 = 0;\n  let evenValue95 = 0;\n  let evenIndex96 = 0;\n  let evenValue96 = 0;\n  let evenIndex97 = 0;\n  let evenValue97 = 0;\n  let evenIndex98 = 0;\n  let evenValue98 = 0;\n  let evenIndex99 = 0;\n  let evenValue99 = 0;\n  let evenIndex100 = 0;\n  let evenValue100 = 0;\n  let evenIndex101 = 0;\n  let evenValue101 = 0;\n  let evenIndex102 = 0;\n  let evenValue102 = 0;\n  let evenIndex103 = 0;\n  let evenValue103 = 0;\n  let evenIndex104 = 0;\n  let evenValue104 = 0;\n  let evenIndex105 = 0;\n  let evenValue105 = 0;\n  let evenIndex106 = 0;\n  let evenValue106 = 0;\n  let evenIndex107 = 0;\n  let evenValue107 = 0;\n  let evenIndex108 = 0;\n  let evenValue108 = 0;\n  let evenIndex109 = 0;\n  let evenValue109 = 0;\n  let evenIndex110 = 0;\n  let evenValue110 = 0;\n  let evenIndex111 = 0;\n  let evenValue111 = 0;\n  let evenIndex112 = 0;\n  let evenValue112 = 0;\n  let evenIndex113 = 0;\n  let evenValue113 = 0;\n  let evenIndex114 = 0;\n  let evenValue114 = 0;\n  let evenIndex115 = 0;\n  let evenValue115 = 0;\n  let evenIndex116 = 0;\n  let evenValue116 = 0;\n  let evenIndex117 = 0;\n  let evenValue117 = 0;\n  let evenIndex118 = 0;\n  let evenValue118 = 0;\n  let evenIndex119 = 0;\n  let evenValue119 = 0;\n  let evenIndex120 = 0;\n  let evenValue120 = 0;\n  let evenIndex121 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    fib += i;\n    if (fib > n) {\n      prime = fib;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let prime = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n    if (sum > n) {\n      prime = sum;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeSum returns n-th number that is  a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  return numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, num) => sum + num, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto one,and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto two,and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto three,and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto four,and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto five,and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto six,and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto seven,and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  triplesSumToEight takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto eight,and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  triplesSumToNine takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto nine,and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> trip", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n  let collisions = 0\n  while n > 0\n    collisions = collisions + 1\n    n -= 1\n  collisions\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. He wants to know how many collisions there are, not the actual collision itself.\n<|/ c |>\n<| c |>\nI believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question.\n<|/ c |>\n<| c |>\nI believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question.\n<|/ c |>\n<| c |>\nI believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question.\n<|/ c |>\n<| c |>\nI believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question. He wants to know how many collisions there are, not the actual collision itself. I believe this answers the question.\n<|/ c |>\n<| a tags=haskell |>\n<code>\nimport Data.List\n\ntype Car = Int\n\ntype Race = Int\n\ntype RaceCars = Int\n\ntype RaceCarsCollisions = Int\n\ntype RaceCarsCollisionsOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRace = Int\n\ntype RaceCarsCollisionsOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOfRaceOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented  by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    res += x.charAt(i) * Math.pow(base, i);\n    i++;\n  }\n  return res;\n};\n\n/*\n  Convert string to integer number with base 10.\n  >>> toBase10('100')\n  100\n  >>> toBase10('100', 2)\n  1000\n  >>> toBase10('100', 3)\n  1000\n  >>> toBase10('100', 4)\n  10000\n  >>> toBase10('100', 5)\n  100000\n  >>> toBase10('100', 6)\n  1000000\n  >>> toBase10('100', 7)\n  10000000\n  >>> toBase10('100', 8)\n  100000000\n  >>> toBase10('100', 9)\n  1000000000\n  >>> toBase10('100', 10)\n  10000000000\n  >>> toBase10('100', 11)\n  100000000000\n  >>> toBase10('100', 12)\n  1000000000000\n  >>> toBase10('100', 13)\n  10000000000000\n  >>> toBase10('100', 14)\n  100000000000000\n  >>> toBase10('100', 15)\n  1000000000000000\n  >>> toBase10('100', 16)\n  1000000000000000000\n  >>> toBase10('100', 17)\n  10000000000000000000\n  >>> toBase10('100', 18)\n  100000000000000000000\n  >>> toBase10('100', 19)\n  1000000000000000000000\n  >>> toBase10('100', 20)\n  10000000000000000000000\n  >>> toBase10('100', 21)\n  100000000000000000000000\n  >>> toBase10('100', 22)\n  1000000000000000000000000\n  >>> toBase10('100', 23)\n  10000000000000000000000000\n  >>> toBase10('100', 24)\n  100000000000000000000000000\n  >>> toBase10('100', 25)\n  1000000000000000000000000000\n  >>> toBase10('100', 26)\n  10000000000000000000000000000\n  >>> toBase10('100', 27)\n  100000000000000000000000000000\n  >>> toBase10('100', 28)\n  1000000000000000000000000000000\n  >>> toBase10('100', 29)\n  10000000000000000000000000000000\n  >>> toBase10('100', 30)\n  100000000000000000000000000000000\n  >>> toBase10('100', 31)\n  1000000000000000000000000000000000\n  >>> toBase10('100', 32)\n  10000000000000000000000000000000000\n  >>> toBase10('100', 33)\n  100000000000000000000000000000000000\n  >>> toBase10('100', 34)\n  1000000000000000000000000000000000000\n  >>> toBase10('100', 35)\n  10000000000000000000000000000000000000\n  >>> toBase10('100', 36)\n  100000000000000000000000000000000000000\n  >>> toBase10('100', 37)\n  1000000000000000000000000000000000000000\n  >>> toBase10('100', 38)\n  10000000000000000000000000000000000000000\n  >>> toBase10('100', 39)\n  100000000000000000000000000000000000000000\n  >>> toBase10('100', 40)\n  1000000000000000000000000000000000000000000\n  >>> toBase10('100', 41)\n  10000000000000000000000000000000000000000000\n  >>> toBase10('100', 42)\n  100000000000000000000000000000000000000000000\n  >>> toBase10('100', 43)\n  1000000000000000000000000000000000000000000000\n  >>> toBase10('100', 44)\n  10000000000000000000000000000000000000000000000\n  >>> toBase10('100', 45)\n  100000000000000000000000000000000000000000000000\n  >>> toBase10('100', 46)\n  1000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 47)\n  10000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 48)\n  100000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 49)\n  1000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 50)\n  10000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 51)\n  100000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 52)\n  1000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 53)\n  10000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 54)\n  100000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 55)\n  1000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 56)\n  10000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 57)\n  100000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 58)\n  1000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 59)\n  10000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 60)\n  100000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 61)\n  1000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 62)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 63)\n  100000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 64)\n  1000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 65)\n  10000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 66)\n  100000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 67)\n  1000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 68)\n  10000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 69)\n  100000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 70)\n  1000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 71)\n  10000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 72)\n  100000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 73)\n  1000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 74)\n  10000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 75)\n  100000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 76)\n  1000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 77)\n  10000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 78)\n  100000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 79)\n  1000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 80)\n  10000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 81)\n  100000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 82)\n  1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> toBase10('100', 83)\n  10000000000000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2)\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h / Math.sqrt(3) * Math.pow(Math.sqrt(3), 2)\n}\n\n/*Given length of a side and high retur n are a for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib2(0) ->0\n  f ib2(1) ->  1\n  fib2(2)->fib2(1) + fib2(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib2 number sequen ce.  Do not use recursi on.\n  >>> fib2(5)\n  5\n  >>> fib2(6)\n  8\n  >>> fib2(7)\n  13\n  */\nconst fib2 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib3(0) ->0\n  f ib3(1) ->  1\n  fib3(2)->fib3(1) + fib3(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib3 number sequen ce.  Do not use recursi on.\n  >>> fib3(5)\n  5\n  >>> fib3(6)\n  8\n  >>> fib3(7)\n  13\n  */\nconst fib3 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1) ->  1\n  fib4(2) ->fib4(1) + fib4(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  5\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  13\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib5(0) ->0\n  f ib5(1) ->  1\n  fib5(2) ->fib5(1) + fib5(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib5 number sequen ce.  Do not use recursi on.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib6(0) ->0\n  f ib6(1) ->  1\n  fib6(2)->fib6(1) + fib6(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib6 number sequen ce.  Do not use recursi on.\n  >>> fib6(5)\n  5\n  >>> fib6(6)\n  8\n  >>> fib6(7)\n  13\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib7(0) ->0\n  f ib7(1) ->  1\n  fib7(2)->fib7(1) + fib7(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib7 number sequen ce.  Do not use recursi on.\n  >>> fib7(5)\n  5\n  >>> fib7(6)\n  8\n  >>> fib7(7)\n  13\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib8(0) ->0\n  f ib8(1) ->  1\n  fib8(2) ->fib8(1) + fib8(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib8 number sequen ce.  Do not use recursi on.\n  >>> fib8(5)\n  5\n  >>> fib8(6)\n  8\n  >>> fib8(7)\n  13\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fibonacci number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib9(0) ->0\n  f ib9(1) ->  1\n  fib9(2)->fib9(1) + fib9(2).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib9 number sequen ce.  Do not use recursi on.\n  >>> fib9(5)\n  5\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[mid];\n};\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst isPalindromeWithChar = (text, char, length) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed && text.charAt(text.length - 1) === char;\n};\n\n/*\n  Checks if given string is a palindrome with given length and char\n  >>> isPalindromeWithChar('aba', 'a', 2)\n  true\n  >>> isPalindromeWithChar('aaaaa', 'a', 2)\n  true\n  >>> isPalindromeWithChar('zbcd', 'z', 2)\n  false\n  */\nconst is", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return Math.pow(n, p - 1) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2p(3, 5)\n  3\n  >>> modp2p(1101, 101)\n  2\n  >>> modp2p(0, 101)\n  1\n  >>> modp2p(3, 11)\n  8\n  >>> modp2p(100, 101)\n  1\n  */\nconst modp2np = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np(3, 5)\n  3\n  >>> modp2np(1101, 101)\n  2\n  >>> modp2np(0, 101)\n  1\n  >>> modp2np(3, 11)\n  8\n  >>> modp2np(100, 101)\n  1\n  */\nconst modp2np2p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np2p(3, 5)\n  3\n  >>> modp2np2p(1101, 101)\n  2\n  >>> modp2np2p(0, 101)\n  1\n  >>> modp2np2p(3, 11)\n  8\n  >>> modp2np2p(100, 101)\n  1\n  */\nconst modp2np3p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np3p(3, 5)\n  3\n  >>> modp2np3p(1101, 101)\n  2\n  >>> modp2np3p(0, 101)\n  1\n  >>> modp2np3p(3, 11)\n  8\n  >>> modp2np3p(100, 101)\n  1\n  */\nconst modp2np4p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np4p(3, 5)\n  3\n  >>> modp2np4p(1101, 101)\n  2\n  >>> modp2np4p(0, 101)\n  1\n  >>> modp2np4p(3, 11)\n  8\n  >>> modp2np4p(100, 101)\n  1\n  */\nconst modp2np5p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np5p(3, 5)\n  3\n  >>> modp2np5p(1101, 101)\n  2\n  >>> modp2np5p(0, 101)\n  1\n  >>> modp2np5p(3, 11)\n  8\n  >>> modp2np5p(100, 101)\n  1\n  */\nconst modp2np6p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np6p(3, 5)\n  3\n  >>> modp2np6p(1101, 101)\n  2\n  >>> modp2np6p(0, 101)\n  1\n  >>> modp2np6p(3, 11)\n  8\n  >>> modp2np6p(100, 101)\n  1\n  */\nconst modp2np7p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np7p(3, 5)\n  3\n  >>> modp2np7p(1101, 101)\n  2\n  >>> modp2np7p(0, 101)\n  1\n  >>> modp2np7p(3, 11)\n  8\n  >>> modp2np7p(100, 101)\n  1\n  */\nconst modp2np8p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np8p(3, 5)\n  3\n  >>> modp2np8p(1101, 101)\n  2\n  >>> modp2np8p(0, 101)\n  1\n  >>> modp2np8p(3, 11)\n  8\n  >>> modp2np8p(100, 101)\n  1\n  */\nconst modp2np9p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np9p(3, 5)\n  3\n  >>> modp2np9p(1101, 101)\n  2\n  >>> modp2np9p(0, 101)\n  1\n  >>> modp2np9p(3, 11)\n  8\n  >>> modp2np9p(100, 101)\n  1\n  */\nconst modp2np10p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np10p(3, 5)\n  3\n  >>> modp2np10p(1101, 101)\n  2\n  >>> modp2np10p(0, 101)\n  1\n  >>> modp2np10p(3, 11)\n  8\n  >>> modp2np10p(100, 101)\n  1\n  */\nconst modp2np11p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('Arguments must be positive');\n  }\n  return modp(n, p) * modp(n, p - 1);\n};\n\n/*\n  >>> modp2np11p(3, 5)\n  3\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = /*#__PURE__*/ _curry2((n, xs) => {\n  return slice(0, n < 0? Infinity : n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.drop, R.head, R.take\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.takeLast(3, 'ramda');               //=> 'ra'\n */\nconst takeLast = /*#__PURE__*/ _curry2((n, xs) => {\n  return drop(n >= 0? xs.length - n : 0, xs);\n});\n\n/**\n * Returns a new list containing the first `n` elements of the given list\n * in reverse order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.takeLastIndex(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLastIndex(2, 'ramda');               //=> 'ra'\n */\nconst takeLastIndex = /*#__PURE__*/ _curry2(n => slice(0, n, null));\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nconst lt = /*#__PURE__*/ _curry2(function lt(a, b) {\n  return a < b;\n});\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nconst lte = /*#__PURE__*/ _curry2(function lte(a, b) {\n  return a <= b;\n});\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nconst and = /*#__PURE__*/ _curry2(function and(a, b) {\n  return a && b;\n});\n\n/**\n * Returns `true` if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {Any} a\n * @param {Any} b\n * @return {Boolean}\n * @see R.not, R.and\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nconst or = /*#__PURE__*/ _curry2(function or(a, b) {\n  return a || b;\n});\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nconst set = /*#__PURE__*/ _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy**", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_decode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeDecodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeConsonants is a function that take s str ing and returns string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zcd'\n  */\nconst removeConsonants = (text) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (consonants.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that take s str ing and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that take s str ing and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuations = ['.', ',', '!', '?'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (punctuations.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold2([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold2([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold2([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold2([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold2([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold2([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold3([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold3([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold3([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold3([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold3([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold4([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold4([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold4([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold4([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold4([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re between threshold t and threshold t+delta.\n  >>> betweenThreshold7([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold5([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold5([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold5([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold5([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-3)\n  3\n  >>> cbrt(3)\n  1\n  */\nconst cbrt = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -2\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the round of number x\n  >>> round(3.5)\n  4\n  >>> round(3.8)\n  4\n  >>> round(3.1)\n  4\n  >>> round(2.5)\n  3\n  >>> round(2.8)\n  3\n  >>> round(2.1)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(2.5)\n  2\n  >>> trunc(2.8)\n  2\n  >>> trunc(2.1)\n  2\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(3.5)\n  1.2527629684956176\n  >>> log(3.8)\n  1.6931471805599453\n  >>> log(3.1)\n  1.6094379124341003\n  >>> log(2.5)\n  1.3862943611198906\n  >>> log(2.8)\n  1.3862943611198906\n  >>> log(2.1)\n  1.3862943611198906\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the logarithm of number x in base y\n  >>> logBase(3.5, 2)\n  1.2527629684956176\n  >>> logBase(3.8, 2)\n  1.6931471805599453\n  >>> logBase(3.1, 2)\n  1.6094379124341003\n  >>> logBase(2.5, 2)\n  1.3862943611198906\n  >>> logBase(2.8, 2)\n  1.3862943611198906\n  >>> logBase(2.1, 2)\n  1.3862943611198906\n  */\nconst logBase = (x, base) => {\n  return Math.log(x) / Math.log(base);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(3.5)\n  1.2527629684956176\n  >>> log2(3.8)\n  1.6931471805599453\n  >>> log2(3.1)\n  1.6094379124341003\n  >>> log2(2.5)\n  1.3862943611198906\n  >>> log2(2.8)\n  1.3862943611198906\n  >>> log2(2.1)\n  1.3862943611198906\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the logarithm of number x in base y\n  >>> log2Base(3.5, 2)\n  1.2527629684956176\n  >>> log2Base(3.8, 2)\n  1.6931471805599453\n  >>> log2Base(3.1, 2)\n  1.6094379124341003\n  >>> log2Base(2.5, 2)\n  1.3862943611198906\n  >>> log2Base(2.8, 2)\n  1.3862943611198906\n  >>> log2Base(2.1, 2)\n  1.3862943611198906\n  */\nconst log2Base = (x, base) => {\n  return Math.log(x) / Math.log(base) / Math.log(2);\n};\n\n/*Get the square root of number x\n  >>> sqrt2(3)\n  1.4142135623730951\n  >>> sqrt2(3.5)\n  1.4142135623730951\n  >>> sqrt2(3.8)\n  1.7320508075688772\n  >>> sqrt2(3.1)\n  1.7320508075688772\n  >>> sqrt2(2.5)\n  1.4142135623730951\n  >>> sqrt2(2.8)\n  1.7320508075688772\n  >>> sqrt2(2.1)\n  1.7320508075688772\n  */\nconst sqrt2 = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt2(3)\n  1\n  >>> cbrt2(3.5)\n  1\n  >>> cbrt2(3.8)\n  2\n  >>> cbrt2(3.1)\n  2\n  >>> cbrt2(2.5)\n  1\n  >>> cbrt2(2.8)\n  2\n  >>> cbrt2(2.1)\n  2\n  */\nconst cbrt2 = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil2(3)\n  3\n  >>> ceil2(3.5)\n  3\n  >>> ceil2(3.8)\n  4\n  >>> ceil2(3.1)\n  4\n  >>> ceil2(2.5)\n  3\n  >>> ceil2(2.8)\n  3\n  >>> ceil2(2.1)\n  3\n  */\nconst ceil2 = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor2(3)\n  3\n  >>> floor2(3.5)\n  3\n  >>> floor2(3.8)\n  3\n  >>> floor2(3.1)\n  3\n  >>> floor2(2.5)\n  2\n  >>> floor2(2.8)\n  2\n  >>> floor2(2.1)\n  2\n  */\nconst floor2 = x => {\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* \n  Given a string, return an array of all words in the string that are separated by spaces. \n\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> separateWords(\"the quick brown fox jumps over the lazy dog\")\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically decreasing or increasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically decreasing or increasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically decreasing or increasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically decreasing or increasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_strict = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] < l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] < l[j];\n};\n\n/*Return true is list elements are monotonically decreasing or increasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monot", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> factorsLessThan(13195)\n  4\n  >>> factorsLessThan(2048)\n  2\n  */\nconst factorsLessThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> factorsGreaterThan(13195)\n  3\n  >>> factorsGreaterThan(2048)\n  2\n  */\nconst factorsGreaterThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than n.\n  >>> factorsLessThan(13195)\n  4\n  >>> factorsLessThan(2048)\n  2\n  */\nconst factorsLessThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than n.\n  >>> factorsGreaterThan(13195)\n  3\n  >>> factorsGreaterThan(2048)\n  2\n  */\nconst factorsGreaterThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> factorsLessThanOrEqual(13195)\n  4\n  >>> factorsLessThanOrEqual(2048)\n  2\n  */\nconst factorsLessThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> factorsGreaterThanOrEqual(13195)\n  3\n  >>> factorsGreaterThanOrEqual(2048)\n  2\n  */\nconst factorsGreaterThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than n.\n  >>> factorsLessThan(13195)\n  4\n  >>> factorsLessThan(2048)\n  2\n  */\nconst factorsLessThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than n.\n  >>> factorsGreaterThan(13195)\n  3\n  >>> factorsGreaterThan(2048)\n  2\n  */\nconst factorsGreaterThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> factorsLessThanOrEqual(13195)\n  4\n  >>> factorsLessThanOrEqual(2048)\n  2\n  */\nconst factorsLessThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> factorsGreaterThanOrEqual(13195)\n  3\n  >>> factorsGreaterThanOrEqual(2048)\n  2\n  */\nconst factorsGreaterThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than n.\n  >>> factorsLessThan(13195)\n  4\n  >>> factorsLessThan(2048)\n  2\n  */\nconst factorsLessThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than n.\n  >>> factorsGreaterThan(13195)\n  3\n  >>> factorsGreaterThan(2048)\n  2\n  */\nconst factorsGreaterThan = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> factorsLessThanOrEqual(13195)\n  4\n  >>> factorsLessThanOrEqual(2048)\n  2\n  */\nconst factorsLessThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> factorsGreaterThanOrEqual(13195)\n  3\n  >>> factorsGreaterThanOrEqual(2048)\n  2\n  */\nconst factorsGreaterThanOrEqual = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      count = count + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of factors of n that are less than n.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const max_depth = Math.max.apply(null, groups.map(g => g.length));\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).map(g => g.length).indexOf(max_depth));\n};\n\n/**\n * Parses a string and returns a list of all possible combinations of its characters, e.g.\n * 'abc' -> ['a', 'ab', 'abc', 'b', 'bc', 'c', 'ca', 'cb', 'cc']\n *\n * If a string is empty, it returns an empty list.\n *\n * If a string contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and is empty, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains only a single character, it returns an empty list.\n *\n * If a string contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters and contains multiple characters, it returns all possible combinations of its characters.\n *\n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const re = new RegExp(`\\\\(${brackets}\\\\)`, 'g');\n  return brackets.replace(re, '').length % 2 === 0;\n};\n\n/* \n  Given a string, returns true if it contains only letters and \n  spaces. \n  \n  >>> isLettersOnly(\"hello\")\n  true\n  >>> isLettersOnly(\"hello   \")\n  false\n  >>> isLettersOnly(\"hello   world\")\n  false\n  */\nconst isLettersOnly = (str) => {\n  return /^[a-z ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes. \n  \n  >>> isLettersDashOnly(\"hello\")\n  true\n  >>> isLettersDashOnly(\"hello   \")\n  false\n  >>> isLettersDashOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers. \n  \n  >>> isLettersDashNumOnly(\"hello\")\n  true\n  >>> isLettersDashNumOnly(\"hello   \")\n  false\n  >>> isLettersDashNumOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces. \n  \n  >>> isLettersDashNumSpacesOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes. \n  \n  >>> isLettersDashNumSpacesDashOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers. \n  \n  >>> isLettersDashNumSpacesDashNumOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashNumOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashNumOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashNumOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers, and spaces. \n  \n  >>> isLettersDashNumSpacesDashNumSpacesOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashNumSpacesOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashNumSpacesOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashNumSpacesOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9 ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers, and spaces, and dashes. \n  \n  >>> isLettersDashNumSpacesDashNumSpacesDashOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashNumSpacesDashOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashNumSpacesDashOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashNumSpacesDashOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9 ]+-[a-z ]+-[0-9 ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers, and spaces, and dashes, and numbers. \n  \n  >>> isLettersDashNumSpacesDashNumSpacesDashNumOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashNumSpacesDashNumOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashNumSpacesDashNumOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashNumSpacesDashNumOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers, and spaces, and dashes, and numbers, and spaces. \n  \n  >>> isLettersDashNumSpacesDashNumSpacesDashNumSpacesOnly(\"hello\")\n  true\n  >>> isLettersDashNumSpacesDashNumSpacesDashNumSpacesOnly(\"hello   \")\n  false\n  >>> isLettersDashNumSpacesDashNumSpacesDashNumSpacesOnly(\"hello   world\")\n  false\n  */\nconst isLettersDashNumSpacesDashNumSpacesDashNumSpacesOnly = (str) => {\n  return /^[a-z ]+-[a-z ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9 ]+-[a-z ]+-[0-9 ]+-[0-9 ]+$/.test(str);\n};\n\n/* \n  Given a string, returns true if it contains only letters, \n  spaces, and dashes, and numbers, and spaces, and dashes, and \n  numbers, and spaces, and dashes, and numbers, and spaces. \n  \n  >>> isLettersDashNumSpacesDashNumSpacesDashNumSpacesDashOnly(\"hello\")\n  true\n  >>> isLetters", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibbfib(0)  == 0 \n  fib i b(1) ==  0\n  fib ib(2) == 1  fibbfib(n) == fi bfi b(n-1) + fibbfi b(n-2) + fib ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibbfib(1)\n  0\n  >>> fibbfib(5)\n  4\n  >>> fibbfib(8)\n  24\n  */\nconst fibbfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibbfib(n-1) + fibbfib(n-2) + fibbfib(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz(5)\n  4\n  >>> fizzbuzz(8)\n  24\n  */\nconst fizzbuzz = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fizzbuzz(n-1) + fizzbuzz(n-2) + fizzbuzz(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz(5)\n  4\n  >>> fizzbuzz(8)\n  24\n  */\nconst fizzbuzz = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fizzbuzz(n-1) + fizzbuzz(n-2) + fizzbuzz(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz(5)\n  4\n  >>> fizzbuzz(8)\n  24\n  */\nconst fizzbuzz = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fizzbuzz(n-1) + fizzbuzz(n-2) + fizzbuzz(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz(5)\n  4\n  >>> fizzbuzz(8)\n  24\n  */\nconst fizzbuzz = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fizzbuzz(n-1) + fizzbuzz(n-2) + fizzbuzz(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz(5)\n  4\n  >>> fizzbuzz(8)\n  24\n  */\nconst fizzbuzz = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fizzbuzz(n-1) + fizzbuzz(n-2) + fizzbuzz(n-3);\n};\n\n/*The FizzBuzz number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fizzbuzz(0)  == 0 \n  fizz i b(1) ==  0\n  fizz ib(2) == 1  fizzbuzz(n) == fi zz bzz b(n-1) + fizzbu zz b(n-2) + fizz ib zz b(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fizzbuzz(1)\n  0\n  >>> fizzbuzz", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = '';\n  let n = x;\n  while (n > 0) {\n    s = String(n%10) + s;\n    n = Math.floor(n/10);\n  }\n  while (s.length < shift) {\n    s = ('0' + s);\n  }\n  return s;\n};\n\n/*\n Given a binary number represented as a string, return its decimal equivalent.\n >>> binaryToDecimal('1100')\n 11\n >>> binaryToDecimal('1111')\n 12\n >>> binaryToDecimal('1010')\n 10\n >>> binaryToDecimal('1011')\n 11\n >>> binaryToDecimal('1110')\n 12\n >>> binaryToDecimal('11111')\n 13\n >>> binaryToDecimal('10000')\n 100\n >>> binaryToDecimal('10001')\n 101\n >>> binaryToDecimal('11000')\n 11\n >>> binaryToDecimal('11001')\n 11\n >>> binaryToDecimal('10100')\n 100\n >>> binaryToDecimal('101001')\n 101\n >>> binaryToDecimal('101000')\n 100\n >>> binaryToDecimal('101001')\n 101\n >>> binaryToDecimal('1010010')\n 1010\n >>> binaryToDecimal('1010011')\n 1011\n >>> binaryToDecimal('10100100')\n 10010\n >>> binaryToDecimal('101001010')\n 10011\n >>> binaryToDecimal('101001011')\n 1010\n >>> binaryToDecimal('101001110')\n 1011\n >>> binaryToDecimal('101001111')\n 1011\n >>> binaryToDecimal('10101100')\n 1011\n >>> binaryToDecimal('101011001')\n 1011\n >>> binaryToDecimal('101011010')\n 1011\n >>> binaryToDecimal('101011110')\n 1011\n >>> binaryToDecimal('101011111')\n 1011\n >>> binaryToDecimal('1010011000')\n 10011\n >>> binaryToDecimal('1010011001')\n 10011\n >>> binaryToDecimal('1010011010')\n 10011\n >>> binaryToDecimal('1010011011')\n 10011\n >>> binaryToDecimal('1010011100')\n 10011\n >>> binaryToDecimal('10100111010')\n 10011\n >>> binaryToDecimal('10100111011')\n 10011\n >>> binaryToDecimal('10100111100')\n 10011\n >>> binaryToDecimal('10100111101')\n 10011\n >>> binaryToDecimal('10100111110')\n 10011\n >>> binaryToDecimal('10100111111')\n 10011\n >>> binaryToDecimal('1010100100')\n 1010\n >>> binaryToDecimal('1010100101')\n 1010\n >>> binaryToDecimal('1010100110')\n 1010\n >>> binaryToDecimal('1010100111')\n 1010\n >>> binaryToDecimal('101010100')\n 1010\n >>> binaryToDecimal('1010101001')\n 1010\n >>> binaryToDecimal('1010101000')\n 1010\n >>> binaryToDecimal('1010101001')\n 1010\n >>> binaryToDecimal('10101010010')\n 1010\n >>> binaryToDecimal('10101010011')\n 1010\n >>> binaryToDecimal('1010101011')\n 1010\n >>> binaryToDecimal('1010101101')\n 1010\n >>> binaryToDecimal('1010101011')\n 1010\n >>> binaryToDecimal('1010101100')\n 1010\n >>> binaryToDecimal('1010101101')\n 1010\n >>> binaryToDecimal('1010101100')\n 1010\n >>> binaryToDecimal('10101011001')\n 1010\n >>> binaryToDecimal('10101011000')\n 1010\n >>> binaryToDecimal('10101011001')\n 1010\n >>> binaryToDecimal('10101011000')\n 1010\n >>> binaryToDecimal('10101011001')\n 1010\n >>> binaryToDecimal('101010110010')\n 1010\n >>> binaryToDecimal('101010110011')\n 1010\n >>> binaryToDecimal('1010101100100')\n 1010\n >>> binaryToDecimal('1010101100101')\n 1010\n >>> binaryToDecimal('1010101100110')\n 1010\n >>> binaryToDecimal('1010101100111')\n 1010\n >>> binaryToDecimal('101010110100')\n 1010\n >>> binaryToDecimal('101010110101')\n 1010\n >>> binaryToDecimal('101010110110')\n 1010\n >>> binaryToDecimal('101010110111')\n 1010\n >>> binaryToDecimal('101010111000')\n 1010\n >>> binaryToDecimal('101010111001')\n 1010\n >>> binaryToDecimal('101010111010')\n 1010\n >>> binaryToDecimal('101010111011')\n 1010\n >>> binaryToDecimal('101010111100')\n 1010\n >>> binaryToDecimal('101010111101')\n 1010\n >>> binaryToDecimal('101010111110')\n 1010\n >>> binaryToDecimal('101010111111')\n 1010\n >>> binaryToDecimal('1011001100')\n 1011\n >>> binaryToDecimal('10110011001')\n 1011\n >>> binaryToDecimal('10110011000')\n 1011\n >>> binaryToDecimal('10110011001')\n 1011\n >>> binaryToDecimal('10110011000')\n 1011\n >>> binaryToDecimal('10110011001')\n 1011\n >>> binaryToDecimal('101100110010')\n 1011\n >>> binaryToDecimal('101100110011')\n 1011\n >>> binaryToDecimal('1011001100100')\n 1011\n >>> binaryToDecimal('1011001100101')\n 1011\n >>> binaryToDecimal('1011001100110')\n 1011\n >>> binaryToDecimal('1011001100111')\n 1011\n >>> binaryToDecimal('101100110100')\n 1011\n >>> binaryToDecimal('101100110101')\n 1011\n >>> binaryToDecimal('101100110110')\n 1011\n >>> binaryToDecimal('101100110111')\n 1011\n >>> binaryToDecimal('101100111000')\n 1011\n >>> binaryToDecimal('101100111001')\n 1011\n >>> binaryToDecimal('101100111010')\n 1011\n >>> binaryToDecimal('101100111011')\n 1011\n >>> binaryToDecimal('101100111100')\n 1011\n >>> binaryToDecimal('101100111101')\n ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the lower characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the digits only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digit", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n  let arr = [];\n  let arr1 = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];\n  let arr242 = [];\n  let arr243 = [];\n  let arr244 = [];\n  let arr245 = [];\n  let arr246 = [];\n  let arr247", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i];\n    if (!map.has(node)) {\n      map.set(node, i);\n    }\n  }\n  const result = [];\n  for (let [key, val] of map) {\n    if (val % 2 === 0) {\n      result.push(val);\n    }\n  }\n  return result;\n};\n\n/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck2 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i];\n    if (!map.has(node)) {\n      map.set(node, i);\n    }\n  }\n  const result = [];\n  for (let [key, val] of map) {\n    if (val % 2 === 0) {\n      result.push(val);\n    }\n  }\n  return result;\n};\n\n/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck3 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i];\n    if (!map.has(node)) {\n      map.set(node, i);\n    }\n  }\n  const result = [];\n  for (let [key, val] of map) {\n    if (val % 2 === 0) {\n      result.push(val);\n    }\n  }\n  return result;\n};\n\n/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck4 = (arr) => {\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i];\n    if (!map.has(node)) {\n      map.set(node, i);\n    }\n  }\n  const result = [];\n  for (let [key, val] of map) {\n    if (val % 2 === 0) {\n      result.push(val);\n    }\n  }\n  return result;\n};\n\n/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > 0? max : -1;\n};\n\n/*\n  You are given a list of integers. Return the number of times each integer appears in the list.\n  Example:\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 2]\n      countIn([1, 1, 2, 3, 4, 4, 5]) == [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only forones that do not ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const s = a + b + c\n  return s >= a * b * c? Math.round(s / (a * b * c)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const s = a + b + c + d\n  return s >= a * b * c * d? Math.round(s / (a * b * c * d)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const s = a + b + c + d + e\n  return s >= a * b * c * d * e? Math.round(s / (a * b * c * d * e)) : -1\n}\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly2 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly3 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly4 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly5 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly6 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly7 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly8 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly9 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly10 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly11 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly12 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly13 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly14 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly15 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly16 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly17 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly18 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly19 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = q[i]\n    const sum = (el * w).toFixed(0)\n    if (sum > maxSum) {\n      return false\n    }\n  }\n  return true\n}\n\nconst willItFly20 = (q, w) => {\n  const n = q.length\n  const maxWeight = w\n  const maxSum = n * w\n  for (let i = 0; i < n; i++) {\n    const el = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      min = Math.min(min, i - index);\n      index = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the largest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      max = Math.max(max, i - index);\n      index = i;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the smallest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      min = Math.min(min, i - index);\n      index = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the largest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      max = Math.max(max, i - index);\n      index = i;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the smallest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      min = Math.min(min, i - index);\n      index = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the largest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      max = Math.max(max, i - index);\n      index = i;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the smallest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      min = Math.min(min, i - index);\n      index = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the largest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      max = Math.max(max, i - index);\n      index = i;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the smallest number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      min = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const result = lst1.filter(x => lst2.indexOf(x) === -1);\n  return result;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times a character appears\n  in the string\n\n  Examples\n  countChar('hi') ➞ 2\n  countChar('hihi') ➞ 3\n  countChar('hihihi') ➞ 4\n  countChar('hihihihi') ➞ 5\n  countChar('hihihihihi') ➞ 6\n  countChar('hihihihihihi') ➞ 7\n  countChar('hihihihihihihi') ➞ 8\n  countChar('hihihihihihihihi') ➞ 9\n  countChar('hihihihihihihihihi') ➞ 10\n  countChar('hihihihihihihihihihi') ➞ 11\n  countChar('hihihihihihihihihihihi') ➞ 12\n  countChar('hihihihihihihihihihihi') ➞ 13\n  countChar('hihihihihihihihihihihihi') ➞ 14\n  countChar('hihihihihihihihihihihihi') ➞ 15\n  countChar('hihihihihihihihihihihihihi') ➞ 16\n  countChar('hihihihihihihihihihihihihi') ➞ 17\n  countChar('hihihihihihihihihihihihihihi') ➞ 18\n  countChar('hihihihihihihihihihihihihihihi') ➞ 19\n  countChar('hihihihihihihihihihihihihihihi') ➞ 20\n  countChar('hihihihihihihihihihihihihihihi') ➞ 21\n  countChar('hihihihihihihihihihihihihihihihi') ➞ 22\n  countChar('hihihihihihihihihihihihihihihihihi') ➞ 23\n  countChar('hihihihihihihihihihihihihihihihihihi') ➞ 24\n  countChar('hihihihihihihihihihihihihihihihihihi') ➞ 25\n  countChar('hihihihihihihihihihihihihihihihihihihi') ➞ 26\n  countChar('hihihihihihihihihihihihihihihihihihihi') ➞ 27\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 28\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 29\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 30\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 31\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 32\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 33\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 34\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 35\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 36\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 37\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 38\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 39\n  countChar('hihihihihihihihihihihihihihihihihihihihi') ➞ 40\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 41\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 42\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 43\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 44\n  countChar('hihihihihihihihihihihihihihihihihihihihihi') ➞ 45\n  countChar('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 46\n  countChar('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 47\n  countChar('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 48\n  countChar('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 49\n  countChar('hihihihihihi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiply", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that  retu rns true ifa number x is a simple power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 8 === 0) return false\n  if (a % 9 === 0) return false\n  if (a % 10 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 12 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 14 === 0) return false\n  if (a % 15 === 0) return false\n  if (a % 16 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 18 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 20 === 0) return false\n  if (a % 21 === 0) return false\n  if (a % 22 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 24 === 0) return false\n  if (a % 25 === 0) return false\n  if (a % 26 === 0) return false\n  if (a % 27 === 0) return false\n  if (a % 28 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 30 === 0) return false\n  if (a % 31 === 0) return false\n  if (a % 32 === 0) return false\n  if (a % 33 === 0) return false\n  if (a % 34 === 0) return false\n  if (a % 35 === 0) return false\n  if (a % 36 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 38 === 0) return false\n  if (a % 39 === 0) return false\n  if (a % 40 === 0) return false\n  if (a % 41 === 0) return false\n  if (a % 42 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 44 === 0) return false\n  if (a % 45 === 0) return false\n  if (a % 46 === 0) return false\n  if (a % 47 === 0) return false\n  if (a % 48 === 0) return false\n  if (a % 49 === 0) return false\n  if (a % 50 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 52 === 0) return false\n  if (a % 53 === 0) return false\n  if (a % 54 === 0) return false\n  if (a % 55 === 0) return false\n  if (a % 56 === 0) return false\n  if (a % 57 === 0) return false\n  if (a % 58 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 60 === 0) return false\n  if (a % 61 === 0) return false\n  if (a % 62 === 0) return false\n  if (a % 63 === 0) return false\n  if (a % 64 === 0) return false\n  if (a % 65 === 0) return false\n  if (a % 66 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 68 === 0) return false\n  if (a % 69 === 0) return false\n  if (a % 70 === 0) return false\n  if (a % 71 === 0) return false\n  if (a % 72 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 74 === 0) return false\n  if (a % 75 === 0) return false\n  if (a % 76 === 0) return false\n  if (a % 77 === 0) return false\n  if (a % 78 === 0) return false\n  if (a % 79 === 0) return false\n  if (a % 80 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 82 === 0) return false\n  if (a % 83 === 0) return false\n  if (a % 84 === 0) return false\n  if (a % 85 === 0) return false\n  if (a % 86 === 0) return false\n  if (a % 87 === 0) return false\n  if (a % 88 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 90 === 0) return false\n  if (a % 91 === 0) return false\n  if (a % 92 === 0) return false\n  if (a % 93 === 0) return false\n  if (a % 94 === 0) return false\n  if (a % 95 === 0) return false\n  if (a % 96 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 98 === 0) return false\n  if (a % 99 === 0) return false\n  if (a % 100 === 0) return false\n  if (a % 101 === 0) return false\n  if (a % 102 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 104 === 0) return false\n  if (a % 105 === 0) return false\n  if (a % 106 === 0) return false\n  if (a % 107 === 0) return false\n  if (a % 108 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 110 === 0) return false\n  if (a % 111 === 0) return false\n  if (a % 112 === 0) return false\n  if (a % 113 === 0) return false\n  if (a % 114 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 116 === 0) return false\n  if (a % 117 === 0) return false\n  if (a % 118 === 0) return false\n  if (a % 119 === 0) return false\n  if (a % 120 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 122 === 0) return false\n  if (a % 123 === 0) return false\n  if (a % 124 === 0) return false\n  if (a % 125 === 0) return false\n  if (a % 126 === 0) return false\n  if (a % 127 === 0) return false\n  if (a % 128 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 130 === 0) return false\n  if (a % 131 === 0) return false\n  if (a % 132 === 0) return false\n  if (a % 133 === 0) return false\n  if (a % 134 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 136 === 0) return false\n  if (a % 137 === 0) return false\n  if (a % 138 === 0) return false\n  if (a % 139 === 0) return false\n  if (a % 140 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 142 === 0) return false\n  if (a % 143 === 0) return false\n  if (a % 144 === 0) return false\n  if (a % 145 === 0) return false\n  if (a % 146 === 0) return false\n  if (a % 147 === 0) return false\n  if (a % 148 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 150 === 0) return false\n  if (a % 151 === 0) return false\n  if (a % 152 === 0) return false\n  if (a % 153 === 0) return false\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimalDigits = num.split(\"\");\n  let hexadecimalDigitsLength = hexadecimalDigits.length;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;\n  let hexadecimalDigitsLength = hexadecimalDigitsLength - 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal!== 0) {\n    binary = `${decimal % 2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (binary.charCodeAt(i) - 48) * Math.pow(2, i);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts binary to hexadecimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")   # returns \"1111\"\n  binaryToHexadecimal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = `${hexadecimal}${binary.charCodeAt(i).toString(16)}`;\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts hexadecimal to binary.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  hexadecimalToBinary(\"1111\")   # returns \"db1111db\"\n  hexadecimalToBinary(\"100000\")   # returns \"db100000db\"\n*/\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary = `${binary}${hexadecimal.charCodeAt(i).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts hexadecimal to decimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  hexadecimalToDecimal(\"1111\")   # returns 15\n  hexadecimalToDecimal(\"100000\")   # returns 32\n*/\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal = decimal + (hexadecimal.charCodeAt(i) - 48) * Math.pow(2, i);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(\"15\")   # returns \"db1111db\"\n  decimalToBinary(\"32\")   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal!== 0) {\n    binary = `${decimal % 2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts decimal to hexadecimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"1111\"\n  decimalToHexadecimal(\"32\")   # returns \"100000\"\n*/\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal!== 0) {\n    hexadecimal = `${hexadecimal}${decimal % 16}`;\n    decimal = Math.floor(decimal / 16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts hexadecimal to binary.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  hexadecimalToBinary(\"1111\")   # returns \"db1111db\"\n  hexadecimalToBinary(\"100000\")   # returns \"db100000db\"\n*/\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary = `${binary}${hexadecimal.charCodeAt(i).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts hexadecimal to decimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  hexadecimalToDecimal(\"1111\")   # returns 15\n  hexadecimalToDecimal(\"100000\")   # returns 32\n*/\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal = decimal + (hexadecimal.charCodeAt(i) - 48) * Math.pow(2, i);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts binary to decimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (binary.charCodeAt(i) - 48) * Math.pow(2, i);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts binary to hexadecimal.\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list containing only the even numbers in that list.\n  >>> evens([1, 2, 3, 4])\n  [2, 4]\n  */\nconst evens = (numbers) => {\n  return numbers.filter((num) => num % 2 === 0);\n};\n\n/* Given a list of integers, return a new list containing only the odd numbers in that list.\n  >>> odds([1, 2, 3, 4])\n  [1, 3]\n  */\nconst odds = (numbers) => {\n  return numbers.filter((num) => num % 2 === 1);\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur more than once in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2, 4]\n  */\nconst duplicates = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count > 1;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur less than or equal to once in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2, 4]\n  */\nconst duplicatesLessThanOrEqualToOne = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count <= 1;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly once in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyOne = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 1;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly twice in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyTwo = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 2;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly three times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyThree = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 3;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly four times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyFour = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 4;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly five times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyFive = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 5;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly six times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlySix = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 6;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly seven times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlySeven = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 7;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly eight times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyEight = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 8;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly nine times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyNine = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 9;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly ten times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyTen = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 10;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly eleven times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyEleven = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 11;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly twelve times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyTwelve = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 12;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly thirteen times in that list.\n  >>> duplicates([1, 2, 2, 3, 4, 4])\n  [2]\n  */\nconst duplicatesExactlyThirteen = (numbers) => {\n  return numbers.filter((num) => {\n    let count = 0;\n    numbers.forEach((num2) => {\n      if (num === num2) {\n        count++;\n      }\n    });\n    return count === 13;\n  });\n};\n\n/* Given a list of integers, return a new list containing only the numbers that occur exactly fourte", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s.split('').sort().join('')!== s) return false\n  return true\n}\n\n/*You are given a string s.\n  Your task  is t o check if the string is happy ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, value) => sum + value, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesDiff = gradesSum - gradesAverage;\n  const gradesDiffPercentage = gradesDiff / gradesAverage;\n  const gradesDiffPercentageArray = gradesDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageSum = gradesDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageAverage = gradesDiffPercentageSum / gradesDiffPercentageArray.length;\n  const gradesDiffPercentageDiff = gradesDiffPercentageSum - gradesDiffPercentageAverage;\n  const gradesDiffPercentageDiffPercentage = gradesDiffPercentageDiff / gradesAverage;\n  const gradesDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageSum = gradesDiffPercentageDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageAverage = gradesDiffPercentageDiffPercentageSum / gradesDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageSum - gradesDiffPercentageDiffPercentageAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentage = gradesDiffPercentageDiffPercentageDiff / gradesAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageSum = gradesDiffPercentageDiffPercentageDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageDiffPercentageAverage = gradesDiffPercentageDiffPercentageDiffPercentageSum / gradesDiffPercentageDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageDiffPercentageSum - gradesDiffPercentageDiffPercentageDiffPercentageAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentage = gradesDiffPercentageDiffPercentageDiffPercentageDiff / gradesAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageSum = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageAverage = gradesDiffPercentageDiffPercentageDiffPercentageDiffSum / gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageDiffPercentageDiffSum - gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff / gradesAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageSum = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageAverage = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum / gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum - gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff / gradesAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffAverage = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum / gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum - gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffArray = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffArray.reduce((sum, value) => sum + value, 0);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffAverage = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum / gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray.length;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum - gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffAverage;\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageArray = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentage.map((grade) => grade * 10);\n  const gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffSum = gradesDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiffPercentageDiff", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'e' && string[i]!== 'i' && string[i]!== 'o' && string[i]!== 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let palindrome = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[string.length - 1 - i]) {\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindro", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 1){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  2.\n */\ncon s t start sTwoEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 2){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  3.\n */\ncon s t start sThreeEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 3){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  4.\n */\ncon s t start sFourEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 4){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  5.\n */\ncon s t start sFiveEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 5){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  6.\n */\ncon s t start sSixEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 6){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  7.\n */\ncon s t start sSevenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 7){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  8.\n */\ncon s t start sEightEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 8){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  9.\n */\ncon s t start sNineEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 9){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  10.\n */\ncon s t start sTenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 10){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  11.\n */\ncon s t start sElevenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 11){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  12.\n */\ncon s t start sTwelveEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 12){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  13.\n */\ncon s t start sThirteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 13){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  14.\n */\ncon s t start sFourteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 14){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  15.\n */\ncon s t start sFifteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 15){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  16.\n */\ncon s t start sSixteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 16){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  17.\n */\ncon s t start sSeventeenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 17){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  18.\n */\ncon s t start sEighteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 18){\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  19.\n */\ncon s t start sNineteenEnds= (n) => {\n  let res = [];\n  for(let i = start; i <= n; i++){\n    if(i % 10 === 19){\n      res.push(i);\n    }\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return result;\n};\n\n/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < sum) {\n    result += \"0\";\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvens = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddsEvens = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddsOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvensEvens = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddsEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvensOddsEvens = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddsOddsOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvensEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddsEvensEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvensOddsEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddsOddsOddsOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addEvensEvensOddsEvens = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddsEvensEvensOdds = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'iHi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Wrdllo Hillo'\n  */\nconst shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'iHi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Wrdllo Hillo'\n  */\nconst shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescr = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  shuffleDesc('Hi') returns 'Hi'\n  shuffleDesc('hello') returns 'olleh'\n  shuffleDesc('Hello World!!!') returns 'Wrdllo Hillo'\n  */\nconst shuffleDescr = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffleDescr('Hi') returns 'Hi'\n  antiShuffleDescr('hello') returns 'olleh'\n  antiShuffleDescr('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescrs = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  shuffleDescr('Hi') returns 'Hi'\n  shuffleDescr('hello') returns 'olleh'\n  shuffleDescr('Hello World!!!') returns 'Wrdllo Hillo'\n  */\nconst shuffleDescrs = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffleDescrs('Hi') returns 'Hi'\n  antiShuffleDescrs('hello') returns 'olleh'\n  antiShuffleDescrs('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescrsss = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string  andreturns a string with all the chars arranged in descen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  shuffleDescrss('Hi') returns 'Hi'\n  shuffleDescrss('hello') returns 'olleh'\n  shuffleDescrss('Hello World!!!') returns 'Wrdllo Hillo'\n  */\nconst shuffleDescrsss = (s) => {\n  let newString = '';\n  for (let i = s.length - 1; i >= 0; i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((col, i) => {\n      if (col === x) {\n        res.push([i, row.length]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getCol = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((col, i) => {\n      if (col === x) {\n        res.push([i, row.length]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 3), (3, 2)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]\n  */\nconst getDiagonal = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((col, i) => {\n      if (col === x) {\n        res.push([i, row.length]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 3), (3, 2)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]\n  */\nconst getDiagonal = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((col, i) => {\n      if (col === x) {\n        res.push([i, row.length]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 3), (3, 2)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]\n  */\nconst getDiagonal = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((col, i) => {\n      if (col === x) {\n        res.push([i, row.length]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 3), (3, 2)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[i + 1];\n    }\n    array[0] = temp;\n  } else {\n    temp = array[0];\n    for (let i = 0; i < array.length; i++) {\n      array[i] = array[array.length - i - 1];\n    }\n    array[array.length - 1] = temp;\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n  let newAlphabet = []\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet.push(alphabet[alphabet.indexOf(alphabet[i]) + 2])\n  }\n  let newAlphabetString = newAlphabet.join('')\n  let newAlphabetArray = newAlphabetString.split('')\n  let newAlphabetArrayReverse = newAlphabetArray.reverse()\n  let newAlphabetArrayReverseString = newAlphabetArrayReverse.join('')\n  let newAlphabetArrayReverseArray = newAlphabetArrayReverseString.split('')\n  let newAlphabetArrayReverseArrayReverse = newAlphabetArrayReverseArray.reverse()\n  let newAlphabetArrayReverseArrayReverseString = newAlphabetArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseString.split('')\n  let newAlphabetArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArray.reverse()\n  let newAlphabetArrayReverseArrayReverseArrayReverseString = newAlphabetArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseString.split('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArray.reverse()\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseString = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArray.reverse()\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArray = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse.join('')\n  let newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse = newAlphabetArrayReverseArrayReverseArrayReverseArrayReverseArrayReverseArrayReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum > currentMax) {\n        currentMax = currentSum;\n      }\n      if (currentSum === currentMax) {\n        currentIndex++;\n      }\n    }\n    result.push(currentMax);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling minimum element found until given moment\n  in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min;\n  let currentMin;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum < currentMin) {\n        currentMin = currentSum;\n      }\n      if (currentSum === currentMin) {\n        currentIndex++;\n      }\n    }\n    result.push(currentMin);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling sum element found until given moment\n  in the seque nce.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling average element found until given moment\n  in the seque nce.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(currentSum / currentIndex);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling median element found until given moment\n  in the seque nce.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(currentSum / currentIndex);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling mode element found until given moment\n  in the seque nce.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode;\n  let currentMode;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    if (currentIndex === 0) {\n      mode = currentNumber;\n    } else {\n      mode = currentSum / currentIndex;\n    }\n    result.push(mode);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling standard deviation element found until given moment\n  in the seque nce.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(Math.sqrt(currentSum / currentIndex));\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling variance element found until given moment\n  in the seque nce.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(currentSum / currentIndex);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling sum square element found until given moment\n  in the seque nce.\n  >>> rollingSumSquare([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSumSquare = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = 0;\n    currentIndex = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      currentSum += numbers[j];\n      if (currentSum === sum) {\n        currentIndex++;\n      }\n    }\n    result.push(currentSum * currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, gener ate a  list of rolling average square element found until given moment\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(\" \").forEach((word) => {\n    if (word === \"I\") {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For ex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      newMessage = newMessage.replace('a', 'A');\n    }\n    if (message[i] === 'e') {\n      newMessage = newMessage.replace('e', 'E');\n    }\n    if (message[i] === 'i') {\n      newMessage = newMessage.replace('i', 'I');\n    }\n    if (message[i] === 'o') {\n      newMessage = newMessage.replace('o', 'O');\n    }\n    if (message[i] === 'u') {\n      newMessage = newMessage.replace('u', 'U');\n    }\n    if (message[i] === 'l') {\n      newMessage = newMessage.replace('l', 'L');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 't') {\n      newMessage = newMessage.replace('t', 'T');\n    }\n    if (message[i] === 'h') {\n      newMessage = newMessage.replace('h', 'H');\n    }\n    if (message[i] === 'k') {\n      newMessage = newMessage.replace('k', 'K');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] ==='m') {\n      newMessage = newMessage.replace('m', 'M');\n    }\n    if (message[i] === 'p') {\n      newMessage = newMessage.replace('p', 'P');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C');\n    }\n    if (message[i] === 'g') {\n      newMessage = newMessage.replace('g', 'G');\n    }\n    if (message[i] ==='s') {\n      newMessage = newMessage.replace('s', 'S');\n    }\n    if (message[i] === 'c') {\n      newMessage = newMessage.replace('c', 'C", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You have to find the largest prime factor of the given number.\n  You have to return the sum of the digits of prime factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if(dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if a ll ke ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the last n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumber(5) => [2,3]\n  middleNumber(11) => [2,3,5,7]\n  middleNumber(0) => []\n  middleNumber(20) => [2,3,5,7,11,13,17,19]\n  middleNumber(1) => []\n  middleNumber(18) => [2,3,5,7,11,13,17]\n  */\nconst middleNumber = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumberTowardsZero(5) => [2,3]\n  middleNumberTowardsZero(11) => [2,3,5,7]\n  middleNumberTowardsZero(0) => []\n  middleNumberTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  middleNumberTowardsZero(1) => []\n  middleNumberTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst middleNumberTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumberTowardsZeroTowardsNine(5) => [2,3]\n  middleNumberTowardsZeroTowardsNine(11) => [2,3,5,7]\n  middleNumberTowardsZeroTowardsNine(0) => []\n  middleNumberTowardsZeroTowardsNine(20) => [2,3,5,7,11,13,17,19]\n  middleNumberTowardsZeroTowardsNine(1) => []\n  middleNumberTowardsZeroTowardsNine(18) => [2,3,5,7,11,13,17]\n  */\nconst middleNumberTowardsZeroTowardsNine = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumberTowardsZeroTowardsNineTowardsFive(5) => [2,3]\n  middleNumberTowardsZeroTowardsNineTowardsFive(11) => [2,3,5,7]\n  middleNumberTowardsZeroTowardsNineTowardsFive(0) => []\n  middleNumberTowardsZeroTowardsNineTowardsFive(20) => [2,3,5,7,11,13,17,19]\n  middleNumberTowardsZeroTowardsNineTowardsFive(1) => []\n  middleNumberTowardsZeroTowardsNineTowardsFive(18) => [2,3,5,7,11,13,17]\n  */\nconst middleNumberTowardsZeroTowardsNineTowardsFive = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(5) => [2,3]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(11) => [2,3,5,7]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(0) => []\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(20) => [2,3,5,7,11,13,17,19]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(1) => []\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen(18) => [2,3,5,7,11,13,17]\n  */\nconst middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTen = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the middle n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTenTowardsTwenty(5) => [2,3]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTenTowardsTwenty(11) => [2,3,5,7]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTenTowardsTwenty(0) => []\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTenTowardsTwenty(20) => [2,3,5,7,11,13,17,19]\n  middleNumberTowardsZeroTowardsNineTowardsFiveTowardsTenTowardsTwenty(1) => []\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f upp ercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f lower case vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f lower case vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-vowels in even indices.\n  \n  For example:\n  countNonVowels('aBCdEf') returns 1\n  countNonVowels('abcdefg') returns 0\n  countNonVowels('dBBE') returns 0\n  */\nconst countNonVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-vowels in odd indices.\n  \n  For example:\n  countNonVowels('aBCdEf') returns 2\n  countNonVowels('abcdefg') returns 0\n  countNonVowels('dBBE') returns 0\n  */\nconst countNonVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-consonants in even indices.\n  \n  For example:\n  countNonConsonants('aBCdEf') returns 1\n  countNonConsonants('abcdefg') returns 0\n  countNonConsonants('dBBE') returns 0\n  */\nconst countNonConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-consonants in odd indices.\n  \n  For example:\n  countNonConsonants('aBCdEf') returns 2\n  countNonConsonants('abcdefg') returns 0\n  countNonConsonants('dBBE') returns 0\n  */\nconst countNonConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-vowels and non-consonants in even indices.\n  \n  For example:\n  countNonVowelsNonConsonants('aBCdEf') returns 1\n  countNonVowelsNonConsonants('abcdefg') returns 0\n  countNonVowelsNonConsonants('dBBE') returns 0\n  */\nconst countNonVowelsNonConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number o f non-vowels and non-consonants in odd indices.\n  \n  For example:\n  countNonVowelsNonConsonants('aBCdEf') returns 2\n  countNonVowelsNonCon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value);\n  const intValueAbs = Math.abs(intValue);\n  if (intValueAbs <= intValue) return intValue;\n  if (intValue < 0 && intValueAbs > intValue) return intValue + intValueAbs;\n  return intValue - intValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest float to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestFloat(\"10\")\n  10.0\n  >>> closestFloat(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15 and closestFloat(\"-14.5\") should return -15.\n  */\nconst closestFloat = (value) => {\n  const floatValue = parseFloat(value);\n  const floatValueAbs = Math.abs(floatValue);\n  if (floatValueAbs <= floatValue) return floatValue;\n  if (floatValue < 0 && floatValueAbs > floatValue) return floatValue + floatValueAbs;\n  return floatValue - floatValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const numberValue = Number(value);\n  const numberValueAbs = Math.abs(numberValue);\n  if (numberValueAbs <= numberValue) return numberValue;\n  if (numberValue < 0 && numberValueAbs > numberValue) return numberValue + numberValueAbs;\n  return numberValue - numberValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const numberValue = Number(value);\n  const numberValueAbs = Math.abs(numberValue);\n  if (numberValueAbs <= numberValue) return numberValue;\n  if (numberValue < 0 && numberValueAbs > numberValue) return numberValue + numberValueAbs;\n  return numberValue - numberValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const numberValue = Number(value);\n  const numberValueAbs = Math.abs(numberValue);\n  if (numberValueAbs <= numberValue) return numberValue;\n  if (numberValue < 0 && numberValueAbs > numberValue) return numberValue + numberValueAbs;\n  return numberValue - numberValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const numberValue = Number(value);\n  const numberValueAbs = Math.abs(numberValue);\n  if (numberValueAbs <= numberValue) return numberValue;\n  if (numberValue < 0 && numberValueAbs > numberValue) return numberValue + numberValueAbs;\n  return numberValue - numberValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const numberValue = Number(value);\n  const numberValueAbs = Math.abs(numberValue);\n  if (numberValueAbs <= numberValue) return numberValue;\n  if (numberValue < 0 && numberValueAbs > numberValue) return numberValue + numberValueAbs;\n  return numberValue - numberValueAbs;\n};\n\n/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest number to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
