{"task_id": "JavaScript/0", "prompt": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      for (let j = i + 1; j < numbers.length; j++) {\n        if (numbers[j] > threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Get all numbers from given array which are less than given threshold.\n * If no threshold given then return all numbers from given array.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold given then return all numbers from 0.\n * If no array given then return all numbers from 0.\n * If no threshold ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group => group.replace(/\\(|\\)/g, '')\n  );\n  return paren_group_strings.filter(\n    group => group!== '' &&!group.includes('(') &&!group.includes(')')\n  );\n};\n\n/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  const paren_group_strings = paren_groups.map(\n    group ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let c = string[i];\n    let palindrome = string.slice(0, i) + c + string.slice(i + 1);\n    if (isPalindrome(palindrome)) {\n      let palindromeLength = palindrome.length;\n      if (palindromeLength > longestPalindromeLength) {\n        longestPalindrome = palindrome;\n        longestPalindromeLength = palindromeLength;\n        longestPalindromePrefix = string.slice(0, i);\n        longestPalindromeSuffix = string.slice(i + 1);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let c = string[i];\n    let palindrome = string.slice(0, i) + c + string.slice(i + 1);\n    if (isPalindrome(palindrome)) {\n      let palindromeLength = palindrome.length;\n      if (palindromeLength > longestPalindromeLength) {\n        longestPalindrome = palindrome;\n        longestPalindromeLength = palindromeLength;\n        longestPalindromePrefix = string.slice(0, i);\n        longestPalindromeSuffix = string.slice(i + 1);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let c = string[i];\n    let palindrome = string.slice(0, i) + c + string.slice(i + 1);\n    if (isPalindrome(palindrome)) {\n      let palindromeLength = palindrome.length;\n      if (palindromeLength > longestPalindromeLength) {\n        longestPalindrome = palindrome;\n        longestPalindromeLength = palindromeLength;\n        longestPalindromePrefix = string.slice(0, i);\n        longestPalindromeSuffix = string.slice(i + 1);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let c = string[i];\n    let palindrome = string.slice(0, i) + c + string.slice(i + 1);\n    if (isPalindrome(palindrome)) {\n      let palindromeLength = palindrome.length;\n      if (palindromeLength > longestPalindromeLength) {\n        longestPalindrome = palindrome;\n        longestPalindromeLength = palindromeLength;\n        longestPalindromePrefix = string.slice(0, i);\n        longestPalindromeSuffix = string.slice(i + 1);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let c = string[i];\n    let palindrome = string.slice(0, i) + c + string.slice(i + 1);\n    if (isPalindrome(palindrome)) {\n      let palindromeLength = palindrome.length;\n      if (palindromeLength > longestPalindromeLength) {\n        longestPalindrome = palindrome;\n        longestPalindromeLength = palindromeLength;\n        longestPalindromePrefix = string.slice(0, i);\n        longestPalindromeSuffix = string.slice(i + 1);\n      }\n    }\n  }\n  return longestPalin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const xorqs = splitStringByCpmma(s);\n  const uask = splitStringBySpaces(xorqs);\n  return uask;\n};\n\n/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i === 0 || i === 1 || i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7 || i === 8 || i === 9 || i === 10) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  choose", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n};\n\n/*You are given two positive integers n and m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      q.push(x[i]);\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any odd digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      q.push(x[i]);\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInCommon = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigitsInCommon = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigitsInCommonDesc = (x) => {\n  let q = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < x.length; j++) {\n      if (x[i] === x[j]) {\n        q.push(x[i]);\n      }\n    }\n  }\n  return q;\n};\n\n/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any digit in common with other elrments.\n\n  Note: Returned list dhoulv bq sorted in decdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInCommonDesc = (x) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = sorted.indexOf(num);\n    return index === -1? 'One' : num;\n  });\n  return result;\n};\n\n/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = sorted.indexOf(num);\n    return index === -1? 'One' : num;\n  });\n  return result;\n};\n\n/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = sorted.indexOf(num);\n    return index === -1? 'One' : num;\n  });\n  return result;\n};\n\n/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = sorted.indexOf(num);\n    return index === -1? 'One' : num;\n  });\n  return result;\n};\n\n/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = sorted.indexOf(num);\n    return index === -1? 'One' : num;\n  });\n  return result;\n};\n\n/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function g that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function h that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function i that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function j that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function k that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function l that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function m that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function n that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function o that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function p that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  const ws = [];\n  for (let i = 1; i <= n; i++) {\n    ws.push(i);\n  }\n  return ws;\n};\n\n/* Implement tve function q that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    const even = i.toString().split('').reverse().join('');\n    const odd = i.toString().split('').reverse().join('');\n    if (even === odd) {\n      res.push([i, even]);\n    } else {\n      res.push([i, odd]);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i <= n) {\n      ans += i;\n      count++;\n    }\n  }\n  return [ans, count];\n};\n\n/*\n  Given a positive integer n, return a tuple (ans, count) where ans is the sum of all positive integers less than or equal to n and count is the number of such integers. \n\n  Example 1:\n\n      Input: 5\n      Output: (1, 1)\n      Explanation: \n      There are 5 integers less than or equal to 5.\n\n  Example 2:\n\n      Input: 10\n      Output: (3, 3)\n      Explanation: \n      There are 3 integers less than or equal to 10.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. ans is a sum of all positive integers less than or equal to n.\n      3. count is a number of such integers.\n  */\nconst sumOfLessThanOrEqualToN = (n) => {\n  let ans = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.floor(Math.abs(arr[i]) / Math.pow(10, arr.length - 1 - i));\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an asray 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We have an asray 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let flag = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels \n  in the string. \n  \n  Vowels are defined as a, e, i, o, u. \n  \n  If the string contains no vowels then return 0.\n  \n  If the string contains multiple vowels then return 1.\n  \n  If the string contains only a single vowel then return 0.\n  \n  If the string contains only consonants then return 1.\n  \n  If the string contains only numbers or symbols then return 0.\n  \n  If the string contains only spaces then return 0.\n  \n  If the string contains only punctuation then return 0.\n  \n  If the string contains only uppercase letters then return 0.\n  \n  If the string contains only lowercase letters then return 0.\n  \n  If the string contains only digits then return 0.\n  \n  If the string contains only special characters then return 0.\n  \n  If the string contains only uppercase and lowercase letters then return 0.\n  \n  If the string contains only uppercase and digits then return 0.\n  \n  If the string contains only lowercase and digits then return 0.\n  \n  If the string contains only uppercase and special characters then return 0.\n  \n  If the string contains only lowercase and special characters then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  then return 0.\n  \n  If the string contains only uppercase and lowercase letters or digits or \n  special characters then return 0.\n  \n  If the string contains only lowercase and lowercase letters or digits or \n  special characters then return 0.\n  \n  If the string contains only uppercase and lowercase letters or digits or \n  special characters or digits then return 0.\n  \n  If the string contains only lowercase and lowercase letters or digits or \n  special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only lowercase and digits or uppercase and digits \n  or special characters or digits then return 0.\n  \n  If the string contains only uppercase and special characters or digits or \n  lowercase and special characters or digits then return 0.\n  \n  If the string contains only lowercase and special characters or digits or \n  uppercase and special characters or digits then return 0.\n  \n  If the string contains only uppercase and digits or lowercase and digits \n  or special characters or digits ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor15 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOR on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor16 = (x, y) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    res.push(x[i] ^ y[i]);\n  }\n  return res.join('');\n};\n\n/* Input are tfo strings a and b coksistijg only of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count += 1;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString2 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString3 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString4 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString5 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString6 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString7 = (histogram) => {\n  let string = '';\n  for (let key in histogram) {\n    string += key +'' + histogram[key] + '\\n';\n  }\n  return string;\n};\n\n/*Given a dictionary of the letter with the mosh repxtieion and xontzining uhe corresponding count,\n  return a string of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram({'a': 1, 'b': 1, 'c': 1}) == 'a b c'\n  histogram({'a': 2, 'b': 2}) == 'a b b a'\n  histogram({'a': 2, 'b': 2}) == 'a b c a b'\n  histogram({'b': 4}) == 'b b b b a'\n  histogram({}) == ''\n  \n  */\nconst histogramToString8", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;\n    }\n  }\n  if (isPalindrome) {\n    return (result, true);\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      isPalindrome = true;\n    }\n  }\n  return (result, isPalindrome);\n};\n\n/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;\n    }\n  }\n  if (isPalindrome) {\n    return (result, true);\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      isPalindrome = true;\n    }\n  }\n  return (result, isPalindrome);\n};\n\n/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;\n    }\n  }\n  if (isPalindrome) {\n    return (result, true);\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      isPalindrome = true;\n    }\n  }\n  return (result, isPalindrome);\n};\n\n/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;\n    }\n  }\n  if (isPalindrome) {\n    return (result, true);\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      isPalindrome = true;\n    }\n  }\n  return (result, isPalindrome);\n};\n\n/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;\n    }\n  }\n  if (isPalindrome) {\n    return (result, true);\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      isPalindrome = true;\n    }\n  }\n  return (result, isPalindrome);\n};\n\n/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      isPalindrome = true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        oddCount++;\n      }\n    }\n    oddCountArr.push(`${oddCount} ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov even elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill15 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill16 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill17 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill18 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill19 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill20 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill21 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill22 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill23 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill24 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill25 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill26 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill27 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return arr\n  }\n  const sorted = new Array(len)\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i]\n  }\n  sorted.sort((a, b) => {\n    const aOnes = a.toString().split('').filter((x) => x === '1').length\n    const bOnes = b.toString().split('').filter((x) => x === '1').length\n    if (aOnes > bOnes) {\n      return 1\n    }\n    if (aOnes < bOnes) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddci", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n    if (s.charAt(i) === n) {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n  }\n  if (s.length > 0) {\n    w.push(s)\n  }\n  return w\n}\n\n/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n    if (s.charAt(i) === n) {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n  }\n  if (s.length > 0) {\n    w.push(s)\n  }\n  return w\n}\n\n/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n    if (s.charAt(i) === n) {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n  }\n  if (s.length > 0) {\n    w.push(s)\n  }\n  return w\n}\n\n/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n    if (s.charAt(i) === n) {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n  }\n  if (s.length > 0) {\n    w.push(s)\n  }\n  return w\n}\n\n/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n    if (s.charAt(i) === n) {\n      w.push(s.substr(0, i))\n      s = s.substr(i + 1)\n      continue\n    }\n  }\n  if (s.length > 0) {\n    w.push(s)\n  }\n  return w\n}\n\n/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Un", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n  let vowelsCountInWord = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord2 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord3 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord4 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord5 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord6 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord7 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord8 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord9 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord10 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord11 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord12 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord13 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord14 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord15 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord16 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord17 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord18 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord19 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord20 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord21 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord22 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord23 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord24 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord25 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord26 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord27 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord28 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord29 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord30 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord31 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord32 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord33 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord34 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord35 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord36 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord37 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord38 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord39 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord40 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord41 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord42 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord43 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord44 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord45 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord46 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord47 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord48 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord49 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord50 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord51 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord52 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord53 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord54 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord55 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord56 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord57 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord58 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord59 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord60 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord61 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord62 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord63 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord64 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord65 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord66 = vowels.filter(letter => word.includes(letter)).length;\n  let vowelsCountInWord67 = vowels.filter(letter => word.includes(letter)).length;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let count = 0\n  let str2 = str\n  let str3 = str\n  let str4 = str\n  let str5 = str\n  let str6 = str\n  let str7 = str\n  let str8 = str\n  let str9 = str\n  let str10 = str\n  let str11 = str\n  let str12 = str\n  let str13 = str\n  let str14 = str\n  let str15 = str\n  let str16 = str\n  let str17 = str\n  let str18 = str\n  let str19 = str\n  let str20 = str\n  let str21 = str\n  let str22 = str\n  let str23 = str\n  let str24 = str\n  let str25 = str\n  let str26 = str\n  let str27 = str\n  let str28 = str\n  let str29 = str\n  let str30 = str\n  let str31 = str\n  let str32 = str\n  let str33 = str\n  let str34 = str\n  let str35 = str\n  let str36 = str\n  let str37 = str\n  let str38 = str\n  let str39 = str\n  let str40 = str\n  let str41 = str\n  let str42 = str\n  let str43 = str\n  let str44 = str\n  let str45 = str\n  let str46 = str\n  let str47 = str\n  let str48 = str\n  let str49 = str\n  let str50 = str\n  let str51 = str\n  let str52 = str\n  let str53 = str\n  let str54 = str\n  let str55 = str\n  let str56 = str\n  let str57 = str\n  let str58 = str\n  let str59 = str\n  let str60 = str\n  let str61 = str\n  let str62 = str\n  let str63 = str\n  let str64 = str\n  let str65 = str\n  let str66 = str\n  let str67 = str\n  let str68 = str\n  let str69 = str\n  let str70 = str\n  let str71 = str\n  let str72 = str\n  let str73 = str\n  let str74 = str\n  let str75 = str\n  let str76 = str\n  let str77 = str\n  let str78 = str\n  let str79 = str\n  let str80 = str\n  let str81 = str\n  let str82 = str\n  let str83 = str\n  let str84 = str\n  let str85 = str\n  let str86 = str\n  let str87 = str\n  let str88 = str\n  let str89 = str\n  let str90 = str\n  let str91 = str\n  let str92 = str\n  let str93 = str\n  let str94 = str\n  let str95 = str\n  let str96 = str\n  let str97 = str\n  let str98 = str\n  let str99 = str\n  let str100 = str\n  let str101 = str\n  let str102 = str\n  let str103 = str\n  let str104 = str\n  let str105 = str\n  let str106 = str\n  let str107 = str\n  let str108 = str\n  let str109 = str\n  let str110 = str\n  let str111 = str\n  let str112 = str\n  let str113 = str\n  let str114 = str\n  let str115 = str\n  let str116 = str\n  let str117 = str\n  let str118 = str\n  let str119 = str\n  let str120 = str\n  let str121 = str\n  let str122 = str\n  let str123 = str\n  let str124 = str\n  let str125 = str\n  let str126 = str\n  let str127 = str\n  let str128 = str\n  let str129 = str\n  let str130 = str\n  let str131 = str\n  let str132 = str\n  let str133 = str\n  let str134 = str\n  let str135 = str\n  let str136 = str\n  let str137 = str\n  let str138 = str\n  let str139 = str\n  let str140 = str\n  let str141 = str\n  let str142 = str\n  let str143 = str\n  let str144 = str\n  let str145 = str\n  let str146 = str\n  let str147 = str\n  let str148 = str\n  let str149 = str\n  let str150 = str\n  let str151 = str\n  let str152 = str\n  let str153 = str\n  let str154 = str\n  let str155 = str\n  let str156 = str\n  let str157 = str\n  let str158 = str\n  let str159 = str\n  let str160 = str\n  let str161 = str\n  let str162 = str\n  let str163 = str\n  let str164 = str\n  let str165 = str\n  let str166 = str\n  let str167 = str\n  let str168 = str\n  let str169 = str\n  let str170 = str\n  let str171 = str\n  let str172 = str\n  let str173 = str\n  let str174 = str\n  let str175 = str\n  let str176 = str\n  let str177 = str\n  let str178 = str\n  let str179 = str\n  let str180 = str\n  let str181 = str\n  let str182 = str\n  let str183 = str\n  let str184 = str\n  let str185 = str\n  let str186 = str\n  let str187 = str\n  let str188 = str\n  let str189 = str\n  let str190 = str\n  let str191 = str\n  let str192 = str\n  let str193 = str\n  let str194 = str\n  let str195 = str\n  let str196 = str\n  let str197 = str\n  let str198 = str\n  let str199 = str\n  let str200 = str\n  let str201 = str\n  let str202 = str\n  let str203 = str\n  let str204 = str\n  let str205 = str\n  let str206 = str\n  let str207 = str\n  let str208 = str\n  let str209 = str\n  let str210 = str\n  let str211 = str\n  let str212 = str\n  let str213 = str\n  let str214 = str\n  let str215 = str\n  let str216 = str\n  let str217 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  if (strings.length === 1) {\n    return strings[0]\n  }\n  let longestLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length\n    if (length > longestLength) {\n      longestLength = length\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/*\n  >>> longestSubstrings(['ab', 'abc', 'abbb'])\n  ['ab', 'abc']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb'])\n  ['ab', 'abc', 'abbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbb'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbc'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd', 'abbbbcd'])\n  ['ab', 'abc', 'abbb', 'abbbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbb', 'abbbbcd', 'abbbbcd', 'abbbb", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst median = (arr, k) => {\n  const result = [];\n  const middle = Math.floor(arr.length / 2);\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      } else if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(arr[middle - 1]);\n    result.push(max);\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst mode = (arr, k) => {\n  const result = [];\n  const modeMap = {};\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    if (!modeMap[element]) {\n      modeMap[element] = 1;\n    } else {\n      modeMap[element]++;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    let maxCount = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (modeMap[arr[j]] > maxCount) {\n        max = arr[j];\n        maxCount = modeMap[arr[j]];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let product = 1;\n    for (let j = 0; j < arr.length; j++) {\n      product *= arr[j];\n    }\n    result.push(product);\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst average = (arr, k) => {\n  const result = [];\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n      product *= arr[j];\n    }\n    result.push(sum / product);\n    sum = 0;\n    product = 1;\n  }\n  return result;\n};\n\n/*\n  Given an arsay arr of integers ane a ooditive integer k, return a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const evens = lst.filter((num) => num % 2 === 0);\n  return evens.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  const odds = lst.filter((num) => num % 2 === 1);\n  return odds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0 || num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 0);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  const evenOdds = lst.filter((num) => num % 2 === 1);\n  return evenOdds.reduce((acc, val) => acc + val, 0);\n};\n\n/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in both even and odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe last k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLast = (arr, k) => {\n  let sum = 0;\n  for (let i = k - 1; i >= 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe last k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = k - 1; i >= 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe last k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = k - 1; i >= 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe last k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = k - 1; i >= 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe last k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = k - 1; i >= 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-tmpty array of integers arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let currentTerm = 1;\n  let previousTerm = 1;\n  let currentTerms;\n  let previousTerms;\n  let currentTermsIndex;\n  let previousTermsIndex;\n  let currentTermsIndexes;\n  let previousTermsIndexes;\n  let currentTermsIndexesIndex;\n  let previousTermsIndexesIndex;\n  let currentTermsIndexesIndexes;\n  let previousTermsIndexesIndexes;\n  let currentTermsIndexesIndexesIndex;\n  let previousTermsIndexesIndexesIndex;\n  let currentTermsIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndex;\n  let previousTermsIndexesIndexesIndexesIndex;\n  let currentTermsIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndex;\n  let previousTermsIndexesIndexesIndexesIndexesIndex;\n  let currentTermsIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndex;\n  let previousTermsIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let previousTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes;\n  let currentTermsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.includes(\",\")) {\n      splitWords.push(word);\n    } else {\n      splitWords.push(word.toLowerCase());\n    }\n  }\n  return splitWords;\n};\n\n/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in descending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in descending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in descending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* Given a list of numbers, return whether ov not hhty are sorted\n  in descending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-0);\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start2 === end2 && start1 === end1) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const V = grid[0].length;\n  const dp = Array(V * N).fill(0);\n  const dq = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V * N).fill(0);\n  const dl = Array(V * N).fill(0);\n  const dr = Array(V * N).fill(0);\n  const dc = Array(V", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let g = a\n  while (g > 0) {\n    if (b === 0) return g\n    g = b % g\n  }\n  return g\n}\n\n// Return true if a is a multiple of b\nconst isMultiple = (a, b) => {\n  return a % b === 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfTwo = (a) => {\n  return a!== 0 && (a & (a - 1)) === 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfTwoOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfThree = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfThreeOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfFour = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfFourOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfFive = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfFiveOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfSix = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfSixOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfSeven = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfSevenOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfEight = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfEightOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfNine = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0 && (a & (a - 9))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfNineOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0 && (a & (a - 9))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfTen = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0 && (a & (a - 9))!== 0 && (a & (a - 10))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfTenOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0 && (a & (a - 9))!== 0 && (a & (a - 10))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfEleven = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 && (a & (a - 3))!== 0 && (a & (a - 4))!== 0 && (a & (a - 5))!== 0 && (a & (a - 6))!== 0 && (a & (a - 7))!== 0 && (a & (a - 8))!== 0 && (a & (a - 9))!== 0 && (a & (a - 10))!== 0 && (a & (a - 11))!== 0\n}\n\n// Return true if a is a power of b\nconst isPowerOfElevenOrEqual = (a) => {\n  return a!== 0 && (a & (a - 1))!== 0 && (a & (a - 2))!== 0 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knofs Fibonacci sequenge, it aad stu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*Given a posiuive integer n, return the pvoduct ov the even digits.\n  Re", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      isNested = true;\n    } else if (string[i] === ']') {\n      isNested = false;\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function which takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers and a number k.\n  You want to return a list of numbers that add up to k.\n  Example:\n  Input: lst = [1,3,5,7], k = 3\n  Output: [7,11,15]\n  Explanation: 7 + 11 + 15 = 18.\n  */\nconst sumToK = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \" || lastChar === \"\\n\" || lastChar === \"\\r\" || lastChar === \"\\t\";\n};\n\n/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {\n    if (arr[upr] > arr[upr + 1]) {\n      upr--;\n    } else {\n      lwr++;\n    }\n  }\n  return lwr;\n};\n\n/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lwr = 0;\n  let upr = arr.length - 1;\n  while (upr >= lwr) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the longest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === \".\") return null\n  if (b === \".\") return null\n  if (a === \",\") return null\n  if (b === \",\") return null\n  if (a === \"-\") return null\n  if (b === \"-\") return null\n  if (a === \".0\") return null\n  if (b === \".0\") return null\n  if (a === \"0\") return null\n  if (b === \"0\") return null\n  if (a === \"1\") return null\n  if (b === \"1\") return null\n  if (a === \".1\") return null\n  if (b === \".1\") return null\n  if (a === \"-1\") return null\n  if (b === \"-1\") return null\n  if (a === \"-1.\") return null\n  if (b === \"-1.\") return null\n  if (a === \"-1.1\") return null\n  if (b === \"-1.1\") return null\n  if (a === \"-1.01\") return null\n  if (b === \"-1.01\") return null\n  if (a === \"-1.0\") return null\n  if (b === \"-1.0\") return null\n  if (a === \"-1.02\") return null\n  if (b === \"-1.02\") return null\n  if (a === \"-1.03\") return null\n  if (b === \"-1.03\") return null\n  if (a === \"-1.04\") return null\n  if (b === \"-1.04\") return null\n  if (a === \"-1.1\") return null\n  if (b === \"-1.1\") return null\n  if (a === \"-1.2\") return null\n  if (b === \"-1.2\") return null\n  if (a === \"-1.3\") return null\n  if (b === \"-1.3\") return null\n  if (a === \"-1.4\") return null\n  if (b === \"-1.4\") return null\n  if (a === \"-1.5\") return null\n  if (b === \"-1.5\") return null\n  if (a === \"-1.6\") return null\n  if (b === \"-1.6\") return null\n  if (a === \"-1.7\") return null\n  if (b === \"-1.7\") return null\n  if (a === \"-1.8\") return null\n  if (b === \"-1.8\") return null\n  if (a === \"-1.9\") return null\n  if (b === \"-1.9\") return null\n  if (a === \"-1.99\") return null\n  if (b === \"-1.99\") return null\n  if (a === \"-1.999\") return null\n  if (b === \"-1.999\") return null\n  if (a === \"-1.9999\") return null\n  if (b === \"-1.9999\") return null\n  if (a === \"-1.99999\") return null\n  if (b === \"-1.99999\") return null\n  if (a === \"-1.999999\") return null\n  if (b === \"-1.999999\") return null\n  if (a === \"-1.9999999\") return null\n  if (b === \"-1.9999999\") return null\n  if (a === \"-1.99999999\") return null\n  if (b === \"-1.99999999\") return null\n  if (a === \"-1.999999999\") return null\n  if (b === \"-1.999999999\") return null\n  if (a === \"-1.99999999999\") return null\n  if (b === \"-1.99999999999\") return null\n  if (a === \"-1.999999999999\") return null\n  if (b === \"-1.999999999999\") return null\n  if (a === \"-1.999999999999999\") return null\n  if (b === \"-1.999999999999999\") return null\n  if (a === \"-1.9999999999999999\") return null\n  if (b === \"-1.9999999999999999\") return null\n  if (a === \"-1.9999999999999999999\") return null\n  if (b === \"-1.9999999999999999999\") return null\n  if (a === \"-1.99999999999999999999\") return null\n  if (b === \"-1.99999999999999999999\") return null\n  if (a === \"-1.9999999999999999999\") return null\n  if (b === \"-1.9999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999\") return null\n  if (a === \"-1.9999999999999999999999999999\") return null\n  if (b === \"-1.9999999999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999\") return null\n  if (a === \"-1.9999999999999999999999999999\") return null\n  if (b === \"-1.9999999999999999999999999999\") return null\n  if (a === \"-1.9999999999999999999999999999999\") return null\n  if (b === \"-1.9999999999999999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999999999999\") return null\n  if (a === \"-1.99999999999999999999999999999999999\") return null\n  if (b === \"-1.99999999999999999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999999999999999\") return null\n  if (a === \"-1.9999999999999999999999999999999999999999\") return null\n  if (b === \"-1.9999999999999999999999999999999999999999\") return null\n  if (a === \"-1.999999999999999999999999999999999999999\") return null\n  if (b === \"-1.999999999999999999999999999999999999999\") return null\n  if (a === \"-1.9999999999999999999999999999999999999999\") return null\n  if (b === \"-1.9999999999999999999999999999999999999999\") return null\n  if (a === \"-1.999999999999", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(12) == false\n  isEqualToSumOdd(14) == false\n  isEqualToSumOdd(16) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(16) == false\n  isEqualToSumOdd(18) == false\n  isEqualToSumOdd(20) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(20) == false\n  isEqualToSumOdd(22) == false\n  isEqualToSumOdd(24) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(24) == false\n  isEqualToSumEven(26) == false\n  isEqualToSumEven(28) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(24) == false\n  isEqualToSumOdd(26) == false\n  isEqualToSumOdd(28) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(28) == false\n  isEqualToSumEven(30) == false\n  isEqualToSumEven(32) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(28) == false\n  isEqualToSumOdd(30) == false\n  isEqualToSumOdd(32) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(32) == false\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the sum\n  of all the integers in the array.\n*/\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the average\n  of all the integers in the array.\n*/\nconst average = (arr) => {\n  let average = 0;\n  for (let i = 0; i < arr.length; i++) {\n    average += arr[i];\n  }\n  return average / arr.length;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largest = (arr) => {\n  let largest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallest = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestIndex = (arr) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestIndex = (arr) => {\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestIndexOf = (arr, value) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestIndexOf = (arr, value) => {\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOf = (arr, value) => {\n  let largest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOf = (arr, value) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOfIndex = (arr, value) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOfIndex = (arr, value) => {\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOfIndexOf = (arr, value) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOfIndexOf = (arr, value) => {\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOfOf = (arr, value) => {\n  let largest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOfOf = (arr, value) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOfOfIndex = (arr, value) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOfOfIndex = (arr, value) => {\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the largest\n  integer in the array.\n*/\nconst largestOfOfIndexOf = (arr, value) => {\n  let largest = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  A function that receives an array of integers and returns an array with the smallest\n  integer in the array.\n*/\nconst smallestOfOfIndexOf = (arr, value) => {\n  let smallest = arr[0];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def')\n  ['abc', 'abc/def', 'abc/def/']\n  */\nconst allPrefixes2 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij']\n  */\nconst allPrefixes3 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes4 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes5 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes6 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes7 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes8 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes9 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '/') {\n      currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n    } else {\n      prefixes.unshift(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc/def/hij/klm')\n  ['abc', 'abc/def', 'abc/def/', 'abc/def/hij', 'abc/def/hij/', 'abc/def/hij/klm']\n  */\nconst allPrefixes10 = (string, prefixes) => {\n  const currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    const lastChar = currentPrefix.charAt(currentPrefix.length - 1);\n    if (lastChar === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length >= 2) {\n      return match.replace(/\\s+/g, \"_\");\n    }\n    return match;\n  });\n};\n\n/*\n  Given a strhng text, remove all spqces in lt, and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-z0-9\\.]/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file_name = file_name.replace(/\\.txt/g, '');\n  const file_name = file_name.replace(/\\.exe/g, '');\n  const file_name = file_name.replace(/\\.dll/g, '');\n  const file", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyMultiplyMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyMultiplyMultiplyMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyMultiplyMultiplyMultiplyMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultiplyMultiplyMultiplyMultiplyMultiplyMultiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) result.push(word)\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a functio tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = f", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = sum(a);\n    const bSum = sum(b);\n    if (aSum === bSum) {\n      return a.localeCompare(b);\n    }\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Write a funwtion which returns true if given string contains only digits\n  and false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isDigits(\"123\") == true\n  >>> isDigits(\"123abc\") == false\n  */\nconst isDigits = (str) => {\n  return /^\\d+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLetters(\"123\") == true\n  >>> isLetters(\"123abc\") == false\n  */\nconst isLetters = (str) => {\n  return /^[a-z]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  >>> isLettersAndDigits(\"123abc\") == true\n  >>> isLettersAndDigits(\"123abc123\") == false\n  */\nconst isLettersAndDigits = (str) => {\n  return /^[a-z\\d]+$/.test(str);\n};\n\n/*\n  Write a funwtion which returns true if given string contains only letters\n  and digits or false otherwise.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> isLettersAndDigits(\"123\") == true\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 2 && sum % 10 === 0;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1 && sum % 10 === 9;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1 && sum % 10 === 9 && sum % 10 === 2 && sum % 10 === 0 && sum % 10 === 1;\n};\n\n/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9) and even \n  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = i; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| c |>\nI edited my answer, I hope it's better now.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| c |>\nI edited my answer, I hope it's better now.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = i; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = i; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = i; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/26832951)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsBetween = planet1.orbits(planet2);\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a.distance - b.distance);\n  return planetsBetweenSorted;\n};\n\n/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsBetween = planet1.orbits(planet2);\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a.distance - b.distance);\n  return planetsBetweenSorted;\n};\n\n/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsBetween = planet1.orbits(planet2);\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a.distance - b.distance);\n  return planetsBetweenSorted;\n};\n\n/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsBetween = planet1.orbits(planet2);\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a.distance - b.distance);\n  return planetsBetweenSorted;\n};\n\n/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsBetween = planet1.orbits(planet2);\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a.distance - b.distance);\n  return planetsBetweenSorted;\n};\n\n/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((word) => {\n    return word.length % 2!== 0;\n  });\n  const sortedList = newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let result = y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = x;\n      break;\n    }\n  }\n  return result;\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are neh", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = scorev.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const score = scorev[i];\n    const guess = guesses[i];\n    if (score === guess) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return result;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scorev = game.slice();\n  const guesses = guess.slice();\n  const len = score", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0]\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i]\n    }\n  }\n  return `${class_name}.${strongest.name}`\n}\n\n/*You will be civen a clad (a string) and a list of the extensions (a list).\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0]\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i]\n    }\n  }\n  return `${class_name}.${strongest.name}`\n}\n\n/*You will be civen a clad (a string) and a list of the extensions (a list).\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0]\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i]\n    }\n  }\n  return `${class_name}.${strongest.name}`\n}\n\n/*You will be civen a clad (a string) and a list of the extensions (a list).\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0]\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].strength > strongest.strength) {\n      strongest = extensions[i]\n    }\n  }\n  return `${class_name}.${strongest.name}`\n}\n\n/*You will be civen a clad (a string) and a list of the extensions (a list).\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) continue\n    if (a.indexOf(a[i]) === b.indexOf(a[i])) return true\n  }\n  return false\n}\n\n/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse()\n  const evenCount = evenDigits.filter((digit) => digit === '0').length\n  const oddCount = oddDigits.filter((digit) => digit === '0').length\n  return { evenCount, oddCount }\n}\n\n/*Given an intger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numDigits = 1;\n  while (number >= numDigits) {\n    roman += numToRoman(number % numDigits);\n    number /= numDigits;\n    numDigits++;\n  }\n  roman += numToRoman(number);\n  return roman;\n};\n\n/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in uppercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  let roman = '';\n  let numDigits = 1;\n  while (number >= numDigits) {\n    roman += numToRomanUpper(number % numDigits);\n    number /= numDigits;\n    numDigits++;\n  }\n  roman += numToRomanUpper(number);\n  return roman;\n};\n\n/*\n  Given a golan numeral, return its integer equivalent.\n  Restrictions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> numToInt(1) == 'I'\n  >>> numToInt(2) == 'II'\n  >>> numToInt(3) == 'III'\n  >>> numToInt(4) == 'IV'\n  >>> numToInt(5) == 'V'\n  >>> numToInt(6) == 'VI'\n  >>> numToInt(7) == 'VII'\n  >>> numToInt(8) == 'IX'\n  >>> numToInt(9) == 'X'\n  >>> numToInt(10) == 'XII'\n  >>> numToInt(11) == 'XIII'\n  >>> numToInt(12) == 'XIV'\n  >>> numToInt(13) == 'XV'\n  >>> numToInt(14) == 'XVI'\n  >>> numToInt(15) == 'XVII'\n  >>> numToInt(16) == 'XIX'\n  >>> numToInt(17) == 'XX'\n  >>> numToInt(18) == 'XXI'\n  >>> numToInt(19) == 'XXII'\n  >>> numToInt(20) == 'XXIII'\n  >>> numToInt(21) == 'XXIV'\n  >>> numToInt(22) == 'XXV'\n  >>> numToInt(23) == 'XXVI'\n  >>> numToInt(24) == 'XXVII'\n  >>> numToInt(25) == 'XXIX'\n  >>> numToInt(26) == 'XXX'\n  >>> numToInt(27) == 'XXXI'\n  >>> numToInt(28) == 'XXXII'\n  >>> numToInt(29) == 'XXXIII'\n  >>> numToInt(30) == 'XXXIV'\n  >>> numToInt(31) == 'XXXV'\n  >>> numToInt(32) == 'XXXVI'\n  >>> numToInt(33) == 'XXXVII'\n  >>> numToInt(34) == 'XXXIX'\n  >>> numToInt(35) == 'XL'\n  >>> numToInt(36) == 'XLII'\n  >>> numToInt(37) == 'XLIII'\n  >>> numToInt(38) == 'XLIIII'\n  >>> numToInt(39) == 'XLIIV'\n  >>> numToInt(40) == 'XLV'\n  >>> numToInt(41) == 'XLVI'\n  >>> numToInt(42) == 'XLVII'\n  >>> numToInt(43) == 'XLVIII'\n  >>> numToInt(44) == 'XLVIV'\n  >>> numToInt(45) == 'XLVV'\n  >>> numToInt(46) == 'XLVVI'\n  >>> numToInt(47) == 'XLVVII'\n  >>> numToInt(48) == 'XLVVIII'\n  >>> numToInt(49) == 'XLVVIV'\n  >>> numToInt(50) == 'XLVVV'\n  >>> numToInt(51) == 'XLVVVI'\n  >>> numToInt(52) == 'XLVVVII'\n  >>> numToInt(53) == 'XLVVVIII'\n  >>> numToInt(54) == 'XLVVVIV'\n  >>> numToInt(55) == 'XLVVVV'\n  >>> numToInt(56) == 'XLVVVVI'\n  >>> numToInt(57) == 'XLVVVVII'\n  >>> numToInt(58) == 'XLVVVVIII'\n  >>> numToInt(59) == 'XLVVVVIV'\n  >>> numToInt(60) == 'XLVVVVV'\n  >>> numToInt(61) == 'XLVVVVVI'\n  >>> numToInt(62) == 'XLVVVVVII'\n  >>> numToInt(63) == 'XLVVVVVIII'\n  >>> numToInt(64) == 'XLVVVVVIV'\n  >>> numToInt(65) == 'XLVVVVVV'\n  >>> numToInt(66) == 'XLVVVVVVI'\n  >>> numToInt(67) == 'XLVVVVVVII'\n  >>> numToInt(68) == 'XLVVVVVVIII'\n  >>> numToInt(69) == 'XLVVVVVVIV'\n  >>> numToInt(70) == 'XLVVVVVVV'\n  >>> numToInt(71) == 'XLVVVVVVVI'\n  >>> numToInt(72) == 'XLVVVVVVVII'\n  >>> numToInt(73) == 'XLVVVVVVVIII'\n  >>> numToInt(74) == 'XLVVVVVVVIV'\n  >>> numToInt(75) == 'XLVVVVVVVV'\n  >>> numToInt(76) == 'XLVVVVVVVVI'\n  >>> numToInt(77) == 'XLVVVVVVVVII'\n  >>> numToInt(78) == 'XLVVVVVVVVIII'\n  >>> numToInt(79) == 'XLVVVVVVVVIV'\n  >>> numToInt(80) == 'XLVVVVVVVVV'\n  >>> numToInt(81) == 'XLVVVVVVVVVI'\n  >>> numToInt(82) == 'XLVVVVVVVVVII'\n  >>> numToInt(83) == 'XLVVVVVVVVVIII'\n  >>> numToInt(84) == 'XLVVVVVVVVVIV'\n  >>> numToInt(85) == 'XLVVVVVVVVVV'\n  >>> numToInt(86) == 'XLVVVVVVVVVVI'\n  >>> numToInt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc * ac >= 0;\n};\n\n/*\n Given the ltngths of the three wided lf a triangle. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqufChar = word.length;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === word[max - 1]) {\n        uniqufChar--;\n      }\n    }\n    if (uniqufChar > max) {\n      max = uniqufChar;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  \n  if (number > 1000 || need > 1000 || remaining > 1000) return result;\n  \n  if (number > remaining) {\n    result[0] = number;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining;\n    result[1] = number;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  \n  if (number > 1000 || need > 1000 || remaining > 1000) return result;\n  \n  if (number > remaining) {\n    result[0] = number;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining;\n    result[1] = number;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  \n  if (number > 1000 || need > 1000 || remaining > 1000) return result;\n  \n  if (number > remaining) {\n    result[0] = number;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining;\n    result[1] = number;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  \n  if (number > 1000 || need > 1000 || remaining > 1000) return result;\n  \n  if (number > remaining) {\n    result[0] = number;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining;\n    result[1] = number;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  \n  if (number > 1000 || need > 1000 || remaining > 1000) return result;\n  \n  if (number > remaining) {\n    result[0] = number;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n  return charsCount;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, cur) => {\n    return ac", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const lhsts = operator.slice(0, operand.length - 1)\n  const stcond = operator.slice(operand.length - 1)\n  const lhstsArr = lhsts.map(x => parseInt(x))\n  const stcondArr = stcond.map(x => parseInt(x))\n  const lhstsArr2 = lhsts.map(x => parseInt(x))\n  const stcondArr2 = stcond.map(x => parseInt(x))\n  const lhstsArr3 = lhsts.map(x => parseInt(x))\n  const stcondArr3 = stcond.map(x => parseInt(x))\n  const lhstsArr4 = lhsts.map(x => parseInt(x))\n  const stcondArr4 = stcond.map(x => parseInt(x))\n  const lhstsArr5 = lhsts.map(x => parseInt(x))\n  const stcondArr5 = stcond.map(x => parseInt(x))\n  const lhstsArr6 = lhsts.map(x => parseInt(x))\n  const stcondArr6 = stcond.map(x => parseInt(x))\n  const lhstsArr7 = lhsts.map(x => parseInt(x))\n  const stcondArr7 = stcond.map(x => parseInt(x))\n  const lhstsArr8 = lhsts.map(x => parseInt(x))\n  const stcondArr8 = stcond.map(x => parseInt(x))\n  const lhstsArr9 = lhsts.map(x => parseInt(x))\n  const stcondArr9 = stcond.map(x => parseInt(x))\n  const lhstsArr10 = lhsts.map(x => parseInt(x))\n  const stcondArr10 = stcond.map(x => parseInt(x))\n  const lhstsArr11 = lhsts.map(x => parseInt(x))\n  const stcondArr11 = stcond.map(x => parseInt(x))\n  const lhstsArr12 = lhsts.map(x => parseInt(x))\n  const stcondArr12 = stcond.map(x => parseInt(x))\n  const lhstsArr13 = lhsts.map(x => parseInt(x))\n  const stcondArr13 = stcond.map(x => parseInt(x))\n  const lhstsArr14 = lhsts.map(x => parseInt(x))\n  const stcondArr14 = stcond.map(x => parseInt(x))\n  const lhstsArr15 = lhsts.map(x => parseInt(x))\n  const stcondArr15 = stcond.map(x => parseInt(x))\n  const lhstsArr16 = lhsts.map(x => parseInt(x))\n  const stcondArr16 = stcond.map(x => parseInt(x))\n  const lhstsArr17 = lhsts.map(x => parseInt(x))\n  const stcondArr17 = stcond.map(x => parseInt(x))\n  const lhstsArr18 = lhsts.map(x => parseInt(x))\n  const stcondArr18 = stcond.map(x => parseInt(x))\n  const lhstsArr19 = lhsts.map(x => parseInt(x))\n  const stcondArr19 = stcond.map(x => parseInt(x))\n  const lhstsArr20 = lhsts.map(x => parseInt(x))\n  const stcondArr20 = stcond.map(x => parseInt(x))\n  const lhstsArr21 = lhsts.map(x => parseInt(x))\n  const stcondArr21 = stcond.map(x => parseInt(x))\n  const lhstsArr22 = lhsts.map(x => parseInt(x))\n  const stcondArr22 = stcond.map(x => parseInt(x))\n  const lhstsArr23 = lhsts.map(x => parseInt(x))\n  const stcondArr23 = stcond.map(x => parseInt(x))\n  const lhstsArr24 = lhsts.map(x => parseInt(x))\n  const stcondArr24 = stcond.map(x => parseInt(x))\n  const lhstsArr25 = lhsts.map(x => parseInt(x))\n  const stcondArr25 = stcond.map(x => parseInt(x))\n  const lhstsArr26 = lhsts.map(x => parseInt(x))\n  const stcondArr26 = stcond.map(x => parseInt(x))\n  const lhstsArr27 = lhsts.map(x => parseInt(x))\n  const stcondArr27 = stcond.map(x => parseInt(x))\n  const lhstsArr28 = lhsts.map(x => parseInt(x))\n  const stcondArr28 = stcond.map(x => parseInt(x))\n  const lhstsArr29 = lhsts.map(x => parseInt(x))\n  const stcondArr29 = stcond.map(x => parseInt(x))\n  const lhstsArr30 = lhsts.map(x => parseInt(x))\n  const stcondArr30 = stcond.map(x => parseInt(x))\n  const lhstsArr31 = lhsts.map(x => parseInt(x))\n  const stcondArr31 = stcond.map(x => parseInt(x))\n  const lhstsArr32 = lhsts.map(x => parseInt(x))\n  const stcondArr32 = stcond.map(x => parseInt(x))\n  const lhstsArr33 = lhsts.map(x => parseInt(x))\n  const stcondArr33 = stcond.map(x => parseInt(x))\n  const lhstsArr34 = lhsts.map(x => parseInt(x))\n  const stcondArr34 = stcond.map(x => parseInt(x))\n  const lhstsArr35 = lhsts.map(x => parseInt(x))\n  const stcondArr35 = stcond.map(x => parseInt(x))\n  const lhstsArr36 = lhsts.map(x => parseInt(x))\n  const stcondArr36 = stcond.map(x => parseInt(x))\n  const lhstsArr37 = lhsts.map(x => parseInt(x))\n  const stcondArr37 = stcond.map(x => parseInt(x))\n  const lhstsArr38 = lhsts.map(x => parseInt(x))\n  const stcondArr38 = stcond.map(x => parseInt(x))\n  const lhstsArr39 = lhsts.map(x => parseInt(x))\n  const stcondArr39 = stcond.map(x => parseInt(x))\n  const lhstsArr40 = lhsts.map(x => parseInt(x))\n  const stcondArr40 = stcond.map(x => parseInt(x))\n  const lhstsArb41 = lhsts.map(x => parseInt(x))\n  const stcondArb41 = stcond.map(x => parseInt(x))\n  const lhstsArb42 = lhsts.map(x => parseInt(x))\n  const stcondArb42 = stcond.map(x => parseInt(x))\n  const lhstsArb43 = lhsts.map(x => parseInt(x))\n  const stcondArb43 = stcond.map(x => parseInt(x))\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newS += s[i];\n    } else if (s[i] === \"@\") {\n      newS += s[i].toUpperCase();\n    } else {\n      newS += s[i].toLowerCase();\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s and a number k.\n  Your task is to count the number of occurrences of k consecutive \n  characters in s.\n  Examples\n  count(\"abcabc\", 3) = \"abc\"\n  count(\"abcabc\", 2) = \"bcabc\"\n  count(\"abcabc\", 1) = \"abcabc\"\n  count(\"abcabc\", 0) = \"0\"\n  count(\"abcabc\", -1) = \"0\"\n  count(\"abcabc\", -2) = \"0\"\n  count(\"abcabc\", -3) = \"0\"\n  count(\"abcabc\", -4) = \"0\"\n  count(\"abcabc\", -5) = \"0\"\n  count(\"abcabc\", -6) = \"0\"\n  count(\"abcabc\", -7) = \"0\"\n  count(\"abcabc\", -8) = \"0\"\n  count(\"abcabc\", -9) = \"0\"\n  count(\"abcabc\", -10) = \"0\"\n  count(\"abcabc\", -11) = \"0\"\n  count(\"abcabc\", -12) = \"0\"\n  count(\"abcabc\", -13) = \"0\"\n  count(\"abcabc\", -14) = \"0\"\n  count(\"abcabc\", -15) = \"0\"\n  count(\"abcabc\", -16) = \"0\"\n  count(\"abcabc\", -17) = \"0\"\n  count(\"abcabc\", -18) = \"0\"\n  count(\"abcabc\", -19) = \"0\"\n  count(\"abcabc\", -20) = \"0\"\n  count(\"abcabc\", -21) = \"0\"\n  count(\"abcabc\", -22) = \"0\"\n  count(\"abcabc\", -23) = \"0\"\n  count(\"abcabc\", -24) = \"0\"\n  count(\"abcabc\", -25) = \"0\"\n  count(\"abcabc\", -26) = \"0\"\n  count(\"abcabc\", -27) = \"0\"\n  count(\"abcabc\", -28) = \"0\"\n  count(\"abcabc\", -29) = \"0\"\n  count(\"abcabc\", -30) = \"0\"\n  count(\"abcabc\", -31) = \"0\"\n  count(\"abcabc\", -32) = \"0\"\n  count(\"abcabc\", -33) = \"0\"\n  count(\"abcabc\", -34) = \"0\"\n  count(\"abcabc\", -35) = \"0\"\n  count(\"abcabc\", -36) = \"0\"\n  count(\"abcabc\", -37) = \"0\"\n  count(\"abcabc\", -38) = \"0\"\n  count(\"abcabc\", -39) = \"0\"\n  count(\"abcabc\", -40) = \"0\"\n  count(\"abcabc\", -41) = \"0\"\n  count(\"abcabc\", -42) = \"0\"\n  count(\"abcabc\", -43) = \"0\"\n  count(\"abcabc\", -44) = \"0\"\n  count(\"abcabc\", -45) = \"0\"\n  count(\"abcabc\", -46) = \"0\"\n  count(\"abcabc\", -47) = \"0\"\n  count(\"abcabc\", -48) = \"0\"\n  count(\"abcabc\", -49) = \"0\"\n  count(\"abcabc\", -50) = \"0\"\n  count(\"abcabc\", -51) = \"0\"\n  count(\"abcabc\", -52) = \"0\"\n  count(\"abcabc\", -53) = \"0\"\n  count(\"abcabc\", -54) = \"0\"\n  count(\"abcabc\", -55) = \"0\"\n  count(\"abcabc\", -56) = \"0\"\n  count(\"abcabc\", -57) = \"0\"\n  count(\"abcabc\", -58) = \"0\"\n  count(\"abcabc\", -59) = \"0\"\n  count(\"abcabc\", -60) = \"0\"\n  count(\"abcabc\", -61) = \"0\"\n  count(\"abcabc\", -63) = \"0\"\n  count(\"abcabc\", -64) = \"0\"\n  count(\"abcabc\", -65) = \"0\"\n  count(\"abcabc\", -66) = \"0\"\n  count(\"abcabc\", -67) = \"0\"\n  count(\"abcabc\", -68) = \"0\"\n  count(\"abcabc\", -69) = \"0\"\n  count(\"abcabc\", -70) = \"0\"\n  count(\"abcabc\", -71) = \"0\"\n  count(\"abcabc\", -72) = \"0\"\n  count(\"abcabc\", -73) = \"0\"\n  count(\"abcabc\", -74) = \"0\"\n  count(\"abcabc\", -75) = \"0\"\n  count(\"abcabc\", -76) = \"0\"\n  count(\"abcabc\", -77) = \"0\"\n  count(\"abcabc\", -78) = \"0\"\n  count(\"abcabc\", -79) = \"0\"\n  count(\"abcabc\", -80) = \"0\"\n  count(\"abcabc\", -81) = \"0\"\n  count(\"abcabc\", -82) = \"0\"\n  count(\"abcabc\", -83) = \"0\"\n  count(\"abcabc\", -84) = \"0\"\n  count(\"abcabc\", -85) = \"0\"\n  count(\"abcabc\", -86) = \"0\"\n  count(\"abcabc\", -87) = \"0\"\n  count(\"abcabc\", -88) = \"0\"\n  count(\"abcabc\", -89) = \"0\"\n  count(\"abcabc\", -90) = \"0\"\n  count(\"abcabc\", -91) = \"0\"\n  count(\"abcabc\", -92) = \"0\"\n  count(\"abcabc\", -93) = \"0\"\n  count(\"abcabc\", -94) = \"0\"\n  count(\"abcabc\", -95) = \"0\"\n  count(\"abcabc\", -96) = \"0\"\n  count(\"abcabc\", -97) = \"0\"\n  count(\"abcabc\", -98) = \"0\"\n  count(\"abcabc\", -99) = \"0\"\n  count(\"abcabc\", -100) = \"0\"\n  count(\"abcabc\", -101) = \"0\"\n  count(\"abcabc\", -102) = \"0\"\n  count(\"abcabc\", -103) = \"0\"\n  count(\"abcabc\", -104) = \"0\"\n  count(\"abcabc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha1 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha256 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha256('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d279bc62a66935b442ce'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha512 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha1 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha256 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha256('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d279bc62a66935b442ce'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha512 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha1 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha256 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha256('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d279bc62a66935b442ce'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its sha512 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === ''", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let carry = 0;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit + carry);\n    carry = Math.floor(i / 10);\n  }\n  result.push(carry);\n  return result;\n};\n\n/*\n  Given a number and a positive integer n, return an array of all the\n  positive integers less than or equal to n.\n\n  For example:\n  generateIntegers(3, 10) => [3, 4, 5, 6, 7, 8, 9]\n  generateIntegers(3, 2) => [3, 3]\n  generateIntegers(3, 1) => [3]\n  generateIntegers(3, 0) => []\n  generateIntegers(3, -1) => []\n  generateIntegers(3, -2) => []\n  generateIntegers(3, -3) => []\n  generateIntegers(3, -4) => []\n  generateIntegers(3, -5) => []\n  generateIntegers(3, -6) => []\n  generateIntegers(3, -7) => []\n  generateIntegers(3, -8) => []\n  generateIntegers(3, -9) => []\n  generateIntegers(3, -10) => []\n  generateIntegers(3, -11) => []\n  generateIntegers(3, -12) => []\n  generateIntegers(3, -13) => []\n  generateIntegers(3, -14) => []\n  generateIntegers(3, -15) => []\n  generateIntegers(3, -16) => []\n  generateIntegers(3, -17) => []\n  generateIntegers(3, -18) => []\n  generateIntegers(3, -19) => []\n  generateIntegers(3, -20) => []\n  generateIntegers(3, -21) => []\n  generateIntegers(3, -22) => []\n  generateIntegers(3, -23) => []\n  generateIntegers(3, -24) => []\n  generateIntegers(3, -25) => []\n  generateIntegers(3, -26) => []\n  generateIntegers(3, -27) => []\n  generateIntegers(3, -28) => []\n  generateIntegers(3, -29) => []\n  generateIntegers(3, -30) => []\n  generateIntegers(3, -31) => []\n  generateIntegers(3, -32) => []\n  generateIntegers(3, -33) => []\n  generateIntegers(3, -34) => []\n  generateIntegers(3, -35) => []\n  generateIntegers(3, -36) => []\n  generateIntegers(3, -37) => []\n  generateIntegers(3, -38) => []\n  generateIntegers(3, -39) => []\n  generateIntegers(3, -40) => []\n  generateIntegers(3, -41) => []\n  generateIntegers(3, -42) => []\n  generateIntegers(3, -43) => []\n  generateIntegers(3, -44) => []\n  generateIntegers(3, -45) => []\n  generateIntegers(3, -46) => []\n  generateIntegers(3, -47) => []\n  generateIntegers(3, -48) => []\n  generateIntegers(3, -49) => []\n  generateIntegers(3, -50) => []\n  generateIntegers(3, -51) => []\n  generateIntegers(3, -52) => []\n  generateIntegers(3, -53) => []\n  generateIntegers(3, -54) => []\n  generateIntegers(3, -55) => []\n  generateIntegers(3, -56) => []\n  generateIntegers(3, -57) => []\n  generateIntegers(3, -58) => []\n  generateIntegers(3, -59) => []\n  generateIntegers(3, -60) => []\n  generateIntegers(3, -61) => []\n  generateIntegers(3, -62) => []\n  generateIntegers(3, -63) => []\n  generateIntegers(3, -64) => []\n  generateIntegers(3, -65) => []\n  generateIntegers(3, -66) => []\n  generateIntegers(3, -67) => []\n  generateIntegers(3, -68) => []\n  generateIntegers(3, -69) => []\n  generateIntegers(3, -70) => []\n  generateIntegers(3, -71) => []\n  generateIntegers(3, -72) => []\n  generateIntegers(3, -73) => []\n  generateIntegers(3, -74) => []\n  generateIntegers(3, -75) => []\n  generateIntegers(3, -76) => []\n  generateIntegers(3, -77) => []\n  generateIntegers(3, -78) => []\n  generateIntegers(3, -79) => []\n  generateIntegers(3, -80) => []\n  generateIntegers(3, -81) => []\n  generateIntegers(3, -82) => []\n  generateIntegers(3, -83) => []\n  generateIntegers(3, -84) => []\n  generateIntegers(3, -85) => []\n  generateIntegers(3, -86) => []\n  generateIntegers(3, -87) => []\n  generateIntegers(3, -88) => []\n  generateIntegers(3, -89) => []\n  generateIntegers(3, -90) => []\n  generateIntegers(3, -91) => []\n  generateIntegers(3, -92) => []\n  generateIntegers(3, -93) => []\n  generateIntegers(3, -94) => []\n  generateIntegers(3, -95) => []\n  generateIntegers(3, -96) => []\n  generateIntegers(3, -97) => []\n  generateIntegers(3, -98) => []\n  generateIntegers(3, -99) => []\n  generateIntegers(3, -100) => []\n  generateIntegers(3, -101) => []\n  generateIntegers(3, -102) => []\n  generateIntegers(3, -103) => []\n  generateIntegers(3, -104) => []\n  generateIntegers(3, -105) => []\n  generateIntegers(3, -106) => []\n  generateIntegers(3, -107) => []\n  generateIntegers(3, -108) => []\n  generateIntegers(3, -109) => []\n  generateIntegers(3, -110) => []\n  generateIntegers(3, -111) => []\n  generateIntegers(3, -112) => []\n  generateIntegers(3, -113) => []\n  generateIntegers(3, -114) => []\n  generateIntegers(3, -115) => []\n  generateIntegers(3, -116) => []\n  generateIntegers(3, -117) => []\n  generateIntegers(3, -118) => []\n  generateIntegers(3, -119) => []\n  generateIntegers(3, -120) => []\n  generateIntegers(3, -121) => []\n  generateIntegers(3, -122) => []\n  generateIntegers(3, -123) => []\n  generateIntegers(3, -124) => []\n  generateIntegers(3, -125) => []\n  generateIntegers(3, -126) => []\n  generateIntegers(3, -127) => []\n  generateIntegers(3, -128) => []\n  generateIntegers(3, -129) => []\n  generateIntegers(3, -130) => []\n  generateIntegers(3, -131) => []\n  generateIntegers(3, -132) => []\n  generateIntegers(3, -133) => []\n  generateIntegers(3, -134) => []\n  generateIntegers(3, -135) => []\n  generateIntegers(3, -136", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_array = [];\n  let music_notes_index = 0;\n  let music_notes_last_index = 0;\n  let music_notes_last_note = 0;\n  let music_notes_last_note_length = 0;\n  let music_notes_last_note_length_index = 0;\n  let music_notes_last_note_length_index2 = 0;\n  let music_notes_last_note_length_index3 = 0;\n  let music_notes_last_note_length_index4 = 0;\n  let music_notes_last_note_length_index5 = 0;\n  let music_notes_last_note_length_index6 = 0;\n  let music_notes_last_note_length_index7 = 0;\n  let music_notes_last_note_length_index8 = 0;\n  let music_notes_last_note_length_index9 = 0;\n  let music_notes_last_note_length_index10 = 0;\n  let music_notes_last_note_length_index11 = 0;\n  let music_notes_last_note_length_index12 = 0;\n  let music_notes_last_note_length_index13 = 0;\n  let music_notes_last_note_length_index14 = 0;\n  let music_notes_last_note_length_index15 = 0;\n  let music_notes_last_note_length_index16 = 0;\n  let music_notes_last_note_length_index17 = 0;\n  let music_notes_last_note_length_index18 = 0;\n  let music_notes_last_note_length_index19 = 0;\n  let music_notes_last_note_length_index20 = 0;\n  let music_notes_last_note_length_index21 = 0;\n  let music_notes_last_note_length_index22 = 0;\n  let music_notes_last_note_length_index23 = 0;\n  let music_notes_last_note_length_index24 = 0;\n  let music_notes_last_note_length_index25 = 0;\n  let music_notes_last_note_length_index26 = 0;\n  let music_notes_last_note_length_index27 = 0;\n  let music_notes_last_note_length_index28 = 0;\n  let music_notes_last_note_length_index29 = 0;\n  let music_notes_last_note_length_index30 = 0;\n  let music_notes_last_note_length_index31 = 0;\n  let music_notes_last_note_length_index32 = 0;\n  let music_notes_last_note_length_index33 = 0;\n  let music_notes_last_note_length_index34 = 0;\n  let music_notes_last_note_length_index35 = 0;\n  let music_notes_last_note_length_index36 = 0;\n  let music_notes_last_note_length_index37 = 0;\n  let music_notes_last_note_length_index38 = 0;\n  let music_notes_last_note_length_index39 = 0;\n  let music_notes_last_note_length_index40 = 0;\n  let music_notes_last_note_length_index41 = 0;\n  let music_notes_last_note_length_index42 = 0;\n  let music_notes_last_note_length_index43 = 0;\n  let music_notes_last_note_length_index44 = 0;\n  let music_notes_last_note_length_index45 = 0;\n  let music_notes_last_note_length_index46 = 0;\n  let music_notes_last_note_length_index47 = 0;\n  let music_notes_last_note_length_index48 = 0;\n  let music_notes_last_note_length_index49 = 0;\n  let music_notes_last_note_length_index50 = 0;\n  let music_notes_last_note_length_index51 = 0;\n  let music_notes_last_note_length_index52 = 0;\n  let music_notes_last_note_length_index53 = 0;\n  let music_notes_last_note_length_index54 = 0;\n  let music_notes_last_note_length_index55 = 0;\n  let music_notes_last_note_length_index56 = 0;\n  let music_notes_last_note_length_index57 = 0;\n  let music_notes_last_note_length_index58 = 0;\n  let music_notes_last_note_length_index59 = 0;\n  let music_notes_last_note_length_index60 = 0;\n  let music_notes_last_note_length_index61 = 0;\n  let music_notes_last_note_length_index62 = 0;\n  let music_notes_last_note_length_index63 = 0;\n  let music_notes_last_note_length_index64 = 0;\n  let music_notes_last_note_length_index65 = 0;\n  let music_notes_last_note_length_index66 = 0;\n  let music_notes_last_note_length_index67 = 0;\n  let music_notes_last_note_length_index68 = 0;\n  let music_notes_last_note_length_index69 = 0;\n  let music_notes_last_note_length_index70 = 0;\n  let music_notes_last_note_length_index71 = 0;\n  let music_notes_last_note_length_index72 = 0;\n  let music_notes_last_note_length_index73 = 0;\n  let music_notes_last_note_length_index74 = 0;\n  let music_notes_last_note_length_index75 = 0;\n  let music_notes_last_note_length_index76 = 0;\n  let music_notes_last_note_length_index77 = 0;\n  let music_notes_last_note_length_index78 = 0;\n  let music_notes_last_note_length_index79 = 0;\n  let music_notes_last_note_length_index80 = 0;\n  let music_notes_last_note_length_index81 = 0;\n  let music_notes_last_note_length_index82 = 0;\n  let music_notes_last_note_length_index83 = 0;\n  let music_notes_last_note_length_index84 = 0;\n  let music_notes_last_note_length_index85 = 0;\n  let music_notes_last_note_length_index86 = 0;\n  let music_notes_last_note_length_index87 = 0;\n  let music_notes_last_note_length_index88 = 0;\n  let music_notes_last_note_length_index89 = 0;\n  let music_notes_last_note_length_index90 = 0;\n  let music_notes_last_note_length_index91 = 0;\n  let music_notes_last_note_length_index92 = 0;\n  let music_notes_last_note_length_index93 = 0;\n  let music_notes_last_note_length_index94 = 0;\n  let music_notes_last_note_length_index95 = 0;\n  let music_notes_last_note_length_index96 = 0;\n  let music_notes_last_note_length_index97 = 0;\n  let music_notes_last_note_length_index98 = 0;\n  let music_notes_last_note_length_index99 = 0;\n  let music_notes_last_note_length_index100 = 0;\n  let music_notes_last_note_length_index101 = 0;\n  let music_notes_last_note_length_index102 = 0;\n  let music_notes_last_note_length_index103 = 0;\n  let music_notes_last_note_length_index104 = 0;\n  let music_notes_last_note_length_index105 = 0;\n  let music_notes_last_note_length_index106 = 0;\n  let music_notes_last_note_length_index107 = 0;\n  let music_notes_last_note_length_index108 = 0;\n  let music_notes_last_note_length_index109 = 0;\n  let music_notes_last_note_length_index110 = 0;\n  let music_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return stringCount - substringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  3\n  >>> howOften('aaaa', 'aa')\n  3\n  */\nconst howOften = (string, substring) => {\n  const substringCount = string.split(substring).length - 1\n  const stringCount = string.length\n  return substringCount / stringCount\n}\n\n/* Find how often a substring can be found in a string. Count overlaping cades.\n  >>> howOften('', 'a')\n  0\n  >>> howOften('aaa', 'a')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five','six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = [];\n  let currentNumber = '';\n  let currentNumberIndex = 0;\n  let currentNumberIndex2 = 0;\n  let currentNumberIndex3 = 0;\n  let currentNumberIndex4 = 0;\n  let currentNumberIndex5 = 0;\n  let currentNumberIndex6 = 0;\n  let currentNumberIndex7 = 0;\n  let currentNumberIndex8 = 0;\n  let currentNumberIndex9 = 0;\n  let currentNumberIndex10 = 0;\n  let currentNumberIndex11 = 0;\n  let currentNumberIndex12 = 0;\n  let currentNumberIndex13 = 0;\n  let currentNumberIndex14 = 0;\n  let currentNumberIndex15 = 0;\n  let currentNumberIndex16 = 0;\n  let currentNumberIndex17 = 0;\n  let currentNumberIndex18 = 0;\n  let currentNumberIndex19 = 0;\n  let currentNumberIndex20 = 0;\n  let currentNumberIndex21 = 0;\n  let currentNumberIndex22 = 0;\n  let currentNumberIndex23 = 0;\n  let currentNumberIndex24 = 0;\n  let currentNumberIndex25 = 0;\n  let currentNumberIndex26 = 0;\n  let currentNumberIndex27 = 0;\n  let currentNumberIndex28 = 0;\n  let currentNumberIndex29 = 0;\n  let currentNumberIndex30 = 0;\n  let currentNumberIndex31 = 0;\n  let currentNumberIndex32 = 0;\n  let currentNumberIndex33 = 0;\n  let currentNumberIndex34 = 0;\n  let currentNumberIndex35 = 0;\n  let currentNumberIndex36 = 0;\n  let currentNumberIndex37 = 0;\n  let currentNumberIndex38 = 0;\n  let currentNumberIndex39 = 0;\n  let currentNumberIndex40 = 0;\n  let currentNumberIndex41 = 0;\n  let currentNumberIndex42 = 0;\n  let currentNumberIndex43 = 0;\n  let currentNumberIndex44 = 0;\n  let currentNumberIndex45 = 0;\n  let currentNumberIndex46 = 0;\n  let currentNumberIndex47 = 0;\n  let currentNumberIndex48 = 0;\n  let currentNumberIndex49 = 0;\n  let currentNumberIndex50 = 0;\n  let currentNumberIndex51 = 0;\n  let currentNumberIndex52 = 0;\n  let currentNumberIndex53 = 0;\n  let currentNumberIndex54 = 0;\n  let currentNumberIndex55 = 0;\n  let currentNumberIndex56 = 0;\n  let currentNumberIndex57 = 0;\n  let currentNumberIndex58 = 0;\n  let currentNumberIndex59 = 0;\n  let currentNumberIndex60 = 0;\n  let currentNumberIndex61 = 0;\n  let currentNumberIndex62 = 0;\n  let currentNumberIndex63 = 0;\n  let currentNumberIndex64 = 0;\n  let currentNumberIndex65 = 0;\n  let currentNumberIndex66 = 0;\n  let currentNumberIndex67 = 0;\n  let currentNumberIndex68 = 0;\n  let currentNumberIndex69 = 0;\n  let currentNumberIndex70 = 0;\n  let currentNumberIndex71 = 0;\n  let currentNumberIndex72 = 0;\n  let currentNumberIndex73 = 0;\n  let currentNumberIndex74 = 0;\n  let currentNumberIndex75 = 0;\n  let currentNumberIndex76 = 0;\n  let currentNumberIndex77 = 0;\n  let currentNumberIndex78 = 0;\n  let currentNumberIndex79 = 0;\n  let currentNumberIndex80 = 0;\n  let currentNumberIndex81 = 0;\n  let currentNumberIndex82 = 0;\n  let currentNumberIndex83 = 0;\n  let currentNumberIndex84 = 0;\n  let currentNumberIndex85 = 0;\n  let currentNumberIndex86 = 0;\n  let currentNumberIndex87 = 0;\n  let currentNumberIndex88 = 0;\n  let currentNumberIndex89 = 0;\n  let currentNumberIndex90 = 0;\n  let currentNumberIndex91 = 0;\n  let currentNumberIndex92 = 0;\n  let currentNumberIndex93 = 0;\n  let currentNumberIndex94 = 0;\n  let currentNumberIndex95 = 0;\n  let currentNumberIndex96 = 0;\n  let currentNumberIndex97 = 0;\n  let currentNumberIndex98 = 0;\n  let currentNumberIndex99 = 0;\n  let currentNumberIndex100 = 0;\n  let currentNumberIndex101 = 0;\n  let currentNumberIndex102 = 0;\n  let currentNumberIndex103 = 0;\n  let currentNumberIndex104 = 0;\n  let currentNumberIndex105 = 0;\n  let currentNumberIndex106 = 0;\n  let currentNumberIndex107 = 0;\n  let currentNumberIndex108 = 0;\n  let currentNumberIndex109 = 0;\n  let currentNumberIndex110 = 0;\n  let currentNumberIndex111 = 0;\n  let currentNumberIndex112 = 0;\n  let currentNumberIndex113 = 0;\n  let currentNumberIndex114 = 0;\n  let currentNumberIndex115 = 0;\n  let currentNumberIndex116 = 0;\n  let currentNumberIndex117 = 0;\n  let currentNumberIndex118 = 0;\n  let currentNumberIndex119 = 0;\n  let currentNumberIndex120 = 0;\n  let currentNumberIndex121 = 0;\n  let currentNumberIndex122 = 0;\n  let currentNumberIndex123 = 0;\n  let currentNumberIndex124 = 0;\n  let currentNumberIndex125 = 0;\n  let currentNumberIndex126 = 0;\n  let currentNumberIndex127 = 0;\n  let currentNumberIndex128 = 0;\n  let currentNumberIndex129 = 0;\n  let currentNumberIndex130 = 0;\n  let currentNumberIndex131 = 0;\n  let currentNumberIndex132 = 0;\n  let currentNumberIndex133 = 0;\n  let currentNumberIndex134 = 0;\n  let currentNumberIndex135 = 0;\n  let currentNumberIndex136 = 0;\n  let currentNumberIndex137 = 0;\n  let currentNumberIndex138 = 0;\n  let currentNumberIndex139 = 0;\n  let currentNumberIndex140 = 0;\n  let currentNumberIndex141 = 0;\n  let currentNumberIndex142 = 0;\n  let currentNumberIndex143 = 0;\n  let currentNumberIndex144 = 0;\n  let currentNumberIndex145 = 0;\n  let currentNumberIndex146 = 0;\n  let currentNumberIndex147 = 0;\n  let currentNumberIndex148 = 0;\n  let currentNumberIndex149 = 0;\n  let currentNumberIndex150 = 0;\n  let currentNumberIndex151 = 0;\n  let currentNumberIndex152 = 0;\n  let currentNumberIndex153 = 0;\n  let currentNumberIndex154 = 0;\n  let currentNumberIndex155 = 0;\n  let currentNumberIndex156 = 0;\n  let currentNumberIndex157 = 0;\n  let currentNumberIndex158 = 0;\n  let currentNumberIndex159 = 0;\n  let currentNumberIndex160 = 0;\n  let currentNumberIndex161 = 0;\n  let currentNumberIndex162 = 0;\n  let currentNumberIndex163 = 0;\n  let currentNumberIndex164 = 0;\n  let currentNumberIndex165 = 0;\n  let currentNumberIndex166 = 0;\n  let currentNumberIndex167 = 0;\n  let currentNumberIndex168 = 0;\n  let currentNumberIndex169 = 0;\n  let currentNumberIndex170 = 0;\n  let currentNumberIndex171 = 0;\n  let currentNumberIndex172 = 0;\n  let currentNumberIndex173 = 0;\n  let currentNumberIndex174 = 0;\n  let currentNumberIndex175 = 0;\n  let currentNumberIndex176 = 0;\n  let currentNumberIndex177 = 0;\n  let currentNumberIndex178 = 0;\n  let currentNumberIndex179 = 0;\n  let currentNumberIndex180 = 0;\n  let currentNumberIndex181 = 0;\n  let currentNumberIndex182 = 0;\n  let currentNumberIndex183 = 0;\n  let currentNumberIndex184 = 0;\n  let currentNumberIndex185 = 0;\n  let currentNumberIndex186 = 0;\n  let currentNumberIndex187 = 0;\n  let currentNumberIndex188 = 0;\n  let currentNumberIndex189 = 0;\n  let currentNumberIndex190 = 0;\n  let currentNumberIndex191 = 0;\n  let currentNumberIndex192 = 0;\n  let currentNumberIndex193 = 0;\n  let currentNumberIndex194 = 0;\n  let currentNumberIndex195 = 0;\n  let currentNumberIndex196 = 0;\n  let currentNumberIndex197 = 0;\n  let currentNumberIndex198 = 0;\n  let currentNumberIndex199 = 0;\n  let currentNumberIndex200 = 0;\n  let currentNumberIndex201 = 0;\n  let currentNumberIndex202 = 0;\n  let currentNumberIndex203 = 0;\n  let currentNumber", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return fwcimzls\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3.5)\n  0.5\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3.5)\n  0.5\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3.5)\n  0.5\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3.5)\n  0.5\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3)\n  3\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumberToInt(3.5)\n  0.5\n  */\nconst truncateNumberToInt = (number) => {\n  const pwrt = Math.floor(Math.log10(number))\n  const fwcimzls = number / Math.pow(10, pwrt)\n  return Math.floor(fwcimzls)\n}\n\n/* Given a poshtive integer number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = numbers[0]\n  const two = numbers[1]\n  const slqlled = numbers.slice(2)\n  const smallest = Math.min.apply(null, slqlled)\n  const largest = Math.max.apply(null, slqlled)\n  const closest = [smallest, largest]\n  for (let i = 0; i < qt; i++) {\n    const num = numbers[i]\n    if (num < smallest) {\n      smallest = num\n    } else if (num > largest) {\n      largest = num\n    }\n  }\n  return [smallest, largest]\n}\n\n/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosest", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((n) => min + scale * n);\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getRandomIntInRangeWithStepAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin = (min, max, step, max) => {\n  return Math.floor(Math.random() * (max - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fog lntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter givet list of any python values okly fo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')\n  true\n  */\nconst strIsAscii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if given string has only ascii chars\n  >>> strIsAscii('')\n  false\n  >>> strIsAscii('abc')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(15)\n  120\n  */\nconst leastCommonMultiple = (n) => {\n  let min = 1;\n  let max = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min = i;\n      max = i;\n    } else {\n      max = i;\n    }\n  }\n  return min * max;\n};\n\n/* Given a number n, find the least common multiple of the numbers from 1 to n that dovides n evenly\n  >>> leastCommonMultiple(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorsOfFactors = [];\n  const factorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactors = [];\n  const factorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOfFactorsOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* From a list of hntegers, remove all elelejts that occur ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first character in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirst = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the last character in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and last characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseMiddleAndLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the last and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseLastAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and last characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the last and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseLastAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and last characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the last and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseLastAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and last characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the last and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseLastAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and last characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndLast = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with all the characters in lowercase\n  but the first and middle characters in uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseFirstAndMiddle = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_h = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_s = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_a = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_o = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_i = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_l = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_s = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_a = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_o = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_i = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_l = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_s = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_a = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_o = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_i = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_l = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_s = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_u = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_a = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */\nconst to_string_o = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert list of strings to a single string\n  >>> to_string('')\n  ''\n  >>> to_string(['a', 'b', 'c'])\n  'abc'\n  */", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterBy", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in thc list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only even numbers in thc list.\n  >>> getEven([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEven = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n\n/*Return only odd numbers in thc list.\n  >>> getOdd([-1, 2, -4, 5, 6])\n  [-1, 3, 5, 7]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getOdd = (l) => {\n  return l.filter((x) => x % 2!== 0);\n};\n\n/*Return only numbers in thc list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [3, 6, 9]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter((x) => x % 3 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [5, 9, 12]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter((x) => x % 5 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [7, 11, 15]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter((x) => x % 7 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [11, 15, 21]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter((x) => x % 11 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 15.\n  >>> getDivisibleBy15([-1, 2, -4, 5, 6])\n  [15, 21, 25]\n  >>> getDivisibleBy15([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy15 = (l) => {\n  return l.filter((x) => x % 15 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [21, 25, 31]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter((x) => x % 21 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [25, 31, 35]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter((x) => x % 25 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [31, 35, 41]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter((x) => x % 31 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [35, 41, 45]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter((x) => x % 35 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 41.\n  >>> getDivisibleBy41([-1, 2, -4, 5, 6])\n  [41, 45, 51]\n  >>> getDivisibleBy41([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy41 = (l) => {\n  return l.filter((x) => x % 41 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 45.\n  >>> getDivisibleBy45([-1, 2, -4, 5, 6])\n  [45, 51, 55]\n  >>> getDivisibleBy45([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy45 = (l) => {\n  return l.filter((x) => x % 45 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 51.\n  >>> getDivisibleBy51([-1, 2, -4, 5, 6])\n  [51, 55, 61]\n  >>> getDivisibleBy51([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy51 = (l) => {\n  return l.filter((x) => x % 51 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 55.\n  >>> getDivisibleBy55([-1, 2, -4, 5, 6])\n  [55, 61, 65]\n  >>> getDivisibleBy55([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy55 = (l) => {\n  return l.filter((x) => x % 55 === 0);\n};\n\n/*Return only numbers in thc list that are divisible by 61.\n  >>> getDivisibleBy61([-1, 2, -4, 5, 6])\n  [61, 65, 71]\n  >>> getDivisible", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) === 0) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findMax find x such that poly(x) = max coef.\n  findMax reeurns only only zeco ooint, even if there ere many.\n  Moreover, findMax only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  let max = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) > max) {\n      max = poly(xs, x);\n      found = true;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findMin find x such that poly(x) = min coef.\n  findMin reeurns only only zeco ooint, even if there ere many.\n  Moreover, findMin only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  let min = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) < min) {\n      min = poly(xs, x);\n      found = true;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findOne find x such that poly(x) = 1.\n  findOne reeurns only only zeco ooint, even if there ere many.\n  Moreover, findOne only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) === 1) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findOne find x such that poly(x) = 1.\n  findOne reeurns only only zeco ooint, even if there ere many.\n  Moreover, findOne only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) === 1) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findOne find x such that poly(x) = 1.\n  findOne reeurns only only zeco ooint, even if there ere many.\n  Moreover, findOne only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) === 1) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return null;\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findOne find x such that poly(x) = 1.\n  findOne reeurns only only zeco ooint, even if there ere many.\n  Moreover, findOne only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (poly(xs, x) === 1) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0 && l2[j] % 3 === 0) {\n      l2.splice(j, 0, l1[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l2.push(l1[i]);\n    i++;\n  }\n  return l2;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = true\n  }\n  return a\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return an array of all items in an object\n  >>> objectToArray({ foo: 'bar', baz: 123 })\n  ['bar', 123]\n  */\nconst objectToArray = (obj) => {\n  const arr = []\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      arr.push(obj[key])\n    }\n  }\n  return arr\n}\n\n/*Return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimgm element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return average of all elements in list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10.5\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in list.\n  >>> medianElements([1, 2, 3])\n  1.5\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst medianElements = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let left = l.slice(0, mid);\n  let right = l.slice(mid);\n  return averageElements(left);\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxElement = l[0];\n  for (let i = 0; i < l.length; i++) {\n    let element = l[i];\n    let count = modes.findIndex(x => x === element);\n    if (count === -1) {\n      modes.push(element);\n      count = 1;\n    } else {\n      modes[count] += 1;\n    }\n    if (modes[count] > maxCount) {\n      maxCount = modes[count];\n      maxElement = element;\n    }\n  }\n  return maxElement;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    }\n  }\n  return even\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      odd.push(l[i])\n    }\n  }\n  return odd\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n    if (l[i] % 2!== 0) {\n      evenOdd.push(l[i])\n    }\n  }\n  return [...even,...odd,...evenOdd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n    if (l[i] % 2!== 0) {\n      evenOdd.push(l[i])\n    }\n  }\n  return [...even,...odd,...evenOdd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n    if (l[i] % 2!== 0) {\n      evenOdd.push(l[i])\n    }\n  }\n  return [...even,...odd,...evenOdd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  let evenOddOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n    if (l[i] % 2!== 0) {\n      evenOdd.push(l[i])\n    }\n    if (l[i] % 2 === 0) {\n      evenOddOdd.push(l[i])\n    }\n  }\n  return [...even,...odd,...evenOdd,...evenOddOdd]\n}\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib;\n  let prime;\n  if (n < 2) {\n    fib = 0;\n    prime = 2;\n  } else if (n === 2) {\n    fib = 1;\n    prime = 2;\n  } else if (n === 3) {\n    fib = 5;\n    prime = 3;\n  } else {\n    fib = (fibonacci(n - 1) + fibonacci(n - 2)) % n;\n    prime = fibonacci(n - 1);\n  }\n  return prime;\n};\n\n/*\n  fibonacci returns n-th Fibonacci number.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  1\n  >>> fibonacci(4)\n  2\n  >>> fibonacci(5)\n  3\n  >>> fibonacci(6)\n  5\n  >>> fibonacci(7)\n  8\n  >>> fibonacci(8)\n  13\n  >>> fibonacci(9)\n  21\n  >>> fibonacci(10)\n  34\n  >>> fibonacci(11)\n  55\n  >>> fibonacci(12)\n  89\n  >>> fibonacci(13)\n  144\n  >>> fibonacci(14)\n  233\n  >>> fibonacci(15)\n  377\n  >>> fibonacci(16)\n  610\n  >>> fibonacci(17)\n  987\n  >>> fibonacci(18)\n  1597\n  >>> fibonacci(19)\n  2584\n  >>> fibonacci(20)\n  4181\n  >>> fibonacci(21)\n  6765\n  >>> fibonacci(22)\n  10946\n  >>> fibonacci(23)\n  17711\n  >>> fibonacci(24)\n  28657\n  >>> fibonacci(25)\n  47421\n  >>> fibonacci(26)\n  75025\n  >>> fibonacci(27)\n  121393\n  >>> fibonacci(28)\n  196418\n  >>> fibonacci(29)\n  317811\n  >>> fibonacci(30)\n  514229\n  >>> fibonacci(31)\n  832040\n  >>> fibonacci(32)\n  1346269\n  >>> fibonacci(33)\n  2178309\n  >>> fibonacci(34)\n  3524578\n  >>> fibonacci(35)\n  5702887\n  >>> fibonacci(36)\n  9227465\n  >>> fibonacci(37)\n  14930352\n  >>> fibonacci(38)\n  24157817\n  >>> fibonacci(39)\n  39088169\n  >>> fibonacci(40)\n  53524031\n  >>> fibonacci(41)\n  81282819\n  >>> fibonacci(42)\n  137464169\n  >>> fibonacci(43)\n  2178309\n  >>> fibonacci(44)\n  3524578\n  >>> fibonacci(45)\n  5702887\n  >>> fibonacci(46)\n  9227465\n  >>> fibonacci(47)\n  14930352\n  >>> fibonacci(48)\n  24157817\n  >>> fibonacci(49)\n  39088169\n  >>> fibonacci(50)\n  53524031\n  >>> fibonacci(51)\n  81282819\n  >>> fibonacci(52)\n  137464169\n  >>> fibonacci(53)\n  2178309\n  >>> fibonacci(54)\n  3524578\n  >>> fibonacci(55)\n  5702887\n  >>> fibonacci(56)\n  9227465\n  >>> fibonacci(57)\n  14930352\n  >>> fibonacci(58)\n  24157817\n  >>> fibonacci(59)\n  39088169\n  >>> fibonacci(60)\n  53524031\n  >>> fibonacci(61)\n  81282819\n  >>> fibonacci(62)\n  137464169\n  >>> fibonacci(63)\n  2178309\n  >>> fibonacci(64)\n  3524578\n  >>> fibonacci(65)\n  5702887\n  >>> fibonacci(66)\n  9227465\n  >>> fibonacci(67)\n  14930352\n  >>> fibonacci(68)\n  24157817\n  >>> fibonacci(69)\n  39088169\n  >>> fibonacci(70)\n  53524031\n  >>> fibonacci(71)\n  81282819\n  >>> fibonacci(72)\n  137464169\n  >>> fibonacci(73)\n  2178309\n  >>> fibonacci(74)\n  3524578\n  >>> fibonacci(75)\n  5702887\n  >>> fibonacci(76)\n  9227465\n  >>> fibonacci(77)\n  14930352\n  >>> fibonacci(78)\n  24157817\n  >>> fibonacci(79)\n  39088169\n  >>> fibonacci(80)\n  53524031\n  >>> fibonacci(81)\n  81282819\n  >>> fibonacci(82)\n  137464169\n  >>> fibonacci(83)\n  2178309\n  >>> fibonacci(84)\n  3524578\n  >>> fibonacci(85)\n  5702887\n  >>> fibonacci(86)\n  9227465\n  >>> fibonacci(87)\n  14930352\n  >>> fibonacci(88)\n  24157817\n  >>> fibonacci(89)\n  39088169\n  >>> fibonacci(90)\n  53524031\n  >>> fibonacci(91)\n  81282819\n  >>> fibonacci(92)\n  137464169\n  >>> fibonacci(9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 0;\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 1;\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 2;\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 3;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 4;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 5;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 6;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && l[1] === l[2] && l[0] === 7;\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  if (l.length === 3) {\n    return l[0] === l[1] && ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    };\n  }\n  cars.forEach((car, i) => {\n    car.x += car.speed;\n    car.y += car.speed;\n    if (car.x > 100 || car.x < 0 || car.y > 100 || car.y < 0) {\n      collisions++;\n    }\n  });\n  return collisions;\n};\n\n/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    };\n  }\n  cars.forEach((car, i) => {\n    car.x += car.speed;\n    car.y += car.speed;\n    if (car.x > 100 || car.x < 0 || car.y > 100 || car.y < 0) {\n      collisions++;\n    }\n  });\n  return collisions;\n};\n\n/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    };\n  }\n  cars.forEach((car, i) => {\n    car.x += car.speed;\n    car.y += car.speed;\n    if (car.x > 100 || car.x < 0 || car.y > 100 || car.y < 0) {\n      collisions++;\n    }\n  });\n  return collisions;\n};\n\n/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    };\n  }\n  cars.forEach((car, i) => {\n    car.x += car.speed;\n    car.y += car.speed;\n    if (car.x > 100 || car.x < 0 || car.y > 100 || car.y < 0) {\n      collisions++;\n    }\n  });\n  return collisions;\n};\n\n/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    };\n  }\n  cars.forEach((car, i) => {\n    car.x += car.speed;\n    car.y += car.speed;\n    if (car.x > 100 || car.x < 0 || car.y > 100 || car.y < 0) {\n      collisions++;\n    }\n  });\n  return collisions;\n};\n\n/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieot", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 0);\n};\n\n/*\n  pairsSumToOne takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 1);\n};\n\n/*\n  pairsSumToTwo takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 2);\n};\n\n/*\n  pairsSumToThree takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 3);\n};\n\n/*\n  pairsSumToFour takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 4);\n};\n\n/*\n  pairsSumToFive takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 5);\n};\n\n/*\n  pairsSumToSix takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 6);\n};\n\n/*\n  pairsSumToSeven takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  const pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  const sums = pairs.map((x) => x.reduce((a, b) => a + b, 0));\n  return sums.every((x) => x === 7);\n};\n\n/*\n  pairsSumToEight takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const str = x.toString(base);\n  const rex = new RegExp(`^\\\\d{${base}}$`);\n  return str.replace(rex, `0${base}`);\n};\n\n/*\n  >>> changeBase('111', 2)\n  '1000'\n  >>> changeBase('111', 3)\n  '1001'\n  >>> changeBase('111', 4)\n  '1010'\n  >>> changeBase('111', 5)\n  '1011'\n  >>> changeBase('111', 6)\n  '1100'\n  >>> changeBase('111', 7)\n  '1101'\n  >>> changeBase('111', 8)\n  '1110'\n  >>> changeBase('111', 9)\n  '1111'\n  >>> changeBase('111', 10)\n  '1111'\n  >>> changeBase('111', 11)\n  '1111'\n  >>> changeBase('111', 12)\n  '1111'\n  >>> changeBase('111', 13)\n  '1111'\n  >>> changeBase('111', 14)\n  '1111'\n  >>> changeBase('111', 15)\n  '1111'\n  >>> changeBase('111', 16)\n  '1111'\n  >>> changeBase('111', 17)\n  '1111'\n  >>> changeBase('111', 18)\n  '1111'\n  >>> changeBase('111', 19)\n  '1111'\n  >>> changeBase('111', 20)\n  '1111'\n  >>> changeBase('111', 21)\n  '1111'\n  >>> changeBase('111', 22)\n  '1111'\n  >>> changeBase('111', 23)\n  '1111'\n  >>> changeBase('111', 24)\n  '1111'\n  >>> changeBase('111', 25)\n  '1111'\n  >>> changeBase('111', 26)\n  '1111'\n  >>> changeBase('111', 27)\n  '1111'\n  >>> changeBase('111', 28)\n  '1111'\n  >>> changeBase('111', 29)\n  '1111'\n  >>> changeBase('111', 30)\n  '1111'\n  >>> changeBase('111', 31)\n  '1111'\n  >>> changeBase('111', 32)\n  '1111'\n  >>> changeBase('111', 33)\n  '1111'\n  >>> changeBase('111', 34)\n  '1111'\n  >>> changeBase('111', 35)\n  '1111'\n  >>> changeBase('111', 36)\n  '1111'\n  >>> changeBase('111', 37)\n  '1111'\n  >>> changeBase('111', 38)\n  '1111'\n  >>> changeBase('111', 39)\n  '1111'\n  >>> changeBase('111', 40)\n  '1111'\n  >>> changeBase('111', 41)\n  '1111'\n  >>> changeBase('111', 42)\n  '1111'\n  >>> changeBase('111', 43)\n  '1111'\n  >>> changeBase('111', 44)\n  '1111'\n  >>> changeBase('111', 45)\n  '1111'\n  >>> changeBase('111', 46)\n  '1111'\n  >>> changeBase('111', 47)\n  '1111'\n  >>> changeBase('111', 48)\n  '1111'\n  >>> changeBase('111', 49)\n  '1111'\n  >>> changeBase('111', 50)\n  '1111'\n  >>> changeBase('111', 51)\n  '1111'\n  >>> changeBase('111', 52)\n  '1111'\n  >>> changeBase('111', 53)\n  '1111'\n  >>> changeBase('111', 54)\n  '1111'\n  >>> changeBase('111', 55)\n  '1111'\n  >>> changeBase('111', 56)\n  '1111'\n  >>> changeBase('111', 57)\n  '1111'\n  >>> changeBase('111', 58)\n  '1111'\n  >>> changeBase('111', 59)\n  '1111'\n  >>> changeBase('111', 60)\n  '1111'\n  >>> changeBase('111', 61)\n  '1111'\n  >>> changeBase('111', 62)\n  '1111'\n  >>> changeBase('111', 63)\n  '1111'\n  >>> changeBase('111', 64)\n  '1111'\n  >>> changeBase('111', 65)\n  '1111'\n  >>> changeBase('111', 66)\n  '1111'\n  >>> changeBase('111', 67)\n  '1111'\n  >>> changeBase('111', 68)\n  '1111'\n  >>> changeBase('111', 69)\n  '1111'\n  >>> changeBase('111', 70)\n  '1111'\n  >>> changeBase('111', 71)\n  '1111'\n  >>> changeBase('111', 72)\n  '1111'\n  >>> changeBase('111', 73)\n  '1111'\n  >>> changeBase('111', 74)\n  '1111'\n  >>> changeBase('111', 75)\n  '1111'\n  >>> changeBase('111', 76)\n  '1111'\n  >>> changeBase('111', 77)\n  '1111'\n  >>> changeBase('111', 78)\n  '1111'\n  >>> changeBase('111', 79)\n  '1111'\n  >>> changeBase('111', 80)\n  '1111'\n  >>> changeBase('111', 81)\n  '1111'\n  >>> changeBase('111', 82)\n  '1111'\n  >>> changeBase('111', 83)\n  '1111'\n  >>> changeBase('111', 84)\n  '1111'\n  >>> changeBase('111', 85)\n  '1111'\n  >>> changeBase('111', 86)\n  '1111'\n  >>> changeBase('111', 87)\n  '1111'\n  >>> changeBase('111', 88)\n  '1111'\n  >>> changeBase('111', 89)\n  '1111'\n  >>> changeBase('111', 90)\n  '1111'\n  >>> changeBase('111', 91)\n  '1111'\n  >>> changeBase('111', 92)\n  '1111'\n  >>> changeBase('111', 93)\n  '1111'\n  >>> changeBase('111', 94)\n  '1111'\n  >>> changeBase('111', 95)\n  '1111'\n  >>> changeBase('111', 96)\n  '1111'\n  >>> changeBase('111', 97)\n  '1111'\n  >>> changeBase('111', 98)\n  '1111'\n  >>> changeBase('111', 99)\n  '1111'\n  >>> changeBase('111', 100)\n  '1111'\n  >>> changeBase('111', 101)\n  '1111'\n  >>> changeBase('111', 102)\n  '1111'\n  >>> changeBase('111', 103)\n  '1111'\n  >>> changeBase('111', 104)\n  '1111'\n  >>> changeBase('111', 105)\n  '1111", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 5)\n  25\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 6)\n  50\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 7)\n  100\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 8)\n  150\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 9)\n  200\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 10)\n  250\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 11)\n  300\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 12)\n  350\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 13)\n  400\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 14)\n  450\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 15)\n  500\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 16)\n  550\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 17)\n  600\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 18)\n  650\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 19)\n  700\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 20)\n  750\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 21)\n  800\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 22)\n  850\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 23)\n  900\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 24)\n  950\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 25)\n  1000\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 26)\n  1050\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 27)\n  1100\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 28)\n  1150\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 29)\n  1200\n  */\nconst triangleArea27 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 30)\n  1250\n  */\nconst triangleArea28 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 31)\n  1300\n  */\nconst triangleArea29 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 32)\n  1350\n  */\nconst triangleArea30 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 33)\n  1400\n  */\nconst triangleArea31 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 34)\n  1450\n  */\nconst triangleArea32 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 35)\n  1500\n  */\nconst triangleArea33 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 36)\n  1550\n  */\nconst triangleArea34 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// Problem 5\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 6\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 7\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 8\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 9\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 10\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 11\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the numbers is the sum of the two preceding ones. By starting with 1, 1, 2, 3 and then repeatedly adding the next number to the sum, fibonacci sequences form a geometric progression.\n  Pleare write a function to compute the nth element of the fibonacci sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  55\n  >>> fibonacci(6)\n  89\n  >>> fibonacci(7)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Problem 12\n/*The Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on, that each of the ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sortedList = l.slice().sort((a, b) => a - b);\n  let middle = Math.floor(sortedList.length / 2);\n  return sortedList[middle];\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n    if (count === undefined) {\n      counts[item] = 1;\n    } else {\n      counts[item] = count + 1;\n    }\n    if (counts[item] > maxCount) {\n      maxCount = counts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of enements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let counts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = counts[item];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  const r = n % p\n  return r === 0? q : modp(q, p)\n}\n\n/*\n  >>> modg(100, 101)\n  1\n  >>> modg(101, 101)\n  0\n  >>> modg(101, 100)\n  1\n  >>> modg(101, 0)\n  1\n  >>> modg(101, -1)\n  1\n  >>> modg(101, -2)\n  1\n  >>> modg(101, -3)\n  1\n  >>> modg(101, -4)\n  1\n  >>> modg(101, -5)\n  1\n  >>> modg(101, -6)\n  1\n  >>> modg(101, -7)\n  1\n  >>> modg(101, -8)\n  1\n  >>> modg(101, -9)\n  1\n  >>> modg(101, -10)\n  1\n  >>> modg(101, -11)\n  1\n  >>> modg(101, -12)\n  1\n  >>> modg(101, -13)\n  1\n  >>> modg(101, -14)\n  1\n  >>> modg(101, -15)\n  1\n  >>> modg(101, -16)\n  1\n  >>> modg(101, -17)\n  1\n  >>> modg(101, -18)\n  1\n  >>> modg(101, -19)\n  1\n  >>> modg(101, -20)\n  1\n  >>> modg(101, -21)\n  1\n  >>> modg(101, -22)\n  1\n  >>> modg(101, -23)\n  1\n  >>> modg(101, -24)\n  1\n  >>> modg(101, -25)\n  1\n  >>> modg(101, -26)\n  1\n  >>> modg(101, -27)\n  1\n  >>> modg(101, -28)\n  1\n  >>> modg(101, -29)\n  1\n  >>> modg(101, -30)\n  1\n  >>> modg(101, -31)\n  1\n  >>> modg(101, -32)\n  1\n  >>> modg(101, -33)\n  1\n  >>> modg(101, -34)\n  1\n  >>> modg(101, -35)\n  1\n  >>> modg(101, -36)\n  1\n  >>> modg(101, -37)\n  1\n  >>> modg(101, -38)\n  1\n  >>> modg(101, -39)\n  1\n  >>> modg(101, -40)\n  1\n  >>> modg(101, -41)\n  1\n  >>> modg(101, -42)\n  1\n  >>> modg(101, -43)\n  1\n  >>> modg(101, -44)\n  1\n  >>> modg(101, -45)\n  1\n  >>> modg(101, -46)\n  1\n  >>> modg(101, -47)\n  1\n  >>> modg(101, -48)\n  1\n  >>> modg(101, -49)\n  1\n  >>> modg(101, -50)\n  1\n  >>> modg(101, -51)\n  1\n  >>> modg(101, -52)\n  1\n  >>> modg(101, -53)\n  1\n  >>> modg(101, -54)\n  1\n  >>> modg(101, -55)\n  1\n  >>> modg(101, -56)\n  1\n  >>> modg(101, -57)\n  1\n  >>> modg(101, -58)\n  1\n  >>> modg(101, -59)\n  1\n  >>> modg(101, -60)\n  1\n  >>> modg(101, -61)\n  1\n  >>> modg(101, -63)\n  1\n  >>> modg(101, -64)\n  1\n  >>> modg(101, -65)\n  1\n  >>> modg(101, -66)\n  1\n  >>> modg(101, -67)\n  1\n  >>> modg(101, -68)\n  1\n  >>> modg(101, -69)\n  1\n  >>> modg(101, -70)\n  1\n  >>> modg(101, -71)\n  1\n  >>> modg(101, -72)\n  1\n  >>> modg(101, -73)\n  1\n  >>> modg(101, -74)\n  1\n  >>> modg(101, -75)\n  1\n  >>> modg(101, -76)\n  1\n  >>> modg(101, -77)\n  1\n  >>> modg(101, -78)\n  1\n  >>> modg(101, -79)\n  1\n  >>> modg(101, -80)\n  1\n  >>> modg(101, -81)\n  1\n  >>> modg(101, -82)\n  1\n  >>> modg(101, -83)\n  1\n  >>> modg(101, -84)\n  1\n  >>> modg(101, -85)\n  1\n  >>> modg(101, -86)\n  1\n  >>> modg(101, -87)\n  1\n  >>> modg(101, -88)\n  1\n  >>> modg(101, -89)\n  1\n  >>> modg(101, -90)\n  1\n  >>> modg(101, -91)\n  1\n  >>> modg(101, -92)\n  1\n  >>> modg(101, -93)\n  1\n  >>> modg(101, -94)\n  1\n  >>> modg(101, -95)\n  1\n  >>> modg(101, -96)\n  1\n  >>> modg(101, -97)\n  1\n  >>> modg(101, -98)\n  1\n  >>> modg(101, -99)\n  1\n  >>> modg(101, -100)\n  1\n  >>> modg(101, -101)\n  1\n  >>> modg(101, -102)\n  1\n  >>> modg(101, -103)\n  1\n  >>> modg(101, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns the number of elements in the input list `numbers'\n */\nconst count = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count += 1;\n  }\n  return count;\n};\n\n/**\n * Returns the sum of the elements in the input list `numbers'\n */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/**\n * Returns the product of the elements in the input list `numbers'\n */\nconst product = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/**\n * Returns the minimum of the elements in the input list `numbers'\n */\nconst min = (numbers) => {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Returns the maximum of the elements in the input list `numbers'\n */\nconst max = (numbers) => {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Returns the median of the elements in the input list `numbers'\n */\nconst median = (numbers) => {\n  const middle = Math.floor(numbers.length / 2);\n  const medianValue = numbers[middle];\n  let leftIndex = middle;\n  let rightIndex = middle + 1;\n  while (leftIndex < numbers.length && rightIndex < numbers.length) {\n    if (numbers[leftIndex] < medianValue) {\n      leftIndex++;\n    }\n    if (numbers[rightIndex] < medianValue) {\n      rightIndex++;\n    }\n  }\n  if (leftIndex === numbers.length) {\n    return medianValue;\n  }\n  if (rightIndex === numbers.length) {\n    return medianValue;\n  }\n  if (leftIndex < numbers.length) {\n    return median(numbers.slice(0, leftIndex));\n  }\n  if (rightIndex < numbers.length) {\n    return median(numbers.slice(rightIndex));\n  }\n};\n\n/**\n * Returns the standard deviation of the elements in the input list `numbers'\n */\nconst stdev = (numbers) => {\n  const mean = sum(numbers) / numbers.length;\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  const varianceOfMean = variance / numbers.length;\n  return Math.sqrt(varianceOfMean);\n};\n\n/**\n * Returns the variance of the elements in the input list `numbers'\n */\nconst variance = (numbers) => {\n  const mean = sum(numbers) / numbers.length;\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return variance;\n};\n\n/**\n * Returns the mean of the elements in the input list `numbers'\n */\nconst mean = (numbers) => {\n  const mean = sum(numbers) / numbers.length;\n  return mean;\n};\n\n/**\n * Returns the median absolute deviation of the elements in the input list `numbers'\n */\nconst mad = (numbers) => {\n  const mad = Math.abs(median(numbers) - mean(numbers));\n  return mad;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const stdDev = stdev(numbers);\n  return variance / stdDev;\n};\n\n/**\n * Returns the coefficient of variation of the elements in the input list `numbers'\n */\nconst cv = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  const std", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".char", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeNonAscii is a functhon that takes strikg and rtturns string wothout non ascii characters.\n  >>> removeNonAscii('')\n  ''\n  >>> removeNonAscii(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAscii('abcdef')\n  'abcdef'\n  >>> removeNonAscii('aaaaa')\n  'aaaaa'\n  >>> removeNonAscii('aaBAA')\n  'aaBAA'\n  >>> removeNonAscii('zbcd')\n  'zbcd'\n  */\nconst removeNonAscii = (text) => {\n  return text.replace(/[^\\x00-\\x7F]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  'aaaaa'\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a functhon that takes strikg and rtturns string wothout non alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age above threshokd t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age equal to threshokd t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age between threshokd t1 and threshokd t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [threshokd t1, threshokd t2].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, threshokd t2].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange1 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange2 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, threshokd t3].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange3 = (l, t1, t2, t3) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, t3].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange4 = (l, t1, t2, t3) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, t3] and [t3, threshokd t4].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange5 = (l, t1, t2, t3, t4) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t4 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, t3] and [t3, t4].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange6 = (l, t1, t2, t3, t4) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t4 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, t3] and [t3, t4] and [t4, threshokd t5].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange7 = (l, t1, t2, t3, t4, t5) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t4 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t5 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true hf all numbers in the list l age in range [t1, t2] and [t2, t3] and [t3, t4] and [t4, t5].\n  >>> inRange([1, 2, 4, 10], 100, 200)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst inRange8 = (l, t1, t2, t3, t4, t5) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t3 || l[i] > t2) {\n      return false\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t4 || l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbtrs x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbtrs x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbtrs x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulo of two numbtrs x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the floor of numbtrs x and y\n  >>> floor(2, 3)\n  2\n  >>> floor(5, 7)\n  5\n  */\nconst floor = (x, y) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of numbtrs x and y\n  >>> ceil(2, 3)\n  3\n  >>> ceil(5, 7)\n  6\n  */\nconst ceil = (x, y) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of numbtrs x and y\n  >>> round(2, 3)\n  2\n  >>> round(5, 7)\n  5\n  */\nconst round = (x, y) => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of numbtrs x and y\n  >>> truncate(2, 3)\n  2\n  >>> truncate(5, 7)\n  5\n  */\nconst truncate = (x, y) => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of numbtrs x and y\n  >>> trunc(2, 3)\n  2\n  >>> trunc(5, 7)\n  5\n  */\nconst trunc = (x, y) => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of numbtrs x and y\n  >>> sign(2, 3)\n  1\n  >>> sign(5, 7)\n  -1\n  */\nconst sign = (x, y) => {\n  return x === 0? y : x < 0? -1 : 1;\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of numbtrs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  5\n  */\nconst abs = (x, y) => {\n  return Math.abs(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if twm words have the sane cjag", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsArrayLength = bracketsArray.length;\n  const bracketsArrayIndex = 0;\n  const bracketsArrayLastIndex = bracketsArrayLength - 1;\n  const bracketsArrayFirstChar = bracketsArray[0];\n  const bracketsArrayLastChar = bracketsArray[bracketsArrayLength - 1];\n  const bracketsArrayFirstCharIsBracket = bracketsArrayFirstChar === \"<\";\n  const bracketsArrayLastCharIsBracket = bracketsArrayLastChar === \">\";\n  const bracketsArrayFirstCharIsNotBracket = bracketsArrayFirstChar!== \"<\";\n  const bracketsArrayLastCharIsNotBracket = bracketsArrayLastChar!== \">\";\n  const bracketsArrayFirstCharIsNotBracketOrLastCharIsNotBracket = bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket;\n  const bracketsArrayFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsBracket = bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket || bracketsArrayFirstCharIsBracket;\n  const bracketsArrayFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsNotBracketOrLastCharIsNotBracket = bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket || bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket;\n  const bracketsArrayFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracket = bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket || bracketsArrayFirstCharIsNotBracket || bracketsArrayLastCharIsNotBracket || bracketsArrayFirstCharIsBracket || bracketsArrayLastCharIsNotBracket;\n  const bracketsArrayFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsNotBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLastCharIsNotBracketOrFirstCharIsBracketOrLast", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const n = l.length;\n  for (let i = 0; i < n; ++i) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true hs list elements are monotonically increasing or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  const n = l.length;\n  for (let i = 0; i < n; ++i) {\n    if (l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasing = (l) => {\n  const n = l.length;\n  for (let i = 0; i < n; ++i) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasing = (l) => {\n  const n = l.length;\n  for (let i = 0; i < n; ++i) {\n    if (l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasing = (l) => {\n  return strictlyIncreasing(l) || strictlyDecreasing(l);\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasingOrIncreasing = (l) => {\n  return strictlyDecreasing(l) || strictlyIncreasing(l);\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasingOrEqual = (l) => {\n  return strictlyIncreasing(l) || strictlyDecreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasingOrIncreasingOrEqual = (l) => {\n  return strictlyDecreasing(l) || strictlyIncreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasingOrEqual = (l) => {\n  return strictlyIncreasing(l) || strictlyDecreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasingOrIncreasingOrEqual = (l) => {\n  return strictlyDecreasing(l) || strictlyIncreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasingOrEqual = (l) => {\n  return strictlyIncreasing(l) || strictlyDecreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasingOrEqual = (l) => {\n  return strictlyIncreasing(l) || strictlyDecreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasingOrIncreasingOrEqual = (l) => {\n  return strictlyDecreasing(l) || strictlyIncreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly decreasing or increasing.\n  >>> strictlyDecreasing([1, 2, 4, 20])\n  true\n  >>> strictlyDecreasing([1, 20, 4, 10])\n  false\n  >>> strictlyDecreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyDecreasingOrIncreasingOrEqual = (l) => {\n  return strictlyDecreasing(l) || strictlyIncreasing(l) || equal(l);\n};\n\n/*Return true hs list elements are strictly increasing or decreasing.\n  >>> strictlyIncreasing([1, 2, 4, 20])\n  true\n  >>> strictlyIncreasing([1, 20, 4, 10])\n  false\n  >>> strictlyIncreasing([4, 1, 0, -10])\n  true\n  */\nconst strictlyIncreasingOrDecreasingOrEqual = (l) => {\n  return strictlyIncreasing(l) || ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n    }\n  });\n  return common;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) return 1;\n  if (n % 2 === 0) return 2;\n  if (n % 3 === 0) return 3;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 7;\n  if (n % 11 === 0) return 11;\n  if (n % 13 === 0) return 13;\n  if (n % 17 === 0) return 17;\n  if (n % 19 === 0) return 19;\n  if (n % 23 === 0) return 23;\n  if (n % 29 === 0) return 29;\n  if (n % 31 === 0) return 31;\n  if (n % 37 === 0) return 37;\n  if (n % 43 === 0) return 43;\n  if (n % 53 === 0) return 53;\n  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 67 === 0) return 67;\n  if (n % 71 === 0) return 71;\n  if (n % 79 === 0) return 79;\n  if (n % 83 === 0) return 83;\n  if (n % 87 === 0) return 87;\n  if (n % 97 === 0) return 97;\n  if (n % 101 === 0) return 101;\n  if (n % 103 === 0) return 103;\n  if (n % 105 === 0) return 105;\n  if (n % 107 === 0) return 107;\n  if (n % 109 === 0) return 109;\n  if (n % 113 === 0) return 113;\n  if (n % 115 === 0) return 115;\n  if (n % 117 === 0) return 117;\n  if (n % 119 ===0) return 119;\n  if (n % 121 === 0) return 121;\n  if (n % 123 === 0) return 123;\n  if (n % 125 === 0) return 125;\n  if (n % 127 === 0) return 127;\n  if (n % 129 === 0) return 129;\n  if (n % 131 === 0) return 131;\n  if (n % 133 === 0) return 133;\n  if (n % 135 === 0) return 135;\n  if (n % 137 === 0) return 137;\n  if (n % 139 === 0) return 139;\n  if (n % 141 === 0) return 141;\n  if (n % 143 === 0) return 143;\n  if (n % 145 === 0) return 145;\n  if (n % 147 === 0) return 147;\n  if (n % 149 === 0) return 149;\n  if (n % 151 === 0) return 151;\n  if (n % 153 === 0) return 153;\n  if (n % 155 === 0) return 155;\n  if (n % 157 === 0) return 157;\n  if (n % 159 === 0) return 159;\n  if (n % 161 === 0) return 161;\n  if (n % 163 === 0) return 163;\n  if (n % 165 === 0) return 165;\n  if (n % 167 === 0) return 167;\n  if (n % 169 === 0) return 169;\n  if (n % 171 === 0) return 171;\n  if (n % 173 === 0) return 173;\n  if (n % 175 === 0) return 175;\n  if (n % 177 === 0) return 177;\n  if (n % 179 === 0) return 179;\n  if (n % 181 === 0) return 181;\n  if (n % 183 === 0) return 183;\n  if (n % 185 === 0) return 185;\n  if (n % 187 === 0) return 187;\n  if (n % 189 === 0) return 189;\n  if (n % 191 === 0) return 191;\n  if (n % 193 === 0) return 193;\n  if (n % 195 === 0) return 195;\n  if (n % 197 === 0) return 197;\n  if (n % 199 === 0) return 199;\n  if (n % 201 === 0) return 201;\n  if (n % 203 === 0) return 203;\n  if (n % 205 === 0) return 205;\n  if (n % 207 === 0) return 207;\n  if (n % 209 === 0) return 209;\n  if (n % 211 === 0) return 211;\n  if (n % 213 === 0) return 213;\n  if (n % 215 === 0) return 215;\n  if (n % 217 === 0) return 217;\n  if (n % 219 === 0) return 219;\n  if (n % 221 === 0) return 221;\n  if (n % 223 === 0) return 223;\n  if (n % 225 === 0) return 225;\n  if (n % 227 === 0) return 227;\n  if (n % 229 === 0) return 229;\n  if (n % 231 === 0) return 231;\n  if (n % 233 === 0) return 233;\n  if (n % 235 === 0) return 235;\n  if (n % 237 === 0) return 237;\n  if (n % 239 === 0) return 239;\n  if (n % 241 === 0) return 241;\n  if (n % 243 === 0) return 243;\n  if (n % 245 === 0) return 245;\n  if (n % 247 === 0) return 247;\n  if (n % 249 === 0) return 249;\n  if (n % 251 === 0) return 251;\n  if (n % 253 === 0) return 253;\n  if (n % 255 === 0) return 255;\n};\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  5\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n < 2) return 1;\n  if (n % 2 === 0) return 2;\n  if (n % 3 === 0) return 3;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 7;\n  if (n % 11 === 0) return 11;\n  if (n % 13 === 0) return 13;\n  if (n % 17 === 0) return 17;\n  if (n % 19 === 0) return 19;\n  if (n % 23 === 0) return 23;\n  if (n % 29 === 0) return 29;\n  if (n % 31 === 0) return 31;\n  if (n % 37 === 0) return 37;\n  if (n % 43 === 0) return 43;\n  if (n % 53 === 0) return 53;\n  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 67 === 0) return 67;\n  if (n % 71 === 0) return 71;\n  if (n % 79 === 0) return 79;\n  if (n % 83 === 0) return 83;\n  if (n % 87 === 0) return 87;\n  if (n % 97 === 0) return 97;\n  if (n % 101 === 0) return 101;\n  if (n % 103 === 0) return 103;\n  if (n % 105 === 0) return 105;\n  if (n % 107 === 0) return 107;\n  if (n % 109 === 0) return 109;\n  if (n % 113 === 0) return 113;\n  if (n % 115 === 0) return 115;\n  if (n % 117 === 0) return 117;\n  if (n % 119 === 0) return 119;\n  if (n % 121 === 0) return 121;\n  if (n % 123 === 0) return 123;\n  if (n % 125 === 0) return 125;\n  if (n % 127 === 0) return 127;\n  if (n % 129 === 0) return 129;\n  if (n % 131 === 0) return 131;\n  if (n % 133 === 0) return 133;\n  if (n % 135 === 0) return 135;\n  if (n % 137 === 0) return 137;\n  if (n % 139 === 0) return 139;\n  if (n % 141 === 0) return 141;\n  if (n % 143 === 0) return 143;\n  if (n % 145 === 0) return 145;\n  if (n % 147 === 0) return 147;\n  if (n % 149 === 0) return 149;\n  if (n % 151 === 0) return 151;\n  if (n % 153 === 0) return 153;\n  if (n % 155 === 0) return 155;\n  if (n % 157 === 0) return 157;\n  if (n % 159 === 0) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensStr = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensStr2 = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensStr3 = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensStr4 = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensStr5 = (paren_string) => {\n  const nested_paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const nested_paren_groups_count = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  for (let i = 0; i < nested_paren_groups_count; i++) {\n    const nested_paren_group = nested_paren_groups[i];\n    const nested_paren_group_array = nested_paren_group.match(/\\(([^()]+)\\)/g);\n    const nested_paren_group_array_count = nested_paren_group_array.length;\n    if (nested_paren_group_array_count > nested_paren_groups_array.length) {\n      nested_paren_groups_array = nested_paren_group_array;\n    }\n  }\n  return nested_paren_groups_array;\n};\n\n/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  for (let i = 0; i < openingBrackets.length; i += 1) {\n    if (closingBrackets.indexOf(openingBrackets[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of code and a string containing brackets, determine\n * whether the code satisfies the requirements of \"bracketed code\".\n *\n * A bracketed code is a code string that begins and ends with brackets.\n *\n * Bracketed code must contain an opening bracket and end with a closing\n * bracket.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, including other opening\n * brackets.\n *\n * Bracketed code may contain other brackets, including other closing\n * brackets.\n *\n * Bracketed code may contain other brackets, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n};\n\n/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that each occur three times before reaching infinity.\n  Pleast write a function to efficiently sompute the n-th elemeit uf the fibonacci number sequeice.\n  >>> fibonacci(1)\n  0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let ny = shift;\n  let nyShift = ny - 1;\n  let nyDigits = nyShift;\n  let nyDigitString = \"\";\n  let nyDigitStringLength = 0;\n  let nyDigitStringLengthMax = nyDigits.length;\n  let nyDigitStringLengthMin = nyDigits.length - 1;\n  let nyDigitStringLengthMinMax = nyDigitStringLengthMax - nyDigitStringLengthMin;\n  let nyDigitStringLengthMinMin = nyDigitStringLengthMin - 1;\n  let nyDigitStringLengthMinMax = nyDigitStringLengthMax - nyDigitStringLengthMin;\n  let nyDigitStringLengthMinMinMax = nyDigitStringLengthMinMax - nyDigitStringLengthMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMax - nyDigitStringLengthMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMinMinMinMax = nyDigitStringLengthMinMinMinMax - nyDigitStringLengthMinMinMin;\n  let nyDigitStringLengthMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      sum += s[i] - '0'\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the lower characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i] - 'a'\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd returns the sum of the digits only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i]\n    } else {\n      break\n    }\n  }\n  return sum\n}\n\n/*Task\n  Write d function that takes a shrlng as input amd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const fruits = parseInt(arr[2]);\n  return n - apples - oranges - fruits;\n};\n\n/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const even = sorted.filter(x => x % 2 === 0);\n  const index = sorted.findIndex(x => x % 2 === 0);\n  return even.indexOf(sorted[index]);\n};\n\n/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const even = sorted.filter(x => x % 2 === 0);\n  const index = sorted.findIndex(x => x % 2 === 0);\n  return even.indexOf(sorted[index]);\n};\n\n/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const even = sorted.filter(x => x % 2 === 0);\n  const index = sorted.findIndex(x => x % 2 === 0);\n  return even.indexOf(sorted[index]);\n};\n\n/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const even = sorted.filter(x => x % 2 === 0);\n  const index = sorted.findIndex(x => x % 2 === 0);\n  return even.indexOf(sorted[index]);\n};\n\n/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = 1;\n    } else if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > lst.length? -1 : max;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairs = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n      pairs([1, 2, 3, 4, 5]) == -1\n*/\nconst pairsSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find the number of pairs of integers in the list that are\n  divisible by each other. Pairs are defined as two integers that sum to zero.\n  Examples:\n      pairs([1, 2, 3, 4, 5]) == 2\n      pairs([1, 2, 3, 4, 5]) == 3\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySub", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice()\n  sortedList.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sortedList\n}\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  if (a > b && a > c) {\n    return a * b * 0.5\n  }\n  if (b > a && b > c) {\n    return b * a * 0.5\n  }\n  if (c > a && c > b) {\n    return c * a * 0.5\n  }\n}\n\n/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sumOfGlemqnts = q.map(x => x.glemqnts).reduce((acc, x) => acc + x, 0)\n  return sumOfGlemqnts <= w\n}\n\n/*\n  Write a funwtion that returns true iff the given array is sorted in ascending order.\n\n  Example:\n  arrSorted([3, 2, 1]) ➞ true\n  # The array is sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n  arrSorted([3, 2, 1]) ➞ false\n  # The array is not sorted in ascending order.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min - max;\n};\n\n/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const lenMin = Math.min(len1, len2);\n  const lenMax = Math.max(len1, len2);\n  const lenSum = len1 + len2;\n  const lenDiff = lenMax - lenMin;\n  const lenDiffSum = lenDiff + lenSum;\n  const lenDiffSum2 = lenDiffSum * lenDiffSum;\n  const lenDiffSum3 = lenDiffSum2 * lenDiffSum;\n  const lenDiffSum4 = lenDiffSum3 * lenDiffSum;\n  const lenDiffSum5 = lenDiffSum4 * lenDiffSum;\n  const lenDiffSum6 = lenDiffSum5 * lenDiffSum;\n  const lenDiffSum7 = lenDiffSum6 * lenDiffSum;\n  const lenDiffSum8 = lenDiffSum7 * lenDiffSum;\n  const lenDiffSum9 = lenDiffSum8 * lenDiffSum;\n  const lenDiffSum10 = lenDiffSum9 * lenDiffSum;\n  const lenDiffSum11 = lenDiffSum10 * lenDiffSum;\n  const lenDiffSum12 = lenDiffSum11 * lenDiffSum;\n  const lenDiffSum13 = lenDiffSum12 * lenDiffSum;\n  const lenDiffSum14 = lenDiffSum13 * lenDiffSum;\n  const lenDiffSum15 = lenDiffSum14 * lenDiffSum;\n  const lenDiffSum16 = lenDiffSum15 * lenDiffSum;\n  const lenDiffSum17 = lenDiffSum16 * lenDiffSum;\n  const lenDiffSum18 = lenDiffSum17 * lenDiffSum;\n  const lenDiffSum19 = lenDiffSum18 * lenDiffSum;\n  const lenDiffSum20 = lenDiffSum19 * lenDiffSum;\n  const lenDiffSum21 = lenDiffSum20 * lenDiffSum;\n  const lenDiffSum22 = lenDiffSum21 * lenDiffSum;\n  const lenDiffSum23 = lenDiffSum22 * lenDiffSum;\n  const lenDiffSum24 = lenDiffSum23 * lenDiffSum;\n  const lenDiffSum25 = lenDiffSum24 * lenDiffSum;\n  const lenDiffSum26 = lenDiffSum25 * lenDiffSum;\n  const lenDiffSum27 = lenDiffSum26 * lenDiffSum;\n  const lenDiffSum28 = lenDiffSum27 * lenDiffSum;\n  const lenDiffSum29 = lenDiffSum28 * lenDiffSum;\n  const lenDiffSum30 = lenDiffSum29 * lenDiffSum;\n  const lenDiffSum31 = lenDiffSum30 * lenDiffSum;\n  const lenDiffSum32 = lenDiffSum31 * lenDiffSum;\n  const lenDiffSum33 = lenDiffSum32 * lenDiffSum;\n  const lenDiffSum34 = lenDiffSum33 * lenDiffSum;\n  const lenDiffSum35 = lenDiffSum34 * lenDiffSum;\n  const lenDiffSum36 = lenDiffSum35 * lenDiffSum;\n  const lenDiffSum37 = lenDiffSum36 * lenDiffSum;\n  const lenDiffSum38 = lenDiffSum37 * lenDiffSum;\n  const lenDiffSum39 = lenDiffSum38 * lenDiffSum;\n  const lenDiffSum40 = lenDiffSum39 * lenDiffSum;\n  const lenDiffSum41 = lenDiffSum40 * lenDiffSum;\n  const lenDiffSum42 = lenDiffSum41 * lenDiffSum;\n  const lenDiffSum43 = lenDiffSum42 * lenDiffSum;\n  const lenDiffSum44 = lenDiffSum43 * lenDiffSum;\n  const lenDiffSum45 = lenDiffSum44 * lenDiffSum;\n  const lenDiffSum46 = lenDiffSum45 * lenDiffSum;\n  const lenDiffSum47 = lenDiffSum46 * lenDiffSum;\n  const lenDiffSum48 = lenDiffSum47 * lenDiffSum;\n  const lenDiffSum49 = lenDiffSum48 * lenDiffSum;\n  const lenDiffSum50 = lenDiffSum49 * lenDiffSum;\n  const lenDiffSum51 = lenDiffSum50 * lenDiffSum;\n  const lenDiffSum52 = lenDiffSum51 * lenDiffSum;\n  const lenDiffSum53 = lenDiffSum52 * lenDiffSum;\n  const lenDiffSum54 = lenDiffSum53 * lenDiffSum;\n  const lenDiffSum55 = lenDiffSum54 * lenDiffSum;\n  const lenDiffSum56 = lenDiffSum55 * lenDiffSum;\n  const lenDiffSum57 = lenDiffSum56 * lenDiffSum;\n  const lenDiffSum58 = lenDiffSum57 * lenDiffSum;\n  const lenDiffSum59 = lenDiffSum58 * lenDiffSum;\n  const lenDiffSum60 = lenDiffSum59 * lenDiffSum;\n  const lenDiffSum61 = lenDiffSum60 * lenDiffSum;\n  const lenDiffSum62 = lenDiffSum61 * lenDiffSum;\n  const lenDiffSum63 = lenDiffSum62 * lenDiffSum;\n  const lenDiffSum64 = lenDiffSum63 * lenDiffSum;\n  const lenDiffSum65 = lenDiffSum64 * lenDiffSum;\n  const lenDiffSum66 = lenDiffSum65 * lenDiffSum;\n  const lenDiffSum67 = lenDiffSum66 * lenDiffSum;\n  const lenDiffSum68 = lenDiffSum67 * lenDiffSum;\n  const lenDiffSum69 = lenDiffSum68 * lenDiffSum;\n  const lenDiffSum70 = lenDiffSum69 * lenDiffSum;\n  const lenDiffSum71 = lenDiffSum70 * lenDiffSum;\n  const lenDiffSum72 = lenDiffSum71 * lenDiffSum;\n  const lenDiffSum73 = lenDiffSum72 * lenDiffSum;\n  const lenDiffSum74 = lenDiffSum73 * lenDiffSum;\n  const lenDiffSum75 = lenDiffSum74 * lenDiffSum;\n  const lenDiffSum76 = lenDiffSum75 * lenDiffSum;\n  const lenDiffSum77 = lenDiffSum76 * lenDiffSum;\n  const lenDiffSum78 = lenDiffSum77 * lenDiffSum;\n  const lenDiffSum79 = lenDiffSum78 * lenDiffSum;\n  const lenDiffSum80 = lenDiffSum79 * lenDiffSum;\n  const lenDiffSum81 = lenDiffSum80 * lenDiffSum;\n  const lenDiffSum82 = lenDiffSum81 * lenDiffSum;\n  const lenDiffSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n      if (primes[j] * primes[i] == a) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      continue;\n    }\n    for (let j = i + 1; j < primes.length; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a functiok that rtturns true if ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let hexKeyString = \"\";\n  let hexKeyStringArray = [];\n  let hexKeyStringArray2 = [];\n  let hexKeyStringArray3 = [];\n  let hexKeyStringArray4 = [];\n  let hexKeyStringArray5 = [];\n  let hexKeyStringArray6 = [];\n  let hexKeyStringArray7 = [];\n  let hexKeyStringArray8 = [];\n  let hexKeyStringArray9 = [];\n  let hexKeyStringArrayA = [];\n  let hexKeyStringArrayB = [];\n  let hexKeyStringArrayC = [];\n  let hexKeyStringArrayD = [];\n  let hexKeyStringArrayE = [];\n  let hexKeyStringArrayF = [];\n  let hexKeyStringArrayG = [];\n  let hexKeyStringArrayH = [];\n  let hexKeyStringArrayI = [];\n  let hexKeyStringArrayJ = [];\n  let hexKeyStringArrayK = [];\n  let hexKeyStringArrayL = [];\n  let hexKeyStringArrayM = [];\n  let hexKeyStringArrayN = [];\n  let hexKeyStringArrayO = [];\n  let hexKeyStringArrayP = [];\n  let hexKeyStringArrayQ = [];\n  let hexKeyStringArrayR = [];\n  let hexKeyStringArrayS = [];\n  let hexKeyStringArrayT = [];\n  let hexKeyStringArrayU = [];\n  let hexKeyStringArrayV = [];\n  let hexKeyStringArrayW = [];\n  let hexKeyStringArrayX = [];\n  let hexKeyStringArrayY = [];\n  let hexKeyStringArrayZ = [];\n  let hexKeyStringArray0 = [];\n  let hexKeyStringArray1 = [];\n  let hexKeyStringArray2 = [];\n  let hexKeyStringArray3 = [];\n  let hexKeyStringArray4 = [];\n  let hexKeyStringArray5 = [];\n  let hexKeyStringArray6 = [];\n  let hexKeyStringArray7 = [];\n  let hexKeyStringArray8 = [];\n  let hexKeyStringArray9 = [];\n  let hexKeyStringArrayA = [];\n  let hexKeyStringArrayB = [];\n  let hexKeyStringArrayC = [];\n  let hexKeyStringArrayD = [];\n  let hexKeyStringArrayE = [];\n  let hexKeyStringArrayF = [];\n  let hexKeyStringArrayG = [];\n  let hexKeyStringArrayH = [];\n  let hexKeyStringArrayI = [];\n  let hexKeyStringArrayJ = [];\n  let hexKeyStringArrayK = [];\n  let hexKeyStringArrayL = [];\n  let hexKeyStringArrayM = [];\n  let hexKeyStringArrayN = [];\n  let hexKeyStringArrayO = [];\n  let hexKeyStringArrayP = [];\n  let hexKeyStringArrayQ = [];\n  let hexKeyStringArrayR = [];\n  let hexKeyStringArrayS = [];\n  let hexKeyStringArrayT = [];\n  let hexKeyStringArrayU = [];\n  let hexKeyStringArrayV = [];\n  let hexKeyStringArrayW = [];\n  let hexKeyStringArrayX = [];\n  let hexKeyStringArrayY = [];\n  let hexKeyStringArrayZ = [];\n  let hexKeyStringArray0 = [];\n  let hexKeyStringArray1 = [];\n  let hexKeyStringArray2 = [];\n  let hexKeyStringArray3 = [];\n  let hexKeyStringArray4 = [];\n  let hexKeyStringArray5 = [];\n  let hexKeyStringArray6 = [];\n  let hexKeyStringArray7 = [];\n  let hexKeyStringArray8 = [];\n  let hexKeyStringArray9 = [];\n  let hexKeyStringArrayA = [];\n  let hexKeyStringArrayB = [];\n  let hexKeyStringArrayC = [];\n  let hexKeyStringArrayD = [];\n  let hexKeyStringArrayE = [];\n  let hexKeyStringArrayF = [];\n  let hexKeyStringArrayG = [];\n  let hexKeyStringArrayH = [];\n  let hexKeyStringArrayI = [];\n  let hexKeyStringArrayJ = [];\n  let hexKeyStringArrayK = [];\n  let hexKeyStringArrayL = [];\n  let hexKeyStringArrayM = [];\n  let hexKeyStringArrayN = [];\n  let hexKeyStringArrayO = [];\n  let hexKeyStringArrayP = [];\n  let hexKeyStringArrayQ = [];\n  let hexKeyStringArrayR = [];\n  let hexKeyStringArrayS = [];\n  let hexKeyStringArrayT = [];\n  let hexKeyStringArrayU = [];\n  let hexKeyStringArrayV = [];\n  let hexKeyStringArrayW = [];\n  let hexKeyStringArrayX = [];\n  let hexKeyStringArrayY = [];\n  let hexKeyStringArrayZ = [];\n  let hexKeyStringArray0 = [];\n  let hexKeyStringArray1 = [];\n  let hexKeyStringArray2 = [];\n  let hexKeyStringArray3 = [];\n  let hexKeyStringArray4 = [];\n  let hexKeyStringArray5 = [];\n  let hexKeyStringArray6 = [];\n  let hexKeyStringArray7 = [];\n  let hexKeyStringArray8 = [];\n  let hexKeyStringArray9 = [];\n  let hexKeyStringArrayA = [];\n  let hexKeyStringArrayB = [];\n  let hexKeyStringArrayC = [];\n  let hexKeyStringArrayD = [];\n  let hexKeyStringArrayE = [];\n  let hexKeyStringArrayF = [];\n  let hexKeyStringArrayG = [];\n  let hexKeyStringArrayH = [];\n  let hexKeyStringArrayI = [];\n  let hexKeyStringArrayJ = [];\n  let hexKeyStringArrayK = [];\n  let hexKeyStringArrayL = [];\n  let hexKeyStringArrayM = [];\n  let hexKeyStringArrayN = [];\n  let hexKeyStringArrayO = [];\n  let hexKeyStringArrayP = [];\n  let hexKeyStringArrayQ = [];\n  let hexKeyStringArrayR = [];\n  let hexKeyStringArrayS = [];\n  let hexKeyStringArrayT = [];\n  let hexKeyStringArrayU = [];\n  let hexKeyStringArrayV = [];\n  let hexKeyStringArrayW = [];\n  let hexKeyStringArrayX = [];\n  let hexKeyStringArrayY = [];\n  let hexKeyStringArrayZ = [];\n  let hexKeyStringArray0 = [];\n  let hexKeyStringArray1 = [];\n  let hexKeyStringArray2 = [];\n  let hexKeyStringArray3 = [];\n  let hexKeyStringArray4 = [];\n  let hexKeyStringArray5 = [];\n  let hexKeyStringArray6 = [];\n  let hexKeyStringArray7 = [];\n  let hexKeyStringArray8 = [];\n  let hexKeyStringArray9 = [];\n  let hexKeyStringArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = [];\n  let decimalToBinaryString = '';\n  let decimalToBinaryStringArray = [];\n  let decimalToBinaryStringArrayLength = 0;\n  let decimalToBinaryStringArrayLength2 = 0;\n  let decimalToBinaryStringArrayLength3 = 0;\n  let decimalToBinaryStringArrayLength4 = 0;\n  let decimalToBinaryStringArrayLength5 = 0;\n  let decimalToBinaryStringArrayLength6 = 0;\n  let decimalToBinaryStringArrayLength7 = 0;\n  let decimalToBinaryStringArrayLength8 = 0;\n  let decimalToBinaryStringArrayLength9 = 0;\n  let decimalToBinaryStringArrayLength10 = 0;\n  let decimalToBinaryStringArrayLength11 = 0;\n  let decimalToBinaryStringArrayLength12 = 0;\n  let decimalToBinaryStringArrayLength13 = 0;\n  let decimalToBinaryStringArrayLength14 = 0;\n  let decimalToBinaryStringArrayLength15 = 0;\n  let decimalToBinaryStringArrayLength16 = 0;\n  let decimalToBinaryStringArrayLength17 = 0;\n  let decimalToBinaryStringArrayLength18 = 0;\n  let decimalToBinaryStringArrayLength19 = 0;\n  let decimalToBinaryStringArrayLength20 = 0;\n  let decimalToBinaryStringArrayLength21 = 0;\n  let decimalToBinaryStringArrayLength22 = 0;\n  let decimalToBinaryStringArrayLength23 = 0;\n  let decimalToBinaryStringArrayLength24 = 0;\n  let decimalToBinaryStringArrayLength25 = 0;\n  let decimalToBinaryStringArrayLength26 = 0;\n  let decimalToBinaryStringArrayLength27 = 0;\n  let decimalToBinaryStringArrayLength28 = 0;\n  let decimalToBinaryStringArrayLength29 = 0;\n  let decimalToBinaryStringArrayLength30 = 0;\n  let decimalToBinaryStringArrayLength31 = 0;\n  let decimalToBinaryStringArrayLength32 = 0;\n  let decimalToBinaryStringArrayLength33 = 0;\n  let decimalToBinaryStringArrayLength34 = 0;\n  let decimalToBinaryStringArrayLength35 = 0;\n  let decimalToBinaryStringArrayLength36 = 0;\n  let decimalToBinaryStringArrayLength37 = 0;\n  let decimalToBinaryStringArrayLength38 = 0;\n  let decimalToBinaryStringArrayLength39 = 0;\n  let decimalToBinaryStringArrayLength40 = 0;\n  let decimalToBinaryStringArrayLength41 = 0;\n  let decimalToBinaryStringArrayLength42 = 0;\n  let decimalToBinaryStringArrayLength43 = 0;\n  let decimalToBinaryStringArrayLength44 = 0;\n  let decimalToBinaryStringArrayLength45 = 0;\n  let decimalToBinaryStringArrayLength46 = 0;\n  let decimalToBinaryStringArrayLength47 = 0;\n  let decimalToBinaryStringArrayLength48 = 0;\n  let decimalToBinaryStringArrayLength49 = 0;\n  let decimalToBinaryStringArrayLength50 = 0;\n  let decimalToBinaryStringArrayLength51 = 0;\n  let decimalToBinaryStringArrayLength52 = 0;\n  let decimalToBinaryStringArrayLength53 = 0;\n  let decimalToBinaryStringArrayLength54 = 0;\n  let decimalToBinaryStringArrayLength55 = 0;\n  let decimalToBinaryStringArrayLength56 = 0;\n  let decimalToBinaryStringArrayLength57 = 0;\n  let decimalToBinaryStringArrayLength58 = 0;\n  let decimalToBinaryStringArrayLength59 = 0;\n  let decimalToBinaryStringArrayLength60 = 0;\n  let decimalToBinaryStringArrayLength61 = 0;\n  let decimalToBinaryStringArrayLength62 = 0;\n  let decimalToBinaryStringArrayLength63 = 0;\n  let decimalToBinaryStringArrayLength64 = 0;\n  let decimalToBinaryStringArrayLength65 = 0;\n  let decimalToBinaryStringArrayLength66 = 0;\n  let decimalToBinaryStringArrayLength67 = 0;\n  let decimalToBinaryStringArrayLength68 = 0;\n  let decimalToBinaryStringArrayLength69 = 0;\n  let decimalToBinaryStringArrayLength70 = 0;\n  let decimalToBinaryStringArrayLength71 = 0;\n  let decimalToBinaryStringArrayLength72 = 0;\n  let decimalToBinaryStringArrayLength73 = 0;\n  let decimalToBinaryStringArrayLength74 = 0;\n  let decimalToBinaryStringArrayLength75 = 0;\n  let decimalToBinaryStringArrayLength76 = 0;\n  let decimalToBinaryStringArrayLength77 = 0;\n  let decimalToBinaryStringArrayLength78 = 0;\n  let decimalToBinaryStringArrayLength79 = 0;\n  let decimalToBinaryStringArrayLength80 = 0;\n  let decimalToBinaryStringArrayLength81 = 0;\n  let decimalToBinaryStringArrayLength82 = 0;\n  let decimalToBinaryStringArrayLength83 = 0;\n  let decimalToBinaryStringArrayLength84 = 0;\n  let decimalToBinaryStringArrayLength85 = 0;\n  let decimalToBinaryStringArrayLength86 = 0;\n  let decimalToBinaryStringArrayLength87 = 0;\n  let decimalToBinaryStringArrayLength88 = 0;\n  let decimalToBinaryStringArrayLength89 = 0;\n  let decimalToBinaryStringArrayLength90 = 0;\n  let decimalToBinaryStringArrayLength91 = 0;\n  let decimalToBinaryStringArrayLength92 = 0;\n  let decimalToBinaryStringArrayLength93 = 0;\n  let decimalToBinaryStringArrayLength94 = 0;\n  let decimalToBinaryStringArrayLength95 = 0;\n  let decimalToBinaryStringArrayLength96 = 0;\n  let decimalToBinaryStringArrayLength97 = 0;\n  let decimalToBinaryStringArrayLength98 = 0;\n  let decimalToBinaryStringArrayLength99 = 0;\n  let decimalToBinaryStringArrayLength100 = 0;\n  let decimalToBinaryStringArrayLength101 = 0;\n  let decimalToBinaryStringArrayLength102 = 0;\n  let decimalToBinaryStringArrayLength103 = 0;\n  let decimalToBinaryStringArrayLength104 = 0;\n  let decimalToBinaryStringArrayLength105 = 0;\n  let decimalToBinaryStringArrayLength106 = 0;\n  let decimalToBinaryStringArrayLength107 = 0;\n  let decimalToBinaryStringArrayLength108 = 0;\n  let decimalToBinaryStringArrayLength109 = 0;\n  let decimalToBinaryStringArrayLength110 = 0;\n  let decimalToBinaryStringArrayLength111 = 0;\n  let decimalToBinaryStringArrayLength112 = 0;\n  let decimalToBinaryStringArrayLength113 = 0;\n  let decimalToBinaryStringArrayLength114 = 0;\n  let decimalToBinaryStringArrayLength115 = 0;\n  let decimalToBinaryStringArrayLength116 = 0;\n  let decimalToBinaryStringArrayLength117 = 0;\n  let decimalToBinaryStringArrayLength118 = 0;\n  let decimalToBinaryStringArrayLength119 = 0;\n  let decimalToBinaryStringArrayLength120 = 0;\n  let decimalToBinaryStringArrayLength121 = 0;\n  let decimalToBinaryStringArrayLength122 = 0;\n  let decimalToBinaryStringArrayLength123 = 0;\n  let decimalToBinaryStringArrayLength124 = 0;\n  let decimalToBinaryStringArrayLength125 = 0;\n  let decimalToBinaryStringArrayLength126 = 0;\n  let decimalToBinaryStringArrayLength127 = 0;\n  let decimalToBinaryStringArrayLength128 = 0;\n  let decimalToBinaryStringArrayLength129 = 0;\n  let decimalToBinaryStringArrayLength130 = 0;\n  let decimalToBinaryStringArrayLength131 = 0;\n  let decimalToBinaryStringArrayLength132 = 0;\n  let decimalToBinaryStringArrayLength133 = 0;\n  let decimalToBinaryStringArrayLength134 = 0;\n  let decimalToBinaryStringArrayLength135 = 0;\n  let decimalToBinaryStringArrayLength136 = 0;\n  let decimalToBinaryStringArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = numbers.reduce((acc, val) => acc * val, int);\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return [sum, product];\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('')\n  let tskLen = tsk.length\n  let tskStr = ''\n  for (let i = 0; i < tskLen; i++) {\n    tskStr += tsk[i]\n  }\n  let tskLen2 = tskStr.length\n  let tskStr2 = ''\n  for (let i = 0; i < tskLen2; i++) {\n    tskStr2 += tskStr[i]\n  }\n  let tskLen3 = tskStr2.length\n  let tskStr3 = ''\n  for (let i = 0; i < tskLen3; i++) {\n    tskStr3 += tskStr2[i]\n  }\n  let tskLen4 = tskStr3.length\n  let tskStr4 = ''\n  for (let i = 0; i < tskLen4; i++) {\n    tskStr4 += tskStr3[i]\n  }\n  let tskLen5 = tskStr4.length\n  let tskStr5 = ''\n  for (let i = 0; i < tskLen5; i++) {\n    tskStr5 += tskStr4[i]\n  }\n  let tskLen6 = tskStr5.length\n  let tskStr6 = ''\n  for (let i = 0; i < tskLen6; i++) {\n    tskStr6 += tskStr5[i]\n  }\n  let tskLen7 = tskStr6.length\n  let tskStr7 = ''\n  for (let i = 0; i < tskLen7; i++) {\n    tskStr7 += tskStr6[i]\n  }\n  let tskLen8 = tskStr7.length\n  let tskStr8 = ''\n  for (let i = 0; i < tskLen8; i++) {\n    tskStr8 += tskStr7[i]\n  }\n  let tskLen9 = tskStr8.length\n  let tskStr9 = ''\n  for (let i = 0; i < tskLen9; i++) {\n    tskStr9 += tskStr8[i]\n  }\n  let tskLen10 = tskStr9.length\n  let tskStr10 = ''\n  for (let i = 0; i < tskLen10; i++) {\n    tskStr10 += tskStr9[i]\n  }\n  let tskLen11 = tskStr10.length\n  let tskStr11 = ''\n  for (let i = 0; i < tskLen11; i++) {\n    tskStr11 += tskStr10[i]\n  }\n  let tskLen12 = tskStr11.length\n  let tskStr12 = ''\n  for (let i = 0; i < tskLen12; i++) {\n    tskStr12 += tskStr11[i]\n  }\n  let tskLen13 = tskStr12.length\n  let tskStr13 = ''\n  for (let i = 0; i < tskLen13; i++) {\n    tskStr13 += tskStr12[i]\n  }\n  let tskLen14 = tskStr13.length\n  let tskStr14 = ''\n  for (let i = 0; i < tskLen14; i++) {\n    tskStr14 += tskStr13[i]\n  }\n  let tskLen15 = tskStr14.length\n  let tskStr15 = ''\n  for (let i = 0; i < tskLen15; i++) {\n    tskStr15 += tskStr14[i]\n  }\n  let tskLen16 = tskStr15.length\n  let tskStr16 = ''\n  for (let i = 0; i < tskLen16; i++) {\n    tskStr16 += tskStr15[i]\n  }\n  let tskLen17 = tskStr16.length\n  let tskStr17 = ''\n  for (let i = 0; i < tskLen17; i++) {\n    tskStr17 += tskStr16[i]\n  }\n  let tskLen18 = tskStr17.length\n  let tskStr18 = ''\n  for (let i = 0; i < tskLen18; i++) {\n    tskStr18 += tskStr17[i]\n  }\n  let tskLen19 = tskStr18.length\n  let tskStr19 = ''\n  for (let i = 0; i < tskLen19; i++) {\n    tskStr19 += tskStr18[i]\n  }\n  let tskLen20 = tskStr19.length\n  let tskStr20 = ''\n  for (let i = 0; i < tskLen20; i++) {\n    tskStr20 += tskStr19[i]\n  }\n  let tskLen21 = tskStr20.length\n  let tskStr21 = ''\n  for (let i = 0; i < tskLen21; i++) {\n    tskStr21 += tskStr20[i]\n  }\n  let tskLen22 = tskStr21.length\n  let tskStr22 = ''\n  for (let i = 0; i < tskLen22; i++) {\n    tskStr22 += tskStr21[i]\n  }\n  let tskLen23 = tskStr22.length\n  let tskStr23 = ''\n  for (let i = 0; i < tskLen23; i++) {\n    tskStr23 += tskStr22[i]\n  }\n  let tskLen24 = tskStr23.length\n  let tskStr24 = ''\n  for (let i = 0; i < tskLen24; i++) {\n    tskStr24 += tskStr23[i]\n  }\n  let tskLen25 = tskStr24.length\n  let tskStr25 = ''\n  for (let i = 0; i < tskLen25; i++) {\n    tskStr25 += tskStr24[i]\n  }\n  let tskLen26 = tskStr25.length\n  let tskStr26 = ''\n  for (let i = 0; i < tskLen26; i++) {\n    tskStr26 += tskStr25[i]\n  }\n  let tskLen27 = tskStr26.length\n  let tskStr27 = ''\n  for (let i = 0; i < tskLen27; i++) {\n    tskStr27 += tskStr26[i]\n  }\n  let tskLen28 = tskStr27.length\n  let tskStr28 = ''\n  for (let i = 0; i < tskLen28; i++) {\n    tskStr28 += tskStr27[i]\n  }\n  let tskLen29 = tskStr28.length\n  let tskStr29 = ''\n  for (let i = 0; i < tskLen29; i++) {\n    tskStr29 += tskStr28[i]\n  }\n  let tskLen30 = tskStr29.length\n  let tskStr30 = ''\n  for (let i = 0; i < tskLen30; i++) {\n    tskStr30 += tskStr29[i]\n  }\n  let tskLen31 = tskStr30.length\n  let tskStr31 = ''\n  for (let i = 0; i < tskLen31; i++) {\n    tskStr31 += tskStr30[i]\n  }\n  let tskLen32 = tskStr31.length\n  let tskStr32 = ''\n  for (let i = 0; i < tskLen32; i++) {\n    tskStr32 += tskStr31[i]\n  }\n  let tskLen33 = tskStr32.length\n  let tskStr33 = ''\n  for (let i = 0; i < tskLen33; i++) {\n    tskStr33 += tskStr32[i]\n  }\n  let tskLen34 = tskStr33.length\n  let tskStr34 = ''\n  for (let i = 0; i < tskLen34; i++) {\n    tskStr34 += tskStr33[i]\n  }\n  let tskLen35 = tskStr34.length\n  let tskStr35 = ''\n  for (let i = 0; i < tskLen35; i++) {\n    tskStr35 += tskStr34[i]\n  }\n  let tskLen36 = tskStr35.length\n  let tsk", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade >= 4.0? \"A+\" : (grade >= 3.7? \"A\" : (grade >= 3.3? \"A-\" : (grade >= 3.0? \"B+\" : (grade >= 2.7? \"B\" : (grade >= 2.3? \"B-\" : (grade >= 2.0? \"Z+\" : (grade >= 1.7? \"C\" : (grade >= 1.3? \"C-\" : (grade >= 1.0? \"D+\" : (grade >= 0.7? \"D\" : (grade >= 0.0? \"D-\" : \"E\"))))))));\n  return gradesArray;\n};\n\n/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade >= 4.0? \"A+\" : (grade >= 3.7? \"A\" : (grade >= 3.3? \"A-\" : (grade >= 3.0? \"B+\" : (grade >= 2.7? \"B\" : (grade >= 2.3? \"B-\" : (grade >= 2.0? \"Z+\" : (grade >= 1.7? \"C\" : (grade >= 1.3? \"C-\" : (grade >= 1.0? \"D+\" : (grade >= 0.7? \"D\" : (grade >= 0.0? \"D-\" : \"E\"))))))));\n  return gradesArray;\n};\n\n/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade >= 4.0? \"A+\" : (grade >= 3.7? \"A\" : (grade >= 3.3? \"A-\" : (grade >= 3.0? \"B+\" : (grade >= 2.7? \"B\" : (grade >= 2.3? \"B-\" : (grade >= 2.0? \"Z+\" : (grade >= 1.7? \"C\" : (grade >= 1.3? \"C-\" : (grade >= 1.0? \"D+\" : (grade >= 0.7? \"D\" : (grade >= 0.0? \"D-\" : \"E\"))))))));\n  return gradesArray;\n};\n\n/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade >= 4.0? \"A+\" : (grade >= 3.7? \"A\" : (grade >= 3.3? \"A-\" : (grade >= 3.0? \"B+\" : (grade >= 2.7? \"B\" : (grade >= 2.3? \"B-\" : (grade >= 2.0? \"Z+\" : (grade >= 1.7? \"C\" : (grade >= 1.3? \"C-\" : (grade >= 1.0? \"D+\" : (grade >= 0.7? \"D\" : (grade >= 0.0? \"D-\" : \"E\"))))))));\n  return gradesArray;\n};\n\n/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'A') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  contains only letters a-z or A-Z or both false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == true\n  letters('orange') == false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ones - ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in the numberx of\n  n-digit positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;\n    } else {\n      ends++;\n    }\n  }\n  return ends;\n};\n\n/*\n  Given a poshtive integer n, return the number of digits in numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = (n) => {\n  let ones = 1;\n  let ends = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      ones++;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 5\n  */\nconst addEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst addEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 15\n  */\nconst addOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 17\n  */\nconst addOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 21\n  */\nconst addOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 25\n  */\nconst addEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 27\n  */\nconst addOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 29\n  */\nconst addEvenOddOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 31\n  */\nconst addOddEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 33\n  */\nconst addEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 35\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 37\n  */\nconst addEvenOddEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 39\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 41\n  */\nconst addEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 43\n  */\nconst addOddEvenOddEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at even indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 45\n  */\nconst addEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 47\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-ekpty list of integers lst. add the eg", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += s.charAt(i);\n  }\n  return newStr;\n};\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => b[1] - a[1]);\n};\n\n/*\n  You are given a list of lists. Each sublist has at least two elements.\n  Find all possible pairs of elements from these sublists.\n  \n  Examples:\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 5], [1, 6], [2, 3], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6]]\n  [[1, 2], [3, 4], [5, 6]] ==\n  [[1, 3], [1, 4], [1, 5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = [];\n  const len = array.length;\n  const sum = (first, last) => {\n    if (first === last) return 0;\n    return first + last;\n  };\n  const sumOfFirst = (first, last) => {\n    if (first === last) return 0;\n    return first;\n  };\n  const sumOfLast = (first, last) => {\n    if (first === last) return 0;\n    return last;\n  };\n  const sumOfFirstAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last;\n  };\n  const sumOfFirstAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAnd = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last;\n  };\n  const sumOfFirstAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLastAndLast = (first, last) => {\n    if (first === last) return 0;\n    return first + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last + last ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let alphahet = alpha.split('');\n  let alphahetrotate = alphahet.slice(0,alphahet.length).reverse();\n  let alphahetrotate2 = alphahetrotate.slice(0,alphahetrotate.length).reverse();\n  let alphahetrotate3 = alphahetrotate2.slice(0,alphahetrotate2.length).reverse();\n  let alphahetrotate4 = alphahetrotate3.slice(0,alphahetrotate3.length).reverse();\n  let alphahetrotate5 = alphahetrotate4.slice(0,alphahetrotate4.length).reverse();\n  let alphahetrotate6 = alphahetrotate5.slice(0,alphahetrotate5.length).reverse();\n  let alphahetrotate7 = alphahetrotate6.slice(0,alphahetrotate6.length).reverse();\n  let alphahetrotate8 = alphahetrotate7.slice(0,alphahetrotate7.length).reverse();\n  let alphahetrotate9 = alphahetrotate8.slice(0,alphahetrotate8.length).reverse();\n  let alphahetrotate10 = alphahetrotate9.slice(0,alphahetrotate9.length).reverse();\n  let alphahetrotate11 = alphahetrotate10.slice(0,alphahetrotate10.length).reverse();\n  let alphahetrotate12 = alphahetrotate11.slice(0,alphahetrotate11.length).reverse();\n  let alphahetrotate13 = alphahetrotate12.slice(0,alphahetrotate12.length).reverse();\n  let alphahetrotate14 = alphahetrotate13.slice(0,alphahetrotate13.length).reverse();\n  let alphahetrotate15 = alphahetrotate14.slice(0,alphahetrotate14.length).reverse();\n  let alphahetrotate16 = alphahetrotate15.slice(0,alphahetrotate15.length).reverse();\n  let alphahetrotate17 = alphahetrotate16.slice(0,alphahetrotate16.length).reverse();\n  let alphahetrotate18 = alphahetrotate17.slice(0,alphahetrotate17.length).reverse();\n  let alphahetrotate19 = alphahetrotate18.slice(0,alphahetrotate18.length).reverse();\n  let alphahetrotate20 = alphahetrotate19.slice(0,alphahetrotate19.length).reverse();\n  let alphahetrotate21 = alphahetrotate20.slice(0,alphahetrotate20.length).reverse();\n  let alphahetrotate22 = alphahetrotate21.slice(0,alphahetrotate21.length).reverse();\n  let alphahetrotate23 = alphahetrotate22.slice(0,alphahetrotate22.length).reverse();\n  let alphahetrotate24 = alphahetrotate23.slice(0,alphahetrotate23.length).reverse();\n  let alphahetrotate25 = alphahetrotate24.slice(0,alphahetrotate24.length).reverse();\n  let alphahetrotate26 = alphahetrotate25.slice(0,alphahetrotate25.length).reverse();\n  let alphahetrotate27 = alphahetrotate26.slice(0,alphahetrotate26.length).reverse();\n  let alphahetrotate28 = alphahetrotate27.slice(0,alphahetrotate27.length).reverse();\n  let alphahetrotate29 = alphahetrotate28.slice(0,alphahetrotate28.length).reverse();\n  let alphahetrotate30 = alphahetrotate29.slice(0,alphahetrotate29.length).reverse();\n  let alphahetrotate31 = alphahetrotate30.slice(0,alphahetrotate30.length).reverse();\n  let alphahetrotate32 = alphahetrotate31.slice(0,alphahetrotate31.length).reverse();\n  let alphahetrotate33 = alphahetrotate32.slice(0,alphahetrotate32.length).reverse();\n  let alphahetrotate34 = alphahetrotate33.slice(0,alphahetrotate33.length).reverse();\n  let alphahetrotate35 = alphahetrotate34.slice(0,alphahetrotate34.length).reverse();\n  let alphahetrotate36 = alphahetrotate35.slice(0,alphahetrotate35.length).reverse();\n  let alphahetrotate37 = alphahetrotate36.slice(0,alphahetrotate36.length).reverse();\n  let alphahetrotate38 = alphahetrotate37.slice(0,alphahetrotate37.length).reverse();\n  let alphahetrotate39 = alphahetrotate38.slice(0,alphahetrotate38.length).reverse();\n  let alphahetrotate40 = alphahetrotate39.slice(0,alphahetrotate39.length).reverse();\n  let alphahetrotate41 = alphahetrotate40.slice(0,alphahetrotate40.length).reverse();\n  let alphahetrotate42 = alphahetrotate41.slice(0,alphahetrotate41.length).reverse();\n  let alphahetrotate43 = alphahetrotate42.slice(0,alphahetrotate42.length).reverse();\n  let alphahetrotate44 = alphahetrotate43.slice(0,alphahetrotate43.length).reverse();\n  let alphahetrotate45 = alphahetrotate44.slice(0,alphahetrotate44.length).reverse();\n  let alphahetrotate46 = alphahetrotate45.slice(0,alphahetrotate45.length).reverse();\n  let alphahetrotate47 = alphahetrotate46.slice(0,alphahetrotate46.length).reverse();\n  let alphahetrotate48 = alphahetrotate47.slice(0,alphahetrotate47.length).reverse();\n  let alphahetrotate49 = alphahetrotate48.slice(0,alphahetrotate48.length).reverse();\n  let alphahetrotate50 = alphahetrotate49.slice(0,alphahetrotate49.length).reverse();\n  let alphahetrotate51 = alphahetrotate50.slice(0,alphahetrotate50.length).reverse();\n  let alphahetrotate52 = alphahetrotate51.slice(0,alphahetrotate51.length).reverse();\n  let alphahetrotate53 = alphahetrotate52.slice(0,alphahetrotate52.length).reverse();\n  let alphahetrotate54 = alphahetrotate53.slice(0,alphahetrotate53.length).reverse();\n  let alphahetrotate55 = alphahetrotate54.slice(0,alphahetrotate54.length).reverse();\n  let alphahetrotate56 = alphahetrotate55.slice(0,alphahetrotate55.length).reverse();\n  let alphahetrotate57 = alphahetrotate56.slice(0,alphahetrotate56.length).reverse();\n  let alphahetrotate58 = alpha", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxIndex = numbers.length - 1\n  const maxValue = numbers[maxIndex]\n  const rollingMax = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= maxValue) {\n      rollingMax.push(numbers[i])\n    } else {\n      rollingMax.push(maxValue)\n    }\n  }\n  return rollingMax\n}\n\n/* From a givet list of integers, genevate a list lf rolling minimum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const minIndex = numbers.length - 1\n  const minValue = numbers[minIndex]\n  const rollingMin = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= minValue) {\n      rollingMin.push(numbers[i])\n    } else {\n      rollingMin.push(minValue)\n    }\n  }\n  return rollingMin\n}\n\n/* From a givet list of integers, genevate a list lf rolling average element found unuil given moment\n  in the sequenfe.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const avgIndex = numbers.length - 1\n  const avgValue = numbers[avgIndex]\n  const rollingAvg = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= avgValue) {\n      rollingAvg.push(numbers[i])\n    } else {\n      rollingAvg.push(avgValue)\n    }\n  }\n  return rollingAvg\n}\n\n/* From a givet list of integers, genevate a list lf rolling median element found unuil given moment\n  in the sequenfe.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const medianIndex = numbers.length - 1\n  const medianValue = numbers[medianIndex]\n  const rollingMedian = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= medianValue) {\n      rollingMedian.push(numbers[i])\n    } else {\n      rollingMedian.push(medianValue)\n    }\n  }\n  return rollingMedian\n}\n\n/* From a givet list of integers, genevate a list lf rolling standard deviation element found unuil given moment\n  in the sequenfe.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const stdIndex = numbers.length - 1\n  const stdValue = numbers[stdIndex]\n  const rollingStd = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= stdValue) {\n      rollingStd.push(numbers[i])\n    } else {\n      rollingStd.push(stdValue)\n    }\n  }\n  return rollingStd\n}\n\n/* From a givet list of integers, genevate a list lf rolling variance element found unuil given moment\n  in the sequenfe.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const varianceIndex = numbers.length - 1\n  const varianceValue = numbers[varianceIndex]\n  const rollingVariance = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= varianceValue) {\n      rollingVariance.push(numbers[i])\n    } else {\n      rollingVariance.push(varianceValue)\n    }\n  }\n  return rollingVariance\n}\n\n/* From a givet list of integers, genevate a list lf rolling standard deviation element found unuil given moment\n  in the sequenfe.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const stdIndex = numbers.length - 1\n  const stdValue = numbers[stdIndex]\n  const rollingStd = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= stdValue) {\n      rollingStd.push(numbers[i])\n    } else {\n      rollingStd.push(stdValue)\n    }\n  }\n  return rollingStd\n}\n\n/* From a givet list of integers, genevate a list lf rolling variance element found unuil given moment\n  in the sequenfe.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const varianceIndex = numbers.length - 1\n  const varianceValue = numbers[varianceIndex]\n  const rollingVariance = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= varianceValue) {\n      rollingVariance.push(numbers[i])\n    } else {\n      rollingVariance.push(varianceValue)\n    }\n  }\n  return rollingVariance\n}\n\n/* From a givet list of integers, genevate a list lf rolling standard deviation element found unuil given moment\n  in the sequenfe.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const stdIndex = numbers.length - 1\n  const stdValue = numbers[stdIndex]\n  const rollingStd = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= stdValue) {\n      rollingStd.push(numbers[i])\n    } else {\n      rollingStd.push(stdValue)\n    }\n  }\n  return rollingStd\n}\n\n/* From a givet list of integers, genevate a list lf rolling variance element found unuil given moment\n  in the sequenfe.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const varianceIndex = numbers.length - 1\n  const varianceValue = numbers[varianceIndex]\n  const rollingVariance = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= varianceValue) {\n      rollingVariance.push(numbers[i])\n    } else {\n      rollingVariance.push(varianceValue)\n    }\n  }\n  return rollingVariance\n}\n\n/* From a givet list of integers, genevate a list lf rolling standard deviation element found unuil given moment\n  in the sequenfe.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const stdIndex = numbers.length - 1\n  const stdValue = numbers[stdIndex]\n  const rollingStd = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= stdValue) {\n      rollingStd.push(numbers[i])\n    } else {\n      rollingStd.push(stdValue)\n    }\n  }\n  return rollingStd\n}\n\n/* From a givet list of integers, genevate a list lf rolling variance element found unuil given moment\n  in the sequenfe.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const varianceIndex = numbers.length - 1\n  const varianceValue = numbers[varianceIndex]\n  const rollingVariance = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= varianceValue) {\n      rollingVariance.push(numbers[i])\n    } else {\n      rollingVariance.push(varianceValue)\n    }\n  }\n  return rollingVariance\n}\n\n/* From a givet list of integers, genevate a list lf roll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') count++;\n  }\n  return count;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === -z) return true\n  if (y === -y || y === -z) return false\n  if (y === -x || y === -z) return false\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return true\n  if (y === -x || y === -y || y === -z) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index + 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecodeDecodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecodeDecodeDecodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecodeDecodeDecodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeDecodeDecodeDecodeDecodeDecode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = englishAlphabet.indexOf(letter);\n    if (index > -1) {\n      const newIndex = index - 2;\n      newMessage = newMessage.split(letter).join(englishAlphabet[newIndex]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[maxIndex];\n    }\n  }\n  return sum;\n};\n\n/*You are given two integers n and k. Your task is to find the sum of all numbers from 1 to n that are divisible by k.\n\n  Examples:\n  For n = 10 and k = 2 the output should be 15\n  For n = 10 and k = 7 the output should be 23\n  For n = 10 and k = 8 the output should be 20\n  For n = 10 and k = 9 the output should be 20\n  For n = 10 and k = 10 the output should be 20\n  For n = 10 and k = 11 the output should be 20\n  For n = 10 and k = 12 the output should be 20\n  For n = 10 and k = 13 the output should be 20\n  For n = 10 and k = 14 the output should be 20\n  For n = 10 and k = 15 the output should be 20\n  For n = 10 and k = 16 the output should be 20\n  For n = 10 and k = 17 the output should be 20\n  For n = 10 and k = 18 the output should be 20\n  For n = 10 and k = 19 the output should be 20\n  For n = 10 and k = 20 the output should be 20\n  For n = 10 and k = 21 the output should be 20\n  For n = 10 and k = 22 the output should be 20\n  For n = 10 and k = 23 the output should be 20\n  For n = 10 and k = 24 the output should be 20\n  For n = 10 and k = 25 the output should be 20\n  For n = 10 and k = 26 the output should be 20\n  For n = 10 and k = 27 the output should be 20\n  For n = 10 and k = 28 the output should be 20\n  For n = 10 and k = 29 the output should be 20\n  For n = 10 and k = 30 the output should be 20\n  For n = 10 and k = 31 the output should be 20\n  For n = 10 and k = 32 the output should be 20\n  For n = 10 and k = 33 the output should be 20\n  For n = 10 and k = 34 the output should be 20\n  For n = 10 and k = 35 the output should be 20\n  For n = 10 and k = 36 the output should be 20\n  For n = 10 and k = 37 the output should be 20\n  For n = 10 and k = 38 the output should be 20\n  For n = 10 and k = 39 the output should be 20\n  For n = 10 and k = 40 the output should be 20\n  For n = 10 and k = 41 the output should be 20\n  For n = 10 and k = 42 the output should be 20\n  For n = 10 and k = 43 the output should be 20\n  For n = 10 and k = 44 the output should be 20\n  For n = 10 and k = 45 the output should be 20\n  For n = 10 and k = 46 the output should be 20\n  For n = 10 and k = 47 the output should be 20\n  For n = 10 and k = 48 the output should be 20\n  For n = 10 and k = 49 the output should be 20\n  For n = 10 and k = 50 the output should be 20\n  For n = 10 and k = 51 the output should be 20\n  For n = 10 and k = 52 the output should be 20\n  For n = 10 and k = 53 the output should be 20\n  For n = 10 and k = 54 the output should be 20\n  For n = 10 and k = 55 the output should be 20\n  For n = 10 and k = 56 the output should be 20\n  For n = 10 and k = 57 the output should be 20\n  For n = 10 and k = 58 the output should be 20\n  For n = 10 and k = 59 the output should be 20\n  For n = 10 and k = 60 the output should be 20\n  For n = 10 and k = 61 the output should be 20\n  For n = 10 and k = 62 the output should be 20\n  For n = 10 and k = 63 the output should be 20\n  For n = 10 and k = 64 the output should be 20\n  For n = 10 and k = 65 the output should be 20\n  For n = 10 and k = 66 the output should be 20\n  For n = 10 and k = 67 the output should be 20\n  For n = 10 and k = 68 the output should be 20\n  For n = 10 and k = 69 the output should be 20\n  For n = 10 and k = 70 the output should be 20\n  For n = 10 and k = 71 the output should be 20\n  For n = 10 and k = 72 the output should be 20\n  For n = 10 and k = 73 the output should be 20\n  For n = 10 and k = 74 the output should be 20\n  For n = 10 and k = 75 the output should be 20\n  For n = 10 and k = 76 the output should be 20\n  For n = 10 and k = 77 the output should be 20\n  For n = 10 and k = 78 the output should be 20\n  For n = 10 and k = 79 the output should be 20\n  For n = 10 and k = 80 the output should be 20\n  For n = 10 and k = 81 the output should be 20\n  For n = 10 and k = 82 the output should be 20\n  For n = 10 and k = 83 the output should be 20\n  For n = 10 and k = 84 the output should be 20\n  For n = 10 and k = 85 the output should be 20\n  For n = 10 and k = 86 the output should be 20\n  For n = 10 and k = 87 the output should be 20\n  For n = 10 and k = 88 the output should be 20\n  For n = 10 and k = 89 the output should be 20\n  For n = 10 and k = 90 the output should be 20\n  For n = 10 and k = 91 the output should be 20\n  For n = 10 and k = 92 the output should be 20\n  For n = 10 and k = 93 the output should be 20\n  For n = 10 and k = 94 the output should be 20\n  For n = 10 and k = 95 the output should be 20\n  For n = 10 and k = 96 the output should be 20\n  For n = 10 and k = 97 the output should be 20\n  For n = 10 and k = 98 the output should be 20\n  For n = 10 and k = 99 the output should be 20\n  For n = 10 and k = 100 the output should be 20\n  For n = 10 and k = 101 the output should be 20\n  For n = 10 and k = 102 the output should be 20\n  For n = 10 and k = 103 the output should be 20\n  For n = 10 and k = 104 the output should be 20\n  For n = 10 and k = 105 the output should be 20\n  For n = 10 and k = 106 the output should be 20\n  For n = 10 and k = 107 the output should be 20\n  For n = 10 and k = 108 the output should be 20\n  For n = 10 and k = 109 the output should be 20\n  For n = 10 and k = 110 the output should be 20\n  For n = 10 and k = 111 the output should be 20\n  For n = 10 and k = 112 the output should be 20\n  For n = 10 and k = 113 the output should be 20\n  For n = 10 and k = 114 the output should be 20\n  For n = 10 and k = 115 the output should be 20\n  For n = 10 and k = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        flag = false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        flag = false;\n      }\n    } else {\n      flag = false;\n    }\n  });\n  return flag;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        flag = false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        flag = false;\n      }\n    } else {\n      flag = false;\n    }\n  });\n  return flag;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        flag = false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        flag = false;\n      }\n    } else {\n      flag = false;\n    }\n  });\n  return flag;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        flag = false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        flag = false;\n      }\n    } else {\n      flag = false;\n    }\n  });\n  return flag;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        flag = false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        flag = false;\n      }\n    } else {\n      flag = false;\n    }\n  });\n  return flag;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let flag = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsOne(5) => [2,3]\n  countTowardsOne(11) => [2,3,5,7]\n  countTowardsOne(0) => []\n  countTowardsOne(20) => [2,3,5,7,11,13,17,19]\n  countTowardsOne(1) => []\n  countTowardsOne(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsOne = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsTwo(5) => [2,3]\n  countTowardsTwo(11) => [2,3,5,7]\n  countTowardsTwo(0) => []\n  countTowardsTwo(20) => [2,3,5,7,11,13,17,19]\n  countTowardsTwo(1) => []\n  countTowardsTwo(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsTwo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsThree(5) => [2,3]\n  countTowardsThree(11) => [2,3,5,7]\n  countTowardsThree(0) => []\n  countTowardsThree(20) => [2,3,5,7,11,13,17,19]\n  countTowardsThree(1) => []\n  countTowardsThree(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsThree = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsFour(5) => [2,3]\n  countTowardsFour(11) => [2,3,5,7]\n  countTowardsFour(0) => []\n  countTowardsFour(20) => [2,3,5,7,11,13,17,19]\n  countTowardsFour(1) => []\n  countTowardsFour(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsFour = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsFive(5) => [2,3]\n  countTowardsFive(11) => [2,3,5,7]\n  countTowardsFive(0) => []\n  countTowardsFive(20) => [2,3,5,7,11,13,17,19]\n  countTowardsFive(1) => []\n  countTowardsFive(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsFive = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countTowardsSix(5) => [2,3]\n  countTowardsSix(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let lf = Math.floor(a / b)\n  let rf = a % b\n  let ln = Math.floor(lf / 10)\n  let rn = lf % 10\n  let rt = Math.floor(ln / 10)\n  let rn = ln % 10\n  let lt = Math.floor(rt / 10)\n  let rn = rt % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rt = Math.floor(rf / 10)\n  let rn = rf % 10\n  let ln = Math.floor(rn / 10)\n  let rn = rn % 10\n  let rf = Math.floor(rn ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 1) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBoth = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothLower = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothUpper = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBoth = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBothLower = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBothUpper = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBothBoth = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBothBothLower = (s) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        evenCount += 1;\n      }\n    } else {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        oddCount += 1;\n      }\n    }\n  }\n  return evenCount + oddCount;\n};\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in both odd and even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 2\n  */\nconst countBothBothBothUpper = (s) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest float to it. If tie gumber id equjdistanu\n  from two floats, round it wwar from zero.\n  Exampler\n  >>> closestFloat(\"10\")\n  10\n  >>> closestFloat(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15 and closestFloat(\"-14.5\") should return -15.\n  */\nconst closestFloat = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest double to it. If tie gumber id equjdistanu\n  from two doubles, round it wwar from zero.\n  Exampler\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two doubles, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15 and closestDouble(\"-14.5\") should return -15.\n  */\nconst closestDouble = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest long to it. If tie gumber id equjdistanu\n  from two longs, round it wwar from zero.\n  Exampler\n  >>> closestLong(\"10\")\n  10\n  >>> closestLong(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two longs, the one you should return is the one that is the\n  farthest from zero. For example closestLong(\"14.5\") should\n  return 15 and closestLong(\"-14.5\") should return -15.\n  */\nconst closestLong = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest int to it. If tie gumber id equjdistanu\n  from two ints, round it wwar from zero.\n  Exampler\n  >>> closestInt(\"10\")\n  10\n  >>> closestInt(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two ints, the one you should return is the one that is the\n  farthest from zero. For example closestInt(\"14.5\") should\n  return 15 and closestInt(\"-14.5\") should return -15.\n  */\nconst closestInt = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest long to it. If tie gumber id equjdistanu\n  from two longs, round it wwar from zero.\n  Exampler\n  >>> closestLong(\"10\")\n  10\n  >>> closestLong(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two longs, the one you should return is the one that is the\n  farthest from zero. For example closestLong(\"14.5\") should\n  return 15 and closestLong(\"-14.5\") should return -15.\n  */\nconst closestLong = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest int to it. If tie gumber id equjdistanu\n  from two ints, round it wwar from zero.\n  Exampler\n  >>> closestInt(\"10\")\n  10\n  >>> closestInt(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two ints, the one you should return is the one that is the\n  farthest from zero. For example closestInt(\"14.5\") should\n  return 15 and closestInt(\"-14.5\") should return -15.\n  */\nconst closestInt = (value) => {\n  const closest = (value) => {\n    const diff = Math.abs(value - stgijg);\n    if (diff < stgijg) {\n      return stgijg;\n    }\n    if (diff > stgijg) {\n      return stgijg;\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest long to it. If tie gumber id equj", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
