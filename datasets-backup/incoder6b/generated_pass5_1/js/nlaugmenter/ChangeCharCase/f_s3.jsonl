{"task_id": "JavaScript/0", "prompt": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const isClose = number >= threshold;\n    if (!isClose) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than or equal to the\n * given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than or equal to\n * the given threshold, false otherwise.\n */\nconst allLessThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number <= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than or equal to the\n * given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than or equal to\n * the given threshold, false otherwise.\n */\nconst allGreaterThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number >= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than the given\n * threshold, false otherwise.\n */\nconst allLessThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than the given\n * threshold, false otherwise.\n */\nconst allGreaterThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number > threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than or equal to the\n * given threshold, false otherwise.\n */\nconst allLessThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number <= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than or equal to\n * the given threshold, false otherwise.\n */\nconst allGreaterThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number >= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than the given\n * threshold, false otherwise.\n */\nconst allLessThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than the given\n * threshold, false otherwise.\n */\nconst allGreaterThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number > threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than or equal to the\n * given threshold, false otherwise.\n */\nconst allLessThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number <= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than or equal to\n * the given threshold, false otherwise.\n */\nconst allGreaterThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number >= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than the given\n * threshold, false otherwise.\n */\nconst allLessThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than the given threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than the given\n * threshold, false otherwise.\n */\nconst allGreaterThan = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number > threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are less than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are less than or equal to the\n * given threshold, false otherwise.\n */\nconst allLessThanOrEqualTo = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number <= threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if all numbers in array are greater than or equal to the given\n * threshold.\n * \n * @param {Array} numbers An array of numbers.\n * @param {Number} threshold A number that all numbers in array must be.\n * \n * @returns {Boolean} True if all numbers in array are greater than or equal to\n * the given threshold, false otherwise.\n */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let group_opening_paren = false;\n  let group_closing_bracket = false;\n  let group_opening_curly_bracket = false;\n  let group_opening_square_bracket = false;\n  let group_opening_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_opening_curly_bracket_or_angle = false;\n  let group_opening_paren_or_angle = false;\n  let group_opening_square_or_angle = false;\n  let group_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string.split('').reverse().join('');\n  return isPalindrome(reverseString)? reverseString : '';\n}\n\n/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The s", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push(i);\n  }\n  return aPile;\n};\n\n/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  chooseNum fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n+m)/2;\n  return avg > m? -1 : avg;\n};\n\n/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task I", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenOddDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenOddEvenDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenOddEvenOddDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};\n\n/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Odd diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenOddEvenOddEvenDigits = (x) => {\n  const unique = [];\n  x.forEach((x) => {\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  return unique;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if(arr.length === 0) return [];\n  \n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  \n  return reversed.map((num) => {\n    if(num === 1 || num === -1) return 'One';\n    if(num === 2) return 'Two';\n    if(num === 3) return 'Three';\n    if(num === 4) return 'Four';\n    if(num === 5) return 'Five';\n    if(num === 6) return 'Six';\n    if(num === 7) return 'Seven';\n    if(num === 8) return 'Eight';\n    if(num === 9) return 'Nine';\n    return num;\n  });\n};\n\n/*\n  Given an aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  if(arr.length === 0) return [];\n  \n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  \n  return reversed.map((num) => {\n    if(num === 1 || num === -1) return 'One';\n    if(num === 2) return 'Two';\n    if(num === 3) return 'Three';\n    if(num === 4) return 'Four';\n    if(num === 5) return 'Five';\n    if(num === 6) return 'Six';\n    if(num === 7) return 'Seven';\n    if(num === 8) return 'Eight';\n    if(num === 9) return 'Nine';\n    return num;\n  });\n};\n\n/*\n  Given an aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  if(arr.length === 0) return [];\n  \n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  \n  return reversed.map((num) => {\n    if(num === 1 || num === -1) return 'One';\n    if(num === 2) return 'Two';\n    if(num === 3) return 'Three';\n    if(num === 4) return 'Four';\n    if(num === 5) return 'Five';\n    if(num === 6) return 'Six';\n    if(num === 7) return 'Seven';\n    if(num === 8) return 'Eight';\n    if(num === 9) return 'Nine';\n    return num;\n  });\n};\n\n/*\n  Given an aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  if(arr.length === 0) return [];\n  \n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  \n  return reversed.map((num) => {\n    if(num === 1 || num === -1) return 'One';\n    if(num === 2) return 'Two';\n    if(num === 3) return 'Three';\n    if(num === 4) return 'Four';\n    if(num === 5) return 'Five';\n    if(num === 6) return 'Six';\n    if(num === 7) return 'Seven';\n    if(num === 8) return 'Eight';\n    if(num === 9) return 'Nine';\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let anD = [];\n  for (let i = 1; i <= n; i++) {\n    anD.push(i);\n  }\n  return anD;\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe Ele", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const res = [];\n  const even = [];\n  const odd = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      odd.push(i);\n    }\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        res.push([even[i], odd[j]]);\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each digit from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21]\n      Explanation: The palindromes that can be formed are:\n      121, 122, 123, 213, 214, 231, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/\nconst palindrome = (n) => {\n  const res = [];\n  const digits = Array.from(String(n));\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = 0; j < digits.length; j++) {\n      if (i === j) {\n        res.push(digits[i] + digits[j]);\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each pair of digits from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21, 121]\n      Explanation: The palindromes that can be formed are:\n      121, 1221, 2112, 2121, 1212, 1221, 2112, 2121, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/\nconst palindromePair = (n) => {\n  const res = [];\n  const digits = Array.from(String(n));\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = 0; j < digits.length; j++) {\n      if (i === j) {\n        res.push(digits[i] + digits[j]);\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each triplet of digits from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21, 121]\n      Explanation: The palindromes that can be formed are:\n      121, 1221, 2112, 2121, 1212, 1221, 2112, 2121, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/\nconst palindromeTriple = (n) => {\n  const res = [];\n  const digits = Array.from(String(n));\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = 0; j < digits.length; j++) {\n      for (let k = 0; k < digits.length; k++) {\n        if (i === j && j === k && k === i) {\n          res.push(digits[i] + digits[j] + digits[k]);\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each 4-digit palindrome from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21, 121]\n      Explanation: The palindromes that can be formed are:\n      121, 1221, 2112, 2121, 1212, 1221, 2112, 2121, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/\nconst palindromeFour = (n) => {\n  const res = [];\n  const digits = Array.from(String(n));\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = 0; j < digits.length; j++) {\n      for (let k = 0; k < digits.length; k++) {\n        for (let l = 0; l < digits.length; l++) {\n          if (i === j && j === k && k === l && l === i) {\n            res.push(digits[i] + digits[j] + digits[k] + digits[l]);\n          }\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each 5-digit palindrome from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21, 121]\n      Explanation: The palindromes that can be formed are:\n      121, 1221, 2112, 2121, 1212, 1221, 2112, 2121, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/\nconst palindromeFive = (n) => {\n  const res = [];\n  const digits = Array.from(String(n));\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = 0; j < digits.length; j++) {\n      for (let k = 0; k < digits.length; k++) {\n        for (let l = 0; l < digits.length; l++) {\n          for (let m = 0; m < digits.length; m++) {\n            if (i === j && j === k && k === l && l === m && m === i) {\n              res.push(digits[i] + digits[j] + digits[k] + digits[l] + digits[m]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed\n  by removing exactly one occurrence of each 6-digit palindrome from 1 to n.\n\n  Example 1:\n\n      Input: 12\n      Output: [12, 21, 121]\n      Explanation: The palindromes that can be formed are:\n      121, 1221, 2112, 2121, 1212, 1221, 2112, 2121, etc.\n\n  Example 2:\n\n      Input: 18\n      Output: [18, 28, 10, 22, 24]\n      Explanation: The palindromes that can be formed are:\n      182, 184, 186, 282, 284, 285, 292, etc.\n*/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write A FuNCtion countNums wHich ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2], ..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2],..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const firstElement = sortedArr[0];\n  const lastElement = sortedArr[sortedArr.length - 1];\n  const firstElementIndex = arr.indexOf(firstElement);\n  const lastElementIndex = arr.indexOf(lastElement);\n  const firstElementShifted = firstElement >> 1;\n  const lastElementShifted = lastElement >> 1;\n  const firstElementShiftedIndex = arr.indexOf(firstElementShifted);\n  const lastElementShiftedIndex = arr.indexOf(lastElementShifted);\n  const firstElementShiftedShifted = firstElementShifted >> 1;\n  const lastElementShiftedShifted = lastElementShifted >> 1;\n  const firstElementShiftedShiftedIndex = arr.indexOf(firstElementShiftedShifted);\n  const lastElementShiftedShiftedIndex = arr.indexOf(lastElementShiftedShifted);\n  const firstElementShiftedShiftedShifted = firstElementShiftedShifted >> 1;\n  const lastElementShiftedShiftedShifted = lastElementShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShifted = firstElementShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShifted = lastElementShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShifted = lastElementShiftedShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShiftedShifted = lastElementShiftedShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShifted = lastElementShiftedShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = lastElementShiftedShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = lastElementShiftedShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedIndex = arr.indexOf(lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted);\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = firstElementShiftedShiftedShifted >> 1;\n  const lastElementShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted = lastElementShiftedShifted >> 1;\n  const firstElementShiftedShiftedShiftedShiftedShiftedShiftedShifted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < aLen && j < bLen) {\n    const aChar = a.charCodeAt(i);\n    const bChar = b.charCodeAt(j);\n    if (aChar === bChar) {\n      result.push(aChar);\n      i++;\n      j++;\n    } else if (aChar > bChar) {\n      result.push(aChar - bChar);\n      i++;\n    } else {\n      result.push(bChar - aChar);\n      j++;\n    }\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts a string to an Array\n * \n * @param {string} str - The string to convert\n * @returns {Array} The converted string\n */\nconst stringToArray = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts an array to a string\n * \n * @param {Array} arr - The array to convert\n * @returns {string} The converted string\n */\nconst arrayToString = arr => {\n  const result = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    return even.concat(odd).sort().join('') === lst1.sort().join('');\n  }\n  return false;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    return even.concat(odd).sort().join('') === lst1.sort().join('');\n  }\n  return false;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    return even.concat(odd).sort().join('') === lst1.sort().join('');\n  }\n  return false;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    return even.concat(odd).sort().join('') === lst1.sort().join('');\n  }\n  return false;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    return even.concat(odd).sort().join('') === lst1.sort().join('');\n  }\n  return false;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    histogram[word] = histogram[word]? histogram[word] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*GIven a sTRiNG ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst remove = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStart = (s, n) => {\n  return s.slice(n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEnd = (s, n) => {\n  return s.slice(n, s.length);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStart = (s, n) => {\n  return s.slice(s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromStart = (s, n) => {\n  return s.slice(n, s.length);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromStart = (s, n) => {\n  return s.slice(s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromEndFromStart = (s, n) => {\n  return s.slice(n, s.length);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromEndFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromEndFromStart = (s, n) => {\n  return s.slice(s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromEndFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromEndFromEndFromStart = (s, n) => {\n  return s.slice(n, s.length);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"he\".\n*/\nconst removeFromStartAndEndFromEndFromEndFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromEndFromEndFromStart = (s, n) => {\n  return s.slice(s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the end\n  of the string removed. For example, if s = \"hello\", and n = 2, the output should be \"hel\".\n*/\nconst removeFromEndAndStartFromEndFromEndFromStartFromEnd = (s, n) => {\n  return s.slice(0, s.length - n);\n};\n\n/*\n  Write a function that takes a string and an integer and returns the string with that many characters from the beginning\n  of the string removed. For example, if s = \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}${lst[i].length}${\n      numOfOddElements > 1? \"s\" : \"\"\n    } of the ${lst[i].length}${numOfOddElements > 1? \"s\" : \"\"} ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIven a list OF sTRings, wWhere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}${lst[i].length}${\n      numOfOddElements > 1? \"s\" : \"\"\n    } of the ${lst[i].length}${numOfOddElements > 1? \"s\" : \"\"} ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIven a list OF sTRings, wWhere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}${lst[i].length}${\n      numOfOddElements > 1? \"s\" : \"\"\n    } of the ${lst[i].length}${numOfOddElements > 1? \"s\" : \"\"} ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIven a list OF sTRings, wWhere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}${lst[i].length}${\n      numOfOddElements > 1? \"s\" : \"\"\n    } of the ${lst[i].length}${numOfOddElements > 1? \"s\" : \"\"} ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIven a list OF sTRings, wWhere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}${lst[i].length}${\n      numOfOddElements > 1? \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given a 2D Array of Integers, return true if it Structurally and Locally Aligned\n  Example\n  matrix1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n  matrix2 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n  matrix3 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n  matrix4 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]\n  matrix5 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]\n  matrix6 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28]]\n  matrix7 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32]]\n  matrix8 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36]]\n  matrix9 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40]]\n  matrix10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44]]\n  matrix11 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48]]\n  matrix12 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52]]\n  matrix13 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56]]\n  matrix14 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60]]\n  matrix15 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64]]\n  matrix16 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68]]\n  matrix17 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68], [69, 70, 71, 72]]\n  matrix18 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68], [69, 70, 71, 72], [73, 74, 75, 76]]\n  matrix19 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68], [69, 70, 71, 72], [73, 74, 75, 76], [77, 78, 79, 80]]\n  matrix20 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68], [69, 70, 71, 72], [73, 74, 75, 76], [77, 78, 79, 80], [81, 82, 83, 84]]\n  matrix21 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68], [69, 70, 71, 72], [73, 74, 75, 76], [77, 78, 79, 80], [81, 82, 83, 84], [85, 86, 87, 88]]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let max = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > max) {\n      max = buckets[i];\n    }\n  }\n  \n  return max;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  const n = grid.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // if arr is null or undefined, return null\n  if (arr === null || arr === undefined) return null\n\n  // if arr is an empty array, return an empty array\n  if (arr.length === 0) return []\n\n  // if arr is an array of numbers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number')) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of strings, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n ==='string')) {\n    return arr\n  }\n\n  // if arr is an array of objects, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'object')) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.every(n => typeof n === 'number' && n >= 0)) {\n    return arr\n  }\n\n  // if arr is an array of non-negative integers, return that array\n  if (Array.isArray(arr) && arr.ever", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n\n<|/ file ext=.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nI added an explanation to the code :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a tags=javascript,node.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a tags=javascript,node.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,node.js |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a tags=javascript,node.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a dscore=0 tags=javascript,node.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv[3]);\n\nconst result = selectWords(inputString, n);\n\nconsole.log(result.join(\" \"));\n</code>\n<|/ a tags=javascript,node.js |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.filter((word) => word.length >= n);\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputString = process.argv[2];\nconst n = parseInt(process.argv", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\");\n  let vowelsArr_length = vowelsArr.length;\n  let vowelsArr_sorted = vowelsArr.sort((a, b) => a - b);\n  let vowelsArr_sorted_length = vowelsArr_sorted.length;\n  let vowelsArr_sorted_index = vowelsArr_sorted.indexOf(word[0]);\n  let vowelsArr_sorted_index_length = vowelsArr_sorted_index;\n  let vowelsArr_sorted_index_length_2 = vowelsArr_sorted_index_length * 2;\n  let vowelsArr_sorted_index_length_3 = vowelsArr_sorted_index_length * 3;\n  let vowelsArr_sorted_index_length_4 = vowelsArr_sorted_index_length * 4;\n  let vowelsArr_sorted_index_length_5 = vowelsArr_sorted_index_length * 5;\n  let vowelsArr_sorted_index_length_6 = vowelsArr_sorted_index_length * 6;\n  let vowelsArr_sorted_index_length_7 = vowelsArr_sorted_index_length * 7;\n  let vowelsArr_sorted_index_length_8 = vowelsArr_sorted_index_length * 8;\n  let vowelsArr_sorted_index_length_9 = vowelsArr_sorted_index_length * 9;\n  let vowelsArr_sorted_index_length_10 = vowelsArr_sorted_index_length * 10;\n  let vowelsArr_sorted_index_length_11 = vowelsArr_sorted_index_length * 11;\n  let vowelsArr_sorted_index_length_12 = vowelsArr_sorted_index_length * 12;\n  let vowelsArr_sorted_index_length_13 = vowelsArr_sorted_index_length * 13;\n  let vowelsArr_sorted_index_length_14 = vowelsArr_sorted_index_length * 14;\n  let vowelsArr_sorted_index_length_15 = vowelsArr_sorted_index_length * 15;\n  let vowelsArr_sorted_index_length_16 = vowelsArr_sorted_index_length * 16;\n  let vowelsArr_sorted_index_length_17 = vowelsArr_sorted_index_length * 17;\n  let vowelsArr_sorted_index_length_18 = vowelsArr_sorted_index_length * 18;\n  let vowelsArr_sorted_index_length_19 = vowelsArr_sorted_index_length * 19;\n  let vowelsArr_sorted_index_length_20 = vowelsArr_sorted_index_length * 20;\n  let vowelsArr_sorted_index_length_21 = vowelsArr_sorted_index_length * 21;\n  let vowelsArr_sorted_index_length_22 = vowelsArr_sorted_index_length * 22;\n  let vowelsArr_sorted_index_length_23 = vowelsArr_sorted_index_length * 23;\n  let vowelsArr_sorted_index_length_24 = vowelsArr_sorted_index_length * 24;\n  let vowelsArr_sorted_index_length_25 = vowelsArr_sorted_index_length * 25;\n  let vowelsArr_sorted_index_length_26 = vowelsArr_sorted_index_length * 26;\n  let vowelsArr_sorted_index_length_27 = vowelsArr_sorted_index_length * 27;\n  let vowelsArr_sorted_index_length_28 = vowelsArr_sorted_index_length * 28;\n  let vowelsArr_sorted_index_length_29 = vowelsArr_sorted_index_length * 29;\n  let vowelsArr_sorted_index_length_30 = vowelsArr_sorted_index_length * 30;\n  let vowelsArr_sorted_index_length_31 = vowelsArr_sorted_index_length * 31;\n  let vowelsArr_sorted_index_length_32 = vowelsArr_sorted_index_length * 32;\n  let vowelsArr_sorted_index_length_33 = vowelsArr_sorted_index_length * 33;\n  let vowelsArr_sorted_index_length_34 = vowelsArr_sorted_index_length * 34;\n  let vowelsArr_sorted_index_length_35 = vowelsArr_sorted_index_length * 35;\n  let vowelsArr_sorted_index_length_36 = vowelsArr_sorted_index_length * 36;\n  let vowelsArr_sorted_index_length_37 = vowelsArr_sorted_index_length * 37;\n  let vowelsArr_sorted_index_length_38 = vowelsArr_sorted_index_length * 38;\n  let vowelsArr_sorted_index_length_39 = vowelsArr_sorted_index_length * 39;\n  let vowelsArr_sorted_index_length_40 = vowelsArr_sorted_index_length * 40;\n  let vowelsArr_sorted_index_length_41 = vowelsArr_sorted_index_length * 41;\n  let vowelsArr_sorted_index_length_42 = vowelsArr_sorted_index_length * 42;\n  let vowelsArr_sorted_index_length_43 = vowelsArr_sorted_index_length * 43;\n  let vowelsArr_sorted_index_length_44 = vowelsArr_sorted_index_length * 44;\n  let vowelsArr_sorted_index_length_45 = vowelsArr_sorted_index_length * 45;\n  let vowelsArr_sorted_index_length_46 = vowelsArr_sorted_index_length * 46;\n  let vowelsArr_sorted_index_length_47 = vowelsArr_sorted_index_length * 47;\n  let vowelsArr_sorted_index_length_48 = vowelsArr_sorted_index_length * 48;\n  let vowelsArr_sorted_index_length_49 = vowelsArr_sorted_index_length * 49;\n  let vowelsArr_sorted_index_length_50 = vowelsArr_sorted_index_length * 50;\n  let vowelsArr_sorted_index_length_51 = vowelsArr_sorted_index_length * 51;\n  let vowelsArr_sorted_index_length_52 = vowelsArr_sorted_index_length * 52;\n  let vowelsArr_sorted_index_length_53 = vowelsArr_sorted_index_length * 53;\n  let vowelsArr_sorted_index_length_54 = vowelsArr_sorted_index_length * 54;\n  let vowelsArr_sorted_index_length_55 = vowelsArr_sorted_index_length * 55;\n  let vowelsArr_sorted_index_length_56 = vowelsArr_sorted_index_length * 56;\n  let vowelsArr_sorted_index_length_57 = vowelsArr_sorted_index_length * 57;\n  let vowelsArr_sorted_index_length_58 = vowelsArr_sorted_index_length * 58;\n  let vowelsArr_sorted_index_length_59 = vowelsArr_sorted_index_length * 59;\n  let vowelsArr_sorted_index_length_60 = vowelsArr_sorted_index_length * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n// ================================================================\n// PART TWO: PARSE AND PRINT THE SENTENCE\n// ================================================================\n\n// Write a function that takes in a string and prints out a version of the\n// input string where all characters have been rearranged so that each\n// character is printed on a separate line. For example if the input\n// string is \"The cat sat on the mat\" the output should be something like\n// the following:\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// T\n// he\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the first element of an array\n * or undefined if the array is empty\n *\n * >>> first([1,2,3])\n  1\n  >>> first([])\n  undefined\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Return the last element of an array\n * or undefined if the array is empty\n *\n * >>> last([1,2,3])\n  3\n  >>> last([])\n  undefined\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Return the sum of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sum([1,2,3])\n  6\n  >>> sum([])\n  undefined\n */\nconst sum = (arr) => {\n  return arr.reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the average of the elements of an array\n * or undefined if the array is empty\n *\n * >>> average([1,2,3])\n  2\n  >>> average([])\n  undefined\n */\nconst average = (arr) => {\n  return sum(arr) / arr.length\n}\n\n/**\n * Return the median of the elements of an array\n * or undefined if the array is empty\n *\n * >>> median([1,2,3])\n  2\n  >>> median([])\n  undefined\n */\nconst median = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b)\n  const middleIndex = Math.floor(arr.length / 2)\n  return sortedArr[middleIndex]\n}\n\n/**\n * Return the mode of the elements of an array\n * or undefined if the array is empty\n *\n * >>> mode([1,2,3])\n  1\n  >>> mode([])\n  undefined\n */\nconst mode = (arr) => {\n  const count = {}\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    if (count[element]) {\n      count[element] += 1\n    } else {\n      count[element] = 1\n    }\n  }\n  const maxCount = Math.max(...Object.values(count))\n  const maxCountIndex = Object.entries(count).findIndex(([, count]) => count === maxCount)\n  return arr[maxCountIndex]\n}\n\n/**\n * Return the standard deviation of the elements of an array\n * or undefined if the array is empty\n *\n * >>> stddev([1,2,3])\n  1.5811388300841898\n  >>> stddev([])\n  undefined\n */\nconst stddev = (arr) => {\n  const average = average(arr)\n  const variance = arr.map((x) => Math.pow(x - average, 2))\n  return Math.sqrt(sum(variance) / arr.length)\n}\n\n/**\n * Return the variance of the elements of an array\n * or undefined if the array is empty\n *\n * >>> variance([1,2,3])\n  1.5\n  >>> variance([])\n  undefined\n */\nconst variance = (arr) => {\n  const average = average(arr)\n  const variance = arr.map((x) => Math.pow(x - average, 2))\n  return sum(variance) / arr.length\n}\n\n/**\n * Return the minimum of the elements of an array\n * or undefined if the array is empty\n *\n * >>> min([1,2,3])\n  1\n  >>> min([])\n  undefined\n */\nconst min = (arr) => {\n  return arr.reduce((acc, val) => Math.min(acc, val), 0)\n}\n\n/**\n * Return the maximum of the elements of an array\n * or undefined if the array is empty\n *\n * >>> max([1,2,3])\n  3\n  >>> max([])\n  undefined\n */\nconst max = (arr) => {\n  return arr.reduce((acc, val) => Math.max(acc, val), 0)\n}\n\n/**\n * Return the product of the elements of an array\n * or undefined if the array is empty\n *\n * >>> product([1,2,3])\n  6\n  >>> product([])\n  undefined\n */\nconst product = (arr) => {\n  return arr.reduce((acc, val) => acc * val, 1)\n}\n\n/**\n * Return the sum of squares of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfSquares([1,2,3])\n  6\n  >>> sumOfSquares([])\n  undefined\n */\nconst sumOfSquares = (arr) => {\n  return arr.map((x) => Math.pow(x, 2)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of absolute values of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfAbsolutes([1,2,3])\n  6\n  >>> sumOfAbsolutes([])\n  undefined\n */\nconst sumOfAbsolutes = (arr) => {\n  return arr.map((x) => Math.abs(x)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of squared deviations from the mean of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfSquaredDeviations([1,2,3])\n  6\n  >>> sumOfSquaredDeviations([])\n  undefined\n */\nconst sumOfSquaredDeviations = (arr) => {\n  const average = average(arr)\n  return arr.map((x) => Math.pow((x - average), 2)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of squared deviations from the median of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfSquaredDeviationsFromMedian([1,2,3])\n  6\n  >>> sumOfSquaredDeviationsFromMedian([])\n  undefined\n */\nconst sumOfSquaredDeviationsFromMedian = (arr) => {\n  const median = median(arr)\n  return arr.map((x) => Math.pow((x - median), 2)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of squared deviations from the mode of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfSquaredDeviationsFromMode([1,2,3])\n  6\n  >>> sumOfSquaredDeviationsFromMode([])\n  undefined\n */\nconst sumOfSquaredDeviationsFromMode = (arr) => {\n  const mode = mode(arr)\n  return arr.map((x) => Math.pow((x - mode), 2)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of squared deviations from the standard deviation of the elements of an array\n * or undefined if the array is empty\n *\n * >>> sumOfSquaredDeviationsFromStandardDeviation([1,2,3])\n  6\n  >>> sumOfSquaredDeviationsFromStandardDeviation([])\n  undefined\n */\nconst sumOfSquaredDeviationsFromStandardDeviation = (arr) => {\n  const standardDeviation = stddev(arr)\n  return arr.map((x) => Math.pow((x - standardDeviation), 2)).reduce((acc, val) => acc + val, 0)\n}\n\n/**\n * Return the sum of squared deviations from the variance of the elements of an array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe minimum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe sum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, 9, 12]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe product k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-6, -12, -24]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-24, -24, -24]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let product = 1;\n    for (let j = 0; j < arr.length; j++) {\n      product *= arr[j];\n    }\n    result.push(product);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe sum of squares k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-9, -25, -49]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-24, -24, -24]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sumOfSquares = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j] * arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe sum of cubes k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-9, -25, -49]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-24, -24, -24]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sumOfCubes = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j] * arr[j] * arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  Given an aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe product of cubes k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-9, -25, -49]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-24, -24, -24]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst productOfCubes = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let product = 1;\n    for (let j = 0; j < arr.length; j++) {\n      product *= arr[j] * arr[j] * arr[j];\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosIT", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO di", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let oddCollatz = [];\n  let counter = 1;\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      oddCollatz.push(currentNum);\n    } else {\n      collatz.push(currentNum);\n    }\n    currentNum = collatz[counter];\n    counter++;\n  }\n  return oddCollatz;\n};\n\n/*\n  given A PoSItive iNteger n, return A soRTed list that has thE EVEN nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let evenCollatz = [];\n  let counter = 1;\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      evenCollatz.push(currentNum);\n    } else {\n      collatz.push(currentNum);\n    }\n    currentNum = collatz[counter];\n    counter++;\n  }\n  return evenCollatz;\n};\n\n/*\n  given A PoSItive iNteger n, return A soRTed list that has thE EVEN nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let evenCollatz = [];\n  let counter = 1;\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      evenCollatz.push(currentNum);\n    } else {\n      collatz.push(currentNum);\n    }\n    currentNum = collatz[counter];\n    counter++;\n  }\n  return evenCollatz;\n};\n\n/*\n  given A PoSItive iNteger n, return A soRTed list that has thE EVEN nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const year = dateArray[2];\n  const month = dateArray[1];\n  const day = dateArray[0];\n\n  if (year.length === 4 && month.length === 2 && day.length === 2) {\n    if (\n      month.length === 1 ||\n      month.length === 3 ||\n      month.length === 5 ||\n      month.length === 7 ||\n      month.length === 8 ||\n      month.length === 10 ||\n      month.length === 12 ||\n      month.length === 2 ||\n      month.length === 4 ||\n      month.length === 6 ||\n      month.length === 9 ||\n      month.length === 11\n    ) {\n      if (\n        month.length === 1 ||\n        month.length === 3 ||\n        month.length === 5 ||\n        month.length === 7 ||\n        month.length === 8 ||\n        month.length === 10 ||\n        month.length === 12 ||\n        month.length === 2 ||\n        month.length === 4 ||\n        month.length === 6 ||\n        month.length === 9 ||\n        month.length === 11\n      ) {\n        if (\n          month.length === 1 ||\n          month.length === 3 ||\n          month.length === 5 ||\n          month.length === 7 ||\n          month.length === 8 ||\n          month.length === 10 ||\n          month.length === 12 ||\n          month.length === 2 ||\n          month.length === 4 ||\n          month.length === 6 ||\n          month.length === 9 ||\n          month.length === 11\n        ) {\n          if (\n            month.length === 1 ||\n            month.length === 3 ||\n            month.length === 5 ||\n            month.length === 7 ||\n            month.length === 8 ||\n            month.length === 10 ||\n            month.length === 12 ||\n            month.length === 2 ||\n            month.length === 4 ||\n            month.length === 6 ||\n            month.length === 9 ||\n            month.length === 11\n          ) {\n            if (\n              month.length === 1 ||\n              month.length === 3 ||\n              month.length === 5 ||\n              month.length === 7 ||\n              month.length === 8 ||\n              month.length === 10 ||\n              month.length === 12 ||\n              month.length === 2 ||\n              month.length === 4 ||\n              month.length === 6 ||\n              month.length === 9 ||\n              month.length === 11\n            ) {\n              if (\n                month.length === 1 ||\n                month.length === 3 ||\n                month.length === 5 ||\n                month.length === 7 ||\n                month.length === 8 ||\n                month.length === 10 ||\n                month.length === 12 ||\n                month.length === 2 ||\n                month.length === 4 ||\n                month.length === 6 ||\n                month.length === 9 ||\n                month.length === 11\n              ) {\n                if (\n                  month.length === 1 ||\n                  month.length === 3 ||\n                  month.length === 5 ||\n                  month.length === 7 ||\n                  month.length === 8 ||\n                  month.length === 10 ||\n                  month.length === 12 ||\n                  month.length === 2 ||\n                  month.length === 4 ||\n                  month.length === 6 ||\n                  month.length === 9 ||\n                  month.length === 11\n                ) {\n                  if (\n                    month.length === 1 ||\n                    month.length === 3 ||\n                    month.length === 5 ||\n                    month.length === 7 ||\n                    month.length === 8 ||\n                    month.length === 10 ||\n                    month.length === 12 ||\n                    month.length === 2 ||\n                    month.length === 4 ||\n                    month.length === 6 ||\n                    month.length === 9 ||\n                    month.length === 11\n                  ) {\n                    if (\n                      month.length === 1 ||\n                      month.length === 3 ||\n                      month.length === 5 ||\n                      month.length === 7 ||\n                      month.length === 8 ||\n                      month.length === 10 ||\n                      month.length === 12 ||\n                      month.length === 2 ||\n                      month.length === 4 ||\n                      month.length === 6 ||\n                      month.length === 9 ||\n                      month.length === 11\n                    ) {\n                      if (\n                        month.length === 1 ||\n                        month.length === 3 ||\n                        month.length === 5 ||\n                        month.length === 7 ||\n                        month.length === 8 ||\n                        month.length === 10 ||\n                        month.length === 12 ||\n                        month.length === 2 ||\n                        month.length === 4 ||\n                        month.length === 6 ||\n                        month.length === 9 ||\n                        month.length === 11\n                      ) {\n                        if (\n                          month.length === 1 ||\n                          month.length === 3 ||\n                          month.length === 5 ||\n                          month.length === 7 ||\n                          month.length === 8 ||\n                          month.length === 10 ||\n                          month.length === 12 ||\n                          month.length === 2 ||\n                          month.length === 4 ||\n                          month.length === 6 ||\n                          month.length === 9 ||\n                          month.length === 11\n                        ) {\n                          if (\n                            month.length === 1 ||\n                            month.length === 3 ||\n                            month.length === 5 ||\n                            month.length === 7 ||\n                            month.length === 8 ||\n                            month.length === 10 ||\n                            month.length === 12 ||\n                            month.length === 2 ||\n                            month.length === 4 ||\n                            month.length === 6 ||\n                            month.length === 9 ||\n                            month.length === 11\n                          ) {\n                            if (\n                              month.length === 1 ||\n                              month.length === 3 ||\n                              month.length === 5 ||\n                              month.length === 7 ||\n                              month.length === 8 ||\n                              month.length === 10 ||\n                              month.length === 12 ||\n                              month.length === 2 ||\n                              month.length === 4 ||\n                              month.length === 6 ||\n                              month.length === 9 ||\n                              month.length === 11\n                            ) {\n                              if (\n                                month.length === 1 ||\n                                month.length === 3 ||\n                                month.length === 5 ||\n                                month.length === 7 ||\n                                month.length === 8 ||\n                                month.length === 10 ||\n                                month.length === 12 ||\n                                month.length === 2 ||\n                                month.length === 4 ||\n                                month.length === 6 ||\n                                month.length === 9 ||\n                                month.length === 11\n                              ) {\n                                if (\n                                  month.length === 1 ||\n                                  month.length === 3 ||\n                                  month.length === 5 ||\n                                  month.length === 7 ||\n                                  month.length === 8 ||\n                                  month.length === 10 ||\n                                  month.length === 12 ||\n                                  month.length === 2 ||\n                                  month.length === 4 ||\n                                  month.length === 6 ||\n                                  month.length === 9 ||\n                                  month.length === 11\n                                ) {\n                                  if (\n                                    month.length === 1 ||\n                                    month.length === 3 ||\n                                    month.length === 5 ||\n                                    month.length === 7 ||\n                                    month.length === 8 ||\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1, ... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(whiteSpace);\n  const woRDs = [];\n  let i = 0;\n  while (i < wOrds.length) {\n    if (wOrds[i].includes(comma)) {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    } else {\n      woRDs.push(wOrds[i]);\n      i += 1;\n    }\n  }\n  return woRDs;\n};\n\n/* Given a StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length <= 1) {\n    return true;\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[0] === sorted[sorted.length - 1];\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the sum of the elements before it\n  Examples\n  sumOfPreceding([1, 2, 3]) ➞ [1, 2, 3]\n  sumOfPreceding([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  sumOfPreceding([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  sumOfPreceding([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfPreceding([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfPreceding([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  sumOfPreceding([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst sumOfPreceding = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length - 1; i += 1) {\n    result.push(lst[i] + lst[i + 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the product of the elements before it\n  Examples\n  productOfPreceding([1, 2, 3]) ➞ [1, 2, 3]\n  productOfPreceding([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  productOfPreceding([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  productOfPreceding([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfPreceding([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfPreceding([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  productOfPreceding([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst productOfPreceding = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length - 1; i += 1) {\n    result.push(lst[i] * lst[i + 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the sum of all the elements before it\n  Examples\n  sumOfAll([1, 2, 3]) ➞ [1, 2, 3]\n  sumOfAll([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  sumOfAll([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  sumOfAll([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfAll([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfAll([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  sumOfAll([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst sumOfAll = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    result.push(lst[i] + lst[i - 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the product of all the elements before it\n  Examples\n  productOfAll([1, 2, 3]) ➞ [1, 2, 3]\n  productOfAll([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  productOfAll([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  productOfAll([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfAll([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfAll([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  productOfAll([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst productOfAll = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    result.push(lst[i] * lst[i - 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the sum of the first n elements\n  Examples\n  sumOfFirstN([1, 2, 3]) ➞ [1, 2, 3]\n  sumOfFirstN([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  sumOfFirstN([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  sumOfFirstN([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfFirstN([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfFirstN([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  sumOfFirstN([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst sumOfFirstN = (lst, n) => {\n  const result = [];\n  for (let i = 0; i < n; i += 1) {\n    result.push(lst[i] + lst[i - 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the product of the first n elements\n  Examples\n  productOfFirstN([1, 2, 3]) ➞ [1, 2, 3]\n  productOfFirstN([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  productOfFirstN([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  productOfFirstN([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfFirstN([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  productOfFirstN([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  productOfFirstN([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst productOfFirstN = (lst, n) => {\n  const result = [];\n  for (let i = 0; i < n; i += 1) {\n    result.push(lst[i] * lst[i - 1]);\n  }\n  return result;\n};\n\n/* Given a list Of Numbers, return a new list where each element is\n  the sum of the last n elements\n  Examples\n  sumOfLastN([1, 2, 3]) ➞ [1, 2, 3]\n  sumOfLastN([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  sumOfLastN([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  sumOfLastN([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfLastN([1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  sumOfLastN([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  sumOfLastN([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst sumOfLastN = (lst, n) => {\n  const result = [];\n  for (let i = lst.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 === end2 && start1 === end1) return \"NO\"\n  if (start1 === end1 && start2 === end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === start2 && start2 === end2) return \"NO\"\n  if (start1 === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMpt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false;\n  }\n\n  for (let j = 0; j < m; j++) {\n    visited[j] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === grid[i][j + 1] && visited[j] === 0) {\n        visited[j] = 1;\n        path.push(j + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j] === 0 && grid[i][j] === grid[i][j + 1]) {\n        min = Math.min(grid[i][j], grid[i][j + 1]);\n        if (min === grid[i][j]) {\n          result.push(grid[i][j]);\n        } else if (min === grid[i][j + 1]) {\n          result.push(grid[i][j + 1]);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst minPath2 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false;\n  }\n\n  for (let j = 0; j < m; j++) {\n    visited[j] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === grid[i][j + 1] && visited[j] === 0) {\n        visited[j] = 1;\n        path.push(j + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j] === 0 && grid[i][j] === grid[i][j + 1]) {\n        min = Math.min(grid[i][j], grid[i][j + 1]);\n        if (min === grid[i][j]) {\n          result.push(grid[i][j]);\n        } else if (min === grid[i][j + 1]) {\n          result.push(grid[i][j + 1]);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst minPath3 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false;\n  }\n\n  for (let j = 0; j < m; j++) {\n    visited[j] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === grid[i][j + 1] && visited[j] === 0) {\n        visited[j] = 1;\n        path.push(j + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j] === 0 && grid[i][j] === grid[i][j + 1]) {\n        min = Math.min(grid[i][j], grid[i][j + 1]);\n        if (min === grid[i][j]) {\n          result.push(grid[i][j]);\n        } else if (min === grid[i][j + 1]) {\n          result.push(grid[i][j + 1]);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst minPath4 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false;\n  }\n\n  for (let j = 0; j < m; j++) {\n    visited[j] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === grid[i][j + 1] && visited[j] === 0) {\n        visited[j] = 1;\n        path.push(j + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j] === 0 && grid[i][j] === grid[i][j + 1]) {\n        min = Math.min(grid[i][j], grid[i][j + 1]);\n        if (min === grid[i][j]) {\n          result.push(grid[i][j]);\n        } else if (min === grid[i][j + 1]) {\n          result.push(grid[i][j + 1]);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst minPath5 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n; i++) {\n    visited[i] = false;\n  }\n\n  for (let j = 0; j < m; j++) {\n    visited[j] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === grid[i][j + 1] && visited[j] === 0) {\n        visited[j] = 1;\n        path.push(j + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j] === 0 && grid[i][j] === grid[i][j + 1]) {\n        min = Math.min(grid[i][j], grid[i][j + 1]);\n        if (min === grid[i][j]) {\n          result.push(grid[i][j]);\n        } else if (min === grid[i][j + 1]) {\n          result.push(grid[i][j + 1]);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst minPath6 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const path = [];\n  const visited = [];\n  const result = [];\n  let min;\n\n  for (let i = 0; i < n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(1);\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2]);\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns the sum of all odd numbers in the given array.\n  Examples:\n  oddSum([1,2,3,4,5,6]) = 15\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = 23\n  oddSum([1,3,5,7,9]) = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 2\n  digits(235) == 6\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  rEturN 0 if all digits are oddN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddEvenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the evenD digits.\n  rEturN 0 if all digits are evenN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst evenOddEvenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2? 1 : 0;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*GIven a POsITive inTeger n, return tHe pROduct of the oddD digits.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const arrOfBrackets = string.split('[')\n  const arrOfBracketsLength = arrOfBrackets.length\n  let isNested = false\n  for (let i = 0; i < arrOfBracketsLength; i++) {\n    const currentBracket = arrOfBrackets[i]\n    const nextBracket = arrOfBrackets[i + 1]\n    if (currentBracket === ']' && nextBracket === ']') {\n      isNested = true\n      break\n    }\n  }\n  return isNested\n}\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNestedpassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*CReate A FuNCtion wHich reTurNS the smallest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*CReate A FuNCtion wHich reTurNS the average iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\n/*CReate A FuNCtion wHich reTurNS the median iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let mid = Math.floor(arr.length / 2);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[mid]) {\n      count++;\n    }\n  }\n  return count === arr.length? arr[mid] : -1;\n};\n\n/*CReate A FuNCtion wHich reTurNS the mode iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] > mode) {\n      mode = arr[i];\n    }\n  }\n  return mode;\n};\n\n/*CReate A FuNCtion wHich reTurNS the mode iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] > mode) {\n      mode = arr[i];\n    }\n  }\n  return mode;\n};\n\n/*CReate A FuNCtion wHich reTurNS the mode iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] > mode) {\n      mode = arr[i];\n    }\n  }\n  return mode;\n};\n\n/*CReate A FuNCtion wHich reTurNS the mode iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] > mode) {\n      mode = arr[i];\n    }\n  }\n  return mode;\n};\n\n/*CReate A FuNCtion wHich reTurNS the mode iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NEGATIVE_INFINITY\n  let smallest = Number.POSITIVE_INFINITY\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.NE", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n  if(typeof a === typeof b) {\n    if(a === null || b === null) {\n      return a === b? null : a;\n    }\n    if(a === b) {\n      return a;\n    }\n    if(typeof a === \"string\") {\n      if(typeof b === \"string\") {\n        return a.localeCompare(b);\n      }\n      return -1;\n    }\n    if(typeof b === \"string\") {\n      return 1;\n    }\n    if(typeof a === \"number\") {\n      if(typeof b === \"number\") {\n        return a - b;\n      }\n      return 1;\n    }\n    if(typeof b === \"number\") {\n      return -1;\n    }\n    if(typeof a === \"object\") {\n      if(typeof b === \"object\") {\n        return compareOne(JSON.stringify(a), JSON.stringify(b));\n      }\n      return -1;\n    }\n    if(typeof b === \"object\") {\n      return 1;\n    }\n  }\n  return null;\n};\n\n/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  compareTwo(1, \"1,2\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"1,3\") ➞ null\n  compareTwo(\"1,2\", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 1) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSum = (n) => {\n  if (n % 2 === 0 && n % 3 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(4) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 1) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSum = (n) => {\n  if (n % 2 === 0 && n % 3 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(4) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 1) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSum = (n) => {\n  if (n % 2 === 0 && n % 3 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(4) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 1) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSum = (n) => {\n  if (n % 2 === 0 && n % 3 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(4) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 1) {\n    return true\n  }\n  return false\n}\n\n/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the factorial\n  of this number.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes14 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes15 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes16 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;\n  }\n  return prefixes;\n};\n\n/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes17 = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    prefixes.push(string.substr(index, 1));\n    index++;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const reSpaces = /\\s+/g;\n  const reSpaceWithUnders = /\\s+/g;\n  const reSpaceWithUndersAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaces = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnds = /\\s+/g;\n  const reSpaceWithUndersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.charAt(0).toUpperCase() + file_name.slice(1);\n  const file_name = file_name.replace(/[^a-zA-Z0-9]/g, '');\n  const file_name = file_name.split('');\n  const file_name = file_name.join('');\n  const file_name = file_name.split(' ');\n  const file_name = file_name.join('');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file_name = file_name.join('-');\n  const file_name = file_name.split('.');\n  const file_name = file_name.join('.');\n  const file_name = file_name.split('-');\n  const file", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOne = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndOne = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndTwo = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndThree = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  this fUNcTIon wILL take a list Of iNTegers. For all ENTrieS", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(word)\n      words.splice(index, 1)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(word)\n      words.splice(index, 1)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(word)\n      words.splice(index, 1)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(word)\n      words.splice(index, 1)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(word)\n      words.splice(index, 1)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = words.indexOf(word)\n    if (index > -1) {\n      result.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n  if (isNumber(x) && isNumber(n)) {\n    if (x === 0 || n === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return n;\n    }\n    if (n === 1) {\n      return x;\n    }\n    if (x === n) {\n      return 1;\n    }\n    if (x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === 1 / x) {\n      return 1 / n;\n    }\n    if (x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {\n      return x;\n    }\n    if (n === x && x === 1 / n) {\n      return 1 / x;\n    }\n    if (n === x && x === 1 / x) {\n      return 1 / n;\n    }\n    if (n === x && x === n) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a FuNction wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b);\n  const numsArrLen = numsArr.length;\n  const numsArrMax = Math.max(...numsArr);\n  const numsArrMin = Math.min(...numsArr);\n  const numsArrSum = numsArr.reduce((acc, cur) => acc + cur, 0);\n  const numsArrAvg = (numsArrSum / numsArrLen).toFixed(2);\n  const numsArrSumOfSquares = numsArr.reduce((acc, cur) => acc + cur * cur, 0);\n  const numsArrAvgOfSquares = (numsArrSumOfSquares / numsArrLen).toFixed(2);\n  const numsArrSumOfCubes = numsArr.reduce((acc, cur) => acc + cur * cur * cur, 0);\n  const numsArrAvgOfCubes = (numsArrSumOfCubes / numsArrLen).toFixed(2);\n  const numsArrSumOfPowers = numsArr.reduce((acc, cur) => acc + Math.pow(cur, 3), 0);\n  const numsArrAvgOfPowers = (numsArrSumOfPowers / numsArrLen).toFixed(2);\n  const numsArrSumOfRoots = numsArr.reduce((acc, cur) => acc + Math.pow(cur, 2), 0);\n  const numsArrAvgOfRoots = (numsArrSumOfRoots / numsArrLen).toFixed(2);\n  const numsArrSumOfLogs = numsArr.reduce((acc, cur) => acc + Math.log(cur), 0);\n  const numsArrAvgOfLogs = (numsArrSumOfLogs / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowers = numsArr.reduce((acc, cur) => acc + Math.pow(Math.log(cur), 3), 0);\n  const numsArrAvgOfLogsOfPowers = (numsArrSumOfLogsOfPowers / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfRoots = numsArr.reduce((acc, cur) => acc + Math.pow(Math.log(cur), 2), 0);\n  const numsArrAvgOfLogsOfRoots = (numsArrSumOfLogsOfRoots / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfCubes = numsArr.reduce((acc, cur) => acc + Math.pow(Math.log(cur), 3), 0);\n  const numsArrAvgOfLogsOfCubes = (numsArrSumOfLogsOfCubes / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfSquares = numsArr.reduce((acc, cur) => acc + Math.pow(Math.log(cur), 2), 0);\n  const numsArrAvgOfLogsOfSquares = (numsArrSumOfLogsOfSquares / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowers = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.log(cur), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfPowers = (numsArrSumOfLogsOfPowersOfPowers / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfRoots = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.log(cur), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfRoots = (numsArrSumOfLogsOfPowersOfRoots / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfCubes = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.log(cur), 3), 3), 0);\n  const numsArrAvgOfLogsOfPowersOfCubes = (numsArrSumOfLogsOfPowersOfCubes / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfSquares = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.log(cur), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfSquares = (numsArrSumOfLogsOfPowersOfSquares / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfPowers = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfPowers = (numsArrSumOfLogsOfPowersOfPowersOfPowers / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfRoots = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfRoots = (numsArrSumOfLogsOfPowersOfPowersOfRoots / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfCubes = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 3), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfCubes = (numsArrSumOfLogsOfPowersOfPowersOfCubes / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfSquares = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfSquares = (numsArrSumOfLogsOfPowersOfPowersOfSquares / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfPowersOfPowers = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 3), 2), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfPowersOfPowers = (numsArrSumOfLogsOfPowersOfPowersOfPowersOfPowers / numsArrLen).toFixed(2);\n  const numsArrSumOfLogsOfPowersOfPowersOfPowersOfRoots = numsArr.reduce((acc, cur) => acc + Math.pow(Math.pow(Math.pow(Math.pow(Math.pow(Math.log(cur), 3), 3), 3), 2), 0), 0);\n  const numsArrAvgOfLogsOfPowersOfPowersOfPowersOfRoots = (numsArrSumOfLogsOfPowersOfPowersOfPowersOfRoots / ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = planet1.orbit(planet2)\n  const planet2Orbit = planet2.orbit(planet1)\n  const planet1OrbitPosition = planet1.orbitPosition(planet2)\n  const planet2OrbitPosition = planet2.orbitPosition(planet1)\n  const planet1OrbitPositionDistance = planet1.orbitPositionDistance(planet2)\n  const planet2OrbitPositionDistance = planet2.orbitPositionDistance(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(planet2)\n  const planet2OrbitPositionDistanceSquared = planet2.orbitPositionDistanceSquared(planet1)\n  const planet1OrbitPositionDistanceSquared = planet1.orbitPositionDistanceSquared(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < sortedList.length; j++) {\n      if (lst[i].length === sortedList[j].length) {\n        sortedList.push(lst[i]);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Write a fuNction that recieves a list and a number as parametters.\n  And it returns thE list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n*/\nconst sortedListSum = (lst, num) => {\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < sortedList.length; j++) {\n      if (lst[i].length === sortedList[j].length) {\n        sortedList.push(lst[i]);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Write a fuNction that recieves a list and a number as parametters.\n  And it returns thE list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n*/\nconst sortedListSum = (lst, num) => {\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < sortedList.length; j++) {\n      if (lst[i].length === sortedList[j].length) {\n        sortedList.push(lst[i]);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Write a fuNction that recieves a list and a number as parametters.\n  And it returns thE list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n*/\nconst sortedListSum = (lst, num) => {\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < sortedList.length; j++) {\n      if (lst[i].length === sortedList[j].length) {\n        sortedList.push(lst[i]);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Write a fuNction that recieves a list and a number as parametters.\n  And it returns thE list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n*/\nconst sortedListSum = (lst, num) => {\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < sortedList.length; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    ret.push(String(i));\n  }\n  return ret.join(' ');\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === y) {\n    return x;\n  }\n  return y;\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) sum += lst[i];\n  return sum;\n};\n\n/* Given a list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  double", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = [];\n  const guessedIndex = [];\n  const guessedValue = [];\n  const guessedLength = [];\n  const guessedValueIndex = [];\n  const guessedValueLength = [];\n  const guessedValueIndexLength = [];\n  const guessedValueIndexValue = [];\n  const guessedValueIndexValueLength = [];\n  const guessedValueIndexValueValue = [];\n  const guessedValueIndexValueValueLength = [];\n  const guessedValueIndexValueValueValue = [];\n  const guessedValueIndexValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueLength = [];\n  const guessedValueIndexValueValueValueValueValueValueValueValueValueValueValue = [];\n  const guessedValueIndexValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension2 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension3 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension4 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension5 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension6 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension7 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension8 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension9 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension10 = (class_name, extensions) => {\n  let strongest = class_name;\n  let strongest_strength = -1;\n  extensions.forEach((extension) => {\n    if (extension.includes(strongest)) {\n      strongest_strength = extension.indexOf(strongest);\n    }\n  });\n  return strongest;\n};\n\n/*\n  Given a class and a list of the extensions, return the class with the\n  strongest extension.\n  Example:\n  for strongestExtension('my_class', ['AA', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n  let pattern = a.split(\"\").sort().join(\"\");\n  let pattern2 = b.split(\"\").sort().join(\"\");\n  let pattern3 = pattern.split(\"\").sort().join(\"\");\n  let pattern4 = pattern2.split(\"\").sort().join(\"\");\n  let pattern5 = pattern3.split(\"\").sort().join(\"\");\n  let pattern6 = pattern4.split(\"\").sort().join(\"\");\n  let pattern7 = pattern5.split(\"\").sort().join(\"\");\n  let pattern8 = pattern6.split(\"\").sort().join(\"\");\n  let pattern9 = pattern7.split(\"\").sort().join(\"\");\n  let pattern10 = pattern8.split(\"\").sort().join(\"\");\n  let pattern11 = pattern9.split(\"\").sort().join(\"\");\n  let pattern12 = pattern10.split(\"\").sort().join(\"\");\n  let pattern13 = pattern11.split(\"\").sort().join(\"\");\n  let pattern14 = pattern12.split(\"\").sort().join(\"\");\n  let pattern15 = pattern13.split(\"\").sort().join(\"\");\n  let pattern16 = pattern14.split(\"\").sort().join(\"\");\n  let pattern17 = pattern15.split(\"\").sort().join(\"\");\n  let pattern18 = pattern16.split(\"\").sort().join(\"\");\n  let pattern19 = pattern17.split(\"\").sort().join(\"\");\n  let pattern20 = pattern18.split(\"\").sort().join(\"\");\n  let pattern21 = pattern19.split(\"\").sort().join(\"\");\n  let pattern22 = pattern20.split(\"\").sort().join(\"\");\n  let pattern23 = pattern21.split(\"\").sort().join(\"\");\n  let pattern24 = pattern22.split(\"\").sort().join(\"\");\n  let pattern25 = pattern23.split(\"\").sort().join(\"\");\n  let pattern26 = pattern24.split(\"\").sort().join(\"\");\n  let pattern27 = pattern25.split(\"\").sort().join(\"\");\n  let pattern28 = pattern26.split(\"\").sort().join(\"\");\n  let pattern29 = pattern27.split(\"\").sort().join(\"\");\n  let pattern30 = pattern28.split(\"\").sort().join(\"\");\n  let pattern31 = pattern29.split(\"\").sort().join(\"\");\n  let pattern32 = pattern30.split(\"\").sort().join(\"\");\n  let pattern33 = pattern31.split(\"\").sort().join(\"\");\n  let pattern34 = pattern32.split(\"\").sort().join(\"\");\n  let pattern35 = pattern33.split(\"\").sort().join(\"\");\n  let pattern36 = pattern34.split(\"\").sort().join(\"\");\n  let pattern37 = pattern35.split(\"\").sort().join(\"\");\n  let pattern38 = pattern36.split(\"\").sort().join(\"\");\n  let pattern39 = pattern37.split(\"\").sort().join(\"\");\n  let pattern40 = pattern38.split(\"\").sort().join(\"\");\n  let pattern41 = pattern39.split(\"\").sort().join(\"\");\n  let pattern42 = pattern40.split(\"\").sort().join(\"\");\n  let pattern43 = pattern41.split(\"\").sort().join(\"\");\n  let pattern44 = pattern42.split(\"\").sort().join(\"\");\n  let pattern45 = pattern43.split(\"\").sort().join(\"\");\n  let pattern46 = pattern44.split(\"\").sort().join(\"\");\n  let pattern47 = pattern45.split(\"\").sort().join(\"\");\n  let pattern48 = pattern46.split(\"\").sort().join(\"\");\n  let pattern49 = pattern47.split(\"\").sort().join(\"\");\n  let pattern50 = pattern48.split(\"\").sort().join(\"\");\n  let pattern51 = pattern49.split(\"\").sort().join(\"\");\n  let pattern52 = pattern50.split(\"\").sort().join(\"\");\n  let pattern53 = pattern51.split(\"\").sort().join(\"\");\n  let pattern54 = pattern52.split(\"\").sort().join(\"\");\n  let pattern55 = pattern53.split(\"\").sort().join(\"\");\n  let pattern56 = pattern54.split(\"\").sort().join(\"\");\n  let pattern57 = pattern55.split(\"\").sort().join(\"\");\n  let pattern58 = pattern56.split(\"\").sort().join(\"\");\n  let pattern59 = pattern57.split(\"\").sort().join(\"\");\n  let pattern60 = pattern58.split(\"\").sort().join(\"\");\n  let pattern61 = pattern59.split(\"\").sort().join(\"\");\n  let pattern62 = pattern60.split(\"\").sort().join(\"\");\n  let pattern63 = pattern61.split(\"\").sort().join(\"\");\n  let pattern64 = pattern62.split(\"\").sort().join(\"\");\n  let pattern65 = pattern63.split(\"\").sort().join(\"\");\n  let pattern66 = pattern64.split(\"\").sort().join(\"\");\n  let pattern67 = pattern65.split(\"\").sort().join(\"\");\n  let pattern68 = pattern66.split(\"\").sort().join(\"\");\n  let pattern69 = pattern67.split(\"\").sort().join(\"\");\n  let pattern70 = pattern68.split(\"\").sort().join(\"\");\n  let pattern71 = pattern69.split(\"\").sort().join(\"\");\n  let pattern72 = pattern70.split(\"\").sort().join(\"\");\n  let pattern73 = pattern71.split(\"\").sort().join(\"\");\n  let pattern74 = pattern72.split(\"\").sort().join(\"\");\n  let pattern75 = pattern73.split(\"\").sort().join(\"\");\n  let pattern76 = pattern74.split(\"\").sort().join(\"\");\n  let pattern77 = pattern75.split(\"\").sort().join(\"\");\n  let pattern78 = pattern76.split(\"\").sort().join(\"\");\n  let pattern79 = pattern77.split(\"\").sort().join(\"\");\n  let pattern80 = pattern78.split(\"\").sort().join(\"\");\n  let pattern81 = pattern79.split(\"\").sort().join(\"\");\n  let pattern82 = pattern80.split(\"\").sort().join(\"\");\n  let pattern83 = pattern81.split(\"\").sort().join(\"\");\n  let pattern84 = pattern82.split(\"\").sort().join(\"\");\n  let pattern85 = pattern83.split(\"\").sort().join(\"\");\n  let pattern86 = pattern84.split(\"\").sort().join(\"\");\n  let pattern87 = pattern85.split(\"\").sort().join(\"\");\n  let pattern88 = pattern86.split(\"\").sort().join(\"\");\n  let pattern89 = pattern87.split(\"\").sort().join(\"\");\n  let pattern90 = pattern88.split(\"\").sort().join(\"\");\n  let pattern91 = pattern89.split(\"\").sort().join(\"\");\n  let pattern92 = pattern90.split(\"\").sort().join(\"\");\n  let pattern93 = pattern91.split(\"\").sort().join(\"\");\n  let pattern94 = pattern92.split(\"\").sort().join(\"\");\n  let pattern95 = pattern93.split(\"\").sort().join(\"\");\n  let pattern96 = pattern94.split(\"\").sort().join(\"\");\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num;\n  if (number < 0 || number > 3999) {\n    return roman;\n  }\n  for (num = 1; num <= 3999; num++) {\n    roman = roman.concat(numToRoman(number));\n    number -= num;\n  }\n  return roman;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent PoSItive Integer\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 153\n  >>> romanToInt( 'xix' ) == 19\n  >>> romanToInt( 'cdxxvi' ) == 426\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent Integer Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> intToRoman(153) == 'vi'\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let num;\n  if (number < 1 || number > 3999) {\n    return roman;\n  }\n  for (num = 1; num <= 3999; num++) {\n    roman = roman.concat(numToRoman(number));\n    number -= num;\n  }\n  return roman;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent String Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 'vi'\n  >>> romanToInt( 'xix' ) == 'xix'\n  >>> romanToInt( 'cdxxvi' ) == 'cdxxvi'\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent PoSItive Integer\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 153\n  >>> romanToInt( 'xix' ) == 19\n  >>> romanToInt( 'cdxxvi' ) == 426\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent Integer Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> intToRoman(153) == 'vi'\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let num;\n  if (number < 1 || number > 3999) {\n    return roman;\n  }\n  for (num = 1; num <= 3999; num++) {\n    roman = roman.concat(numToRoman(number));\n    number -= num;\n  }\n  return roman;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent String Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 'vi'\n  >>> romanToInt( 'xix' ) == 'xix'\n  >>> romanToInt( 'cdxxvi' ) == 'cdxxvi'\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent PoSItive Integer\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 153\n  >>> romanToInt( 'xix' ) == 19\n  >>> romanToInt( 'cdxxvi' ) == 426\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent Integer Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> intToRoman(153) == 'vi'\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let num;\n  if (number < 1 || number > 3999) {\n    return roman;\n  }\n  for (num = 1; num <= 3999; num++) {\n    roman = roman.concat(numToRoman(number));\n    number -= num;\n  }\n  return roman;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent String Number\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n  >>> romanToInt( 'vi' ) == 'vi'\n  >>> romanToInt( 'xix' ) == 'xix'\n  >>> romanToInt( 'cdxxvi' ) == 'cdxxvi'\n  */\nconst romanToInt = (roman) => {\n  let number = 0;\n  let romanNumber;\n  for (romanNumber in roman) {\n    number += roman.indexOf(romanNumber) * Math.pow(1000, romanNumber.length);\n  }\n  return number;\n};\n\n/*\n  Given a Roman Numeral String, return its equivalent PoSItive Integer\n  reStRictiONs: 1 <= num <= 3999\n\n  eXamPLeS:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the Lengths of the sides of a triangle. Return true if the triangle is\n  a right angled triangle. False otherwise.\n  A right angled triangle is a triangle in which each of the three sides\n  are 90deg to the other.\n  Example:\n  right", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  words.forEach((word) => {\n    if (word.length > max) {\n      max = word.length;\n      word = word;\n    }\n  });\n  return word;\n};\n\n/*\n  findMin([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMin([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findMin = (words) => {\n  let min = 0;\n  let word = \"\";\n  words.forEach((word) => {\n    if (word.length < min) {\n      min = word.length;\n      word = word;\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findMax(words)) {\n      word = findMax(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findMin(words)) {\n      word = findMin(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\ncOnsT findWord = (words) => {\n  let word = \"\";\n  words.forEach((word) => {\n    if (word === findWord(words)) {\n      word = findWord(words);\n    }\n  });\n  return word;\n};\n\n/*\n  findWord([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findWord([\"name\", \"eNaM\", \"Game\"]) === \"eNaM\"\n  findWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return 0;\n  if (number < 0 || need < 0 || remaining < 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;\n  if (number > 0 && need === 0 && remaining === 0) return 0;\n  if (number === 0 && need > 0 && remaining > 0) return 0;\n  if (number === 0 && need > 0 && remaining === 0) return 0;\n  if (number === 0 && need === 0 && remaining > 0) return 0;\n  if (number === 0 && need === 0 && remaining === 0) return 0;\n  if (number > 0 && need > 0 && remaining > 0) return 0;\n  if (number > 0 && need > 0 && remaining === 0) return 0;\n  if (number > 0 && need === 0 && remaining > 0) return 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const counts = {};\n  chars.forEach((char) => {\n    if (counts[char]) {\n      counts[char] += 1;\n    } else {\n      counts[char] = 1;\n    }\n  });\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, return a new string with all the letters reversed.\n * \n * Example:\n * Given 'hello', return 'olleh'\n * Given 'a b c', return 'c b a'\n * \n * @param {string} string\n * @returns {string}\n */\nconst reverseString = (string) => {\n  const chars = string.split('');\n  const reversed = chars.reverse().join('');\n  return reversed;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string[]}\n */\nconst addEveryLetter = (strings) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    const newString = string.split('');\n    newString.forEach((char) => {\n      newString.push(char);\n      newString.push('e');\n    });\n    newStrings.push(newString.join(''));\n  });\n  return newStrings;\n};\n\n/**\n * Given an array of strings, return a new array of strings where each string\n * has been concatenated with the letter 'e' between each element. \n * \n * Example:\n * Given ['hello', 'world'], return ['heeelllloorwwoorrlldd']\n * \n * @param {string[]} strings\n * @returns {string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra2 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra6 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra7 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra8 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra9 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra10 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra11 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra12 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra13 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra14 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra15 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra16 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra17 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra18 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra19 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra20 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra21 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra22 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra23 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra24 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (index === 0) {\n      result += element;\n    } else {\n      result += element * operator[index - 1];\n    }\n  });\n  return result;\n};\n\nconst doAlgebra25 = (operator, operand) => {\n  let result = 0;\n  operand.forEach((element, index) => {\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n  if (reversed.includes(\"@\")) {\n    return reversed.replace(/@[a-z]/g, char => char.toUpperCase());\n  }\n  return reversed;\n};\n\n/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  given A StRIng 'text', return its sha1 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha1('Hello world') == 'c99c66e5b9aeaa30f5b0f89c39ede0f3e7a40f1'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  given A StRIng 'text', return its sha256 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha256('Hello world') == 'b86b99e78f87c60a57e090c507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c0'\n  */\nconst stringToSha256 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  given A StRIng 'text', return its sha512 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha512('Hello world') == '9a09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9a2b7a47e64fbaa44c09e27dcfc507aee9f86bcfdbeb8b9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result[0] === result[1];\n};\n\n/*\n  given two integers, return true if they are equal\n  in ascenDing orDer.\n\n  For example:\n  areEqualIntegers(2, 8) => true\n  areEqualIntegers(8, 2) => false\n  areEqualIntegers(10, 14) => false\n  */\nconst areEqualIntegers = (a, b) => {\n  const result = generateIntegers(a, b).sort();\n  return result", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(0.5);\n    } else if (music_list[i] === '.|') {\n      music_array.push(1 / 4);\n    } else {\n      music_array.push(0);\n    }\n  }\n  return music_array;\n};\n\n/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(0.5);\n    } else if (music_list[i] === '.|') {\n      music_array.push(1 / 4);\n    } else {\n      music_array.push(0);\n    }\n  }\n  return music_array;\n};\n\n/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(0.5);\n    } else if (music_list[i] === '.|') {\n      music_array.push(1 / 4);\n    } else {\n      music_array.push(0);\n    }\n  }\n  return music_array;\n};\n\n/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(0.5);\n    } else if (music_list[i] === '.|') {\n      music_array.push(1 / 4);\n    } else {\n      music_array.push(0);\n    }\n  }\n  return music_array;\n};\n\n/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(0.5);\n    } else if (music_list[i] === '.|') {\n      music_array.push(1 / 4);\n    } else {\n      music_array.push(0);\n    }\n  }\n  return music_array;\n};\n\n/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < stringLength && j < substringLength) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe', 'sIX', 'sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArr = numbers.split(\" \");\n  const numberArrSorted = numberArr.sort((a, b) => a - b);\n  return numberArrSorted.join(\" \");\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRoM smAllESt TO laRGEst\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.trunc(Math.log10(Math.abs(number))) + 1;\n  return number / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestInteger = (number) => {\n  const decimals = Math.trunc(Math.log10(Math.abs(number))) + 1;\n  return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimals = (number, decimals) => {\n  return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT OF a number rounded to the\n * nearest integer.\n *\n * >>> truncateNumber(3.5)\n  2\n */\nconst truncateNumberToNearestIntegerWithDecimalsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (number, decimals) => {\n  return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\n\n/**\n * Given a number it returns its decIMaL ParT ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElement = sortedNumbers[0];\n  const closestElementIndex = sortedNumbers.indexOf(closestElement);\n  const closestElements = sortedNumbers.slice(0, closestElementIndex + 1);\n  return [closestElement, closestElements];\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumber = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumber = sortedNumbers[0];\n  const closestNumberIndex = sortedNumbers.indexOf(closestNumber);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex + 1);\n  return closestNumber;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbers = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.slice(0, numbers.length);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndex = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(number);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexs = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndex = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(number);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexs = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexs = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexsIndex = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexsIndexs = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexsIndexsIndex = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexsIndexsIndexs = (numbers, numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n * @param {Array} numbers An array of numbers to be sorted\n * @param {Number} number A number to be searched for\n * @return {Number} The closest number to the number passed as parameter\n */\nconst findClosestNumbersIndexsIndexsIndexsIndexsIndex = (numbers, number) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumberIndex = sortedNumbers.indexOf(numbers);\n  const closestNumbers = sortedNumbers.slice(0, closestNumberIndex);\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the closest number to the\n * number passed as parameter\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * filterFloats filters list of anY pythoN values onLY for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * filterStrings filters list of anY pythoN values onLY for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * filterObjects filters list of anY pythoN values onLY for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, []]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * filterBooleans filters list of anY pythoN values onLY for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * filterArrays filters list of anY pythoN values onLY for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], {}]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], {}]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * filterNumbers filters list of anY pythoN values onLY for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * filterStringNumbers filters list of anY pythoN values onLY for numbers and strings\n  >>> filterStringNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringNumbers([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringNumbers = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value ==='string')\n}\n\n/**\n * filterStringBooleans filters list of anY pythoN values onLY for numbers and booleans\n  >>> filterStringBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringBooleans([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringBooleans = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'boolean')\n}\n\n/**\n * filterStringArrays filters list of anY pythoN values onLY for numbers and arrays\n  >>> filterStringArrays(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringArrays([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringArrays = (values) => {\n  return values.filter(value => typeof value === 'number' && Array.isArray(value))\n}\n\n/**\n * filterStringNumbers filters list of anY pythoN values onLY for numbers and numbers\n  >>> filterStringNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringNumbers([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringNumbers = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'number')\n}\n\n/**\n * filterStringBooleans filters list of anY pythoN values onLY for numbers and booleans\n  >>> filterStringBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringBooleans([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringBooleans = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'boolean')\n}\n\n/**\n * filterStringArrays filters list of anY pythoN values onLY for numbers and arrays\n  >>> filterStringArrays(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringArrays([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringArrays = (values) => {\n  return values.filter(value => typeof value === 'number' && Array.isArray(value))\n}\n\n/**\n * filterStringNumbers filters list of anY pythoN values onLY for numbers and numbers\n  >>> filterStringNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringNumbers([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringNumbers = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'number')\n}\n\n/**\n * filterStringBooleans filters list of anY pythoN values onLY for numbers and booleans\n  >>> filterStringBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringBooleans([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringBooleans = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'boolean')\n}\n\n/**\n * filterStringArrays filters list of anY pythoN values onLY for numbers and arrays\n  >>> filterStringArrays(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringArrays([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringArrays = (values) => {\n  return values.filter(value => typeof value === 'number' && Array.isArray(value))\n}\n\n/**\n * filterStringNumbers filters list of anY pythoN values onLY for numbers and numbers\n  >>> filterStringNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringNumbers([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringNumbers = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'number')\n}\n\n/**\n * filterStringBooleans filters list of anY pythoN values onLY for numbers and booleans\n  >>> filterStringBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringBooleans([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterStringBooleans = (values) => {\n  return values.filter(value => typeof value === 'number' && typeof value === 'boolean')\n}\n\n/**\n * filterStringArrays filter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    len++;\n  }\n  return len;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII characters\n *\n * >>> isascii('')\n  True\n  >>> isascii('abc')\n  False\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 127) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if string contains only ASCII ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* for a gIVe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factorsLen = 0;\n  let factorsSum = 0;\n  let factorsSumLen = 0;\n  let factorsSumLen2 = 0;\n  let factorsSumLen3 = 0;\n  let factorsSumLen4 = 0;\n  let factorsSumLen5 = 0;\n  let factorsSumLen6 = 0;\n  let factorsSumLen7 = 0;\n  let factorsSumLen8 = 0;\n  let factorsSumLen9 = 0;\n  let factorsSumLen10 = 0;\n  let factorsSumLen11 = 0;\n  let factorsSumLen12 = 0;\n  let factorsSumLen13 = 0;\n  let factorsSumLen14 = 0;\n  let factorsSumLen15 = 0;\n  let factorsSumLen16 = 0;\n  let factorsSumLen17 = 0;\n  let factorsSumLen18 = 0;\n  let factorsSumLen19 = 0;\n  let factorsSumLen20 = 0;\n  let factorsSumLen21 = 0;\n  let factorsSumLen22 = 0;\n  let factorsSumLen23 = 0;\n  let factorsSumLen24 = 0;\n  let factorsSumLen25 = 0;\n  let factorsSumLen26 = 0;\n  let factorsSumLen27 = 0;\n  let factorsSumLen28 = 0;\n  let factorsSumLen29 = 0;\n  let factorsSumLen30 = 0;\n  let factorsSumLen31 = 0;\n  let factorsSumLen32 = 0;\n  let factorsSumLen33 = 0;\n  let factorsSumLen34 = 0;\n  let factorsSumLen35 = 0;\n  let factorsSumLen36 = 0;\n  let factorsSumLen37 = 0;\n  let factorsSumLen38 = 0;\n  let factorsSumLen39 = 0;\n  let factorsSumLen40 = 0;\n  let factorsSumLen41 = 0;\n  let factorsSumLen42 = 0;\n  let factorsSumLen43 = 0;\n  let factorsSumLen44 = 0;\n  let factorsSumLen45 = 0;\n  let factorsSumLen46 = 0;\n  let factorsSumLen47 = 0;\n  let factorsSumLen48 = 0;\n  let factorsSumLen49 = 0;\n  let factorsSumLen50 = 0;\n  let factorsSumLen51 = 0;\n  let factorsSumLen52 = 0;\n  let factorsSumLen53 = 0;\n  let factorsSumLen54 = 0;\n  let factorsSumLen55 = 0;\n  let factorsSumLen56 = 0;\n  let factorsSumLen57 = 0;\n  let factorsSumLen58 = 0;\n  let factorsSumLen59 = 0;\n  let factorsSumLen60 = 0;\n  let factorsSumLen61 = 0;\n  let factorsSumLen62 = 0;\n  let factorsSumLen63 = 0;\n  let factorsSumLen64 = 0;\n  let factorsSumLen65 = 0;\n  let factorsSumLen66 = 0;\n  let factorsSumLen67 = 0;\n  let factorsSumLen68 = 0;\n  let factorsSumLen69 = 0;\n  let factorsSumLen70 = 0;\n  let factorsSumLen71 = 0;\n  let factorsSumLen72 = 0;\n  let factorsSumLen73 = 0;\n  let factorsSumLen74 = 0;\n  let factorsSumLen75 = 0;\n  let factorsSumLen76 = 0;\n  let factorsSumLen77 = 0;\n  let factorsSumLen78 = 0;\n  let factorsSumLen79 = 0;\n  let factorsSumLen80 = 0;\n  let factorsSumLen81 = 0;\n  let factorsSumLen82 = 0;\n  let factorsSumLen83 = 0;\n  let factorsSumLen84 = 0;\n  let factorsSumLen85 = 0;\n  let factorsSumLen86 = 0;\n  let factorsSumLen87 = 0;\n  let factorsSumLen88 = 0;\n  let factorsSumLen89 = 0;\n  let factorsSumLen90 = 0;\n  let factorsSumLen91 = 0;\n  let factorsSumLen92 = 0;\n  let factorsSumLen93 = 0;\n  let factorsSumLen94 = 0;\n  let factorsSumLen95 = 0;\n  let factorsSumLen96 = 0;\n  let factorsSumLen97 = 0;\n  let factorsSumLen98 = 0;\n  let factorsSumLen99 = 0;\n  let factorsSumLen100 = 0;\n  let factorsSumLen101 = 0;\n  let factorsSumLen102 = 0;\n  let factorsSumLen103 = 0;\n  let factorsSumLen104 = 0;\n  let factorsSumLen105 = 0;\n  let factorsSumLen106 = 0;\n  let factorsSumLen107 = 0;\n  let factorsSumLen108 = 0;\n  let factorsSumLen109 = 0;\n  let factorsSumLen110 = 0;\n  let factorsSumLen111 = 0;\n  let factorsSumLen112 = 0;\n  let factorsSumLen113 = 0;\n  let factorsSumLen114 = 0;\n  let factorsSumLen115 = 0;\n  let factorsSumLen116 = 0;\n  let factorsSumLen117 = 0;\n  let factorsSumLen118 = 0;\n  let factorsSumLen119 = 0;\n  let factorsSumLen120 = 0;\n  let factorsSumLen121 = 0;\n  let factorsSumLen122 = 0;\n  let factorsSumLen123 = 0;\n  let factorsSumLen124 = 0;\n  let factorsSumLen125 = 0;\n  let factorsSumLen126 = 0;\n  let factorsSumLen127 = 0;\n  let factorsSumLen128 = 0;\n  let factorsSumLen129 = 0;\n  let factorsSumLen130 = 0;\n  let factorsSumLen131 = 0;\n  let factorsSumLen132 = 0;\n  let factorsSumLen133 = 0;\n  let factorsSumLen134 = 0;\n  let factorsSumLen135 = 0;\n  let factorsSumLen136 = 0;\n  let factorsSumLen137 = 0;\n  let factorsSumLen138 = 0;\n  let factorsSumLen139 = 0;\n  let factorsSumLen140 = 0;\n  let factorsSumLen141 = 0;\n  let factorsSumLen142 = 0;\n  let factorsSumLen143 = 0;\n  let factorsSumLen144 = 0;\n  let factorsSumLen145 = 0;\n  let factorsSumLen146 = 0;\n  let factorsSumLen147 = 0;\n  let factorsSumLen148 = 0;\n  let factorsSumLen149 = 0;\n  let factorsSumLen150 = 0;\n  let factorsSumLen151 = 0;\n  let factorsSumLen152 = 0;\n  let factorsSumLen153 = 0;\n  let factorsSumLen154 = 0;\n  let factorsSumLen155 = 0;\n  let factorsSumLen156 = 0;\n  let factorsSumLen157 = 0;\n  let factorsSumLen158 = 0;\n  let factorsSumLen159 = 0;\n  let factorsSumLen160 = 0;\n  let factorsSumLen161 = 0;\n  let factorsSumLen162 = 0;\n  let factorsSumLen163 = 0;\n  let factorsSumLen164 = 0;\n  let factorsSumLen165 = 0;\n  let factorsSumLen166 = 0;\n  let factorsSumLen167 = 0;\n  let factorsSumLen168 = 0;\n  let factorsSumLen169 = 0;\n  let factorsSumLen170 = 0;\n  let factorsSumLen17", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[a-z]/g, char => char.toUpperCase())\n   .replace(/[A-Z]/g, char => char.toLowerCase());\n};\n\n/**\n * Converts string to lower case.\n *\n * @param {string} string - A string.\n * @returns {string} - A lower case string.\n *\n * @example\n * const result = strings.lowerCase('hello')\n * console.log(result)\n * // expected output: \"hello\"\n */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n * Converts string to upper case.\n *\n * @param {string} string - A string.\n * @returns {string} - An upper case string.\n *\n * @example\n * const result = strings.upperCase('hello')\n * console.log(result)\n * // expected output: \"HELLO\"\n */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n * Converts string to title case.\n *\n * @param {string} string - A string.\n * @returns {string} - A title case string.\n *\n * @example\n * const result = strings.titleCase('hello')\n * console.log(result)\n * // expected output: \"Hello World\"\n */\nconst titleCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to snake case.\n *\n * @param {string} string - A string.\n * @returns {string} - A snake case string.\n *\n * @example\n * const result = strings.snakeCase('hello')\n * console.log(result)\n * // expected output: \"hello\"\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word.toLowerCase())\n   .join('_');\n};\n\n/**\n * Converts string to camel case.\n *\n * @param {string} string - A string.\n * @returns {string} - A camel case string.\n *\n * @example\n * const result = strings.camelCase('hello')\n * console.log(result)\n * // expected output: \"hello\"\n */\nconst camelCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to kebab case.\n *\n * @param {string} string - A string.\n * @returns {string} - A kebab case string.\n *\n * @example\n * const result = strings.kebabCase('hello')\n * console.log(result)\n * // expected output: \"hello\"\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word.toLowerCase())\n   .join('-');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0].toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts string to pascal case.\n *\n * @param {string} string - A string.\n * @returns {string} - A pascal case string.\n *\n * @example\n * const result = strings.pascalCase('hello')\n * console.log(result)\n * // expected output: \"Hello\"\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map(word => word[0]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const concaTEnATe = strings.reduce((acc, str) => {\n    return `${acc}${str}`;\n  }, '');\n  return concaTEnATe;\n};\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = strings.reduce((acc, str) => {\n//     return `${acc}${str}`;\n//   }, '');\n//   return concaTEnATe;\n// };\n\n// const concaTEnATe = (strings) => {\n//   const concaTEnATe = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Takes an array of strings and returns an array of strings that\n * only contain one of a set of characters. For example,\n * filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'a')\n * returns ['abc', 'array']\n *\n * Returns an empty array if there are no strings that match the\n * given characters.\n *\n * >>> filterByOneOf([], 'a')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'b')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'c')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'd')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'e')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'f')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'g')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'h')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'i')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'j')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'k')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'l')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'],'m')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'n')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'o')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'p')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'q')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'r')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'],'s')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 't')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'u')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'v')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'w')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'x')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'y')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'z')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'A')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'B')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'C')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'D')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'E')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'F')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'G')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'H')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'I')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'J')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'K')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'L')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'M')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'N')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'O')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'P')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'Q')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'R')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'S')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'T')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'U')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'V')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'W')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'X')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'Y')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'Z')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '0')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '1')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '2')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '3')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '4')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '5')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '6')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '7')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '8')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], '9')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'a')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'b')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'c')\n * []\n * >>> filterByOneOf(['abc', 'bcd', 'cde', 'array'], 'd')\n * []", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, cur) => {\n    return acc + cur.balance;\n  }, 0);\n  return operations.every((op) => {\n    return op.balance < 0;\n  });\n};\n\n/* you're GIvEN a list of dePosit aNd wI", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*REturn ONlY Negative numbErs in THe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*REturn ONlY Negative numbErs in THe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*REturn ONlY Negative numbErs in THe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*REturn ONlY Negative numbErs in THe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*REturn ONlY Negative numbErs in THe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*REturn ONlY Zero numbErs in THe list.\n  >>> getZero([-1, 2, -4, 5, 6])\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return true\n  if (n % 5 === 0) return false\n  if (n % 7 === 0) return true\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return true\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return true\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return true\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return true\n  if (n % 43 === 0) return false\n  if (n % 53 === 0) return true\n  if (n % 63 === 0) return false\n  if (n % 73 === 0) return true\n  if (n % 83 === 0) return false\n  if (n % 93 === 0) return true\n  if (n % 103 === 0) return false\n  if (n % 113 === 0) return true\n  if (n % 123 === 0) return false\n  if (n % 133 === 0) return true\n  if (n % 143 === 0) return false\n  if (n % 153 === 0) return true\n  if (n % 163 === 0) return false\n  if (n % 173 === 0) return true\n  if (n % 183 === 0) return false\n  if (n % 193 === 0) return true\n  if (n % 203 === 0) return false\n  if (n % 213 === 0) return true\n  if (n % 223 === 0) return false\n  if (n % 233 === 0) return true\n  if (n % 243 === 0) return false\n  if (n % 253 === 0) return true\n  if (n % 263 === 0) return false\n  if (n % 273 === 0) return true\n  if (n % 283 === 0) return false\n  if (n % 293 === 0) return true\n  if (n % 303 === 0) return false\n  if (n % 313 === 0) return true\n  if (n % 323 === 0) return false\n  if (n % 333 === 0) return true\n  if (n % 343 === 0) return false\n  if (n % 353 === 0) return true\n  if (n % 363 === 0) return false\n  if (n % 373 === 0) return true\n  if (n % 383 === 0) return false\n  if (n % 393 === 0) return true\n  if (n % 403 === 0) return false\n  if (n % 413 === 0) return true\n  if (n % 423 === 0) return false\n  if (n % 433 === 0) return true\n  if (n % 443 === 0) return false\n  if (n % 455 === 0) return true\n  if (n % 463 === 0) return false\n  if (n % 467 === 0) return true\n  if (n % 483 === 0) return false\n  if (n % 493 === 0) return true\n  if (n % 503 === 0) return false\n  if (n % 513 <= 0) return true\n  if (n % 523 <= 0) return false\n  if (n % 533 <= 0) return true\n  if (n % 543 <= 0) return false\n  if (n % 553 <= 0) return true\n  if (n % 563 <= 0) return false\n  if (n % 573 <= 0) return true\n  if (n % 583 <= 0) return false\n  if (n % 593 <= 0) return true\n  if (n % 603 <= 0) return false\n  if (n % 613 <= 0) return true\n  if (n % 623 <= 0) return false\n  if (n % 633 <= 0) return true\n  if (n % 643 <= 0) return false\n  if (n % 653 <= 0) return true\n  if (n % 663 <= 0) return false\n  if (n % 673 <= 0) return true\n  if (n % 683 <= 0) return false\n  if (n % 693 <= 0) return true\n  if (n % 703 <= 0) return false\n  if (n % 713 <= 0) return true\n  if (n % 723 <= 0) return false\n  if (n % 733 <= 0) return true\n  if (n % 743 <= 0) return false\n  if (n % 755 <= 0) return true\n  if (n % 763 <= 0) return false\n  if (n % 773 <= 0) return true\n  if (n % 783 <= 0) return false\n  if (n % 793 <= 0) return true\n  if (n % 803 <= 0) return false\n  if (n % 813 <= 0) return true\n  if (n % 823 <= 0) return false\n  if (n % 833 <= 0) return true\n  if (n % 843 <= 0) return false\n  if (n % 853 <= 0) return true\n  if (n % 863 <= 0) return false\n  if (n % 873 <= 0) return true\n  if (n % 883 <= 0) return false\n  if (n % 893 <= 0) return true\n  if (n % 903 <= 0) return false\n  if (n % 913 <= 0) return true\n  if (n % 923 <= 0) return false\n  if (n % 931 <= 0) return true\n  if (n % 941 <= 0) return false\n  if (n % 951 <= 0) return true\n  if (n % 961 <= 0) return false\n  if (n % 971 <= 0) return true\n  if (n % 981 <= 0) return false\n  if (n % 991 <= 0) return true\n  if (n % 1001 <= 0) return false\n  if (n % 1013 <= 0) return true\n  if (n % 1021 <= 0) return false\n  if (n % 1033 <= 0) return true\n  if (n % 1049 <= 0) return false\n  if (n % 1051 <= 0) return true\n  if (n % 1061 <= 0) return false\n  if (n % 1071 <= 0) return true\n  if (n % 1099 <= 0) return false\n  if (n % 1111 <= 0) return true\n  if (n % 1113 <= 0) return false\n  if (n % 1117 <= 0) return true\n  if (n % 1123 <= 0) return false\n  if (n % 1131 <= 0) return true\n  if (n % 1141 <= 0) return false\n  if (n % 1151 <= 0) return true\n  if (n % 1161 <= 0) return false\n  if (n % 1171 <= 0) return true\n  if (n % 1181 <= 0) return false\n  if (n % 1199 <= 0) return true\n  if (n % 1201 <= 0) return false\n  if (n % 1213 <= 0) return true\n  if (n % 1221 <= 0) return false\n  if (n % 1233 <= 0) return true\n  if (n % 1249 <= 0) return false\n  if (n % 1251 <= 0) return true\n  if (n % 1261 <= 0) return false\n  if (n % 1271 <= 0) return true\n  if (n % 1281 <= 0) return false\n  if (n % 1291 <= 0) return true\n  if (n % 1301 <= 0) return false\n  if (n % 1313 <= 0) return true\n  if (n % 1321 <= 0) return false\n  if (n % 1331 <= 0) return true\n  if (n % 1341 <= 0) return false\n  if (n % 1351 <= 0) return true\n  if (n % 1361 <= 0) return false\n  if (n % 1371 <= 0) return true\n  if (n % 1381 <= 0) return false\n  if (n % 1391 <= 0) return true\n  if (n % 1401 <= 0) return false\n  if (n % 1411 <= 0) return true\n  if (n % 1421 <= 0) return false\n  if (n % 1433 <= 0) return true\n  if (n % 1449 <= 0) return false\n  if (n % 1451 <= 0) return true\n  if (n % 1461 <= 0) return false\n  if (n % 1471 <= 0) return true\n  if (n % 1481 <= 0) return false\n  if (n % 1491 <= 0) return true\n  if (n % 1501 <= 0) return false\n  if (n % 1511 <= 0) return true\n  if (n % 1521 <= 0) return false\n  if (n % 1533 <= 0) return true\n  if (n % 1549 <= ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter((x) => Math.abs(x) === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findMax FiNd x Such tHAt poly(x) = max of poly(xs).\n  findMax REtuRNs Only only max poINt, evEn iF thEre are mANy.\n  MOreOvEr, findMax oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  11.0\n  */\nconst findMax = (xs) => {\n  const maxs = xs.filter((x) => Math.abs(x) === Math.max(xs));\n  if (maxs.length === 0) return 0;\n  return maxs.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findMin FiNd x Such tHAt poly(x) = min of poly(xs).\n  findMin REtuRNs Only only min poINt, evEn iF thEre are mANy.\n  MOreOvEr, findMin oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -6.0\n  */\nconst findMin = (xs) => {\n  const mins = xs.filter((x) => Math.abs(x) === Math.min(xs));\n  if (mins.length === 0) return 0;\n  return mins.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findMean FiNd x Such tHAt poly(x) = mean of poly(xs).\n  findMean REtuRNs Only only mean poINt, evEn iF thEre are mANy.\n  MOreOvEr, findMean oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findMean([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findMean([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -6.5\n  */\nconst findMean = (xs) => {\n  const means = xs.filter((x) => Math.abs(x) === Math.mean(xs));\n  if (means.length === 0) return 0;\n  return means.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findMedian FiNd x Such tHAt poly(x) = median of poly(xs).\n  findMedian REtuRNs Only only median poINt, evEn iF thEre are mANy.\n  MOreOvEr, findMedian oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findMedian([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMedian([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -6.0\n  */\nconst findMedian = (xs) => {\n  const medians = xs.filter((x) => Math.abs(x) === Math.median(xs));\n  if (medians.length === 0) return 0;\n  return medians.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findMode FiNd x Such tHAt poly(x) = mode of poly(xs).\n  findMode REtuRNs Only only mode poINt, evEn iF thEre are mANy.\n  MOreOvEr, findMode oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findMode([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMode([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -6.0\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const third = l.sort((a, b) => a - b);\n  const thirdCopy = [...third];\n  for (let i = 0; i < thirdCopy.length; i++) {\n    if (thirdCopy[i] % 3!== 0) thirdCopy.splice(i, 1);\n  }\n  return thirdCopy;\n};\n\n/*\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 0 || n > 100) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n  if (n === 6) return 6;\n  if (n === 7) return 7;\n  if (n === 8) return 8;\n  if (n === 9) return 9;\n  if (n === 10) return 10;\n  if (n === 11) return 11;\n  if (n === 12) return 12;\n  if (n === 13) return 13;\n  if (n === 14) return 14;\n  if (n === 15) return 15;\n  if (n === 16) return 16;\n  if (n === 17) return 17;\n  if (n === 18) return 18;\n  if (n === 19) return 19;\n  if (n === 20) return 20;\n  if (n === 21) return 21;\n  if (n === 22) return 22;\n  if (n === 23) return 23;\n  if (n === 24) return 24;\n  if (n === 25) return 25;\n  if (n === 26) return 26;\n  if (n === 27) return 27;\n  if (n === 28) return 28;\n  if (n === 29) return 29;\n  if (n === 30) return 30;\n  if (n === 31) return 31;\n  if (n === 32) return 32;\n  if (n === 33) return 33;\n  if (n === 34) return 34;\n  if (n === 35) return 35;\n  if (n === 36) return 36;\n  if (n === 37) return 37;\n  if (n === 38) return 38;\n  if (n === 39) return 39;\n  if (n === 40) return 40;\n  if (n === 41) return 41;\n  if (n === 42) return 42;\n  if (n === 43) return 43;\n  if (n === 44) return 44;\n  if (n === 45) return 45;\n  if (n === 46) return 46;\n  if (n === 47) return 47;\n  if (n === 48) return 48;\n  if (n === 49) return 49;\n  if (n === 50) return 50;\n  if (n === 51) return 51;\n  if (n === 52) return 52;\n  if (n === 53) return 53;\n  if (n === 54) return 54;\n  if (n === 55) return 55;\n  if (n === 56) return 56;\n  if (n === 57) return 57;\n  if (n === 58) return 58;\n  if (n === 59) return 59;\n  if (n === 60) return 60;\n  if (n === 61) return 61;\n  if (n === 62) return 62;\n  if (n === 63) return 63;\n  if (n === 64) return 64;\n  if (n === 65) return 65;\n  if (n === 66) return 66;\n  if (n === 67) return 67;\n  if (n === 68) return 68;\n  if (n === 69) return 69;\n  if (n === 70) return 70;\n  if (n === 71) return 71;\n  if (n === 72) return 72;\n  if (n === 73) return 73;\n  if (n === 74) return 74;\n  if (n === 75) return 75;\n  if (n === 76) return 76;\n  if (n === 77) return 77;\n  if (n === 78) return 78;\n  if (n === 79) return 79;\n  if (n === 80) return 80;\n  if (n === 81) return 81;\n  if (n === 82) return 82;\n  if (n === 83) return 83;\n  if (n === 84) return 84;\n  if (n === 85) return 85;\n  if (n === 86) return 86;\n  if (n === 87) return 87;\n  if (n === 88) return 88;\n  if (n === 89) return 89;\n  if (n === 90) return 90;\n  if (n === 91) return 91;\n  if (n === 92) return 92;\n  if (n === 93) return 93;\n  if (n === 94) return 94;\n  if (n === 95) return 95;\n  if (n === 96) return 96;\n  if (n === 97) return 97;\n  if (n === 98) return 98;\n  if (n === 99) return 99;\n  if (n === 100) return 100;\n};\n\n/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 0 || n > 100) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n  if (n === 6) return 6;\n  if (n === 7) return 7;\n  if (n === 8) return 8;\n  if (n === 9) return 9;\n  if (n === 10) return 10;\n  if (n === 11) return 11;\n  if (n === 12) return 12;\n  if (n === 13) return 13;\n  if (n === 14) return 14;\n  if (n === 15) return 15;\n  if (n === 16) return 16;\n  if (n === 17) return 17;\n  if (n === 18) return 18;\n  if (n === 19) return 19;\n  if (n === 20) return 20;\n  if (n === 21) return 21;\n  if (n === 22) return 22;\n  if (n === 23) return 23;\n  if (n === 24) return 24;\n  if (n === 25) return 25;\n  if (n === 26) return 26;\n  if (n === 27) return 27;\n  if (n === 28) return 28;\n  if (n === 29) return 29;\n  if (n === 30) return 30;\n  if (n === 31) return 31;\n  if (n === 32) return 32;\n  if (n === 33) return 33;\n  if (n === 34) return 34;\n  if (n === 35) return 35;\n  if (n === 36) return 36;\n  if (n === 37) return 37;\n  if (n === 38) return 38;\n  if (n === 39) return 39;\n  if (n === 40) return 40;\n  if (n === 41) return 41;\n  if (n === 42) return 42;\n  if (n === 43) return 43;\n  if (n === 44) return 44;\n  if (n === 45) return 45;\n  if (n === 46) return 46;\n  if (n === 47) return 47;\n  if (n === 48) return 48;\n  if (n === 49) return 49;\n  if (n === 50) return 50;\n  if (n === 51) return 51;\n  if (n === 52) return 52;\n  if (n === 53) return 53;\n  if (n === 54) return 54;\n  if (n === 55) return 55;\n  if (n === 56) return 56;\n  if (n === 57) return 57;\n  if (n === 58) return 58;\n  if (n === 59) return 59;\n  if (n === 60) return 60;\n  if (n === 61) return 61;\n  if (n === 62) return 62;\n  if (n === 63) return 63;\n  if (n === 64) return 64;\n  if (n === 65) return 65;\n  if (n === 66) return 66;\n  if (n === 67) return 67;\n  if (n === 68) return 68;\n  if (n === 69) return 69;\n  if (n === 70) return 70;\n  if (n === 71) return 71;\n  if (n === 72) return 72;\n  if (n === 73) return 73;\n  if (n === 74) return 74;\n  if (n === 75) return 75;\n  if (n === 76) return 76;\n  if (n === 77) return 77;\n  if (n === 78) return 78;\n  if (n === 79) return 79;\n  if (n === 80) return 80;\n  if (n === 81) return 81;\n  if (n === 82) return 82;\n  if (n === 83) return 83;\n  if (n === 84) return 84;\n  if (n === 85) return 85;\n  if (n === 86) return 86;\n  if (n === 87) return 87;\n  if (n === 88) return 88;\n  if (n === 89) return 89;\n  if (n === 90) return 90;\n  if (n === 91) return 91;\n  if (n === 92) return 92;\n  if (n === 93) return 93;\n  if (n === 94) return 94;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1)\n}\n\n/*\n  >>> sortOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdds = (l) => {\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(oddIndexes[0], oddIndexes[oddIndexes.length - 1] + 1))\n}\n\n/*\n  >>> sortEvenOddsOf([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsOf([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddsOf = (l) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    } else {\n      oddIndexes.push(i)\n    }\n  }\n  return l.slice(evenIndexes[0], evenIndexes[evenIndexes.length - 1] + 1).concat(l.slice(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = n;\n  let primeNum = n;\n  while (fibNum > 1) {\n    fibNum = fibNum - 2;\n    primeNum = primeNum + 2;\n  }\n  return primeNum;\n};\n\n/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - meanOfNumbers), 0);\n};\n\n/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To oneO, AnD FalSE oTherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To twoO, AnD FalSE oTherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To threeO, AnD FalSE oTherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To fourO, AnD FalSE oTherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To fiveO, AnD FalSE oTherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To sixO, AnD FalSE oTherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To sevenO, AnD FalSE oTherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  triplesSumToEight Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To eightO, AnD FalSE oTherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n  let carsArray = carsArrayFromN(n);\n  let carsArray2 = carsArrayFromN(n);\n  let carsArray3 = carsArrayFromN(n);\n  let carsArray4 = carsArrayFromN(n);\n  let carsArray5 = carsArrayFromN(n);\n  let carsArray6 = carsArrayFromN(n);\n  let carsArray7 = carsArrayFromN(n);\n  let carsArray8 = carsArrayFromN(n);\n  let carsArray9 = carsArrayFromN(n);\n  let carsArray10 = carsArrayFromN(n);\n  let carsArray11 = carsArrayFromN(n);\n  let carsArray12 = carsArrayFromN(n);\n  let carsArray13 = carsArrayFromN(n);\n  let carsArray14 = carsArrayFromN(n);\n  let carsArray15 = carsArrayFromN(n);\n  let carsArray16 = carsArrayFromN(n);\n  let carsArray17 = carsArrayFromN(n);\n  let carsArray18 = carsArrayFromN(n);\n  let carsArray19 = carsArrayFromN(n);\n  let carsArray20 = carsArrayFromN(n);\n  let carsArray21 = carsArrayFromN(n);\n  let carsArray22 = carsArrayFromN(n);\n  let carsArray23 = carsArrayFromN(n);\n  let carsArray24 = carsArrayFromN(n);\n  let carsArray25 = carsArrayFromN(n);\n  let carsArray26 = carsArrayFromN(n);\n  let carsArray27 = carsArrayFromN(n);\n  let carsArray28 = carsArrayFromN(n);\n  let carsArray29 = carsArrayFromN(n);\n  let carsArray30 = carsArrayFromN(n);\n  let carsArray31 = carsArrayFromN(n);\n  let carsArray32 = carsArrayFromN(n);\n  let carsArray33 = carsArrayFromN(n);\n  let carsArray34 = carsArrayFromN(n);\n  let carsArray35 = carsArrayFromN(n);\n  let carsArray36 = carsArrayFromN(n);\n  let carsArray37 = carsArrayFromN(n);\n  let carsArray38 = carsArrayFromN(n);\n  let carsArray39 = carsArrayFromN(n);\n  let carsArray40 = carsArrayFromN(n);\n  let carsArray41 = carsArrayFromN(n);\n  let carsArray42 = carsArrayFromN(n);\n  let carsArray43 = carsArrayFromN(n);\n  let carsArray44 = carsArrayFromN(n);\n  let carsArray45 = carsArrayFromN(n);\n  let carsArray46 = carsArrayFromN(n);\n  let carsArray47 = carsArrayFromN(n);\n  let carsArray48 = carsArrayFromN(n);\n  let carsArray49 = carsArrayFromN(n);\n  let carsArray50 = carsArrayFromN(n);\n  let carsArray51 = carsArrayFromN(n);\n  let carsArray52 = carsArrayFromN(n);\n  let carsArray53 = carsArrayFromN(n);\n  let carsArray54 = carsArrayFromN(n);\n  let carsArray55 = carsArrayFromN(n);\n  let carsArray56 = carsArrayFromN(n);\n  let carsArray57 = carsArrayFromN(n);\n  let carsArray58 = carsArrayFromN(n);\n  let carsArray59 = carsArrayFromN(n);\n  let carsArray60 = carsArrayFromN(n);\n  let carsArray61 = carsArrayFromN(n);\n  let carsArray62 = carsArrayFromN(n);\n  let carsArray63 = carsArrayFromN(n);\n  let carsArray64 = carsArrayFromN(n);\n  let carsArray65 = carsArrayFromN(n);\n  let carsArray66 = carsArrayFromN(n);\n  let carsArray67 = carsArrayFromN(n);\n  let carsArray68 = carsArrayFromN(n);\n  let carsArray69 = carsArrayFromN(n);\n  let carsArray70 = carsArrayFromN(n);\n  let carsArray71 = carsArrayFromN(n);\n  let carsArray72 = carsArrayFromN(n);\n  let carsArray73 = carsArrayFromN(n);\n  let carsArray74 = carsArrayFromN(n);\n  let carsArray75 = carsArrayFromN(n);\n  let carsArray76 = carsArrayFromN(n);\n  let carsArray77 = carsArrayFromN(n);\n  let carsArray78 = carsArrayFromN(n);\n  let carsArray79 = carsArrayFromN(n);\n  let carsArray80 = carsArrayFromN(n);\n  let carsArray81 = carsArrayFromN(n);\n  let carsArray82 = carsArrayFromN(n);\n  let carsArray83 = carsArrayFromN(n);\n  let carsArray84 = carsArrayFromN(n);\n  let carsArray85 = carsArrayFromN(n);\n  let carsArray86 = carsArrayFromN(n);\n  let carsArray87 = carsArrayFromN(n);\n  let carsArray88 = carsArrayFromN(n);\n  let carsArray89 = carsArrayFromN(n);\n  let carsArray90 = carsArrayFromN(n);\n  let carsArray91 = car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To One, aND fALse OThErwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Two, aND fALse OThErwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Three, aND fALse OThErwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Four, aND fALse OThErwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Five, aND fALse OThErwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Six, aND fALse OThErwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Seven, aND fALse OThErwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Eight, aND fALse OThErwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let rePresenation = ''\n  let numBer = parseInt(x, 10)\n  let baseNum = parseInt(base, 10)\n  while (numBer > 0) {\n    rePresenation = rePresenation + numBer.toString(baseNum)\n    numBer = numBer / baseNum\n    baseNum = baseNum - 1\n  }\n  return rePresenation\n}\n\n/*\n  >>> changeBase12(8, 3)\n  '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h * (h + 1) * (h + 2));\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (h * (h + 1));\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (h);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h;\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h * (h + 1);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h * (h + 1) * (h + 2);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + 13) * (h + 14) * (h + 15) * (h + 16);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + 13) * (h + 14) * (h + 15) * (h + 16) * (h + 17);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + 13) * (h + 14) * (h + 15) * (h + 16) * (h + 17) * (h + 18);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + 13) * (h + 14) * (h + 15) * (h + 16) * (h + 17) * (h + 18) * (h + 19);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + 13) * (h + 14) * (h + 15) * (h + 16) * (h + 17) * (h + 18) * (h + 19) * (h + 20);\n};\n\n/*GIven a sidE and a hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h * (h + 1) * (h + 2) * (h + 3) * (h + 4) * (h + 5) * (h + 6) * (h + 7) * (h + 8) * (h + 9) * (h + 10) * (h + 11) * (h + 12) * (h + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) return -1;\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function that returns the nth element of the Fibonacci sequence up to and including n.\n  >>> fib5(10)\n  55\n  >>> fib5(11)\n  89\n  >>> fib5(12)\n  144\n  >>> fib5(13)\n  233\n  >>> fib5(14)\n  377\n  >>> fib5(15)\n  610\n  >>> fib5(16)\n  987\n  >>> fib5(17)\n  1597\n  >>> fib5(18)\n  2584\n  >>> fib5(19)\n  4181\n  >>> fib5(20)\n  6765\n  >>> fib5(21)\n  10946\n  >>> fib5(22)\n  17711\n  >>> fib5(23)\n  28657\n  >>> fib5(24)\n  46368\n  >>> fib5(25)\n  75025\n  >>> fib5(26)\n  121393\n  >>> fib5(27)\n  196418\n  >>> fib5(28)\n  317811\n  >>> fib5(29)\n  514229\n  >>> fib5(30)\n  832040\n  >>> fib5(31)\n  1346269\n  >>> fib5(32)\n  2178309\n  >>> fib5(33)\n  3524578\n  >>> fib5(34)\n  5702887\n  >>> fib5(35)\n  9497558\n  >>> fib5(36)\n  14930352\n  >>> fib5(37)\n  24157817\n  >>> fib5(38)\n  39088169\n  >>> fib5(39)\n  63245986\n  >>> fib5(40)\n  102334155\n  >>> fib5(41)\n  165580141\n  >>> fib5(42)\n  267914296\n  >>> fib5(43)\n  433494437\n  >>> fib5(44)\n  701408733\n  >>> fib5(45)\n  1134903170\n  >>> fib5(46)\n  1836311903\n  >>> fib5(47)\n  2971215073\n  >>> fib5(48)\n  4807526976\n  >>> fib5(49)\n  7778742049\n  >>> fib5(50)\n  12586269025\n  >>> fib5(51)\n  20365011074\n  >>> fib5(52)\n  32951280099\n  >>> fib5(53)\n  53316291171\n  >>> fib5(54)\n  86267571219\n  >>> fib5(55)\n  137364223953\n  >>> fib5(56)\n  217830980296\n  >>> fib5(57)\n  352457812539\n  >>> fib5(58)\n  570288729273\n  >>> fib5(59)\n  949755813887\n  >>> fib5(60)\n  1493035280611\n  >>> fib5(61)\n  2415781620799\n  >>> fib5(62)\n  3908816939419\n  >>> fib5(63)\n  6324598625987\n  >>> fib5(64)\n  10233415492519\n  >>> fib5(65)\n  16558014085735\n  >>> fib5(66)\n  26791429691271\n  >>> fib5(67)\n  43349443700512\n  >>> fib5(68)\n  70140873348867\n  >>> fib5(69)\n  113490317701393\n  >>> fib5(70)\n  183631190310067\n  >>> fib5(71)\n  297121507339439\n  >>> fib5(72)\n  480752697652583\n  >>> fib5(73)\n  777874204942897\n  >>> fib5(74)\n  1258626902590291\n  >>> fib5(75)\n  2036501107417073\n  >>> fib5(76)\n  3295128009902741\n  >>> fib5(77)\n  5331629117101391\n  >>> fib5(78)\n  8626757121934127\n  >>> fib5(79)\n  13736422395306457\n  >>> fib5(80)\n  21783098029615135\n  >>> fib5(81)\n  35245781253935767\n  >>> fib5(82)\n  57028872927329593\n  >>> fib5(83)\n  94975581388737797\n  >>> fib5(84)\n  14930352806114863\n  >>> fib5(85)\n  24157816207994191\n  >>> fib5(86)\n  39088169394191827\n  >>> fib5(87)\n  63245986259874397\n  >>> fib5(88)\n  102334154925193405\n  >>> fib5(89)\n  165580140857351031\n  >>> fib5(90)\n  26791429691271155\n  >>> fib5(91)\n  433494437005129421\n  >>> fib5(92)\n  701408733488676463\n  >>> fib5(93)\n  1134903177013935469\n  >>> fib5(94)\n  1836311903100674397\n  >>> fib5(95)\n  2971215073394394191\n  >>> fib5(96)\n  4807526976525833563\n  >>> fib5(97)\n  777874204942896757\n  >>> fib5(98)\n  1258626902590291357\n  >>> fib5(99)\n  2036501107417073394\n  >>> fib5(100)\n  3295128009902741357\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n};\n\n/*REturn mean OF eLEments in The list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.6666666666666665\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  7.142857142857142\n  */\nconst mean = (l) => {\n  const sum = 0;\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    sum += l[i];\n  }\n  return sum / len;\n};\n\n/*REturn variance OF eLEments in The list l.\n  >>> variance([3, 1, 2, 4, 5])\n  5.666666666666667\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  42.857142857142855\n  */\nconst variance = (l) => {\n  const meanVal = mean(l);\n  const sum = 0;\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    sum += (l[i] - meanVal) * (l[i] - meanVal);\n  }\n  return sum / len;\n};\n\n/*REturn std OF eLEments in The list l.\n  >>> std([3, 1, 2, 4, 5])\n  1.5811388300841898\n  >>> std([-10, 4, 6, 1000, 10, 20])\n  5.876612876533465\n  */\nconst std = (l) => {\n  return Math.sqrt(variance(l));\n};\n\n/*REturn min OF eLEments in The list l.\n  >>> min([3, 1, 2, 4, 5])\n  1\n  >>> min([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst min = (l) => {\n  return l.sort((a, b) => a - b)[0];\n};\n\n/*REturn max OF eLEments in The list l.\n  >>> max([3, 1, 2, 4, 5])\n  5\n  >>> max([-10, 4, 6, 1000, 10, 20])\n  1000\n  */\nconst max = (l) => {\n  return l.sort((a, b) => a - b)[l.length - 1];\n};\n\n/*REturn sum OF eLEments in The list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  2000\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -10000\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REturn product OF eLEments in The list l.\n  >>> product([3, 1, 2, 4, 5])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let stRing = text;\n  let isPalindrome = true;\n  stRing = stRing.replace(/[^a-zA-Z]/g, '');\n  for (let i = 0; i < stRing.length; i += 1) {\n    if (stRing[i]!== stRing[stRing.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  checkS If GIven stRing is A palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt = (n, p) => {\n  const aWare = n % p;\n  const aWareInt = Math.floor(aWare);\n  const aWareIntModP = aWareInt % p;\n  return aWareIntModP;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpInt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return [firstNumber].concat(restNumbers).join(delimeter);\n};\n\n/* removeAll A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeAll([], 4)\n  []\n  >>> removeAll([1, 2, 3], 4)\n  [1, 3]\n  */\nconst removeAll = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeFirst A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeFirst([], 4)\n  []\n  >>> removeFirst([1, 2, 3], 4)\n  [2]\n  */\nconst removeFirst = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return [firstNumber].concat(restNumbers);\n};\n\n/* removeLast A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeLast([], 4)\n  []\n  >>> removeLast([1, 2, 3], 4)\n  [3]\n  */\nconst removeLast = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeNthFromEnd A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeNthFromEnd([], 4, 4)\n  []\n  >>> removeNthFromEnd([1, 2, 3, 4], 4, 4)\n  [1, 4]\n  */\nconst removeNthFromEnd = (numbers, delimeter, n) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.slice(0, n).join(delimeter);\n};\n\n/* removeNthFromStart A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeNthFromStart([], 4, 4)\n  []\n  >>> removeNthFromStart([1, 2, 3, 4], 4, 4)\n  [4]\n  */\nconst removeNthFromStart = (numbers, delimeter, n) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.slice(n).join(delimeter);\n};\n\n/* removeAll A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeAll([], 4)\n  []\n  >>> removeAll([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeAll = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeFirst A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeFirst([], 4)\n  []\n  >>> removeFirst([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeFirst = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return [firstNumber].concat(restNumbers);\n};\n\n/* removeLast A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeLast([], 4)\n  []\n  >>> removeLast([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeLast = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeNthFromEnd A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeNthFromEnd([], 4, 4)\n  []\n  >>> removeNthFromEnd([1, 2, 3, 4], 4, 4)\n  [1, 3, 4]\n  */\nconst removeNthFromEnd = (numbers, delimeter, n) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.slice(0, n).join(delimeter);\n};\n\n/* removeNthFromStart A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeNthFromStart([], 4, 4)\n  []\n  >>> removeNthFromStart([1, 2, 3, 4], 4, 4)\n  [1, 3, 4]\n  */\nconst removeNthFromStart = (numbers, delimeter, n) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.slice(n).join(delimeter);\n};\n\n/* removeAll A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeAll([], 4)\n  []\n  >>> removeAll([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeAll = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeFirst A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeFirst([], 4)\n  []\n  >>> removeFirst([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeFirst = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return [firstNumber].concat(restNumbers);\n};\n\n/* removeLast A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> removeLast([], 4)\n  []\n  >>> removeLast([1, 2, 3, 4], 4)\n  [1, 3, 4]\n  */\nconst removeLast = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const firstNumber = numbers[0];\n  const restNumbers = numbers.slice(1);\n\n  return restNumbers.join(delimeter);\n};\n\n/* removeNthFromEnd A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  EnCOde WitH enCode_shiFT fuNctIoN dECoDEd sTRIng bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeNonLetters Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout non-letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'aaBAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  return text.replace(/[^a-zA-Z]/g, '');\n};\n\n/*\n  removeNonNumbers Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout non-numbers.\n  >>> removeNonNumbers('')\n  ''\n  >>> removeNonNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonNumbers('abcdef')\n  'abcdef'\n  >>> removeNonNumbers('aaaaa')\n  ''\n  >>> removeNonNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNonNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNonNumbers = (text) => {\n  return text.replace(/[^0-9]/g, '');\n};\n\n/*\n  removeNonPunctuation Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout non-punctuation.\n  >>> removeNonPunctuation('')\n  ''\n  >>> removeNonPunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonPunctuation('abcdef')\n  'abcdef'\n  >>> removeNonPunctuation('aaaaa')\n  ''\n  >>> removeNonPunctuation('aaBAA')\n  'aaBAA'\n  >>> removeNonPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNonPunctuation = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  remove", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold2([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold2([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold2([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold2([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold2 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold3([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold3([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold3([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold3([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold4([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold4([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold4([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold4([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold5([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold5([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold5([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold5([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold6([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold6([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold6([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold6([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold6 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold7([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold7([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold7([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold7([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold7 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold8([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold8([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold8([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold8([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold8 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold9([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold9([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*REturn TRuE If all nUmbers in The list l ARe above thresHOLd t.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(2, 3)\n  1.5\n  >>> divide(7, 3)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(2, 3)\n  1\n  >>> modulus(7, 3)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> power(2, 3)\n  8\n  >>> power(7, 3)\n  21\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> square(2)\n  4\n  >>> square(7)\n  49\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.4142135623730951\n  >>> squareRoot(7)\n  2.828427124746190\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.414213", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0;\n  let i1 = 0;\n  let same = 0;\n  let i0len = s0.length;\n  let i1len = s1.length;\n  let sameLen = i0len === i1len;\n  if (sameLen === false) {\n    return false;\n  }\n  while (i0 < i0len && i1 < i1len) {\n    if (s0.charAt(i0) === s1.charAt(i1)) {\n      same++;\n      i0++;\n      i1++;\n    } else if (s0.charAt(i0)!== s1.charAt(i1)) {\n      return false;\n    }\n  }\n  return same === i0len;\n};\n\n/*\n  check IF ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  3\n  >>> fib(5)\n  2\n  >>> fib(4)\n  1\n  >>> fib(3)\n  1\n  >>> fib(2)\n  1\n  >>> fib(1)\n  1\n  >>> fib(5)\n  2\n  >>> fib(4)\n  3\n  >>> fib(3)\n  5\n  >>> fib(2)\n  8\n  >>> fib(1)\n  13\n  >>> fib(5)\n  8\n  >>> fib(4)\n  13\n  >>> fib(3)\n  21\n  >>> fib(2)\n  21\n  >>> fib(1)\n  41\n  >>> fib(5)\n  41\n  >>> fib(4)\n  1021\n  >>> fib(3)\n  1021\n  >>> fib(2)\n  34\n  >>> fib(1)\n  34\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  >>> fib(2)\n  1415\n  >>> fib(1)\n  2334\n  >>> fib(5)\n  2334\n  >>> fib(4)\n  3771\n  >>> fib(3)\n  3771\n  >>> fib(2)\n  6103\n  >>> fib(1)\n  6103\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  1415\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.charAt(0);\n  const closingBracket = brackets.charAt(brackets.length - 1);\n  const openingBracketIsA = openingBracket === \"<\";\n  const closingBracketIsA = closingBracket === \">\";\n  const openingBracketIsB = openingBracket === \">\";\n  const closingBracketIsB = closingBracket === \"<\";\n\n  return (\n    openingBracketIsA &&\n    closingBracketIsB &&\n   !openingBracketIsB &&\n   !closingBracketIsA\n  );\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanumericCharacters = (str) => {\n  return str.match(/[^a-zA-Z0-9]/g);\n};\n\n// Returns true if the string has any non-alphanumeric characters in it.\nconst hasNonAlphanum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    if (i < j) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set(l1);\n  l1.forEach((e) => {\n    if (set2.has(e)) {\n      common.add(e);\n    }\n  });\n  return common;\n};\n\n/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Infinity;\n  let minFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*REturn THe largest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*REturn THe smallest pRIMeFactor of n. assUMe n > 1 and is not a pRIMe.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]*)\\)/g);\n  const nested_paren_groups = paren_string.match(/\\(([^()]*)\\)/g);\n  const nested_paren_groups_lenght = nested_paren_groups.length;\n  const nested_paren_groups_array = [];\n  let nested_paren_groups_array_lenght = 0;\n  let nested_paren_groups_array_index = 0;\n  let nested_paren_groups_array_current_lenght = 0;\n  let nested_paren_groups_array_current_index = 0;\n  let nested_paren_groups_array_current_string = '';\n  let nested_paren_groups_array_current_string_index = 0;\n  let nested_paren_groups_array_current_string_value = '';\n  let nested_paren_groups_array_current_string_lenght = 0;\n  let nested_paren_groups_array_current_string_lenght_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value = 0;\n  let nested_paren_groups_array_current_string_lenght_value_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_min = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_index = 0;\n  let nested_paren_groups_array_current_string_lenght_value_sum_sum_sum_sum_sum_max = 0;\n  let nested_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.charAt(0);\n  const closingBracket = brackets.charAt(brackets.length - 1);\n  const openingBracketIsClosingBracket = closingBracket === openingBracket;\n  return openingBracketIsClosingBracket;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAll = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === x) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === x.toUpperCase()) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegex = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, string) => {\n  const newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(x)) {\n      newString = newString.replace(\n        new RegExp(x, 'g'),\n        y,\n      );\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string of characters, return a new string where all occurences\n * of the character \"x\" have been replaced with \"y\".\n *\n * >>> replaceAll(\"x\",\"y\",\"x\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"y\")\n * \"y\"\n * >>> replaceAll(\"x\",\"y\",\"z\")\n * \"z\"\n */\nconst replaceAllRegexCaseInsensitive = (x, y, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = xs[0]\n  return [\n    d,\n    derivative([d - xs[1], d - xs[n - 2], d - xs[n - 1]])\n  ]\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n};\n\n/*\n  Write a function that takes an array of numbers as an argument and returns the sum of the squares of the numbers.\n  >>> squareSum([4, 9, 16, 25])\n  490\n  >>> squareSum([-1, 0, 1])\n  0\n  >>> squareSum([0, -1, 1])\n  1\n  >>> squareSum([-1, 0, -1, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n  >>> squareSum([-1, 0, -1, 2, 1])\n  -1\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift15 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift16 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift17 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  let shiftDigits = digits.splice(0, shift);\n  shiftDigits.forEach((digit, i) => {\n    result += digit;\n  });\n  result += digits.join('');\n  return result;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  return sum - n;\n};\n\n/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  return sum - n;\n};\n\n/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  return sum - n;\n};\n\n/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  return sum - n;\n};\n\n/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(e => e % 2 === 0);\n  const index = even.findIndex(e => e === Math.min(...even));\n  return [even[index], index];\n};\n\n/*\n  \"Given an Arry of integers, return a new Array containing only the elements that are\n  divisible by 3 OR 5.\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  Example: [1,2,3,4,5,6,7,8,9,10] -> [3,5,7,9]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a f", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring.\n *\n * Example:\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd']\n */\nconst filterBySubstrings = (strings, substrings) => {\n  return strings.filter(string => substrings.includes(string));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that do not contain the given substring.\n *\n * Example:\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['cde', 'array']\n */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that do not contain the given substrings.\n *\n * Example:\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'cde']\n */\nconst filterByNotSubstrings = (strings, substrings) => {\n  return strings.filter(string =>!substrings.includes(string));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than the\n * given length.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['abc']\n */\nconst filterByLength = (strings, substring, length) => {\n  return strings.filter(string => string.length <= length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than or\n * equal to the given length.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['abc', 'bacd']\n */\nconst filterByLengths = (strings, substring, lengths) => {\n  return strings.filter(string => lengths.includes(string.length));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than the\n * given length.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThan = (strings, substring, length) => {\n  return strings.filter(string => string.length > length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than or\n * equal to the given length.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThanOrEqualTo = (strings, substring, length) => {\n  return strings.filter(string => string.length >= length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than or\n * equal to the given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThanOrEqualTos = (strings, substring, lengths) => {\n  return strings.filter(string => lengths.includes(string.length));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than or\n * equal to the given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsLessThanOrEqualTo = (strings, substring, lengths) => {\n  return strings.filter(string => string.length <= lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than the\n * given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsLessThan = (strings, substring, lengths) => {\n  return strings.filter(string => string.length < lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than the\n * given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThan = (strings, substring, lengths) => {\n  return strings.filter(string => string.length > lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than or\n * equal to the given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThanOrEqualTo = (strings, substring, lengths) => {\n  return strings.filter(string => string.length >= lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are greater than or\n * equal to the given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsGreaterThanOrEqualTos = (strings, substring, lengths) => {\n  return strings.filter(string => lengths.includes(string.length));\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than or\n * equal to the given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsLessThanOrEqualTo = (strings, substring, lengths) => {\n  return strings.filter(string => string.length <= lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those strings that contain the given substring and are less than the\n * given lengths.\n *\n * Example:\n * >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 'a', [2, 3])\n * ['abc', 'bacd', 'cde', 'array']\n */\nconst filterByLengthsLessThan = (strings, substring, lengths) => {\n  return strings.filter(string => string.length < lengths.length);\n};\n\n/**\n * Takes an array of strings and returns an array of strings containing only\n * those string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    sorted.push(lst[i]);\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    for (let j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        const temp = sorted[i];\n        sorted[i] = sorted[j];\n        sorted[j] = temp;\n      }\n    }\n  }\n  return sorted;\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n  Given a list and a number, return that number in that list.\n  Examples:\n  findInList([1, 2, 3, 4], 2) == 3\n  findInList([1, 2, 3, 4], 5) == 5\n  findInList([], 5) == 5\n  */\nconst findInList = (lst, num) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == num) {\n      return num;\n    }\n  }\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const s = a + b + c\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c, d) => {\n  const s = a + b + c + d\n  if (s % 2 === 0) {\n    return s / 2\n  }\n  return -1\n}\n\n/*\n  Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isBalanced(q);\n  return isBalanced && maxWeight >= q.length;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.size;\n};\n\n/*\n  Write a function that takes in a list of numbers, and returns true if and only if the list contains no duplicates.\n\n  Example:\n  noDuplicates([1, 2, 2, 3]) ➞ true\n  # The list contains no duplicates.\n\n  noDuplicates([1, 2, 2, 3]) ➞ false\n  # The list contains duplicates.\n  */\nconst noDuplicates = (q) => {\n  const set = new Set(q);\n  return!set.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < min) {\n      min = num;\n    }\n  }\n  return min;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  You may assume that each input would have exactly one solution.\n*/\nconst binarySearch = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(log n) time.\n*/\nconst logBinarySearch = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    } else if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch2 = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch3 = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch4 = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch5 = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run in O(n) time.\n*/\nconst linearSearch6 = (arr, target, comp) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + (high - low) / 2;\n    if (comp(arr[mid], target) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    }\n  }\n  return low;\n};\n\n/*\n  Given a sorted array of integers, a target value, and a comparison function,\n  find an index at which a change in the target value occurs in the\n  array. Your change may be either upward or downward.\n\n  Your algorithm should run", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n  const [first1, first2] = [lst1[0], lst2[0]];\n  const [rest1, rest2] = [lst1.slice(1), lst2.slice(1)];\n  const [first1Len, rest1Len] = [first1.length, lst1.length - 1];\n  const [first2Len, rest2Len] = [first2.length, lst2.length - 1];\n  if (first1Len === first2Len && first1Len === rest1Len && first2Len === rest2Len) {\n    return first1;\n  }\n  if (first1Len > first2Len || first2Len > rest1Len || rest1Len > rest2Len) {\n    return lst1;\n  }\n  return lst2;\n};\n\n/*\n  Write a FuNCtion tHat accEptS Three lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Three listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2, lst3) => {\n  if (lst1.length === 0 || lst2.length === 0 || lst3.length === 0) {\n    return lst1;\n  }\n  const [first1, first2, first3] = [lst1[0], lst2[0], lst3[0]];\n  const [rest1, rest2, rest3] = [lst1.slice(1), lst2.slice(1), lst3.slice(1)];\n  const [first1Len, rest1Len] = [first1.length, lst1.length - 1];\n  const [first2Len, rest2Len] = [first2.length, lst2.length - 1];\n  const [first3Len, rest3Len] = [first3.length, lst3.length - 1];\n  if (first1Len === first2Len && first1Len === first3Len && first2Len === rest1Len && first3Len === rest2Len && first3Len === rest3Len) {\n    return first1;\n  }\n  if (first1Len > first2Len || first2Len > first3Len || first3Len > rest1Len || rest1Len > rest2Len || rest2Len > rest3Len) {\n    return lst1;\n  }\n  return lst3;\n};\n\n/*\n  Write a FuNCtion tHat accEptS Three lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Three listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2, lst3) => {\n  if (lst1.length === 0 || lst2.length === 0 || lst3.length === 0) {\n    return lst1;\n  }\n  const [first1, first2, first3] = [lst1[0], lst2[0], lst3[0]];\n  const [rest1, rest2, rest3] = [lst1.slice(1), lst2.slice(1), lst3.slice(1)];\n  const [first1Len, rest1Len] = [first1.length, lst1.length - 1];\n  const [first2Len, rest2Len] = [first2.length, lst2.length - 1];\n  const [first3Len, rest3Len] = [first3.length, lst3.length - 1];\n  if (first1Len === first2Len && first1Len === first3Len && first2Len === rest1Len && first3Len === rest2Len && first3Len === rest3Len) {\n    return first1;\n  }\n  if (first1Len > first2Len || first2Len > first3Len || first3Len > rest1Len || rest1Len > rest2Len || rest2Len > rest3Len) {\n    return lst1;\n  }\n  return lst3;\n};\n\n/*\n  Write a FuNCtion tHat accEptS Three lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Three listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2, lst3) => {\n  if (lst1.length === 0 || lst2.length === 0 || lst3.length === 0) {\n    return lst1;\n  }\n  const [first1, first2, first3] = [lst1[0], lst2[0], lst3[0]];\n  const [rest1, rest2, rest3] = [lst1.slice(1), lst2.slice(1), lst3.slice(1)];\n  const [first1Len, rest1Len] = [first1.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 2\n  while (a % b === 0) {\n    b++\n  }\n  return b === a\n}\n\n/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower2(x, n / 2);\n  if (n % 2 === 1) return isSimplePower2(x, n / 2);\n  return isSimplePower2(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower3(x, n / 2);\n  if (n % 2 === 1) return isSimplePower3(x, n / 2);\n  return isSimplePower3(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower4(x, n / 2);\n  if (n % 2 === 1) return isSimplePower4(x, n / 2);\n  return isSimplePower4(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower5(x, n / 2);\n  if (n % 2 === 1) return isSimplePower5(x, n / 2);\n  return isSimplePower5(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower6(x, n / 2);\n  if (n % 2 === 1) return isSimplePower6(x, n / 2);\n  return isSimplePower6(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower7(x, n / 2);\n  if (n % 2 === 1) return isSimplePower7(x, n / 2);\n  return isSimplePower7(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower8(x, n / 2);\n  if (n % 2 === 1) return isSimplePower8(x, n / 2);\n  return isSimplePower8(x, n / 2);\n};\n\n/*YOur taSK iS To write a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false;\n  return iscube(a * a);\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let tempNum = num;\n  while (tempNum.length > 0) {\n    const hexDigit = tempNum.charAt(tempNum.length - 1);\n    hexKey += parseInt(hexDigit, 16);\n    tempNum = tempNum.slice(0, -1);\n  }\n  return hexKey;\n};\n\n/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let tempNum = num;\n  while (tempNum.length > 0) {\n    const hexDigit = tempNum.charAt(tempNum.length - 1);\n    hexKey += parseInt(hexDigit, 16);\n    tempNum = tempNum.slice(0, -1);\n  }\n  return hexKey;\n};\n\n/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let tempNum = num;\n  while (tempNum.length > 0) {\n    const hexDigit = tempNum.charAt(tempNum.length - 1);\n    hexKey += parseInt(hexDigit, 16);\n    tempNum = tempNum.slice(0, -1);\n  }\n  return hexKey;\n};\n\n/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += decimalToBinary(decimal.charAt(i)) === '1'? '1' : '0';\n  }\n  return binary;\n};\n\n/*\n  Given a binary string and an int representing a power of 2, return the\n  decimal equivalent of the binary representation.\n\n  binaryToDecimal('11', 2) returns 3\n  binaryToDecimal('0000', 2) returns 0\n  binaryToDecimal('1', 2) returns 1\n  binaryToDecimal('10101', 2) returns 7\n  */\nconst binaryToDecimal = (binary, power) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += binaryToDecimal(binary.charAt(i), power) * (2 ** i);\n  }\n  return decimal;\n};\n\n/*\n  Return the sum of the digits of an integer.\n\n  sumOfDigits(123) returns 6\n  sumOfDigits(-123) returns 6\n  sumOfDigits(0) returns 0\n  sumOfDigits(-12) returns -6\n  sumOfDigits(12) returns 6\n  sumOfDigits(-122) returns -12\n  sumOfDigits(123000) returns 123\n  sumOfDigits(-123000) returns -123\n  sumOfDigits(1230000) returns 123\n  sumOfDigits(-1230000) returns -123\n  sumOfDigits(123000000) returns 123\n  sumOfDigits(-123000000) returns -123\n  sumOfDigits(12300000000) returns 123\n  sumOfDigits(-12300000000) returns -123\n  sumOfDigits(1230000000000) returns 123\n  sumOfDigits(-1230000000000) returns -123\n  sumOfDigits(12300000000000) returns 123\n  sumOfDigits(-12300000000000) returns -123\n  sumOfDigits(123000000000000) returns 123\n  sumOfDigits(-123000000000000) returns -123\n  sumOfDigits(12300000000000000) returns 123\n  sumOfDigits(-12300000000000000) returns -123\n  sumOfDigits(1230000000000000000) returns 123\n  sumOfDigits(-1230000000000000000) returns -123\n  sumOfDigits(12300000000000000000) returns 123\n  sumOfDigits(-12300000000000000000) returns -123\n  sumOfDigits(123000000000000000000) returns 123\n  sumOfDigits(-123000000000000000000) returns -123\n  sumOfDigits(1230000000000000000000) returns 123\n  sumOfDigits(-1230000000000000000000) returns -123\n  sumOfDigits(12300000000000000000000) returns 123\n  sumOfDigits(-12300000000000000000000) returns -123\n  sumOfDigits(1230000000000000000000000) returns 123\n  sumOfDigits(-1230000000000000000000000) returns -123\n  sumOfDigits(123000000000000000000000000) returns 123\n  sumOfDigits(-123000000000000000000000000) returns -123\n  sumOfDigits(1230000000000000000000000000) returns 123\n  sumOfDigits(-1230000000000000000000000000) returns -123\n  sumOfDigits(12300000000000000000000000000) returns 123\n  sumOfDigits(-12300000000000000000000000000) returns -123\n  sumOfDigits(123000000000000000000000000000) returns 123\n  sumOfDigits(-123000000000000000000000000000) returns -123\n  sumOfDigits(1230000000000000000000000000000) returns 123\n  sumOfDigits(-1230000000000000000000000000000) returns -123\n  sumOfDigits(123000000000000000000000000000000) returns 123\n  sumOfDigits(-123000000000000000000000000000000) returns -123\n  sumOfDigits(1230000000000000000000000000000000) returns 123\n  sumOfDigits(-1230000000000000000000000000000000) returns -123\n  sumOfDigits(12300000000000000000000000000000000) returns 123\n  sumOfDigits(-12300000000000000000000000000000000) returns -123\n  sumOfDigits(12300000000000000000000000000000001) returns 123\n  sumOfDigits(-12300000000000000000000000000000001) returns -123\n  sumOfDigits(123000000000000000000000000000000011) returns 123\n  sumOfDigits(-123000000000000000000000000000000011) returns -123\n  sumOfDigits(1230000000000000000000000000000000111) returns 123\n  sumOfDigits(-1230000000000000000000000000000000111) returns -123\n  sumOfDigits(12300000000000000000000000000000001111) returns 123\n  sumOfDigits(-12300000000000000000000000000000001111) returns -123\n  sumOfDigits(123000000000000000000000000000000011111) returns 123\n  sumOfDigits(-123000000000000000000000000000000011111) returns -123\n  sumOfDigits(1230000000000000000000000000000000111111) returns 123\n  sumOfDigits(-1230000000000000000000000000000000111111) returns -123\n  sumOfDigits(12300000000000000000000000000000001111111) returns 123\n  sumOfDigits(-12300000000000000000000000000000001111111) returns -123\n  sumOfDigits(123000000000000000000000000000000011111110) returns 123\n  sumOfDigits(-123000000000000000000000000000000011111110) returns -123\n  sumOfDigits(1230000000000000000000000000000000111111100) returns 123\n  sumOfDigits(-1230000000000000000000000000000000111111100) returns -123\n  sumOfDigits(12300000000000000000000000000000001111111000) returns 123\n  sumOfDigits(-12300000000000000000000000000000001111111000) returns -123\n  sumOfDigits(123000000000000000000000000000000011111110000) returns 123\n  sumOfDigits(-123000000000000000000000000000000011111110000) returns -123\n  sumOfDigits(1230000000000000000000000000000000111111100000) returns 123\n  sumOfDigits(-1230000000000000000000000000000000111111100000) returns -123\n  sumOfDigits(12300000000000000000000000000000001111111000000) returns 123\n  sumOfDigits(-12300000000000000000000000000000001111111000000) returns -123\n  sumOfDigits(1230000000000000000000000000000000111111100000000) returns 123\n  sumOfDigits(-1230000000000000000000000000000000111111100000000) returns -123\n  sumOfDigits(12300000000000000000000000000000001111111000000000) returns 123\n  sumOfDigits(-12300000000000000000000000000000001111111000000000) returns -123\n  sumOfDigits(123000000000000000000000000000000011111110000000000) returns 123\n  sumOfDigits(-123000000000000000000000000000000011111110000000000) returns -123\n  sumOfDigits(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc * curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a product aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst productProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc * curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a quotient aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst quotientProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc / curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProductSum = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc + curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a product aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst productProductProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc * curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a quotient aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst quotientProductProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc / curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProductSumSum = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc + curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a product aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst productProductProductProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc * curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a quotient aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst quotientProductProductProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc / curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProductSumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, int)\n  }\n  const [first,...rest] = numbers\n  return (rest.reduce((acc, curr) => acc + curr, first), int)\n}\n\n/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a product aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst productProductProductProductProduct = (numbers, int) => {\n  if (numbers.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'l') {\n      count += 1;\n    } else if (s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'r') {\n      count += 1;\n    } else if (s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count === 3;\n};\n\n// 👽 Exercise 3\n// Write a function that takes a string and returns the number of vowels contained in the string.\n// 👽 Exercise 4\n// Write a function that takes a string and returns the number of consonants contained in the string.\n// 👽 Exercise 5\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 6\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 7\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 8\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 9\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 10\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 11\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 12\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 13\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 14\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 15\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 16\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 17\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 18\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 19\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 20\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 21\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 22\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 23\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 24\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 25\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 26\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 27\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 28\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 29\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 30\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 31\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 32\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 33\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 34\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 35\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 36\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 37\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 38\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 39\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 40\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.\n// 👽 Exercise 41\n// Write a function that takes a string and returns the number of characters that are not vowels or consonants.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesSorted = grades.sort((a, b) => a - b);\n  const gradesLength = grades.length;\n  const gradesAverage = gradesSorted.reduce((sum, grade) => sum + grade, 0) / gradesLength;\n  const gradesSum = gradesSorted.reduce((sum, grade) => sum + grade, 0);\n  const gradesSumOfSquares = gradesSum * gradesSum;\n  const gradesSumOfSquaresOf = gradesSumOfSquares * gradesSum;\n  const gradesSumOfSquaresOfSquares = gradesSumOfSquaresOf * gradesSum;\n  const gradesSumOfSquaresOfSquare = gradesSumOfSquaresOfSquares * gradesSum;\n  const gradesSumOfSquaresOfSquareOf = gradesSumOfSquaresOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquare = gradesSumOfSquaresOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquare = gradesSumOfSquaresOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquare = gradesSumOfSquaresOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquare * gradesSum;\n  const gradesSumOfSquaresOfSquareOfSquareOfSquareOfSquareOf = gradesSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start += ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  Given a Positive Integer n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEndsOf = (n) => {\n  let ones = 1;\n  let start = 1;\n  while (n > start) {\n    ones += 1;\n    start *= ones;\n  }\n  return ones;\n};\n\n/*\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i > 0; i--) {\n    sum += (i & 1);\n    binary = `${(i & 1)? 1 : 0}${binary}`;\n  }\n  return binary;\n};\n\n/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      subtract([4, 2, 6, 7]) ==> 1 \n  */\nconst subtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      multiply([4, 2, 6, 7]) ==> 24 \n  */\nconst multiply = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum *= lst[i];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      divide([4, 2, 6, 7]) ==> 2 \n  */\nconst divide = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] / lst[i + 1];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      modulus([4, 2, 6, 7]) ==> 2 \n  */\nconst modulus = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] % lst[i + 1];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      sqrt([4, 2, 6, 7]) ==> 2 \n  */\nconst sqrt = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.sqrt(sum);\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      square([4, 2, 6, 7]) ==> 16 \n  */\nconst square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      pow([4, 2, 6, 7]) ==> 16 \n  */\nconst pow = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum *= lst[i];\n  }\n  return Math.pow(sum, lst[i + 1]);\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      log([4, 2, 6, 7]) ==> 2.302585092994046 \n  */\nconst log = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += Math.log(lst[i]);\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      log10([4, 2, 6, 7]) ==> 2.302585092994046 \n  */\nconst log10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += Math.log10(lst[i]);\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      sqrt([4, 2, 6, 7]) ==> 2 \n  */\nconst sqrt = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.sqrt(sum);\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      square([4, 2, 6, 7]) ==> 16 \n  */\nconst square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      pow([4, 2, 6, 7]) ==> 16 \n  */\nconst pow = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum *= lst[i];\n  }\n  return Math.pow(sum, lst[i + 1]);\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      log([4, 2, 6, 7]) ==> 2.302585092994046 \n  */\nconst log = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += Math.log(lst[i]);\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      log10([4, 2, 6, 7]) ==> 2.302585092994046 \n  */\nconst log10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += Math.log10(lst[i]);\n  }\n  return sum;\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      sqrt([4, 2, 6, 7]) ==> 2 \n  */\nconst sqrt = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.sqrt(sum);\n};\n\n/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      square([4, 2, 6, 7]) ==> 16 \n  */\nconst square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    const j = Math.floor(Math.random() * (sArr.length - i));\n    const temp = sArr[i];\n    sArr[i] = sArr[j];\n    sArr[j] = temp;\n  }\n  return sArr.join(\"\");\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    const j = Math.floor(Math.random() * (sArr.length - i));\n    const temp = sArr[i];\n    sArr[i] = sArr[j];\n    sArr[j] = temp;\n  }\n  return sArr.join(\"\");\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    const j = Math.floor(Math.random() * (sArr.length - i));\n    const temp = sArr[i];\n    sArr[i] = sArr[j];\n    sArr[j] = temp;\n  }\n  return sArr.join(\"\");\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    const j = Math.floor(Math.random() * (sArr.length - i));\n    const temp = sArr[i];\n    sArr[i] = sArr[j];\n    sArr[j] = temp;\n  }\n  return sArr.join(\"\");\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    const j = Math.floor(Math.random() * (sArr.length - i));\n    const temp = sArr[i];\n    sArr[i] = sArr[j];\n    sArr[j] = temp;\n  }\n  return sArr.join(\"\");\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split(\"\");\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2) ...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  lst.forEach((row, i) => {\n    if (row.includes(x)) {\n      ret = ret.concat(([\n        [i, row.indexOf(x)],\n        [i, row.lastIndexOf(x)]\n      ]))\n    }\n  })\n  return ret\n}\n\n/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 1), (2, 2), (3, 3)]\n  */\nconst getCol = (lst, x) => {\n  let ret = []\n  lst.forEach((row, i) => {\n    if (row.includes(x)) {\n      ret = ret.concat(([\n        [i, row.indexOf(x)],\n        [i, row.lastIndexOf(x)]\n      ]))\n    }\n  })\n  return ret\n}\n\n/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  lst.forEach((row, i) => {\n    if (row.includes(x)) {\n      ret = ret.concat(([\n        [i, row.indexOf(x)],\n        [i, row.lastIndexOf(x)]\n      ]))\n    }\n  })\n  return ret\n}\n\n/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 1), (2, 2), (3, 3)]\n  */\nconst getCol = (lst, x) => {\n  let ret = []\n  lst.forEach((row, i) => {\n    if (row.includes(x)) {\n      ret = ret.concat(([\n        [i, row.indexOf(x)],\n        [i, row.lastIndexOf(x)]\n      ]))\n    }\n  })\n  return ret\n}\n\n/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2]\n  */\nconst reverseArray = (array) => {\n  const reversed = array.slice().reverse();\n  return reversed;\n};\n\n/*\n  given an array, return an array\n  of its elements reversed\n\n  nOTE:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index % alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion decrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing deCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index / alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index % alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion decrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing deCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index / alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index % alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion decrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing deCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(index / alphabet.length)\n  }\n  return newString\n}\n\n/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghij", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax = numbers[i];\n    let rollingMaxIndex = 0;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > rollingMax) {\n        rollingMax = numbers[j];\n        rollingMaxIndex = j;\n      }\n    }\n    rollingMaxArray.push(rollingMax);\n    numbers[rollingMaxIndex] = rollingMax;\n  }\n  return rollingMaxArray;\n};\n\n/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rollingMax", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEle;\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextLargest() tHAT retUrns the 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconsT nextLargest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let maxEle = lst[0];\n  let maxEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxEle) {\n      maxEle = lst[i];\n      maxEleIndex = i;\n    }\n  }\n  return maxEle;\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallestAndLargest() tHAT retUrns the 2nd smallest and 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallestAndLargest([1, 2, 3, 4, 5]) == [2, 5]\n  nextSmallestAndLargest([5, 1, 4, 3, 2]) == [1, 5]\n  nextSmallestAndLargest([]) == null\n  nextSmallestAndLargest([1, 1]) == null\n  */\nconsT nextSmallestAndLargest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  let maxEle = lst[0];\n  let maxEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxEle) {\n      maxEle = lst[i];\n      maxEleIndex = i;\n    }\n  }\n  return [minEle, maxEle];\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallestAndLargest() tHAT retUrns the 2nd smallest and 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallestAndLargest([1, 2, 3, 4, 5]) == [2, 5]\n  nextSmallestAndLargest([5, 1, 4, 3, 2]) == [1, 5]\n  nextSmallestAndLargest([]) == null\n  nextSmallestAndLargest([1, 1]) == null\n  */\nconsT nextSmallestAndLargest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  let maxEle = lst[0];\n  let maxEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxEle) {\n      maxEle = lst[i];\n      maxEleIndex = i;\n    }\n  }\n  return [minEle, maxEle];\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallestAndLargest() tHAT retUrns the 2nd smallest and 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallestAndLargest([1, 2, 3, 4, 5]) == [2, 5]\n  nextSmallestAndLargest([5, 1, 4, 3, 2]) == [1, 5]\n  nextSmallestAndLargest([]) == null\n  nextSmallestAndLargest([1, 1]) == null\n  */\nconsT nextSmallestAndLargest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  let maxEle = lst[0];\n  let maxEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxEle) {\n      maxEle = lst[i];\n      maxEleIndex = i;\n    }\n  }\n  return [minEle, maxEle];\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallestAndLargest() tHAT retUrns the 2nd smallest and 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallestAndLargest([1, 2, 3, 4, 5]) == [2, 5]\n  nextSmallestAndLargest([5, 1, 4, 3, 2]) == [1, 5]\n  nextSmallestAndLargest([]) == null\n  nextSmallestAndLargest([1, 1]) == null\n  */\nconsT nextSmallestAndLargest = (lst) => {\n  if (lst == null || lst.length <= 0) return null;\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  let maxEle = lst[0];\n  let maxEleIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxEle) {\n      maxEle = lst[i];\n      maxEleIndex = i;\n    }\n  }\n  return [minEle, maxEle];\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallestAndLargest() tHAT retUrns the 2nd smallest and 2nd largest eleMent of The list.\n  rEtuRn nULl iF tHeR", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g)\n  return bored? bored.length : 0\n}\n\n/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTenc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  if (x === -y || x === z) return true;\n  if (x === -y || x === -z) return true;\n  return false;\n};\n\n/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += encode(letter);\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  decode A FuNCtion tHat takEs a message, ANd decodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      decodedMessage += letter;\n    } else {\n      decodedMessage += decode(letter);\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  encode A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += encode(letter);\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  decode A FuNCtion tHat takEs a message, ANd decodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      decodedMessage += letter;\n    } else {\n      decodedMessage += decode(letter);\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  encode A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += encode(letter);\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  decode A FuNCtion tHat takEs a message, ANd decodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      decodedMessage += letter;\n    } else {\n      decodedMessage += decode(letter);\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  encode A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter ==='') {\n      encodedMessage += letter;\n    } else {\n      encodedMessage += encode(letter);\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  decode A FuNCtion tHat takEs a message, ANd decodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL vo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (prime * prime > lst[i]) {\n      prime = lst[i]\n      sum += prime\n    }\n  }\n  return sum\n}\n\n/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let loweredKeys = keys.map(key => key.toLowerCase())\n  let isAllKeysLowered = loweredKeys.every(key => loweredKeys.indexOf(key) >= 0)\n  return isAllKeysLowered || loweredKeys.every(key => dict[key].toLowerCase() === dict[key])\n}\n\n/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let loweredKeys = keys.map(key => key.toLowerCase())\n  let isAllKeysLowered = loweredKeys.every(key => loweredKeys.indexOf(key) >= 0)\n  return isAllKeysLowered || loweredKeys.every(key => dict[key].toLowerCase() === dict[key])\n}\n\n/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let loweredKeys = keys.map(key => key.toLowerCase())\n  let isAllKeysLowered = loweredKeys.every(key => loweredKeys.indexOf(key) >= 0)\n  return isAllKeysLowered || loweredKeys.every(key => dict[key].toLowerCase() === dict[key])\n}\n\n/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let loweredKeys = keys.map(key => key.toLowerCase())\n  let isAllKeysLowered = loweredKeys.every(key => loweredKeys.indexOf(key) >= 0)\n  return isAllKeysLowered || loweredKeys.every(key => dict[key].toLowerCase() === dict[key])\n}\n\n/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let loweredKeys = keys.map(key => key.toLowerCase())\n  let isAllKeysLowered = loweredKeys.every(key => loweredKeys.indexOf(key) >= 0)\n  return isAllKeysLowered || loweredKeys.every(key => dict[key].toLowerCase() === dict[key])\n}\n\n/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  A FunctiOn that Takes an array of numbers and returns an array of numbers that sums to n.\n  example:\n  sumToN([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  sumToN([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17,19]\n  sumToN([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17,19,21]\n  sumToN([2,3,5,7,11,13,17,19,21,25]) => [2,3,5,7,11,13,17,19,21,25]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31]) => [2,3,5,7,11,13,17,19,21,25,31]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35]) => [2,3,5,7,11,13,17,19,21,25,31,35]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41]) => [2,3,5,7,11,13,17,19,21,25,31,35,41]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135,143]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135,143]\n  sumToN([2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135,143,151]) => [2,3,5,7,11,13,17,19,21,25,31,35,41,49,55,61,67,73,81,89,97,103,109,115,121,127,135,143,151]\n  sumToN([2,3,5,7,11,13,17,19,21,25,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b / gcd(a, b);\n};\n\n/*\n  Given two integers A and B. Write a function that returns true if \n  the sum of A and B is divisible by 3.\n  Examples:\n  divisibleBy3(10, 12) should return true.\n  divisibleBy3(10, 3) should return false.\n  divisibleBy3(10, 0) should return false.\n  divisibleBy3(10, -10) should return false.\n  divisibleBy3(10, 100) should return false.\n  divisibleBy3(10, -100) should return false.\n  divisibleBy3(10, -1000) should return true.\n  divisibleBy3(10, -10000) should return false.\n  divisibleBy3(10, -1000000) should return false.\n  divisibleBy3(10, -10000000) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(10, -100000001) should return false.\n  divisibleBy3(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let nUpper = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      nUpper += 1;\n    }\n  }\n  return nUpper;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let nUpper = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      nUpper += 2;\n    }\n  }\n  return nUpper;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of lowercase VOWels in Even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let nLower = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      nLower += 1;\n    }\n  }\n  return nLower;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of lowercase VOWels in Odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let nLower = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      nLower += 2;\n    }\n  }\n  return nLower;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of digits in Even indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let nDigits = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      nDigits += 1;\n    }\n  }\n  return nDigits;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of digits in Odd indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 2\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigitsOdd = (s) => {\n  let nDigits = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      nDigits += 2;\n    }\n  }\n  return nDigits;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-digits in Even indices.\n  \n  For example:\n  countNonDigits('aBCdEf') returns 1\n  countNonDigits('abcdefg') returns 0\n  countNonDigits('dBBE') returns 0\n  */\nconst countNonDigits = (s) => {\n  let nNonDigits = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      nNonDigits += 1;\n    }\n  }\n  return nNonDigits;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-digits in Odd indices.\n  \n  For example:\n  countNonDigits('aBCdEf') returns 2\n  countNonDigits('abcdefg') returns 0\n  countNonDigits('dBBE') returns 0\n  */\nconst countNonDigitsOdd = (s) => {\n  let nNonDigits = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      nNonDigits += 2;\n    }\n  }\n  return nNonDigits;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-alphanumerics in Even indices.\n  \n  For example:\n  countNonAlphanumerics('aBCdEf') returns 1\n  countNonAlphanumerics('abcdefg') returns 0\n  countNonAlphanumerics('dBBE') returns 0\n  */\nconst countNonAlphanumerics = (s) => {\n  let nNonAlphanumerics = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      nNonAlphanumerics += 1;\n    }\n  }\n  return nNonAlphanumerics;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-alphanumerics in Odd indices.\n  \n  For example:\n  countNonAlphanumerics('aBCdEf') returns 2\n  countNonAlphanumerics('abcdefg') returns 0\n  countNonAlphanumerics('dBBE') returns 0\n  */\nconst countNonAlphanumericsOdd = (s) => {\n  let nNonAlphanumerics = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      nNonAlphanumerics += 2;\n    }\n  }\n  return nNonAlphanumerics;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-alphanumerics in Even indices.\n  \n  For example:\n  countNonAlphanumericsEven('aBCdEf') returns 1\n  countNonAlphanumericsEven('abcdefg') returns 0\n  countNonAlphanumericsEven('dBBE') returns 0\n  */\nconst countNonAlphanumericsEven = (s) => {\n  let nNonAlphanumerics = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      nNonAlphanumerics += 1;\n    }\n  }\n  return nNonAlphanumerics;\n};\n\n/*\n  given A StRIng s, couNt the nUmbER of non-alphanumerics in Odd indices.\n  \n  For example:\n  countNonAlphanumericsOdd('aBCdEf') returns 2\n  countNonAlphanumericsOdd('abcdefg') returns 0\n  countNonAlphanumericsOdd('dBBE') returns 0\n  */\nconst countNonAlphanumericsOdd = (s) => {\n  let nNonAlphanumer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numberValue = Number(value);\n  const integerValue = Math.floor(numberValue);\n  const difference = Math.abs(numberValue - integerValue);\n  return integerValue === numberValue? integerValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestFloat(\"10\")\n  10\n  >>> closestFloat(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15 and closestFloat(\"-14.5\") should return -15.\n  */\nconst closestFloat = (value) => {\n  const numberValue = Number(value);\n  const floatValue = parseFloat(value);\n  const difference = Math.abs(numberValue - floatValue);\n  return floatValue === numberValue? floatValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const numberValue = Number(value);\n  const floatValue = parseFloat(value);\n  const difference = Math.abs(numberValue - floatValue);\n  return floatValue === numberValue? floatValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestDate(\"10\")\n  10\n  >>> closestDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDate(\"14.5\") should\n  return 15 and closestDate(\"-14.5\") should return -15.\n  */\nconst closestDate = (value) => {\n  const numberValue = Number(value);\n  const dateValue = Date.parse(value);\n  const difference = Math.abs(numberValue - dateValue);\n  return dateValue === numberValue? dateValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestTime(\"10\")\n  10\n  >>> closestTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestTime(\"14.5\") should\n  return 15 and closestTime(\"-14.5\") should return -15.\n  */\nconst closestTime = (value) => {\n  const numberValue = Number(value);\n  const timeValue = Date.parse(value);\n  const difference = Math.abs(numberValue - timeValue);\n  return timeValue === numberValue? timeValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestDate(\"10\")\n  10\n  >>> closestDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDate(\"14.5\") should\n  return 15 and closestDate(\"-14.5\") should return -15.\n  */\nconst closestDate = (value) => {\n  const numberValue = Number(value);\n  const dateValue = Date.parse(value);\n  const difference = Math.abs(numberValue - dateValue);\n  return dateValue === numberValue? dateValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestTime(\"10\")\n  10\n  >>> closestTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestTime(\"14.5\") should\n  return 15 and closestTime(\"-14.5\") should return -15.\n  */\nconst closestTime = (value) => {\n  const numberValue = Number(value);\n  const timeValue = Date.parse(value);\n  const difference = Math.abs(numberValue - timeValue);\n  return timeValue === numberValue? timeValue : difference;\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
