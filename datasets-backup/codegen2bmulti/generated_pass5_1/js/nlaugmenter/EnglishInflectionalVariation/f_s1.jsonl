{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  let index = 0;\n  let closestNumber = sortedNumbers[0];\n  let closestDistanceSquared = thresholdSquared;\n  while (index < sortedNumbers.length) {\n    const distanceSquared = Math.pow(sortedNumbers[index] - closestNumber, 2);\n    if (distanceSquared < closestDistanceSquared) {\n      closestNumber = sortedNumbers[index];\n      closestDistanceSquared = distanceSquared;\n    }\n    index++;\n  }\n  return closestDistanceSquared < thresholdSquared;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_index = 0;\n  let open_paren_count_index = 0;\n  let open_paren_count_index_end = 0;\n  let open_paren_count_index_end_end = 0;\n  let open_paren_count_index_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let open_paren_count_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length > prefix.length? postfix : prefix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  let result = [];\n  while (pile.length > 1) {\n    let nextLevel = [];\n    let nextLevelSize = pile.length - 1;\n    let nextLevelSizeOdd = nextLevelSize % 2;\n    let nextLevelSizeEven = nextLevelSize - nextLevelSizeOdd;\n    for (let i = 0; i < nextLevelSize; i++) {\n      let nextLevelNumber = pile[i];\n      let nextLevelOdd = nextLevelNumber % 2;\n      let nextLevelEven = nextLevelNumber - nextLevelOdd;\n      if (nextLevelOdd === 0) {\n        nextLevelNumber = nextLevelEven;\n      } else {\n        nextLevelNumber = nextLevelOdd;\n      }\n      nextLevel.push(nextLevelNumber);\n    }\n    result.push(nextLevel);\n    pile = nextLevel;\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i]);\n  }\n  return words;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x < y) {\n    return x\n  }\n  return y\n}\n\nconst test = () => {\n  console.log(chooseNum(12, 15))\n  console.log(chooseNum(13, 12))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f(i - 1));\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f2(i - 1));\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f3(i - 1));\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f4(i - 1));\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f5(i - 1));\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f6(i - 1));\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f7(i - 1));\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f8(i - 1));\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f9(i - 1));\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f10(i - 1));\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f11(i - 1));\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f12(i - 1));\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    result.push(i * f13(i - 1));\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const isPalindrome = isPalindrome(i);\n    if (isPalindrome) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall2 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall3 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall4 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall5 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall6 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall7 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall8 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall9 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall10 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall11 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length === 0;\n};\n\nconst moveOneBall12 = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > arr[i + 1]) {\n      arr.splice(i, 1);\n      i++;\n    } else {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0) {\n      lst.push(lst1[i]);\n      i++;\n    } else {\n      lst.push(lst2[j]);\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    lst.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    lst.push(lst2[j]);\n    j++;\n  }\n  return lst.length === 0? \"NO\" : \"YES\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let letterCount = 0;\n  let letterIndex = 0;\n  let letterIndexCount = 0;\n  let letterIndexCountMax = 0;\n  let letterIndexCountMin = 0;\n  let letterIndexCountMaxMin = 0;\n  let letterIndexCountMaxMinMax = 0;\n  let letterIndexCountMaxMinMin = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  let letterIndexCountMaxMinMinMax = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result.split('').reverse().join('') === result;\n  return [result, isPalindrome];\n}\n\nconst isPalindrome = (s, c) => {\n  let result = reverseDelete(s, c);\n  return result[1];\n}\n\nconsole.log(isPalindrome('abcde', 'ae'));\nconsole.log(isPalindrome('abcdef', 'b'));\nconsole.log(isPalindrome('abcdedcba', 'ab'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2!== 0) {\n        odd++;\n      }\n    }\n    res.push(`the number of odd elements ${odd}n the str${odd}ng ${odd} of the ${odd}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    min = Math.min(min, minSum + nums[i]);\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(capacity);\n      }\n    }\n  }\n  return buckets.length;\n};\n\nmodule.exports = maxFill;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedArr = [];\n  let counter = 0;\n  let binary = 0;\n  let binaryCount = 0;\n  let binaryCount2 = 0;\n  let binaryCount3 = 0;\n  let binaryCount4 = 0;\n  let binaryCount5 = 0;\n  let binaryCount6 = 0;\n  let binaryCount7 = 0;\n  let binaryCount8 = 0;\n  let binaryCount9 = 0;\n  let binaryCount10 = 0;\n  let binaryCount11 = 0;\n  let binaryCount12 = 0;\n  let binaryCount13 = 0;\n  let binaryCount14 = 0;\n  let binaryCount15 = 0;\n  let binaryCount16 = 0;\n  let binaryCount17 = 0;\n  let binaryCount18 = 0;\n  let binaryCount19 = 0;\n  let binaryCount20 = 0;\n  let binaryCount21 = 0;\n  let binaryCount22 = 0;\n  let binaryCount23 = 0;\n  let binaryCount24 = 0;\n  let binaryCount25 = 0;\n  let binaryCount26 = 0;\n  let binaryCount27 = 0;\n  let binaryCount28 = 0;\n  let binaryCount29 = 0;\n  let binaryCount30 = 0;\n  let binaryCount31 = 0;\n  let binaryCount32 = 0;\n  let binaryCount33 = 0;\n  let binaryCount34 = 0;\n  let binaryCount35 = 0;\n  let binaryCount36 = 0;\n  let binaryCount37 = 0;\n  let binaryCount38 = 0;\n  let binaryCount39 = 0;\n  let binaryCount40 = 0;\n  let binaryCount41 = 0;\n  let binaryCount42 = 0;\n  let binaryCount43 = 0;\n  let binaryCount44 = 0;\n  let binaryCount45 = 0;\n  let binaryCount46 = 0;\n  let binaryCount47 = 0;\n  let binaryCount48 = 0;\n  let binaryCount49 = 0;\n  let binaryCount50 = 0;\n  let binaryCount51 = 0;\n  let binaryCount52 = 0;\n  let binaryCount53 = 0;\n  let binaryCount54 = 0;\n  let binaryCount55 = 0;\n  let binaryCount56 = 0;\n  let binaryCount57 = 0;\n  let binaryCount58 = 0;\n  let binaryCount59 = 0;\n  let binaryCount60 = 0;\n  let binaryCount61 = 0;\n  let binaryCount62 = 0;\n  let binaryCount63 = 0;\n  let binaryCount64 = 0;\n  let binaryCount65 = 0;\n  let binaryCount66 = 0;\n  let binaryCount67 = 0;\n  let binaryCount68 = 0;\n  let binaryCount69 = 0;\n  let binaryCount70 = 0;\n  let binaryCount71 = 0;\n  let binaryCount72 = 0;\n  let binaryCount73 = 0;\n  let binaryCount74 = 0;\n  let binaryCount75 = 0;\n  let binaryCount76 = 0;\n  let binaryCount77 = 0;\n  let binaryCount78 = 0;\n  let binaryCount79 = 0;\n  let binaryCount80 = 0;\n  let binaryCount81 = 0;\n  let binaryCount82 = 0;\n  let binaryCount83 = 0;\n  let binaryCount84 = 0;\n  let binaryCount85 = 0;\n  let binaryCount86 = 0;\n  let binaryCount87 = 0;\n  let binaryCount88 = 0;\n  let binaryCount89 = 0;\n  let binaryCount90 = 0;\n  let binaryCount91 = 0;\n  let binaryCount92 = 0;\n  let binaryCount93 = 0;\n  let binaryCount94 = 0;\n  let binaryCount95 = 0;\n  let binaryCount96 = 0;\n  let binaryCount97 = 0;\n  let binaryCount98 = 0;\n  let binaryCount99 = 0;\n  let binaryCount100 = 0;\n  let binaryCount101 = 0;\n  let binaryCount102 = 0;\n  let binaryCount103 = 0;\n  let binaryCount104 = 0;\n  let binaryCount105 = 0;\n  let binaryCount106 = 0;\n  let binaryCount107 = 0;\n  let binaryCount108 = 0;\n  let binaryCount109 = 0;\n  let binaryCount110 = 0;\n  let binaryCount111 = 0;\n  let binaryCount112 = 0;\n  let binaryCount113 = 0;\n  let binaryCount114 = 0;\n  let binaryCount115 = 0;\n  let binaryCount116 = 0;\n  let binaryCount117 = 0;\n  let binaryCount118 = 0;\n  let binaryCount119 = 0;\n  let binaryCount120 = 0;\n  let binaryCount121 = 0;\n  let binaryCount122 = 0;\n  let binaryCount123 = 0;\n  let binaryCount124 = 0;\n  let binaryCount125 = 0;\n  let binaryCount126 = 0;\n  let binaryCount127 = 0;\n  let binaryCount128 = 0;\n  let binaryCount129 = 0;\n  let binaryCount130 = 0;\n  let binaryCount131 = 0;\n  let binaryCount132 = 0;\n  let binaryCount133 = 0;\n  let binaryCount134 = 0;\n  let binaryCount135 = 0;\n  let binaryCount136 = 0;\n  let binaryCount137 = 0;\n  let binaryCount138 = 0;\n  let binaryCount139 = 0;\n  let binaryCount140 = 0;\n  let binaryCount141 = 0;\n  let binaryCount142 = 0;\n  let binaryCount143 = 0;\n  let binaryCount144 = 0;\n  let binaryCount145 = 0;\n  let binaryCount146 = 0;\n  let binaryCount147 = 0;\n  let binaryCount148 = 0;\n  let binaryCount149 = 0;\n  let binaryCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let result = [];\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    let count = 0;\n    let j = i;\n    while (j < len) {\n      if (s[j] === s[i]) {\n        count++;\n        j++;\n      } else {\n        break;\n      }\n    }\n    if (count === n) {\n      result.push(s.substring(i, j));\n      i = j;\n    } else {\n      i = j + 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const result = []\n  let index = 0\n  let wordLength = word.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let nn = 0\n  let nnIndex = 0\n  let nnLength = 0\n  let nnWord = \"\"\n  let nnVowel = \"\"\n  let nnVowelIndex = 0\n  let nnVowelLength = 0\n  let nnVowelWord = \"\"\n  let nnVowelVowel = \"\"\n  let nnVowelVowelIndex = 0\n  let nnVowelVowelLength = 0\n  let nnVowelVowelWord = \"\"\n  let nnVowelVowelVowel = \"\"\n  let nnVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelLength = 0\n  let nnVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelWord = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = \"\"\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelIndex = 0\n  let nnVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelLength = 0\n  let nnVowelV", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const res = lst.reduce((acc, curr) => {\n    if (curr.length === 1) {\n      return acc;\n    }\n    const left = curr.slice(0, curr.length - 1);\n    const right = curr.slice(curr.length - 1);\n    if (left.length === 0) {\n      return acc;\n    }\n    if (right.length === 0) {\n      return acc;\n    }\n    if (left.length === 1) {\n      return acc;\n    }\n    if (right.length === 1) {\n      return acc;\n    }\n    if (left.length === 2 && right.length === 2) {\n      return acc;\n    }\n    if (left.length === 2 && right.length === 1) {\n      return acc;\n    }\n    if (left.length === 1 && right.length === 2) {\n      return acc;\n    }\n    if (left.length === 2 && right.length === 2) {\n      return acc;\n    }\n    return acc;\n  }, '');\n  return res === ''? 'Yes' : 'No';\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let maxLength = 0;\n  let maxString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    let currentLength = strings[i].length;\n    if (currentLength > maxLength) {\n      maxLength = currentLength;\n      maxString = strings[i];\n    }\n  }\n\n  return maxString;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n\n  const max = arr.reduce((max, val) => {\n    if (val > max) {\n      return val;\n    }\n    return max;\n  }, -Infinity);\n\n  const sorted = arr.sort((a, b) => a - b);\n\n  const result = sorted.slice(0, k);\n\n  return result;\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = arr.slice(0, k)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n\n  return result.concat(sum)\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let oddCollatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (collatz[i] % 2 === 0) {\n      oddCollatz.push(collatz[i]);\n    } else {\n      oddCollatz.push(collatz[i] * 3 + 1);\n    }\n    collatz[i] = collatz[i] + 1;\n    i++;\n  }\n  return oddCollatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let month = date.split('-')[1];\n  let day = date.split('-')[2];\n  let year = date.split('-')[0];\n\n  let days = new Date(year, month, day).getDate();\n\n  if (days < 1 || days > 31) {\n    return false;\n  }\n\n  if (month === '1' || month === '3' || month === '5' || month === '7' || month === '8' || month === '10' || month === '12') {\n    if (days < 1 || days > 31) {\n      return false;\n    }\n  }\n\n  if (month === '4' || month === '6' || month === '9' || month === '11') {\n    if (days < 1 || days > 30) {\n      return false;\n    }\n  }\n\n  if (month === '2') {\n    if (days < 1 || days > 29) {\n      return false;\n    }\n  }\n\n  if (month === '0' || month === '2') {\n    if (days < 1 || days > 29) {\n      return false;\n    }\n  }\n\n  if (month === '1' || month === '3' || month === '5' || month === '7' || month === '8' || month === '10' || month === '12') {\n    if (days < 1 || days > 31) {\n      return false;\n    }\n  }\n\n  if (month === '4' || month === '6' || month === '9' || month === '11') {\n    if (days < 1 || days > 30) {\n      return false;\n    }\n  }\n\n  if (month === '2') {\n    if (days < 1 || days > 29) {\n      return false;\n    }\n  }\n\n  if (month === '0' || month === '2') {\n    if (days < 1 || days > 29) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let wordsSplit = [];\n  let word = '';\n  let wordSplit = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = {\n  isSorted,\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * Math.sign(arr[i]);\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited = new Array(rows).fill(new Array(cols).fill(false));\n  const minPaths = new Array(rows).fill(new Array(cols).fill(Infinity));\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (!visited[i][j]) {\n        const minPathsRow = new Array(k).fill(Infinity);\n        minPathsRow[0] = grid[i][j];\n        visited[i][j] = true;\n        minPathsRow[1] = minPaths[i][j];\n        for (let i2 = 0; i2 < k; i2++) {\n          const nextRow = i + i2;\n          if (nextRow < rows &&!visited[nextRow][j]) {\n            minPathsRow[i2 + 1] = Math.min(minPathsRow[i2], minPaths[nextRow][j]);\n          }\n        }\n        minPaths[i][j] = Math.min(minPathsRow[0], minPathsRow[1]);\n      }\n    }\n  }\n  return minPaths;\n};\n\nmodule.exports = minPath;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  let gcd = 1;\n  while (a!== 0 && b!== 0) {\n    if (a < b) {\n      a = a % b;\n    } else {\n      b = b % a;\n    }\n    gcd = gcd % a;\n  }\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [a, b, c] = [1, 2, 3];\n  let [d, e, f] = [1, 2, 3];\n  let [g, h, i] = [1, 2, 3];\n  let [j, k, l] = [1, 2, 3];\n  let [m, n, o] = [1, 2, 3];\n  let [p, q, r] = [1, 2, 3];\n  let [s, t, u] = [1, 2, 3];\n  let [v, w, x] = [1, 2, 3];\n  let [y, z, aa] = [1, 2, 3];\n  let [bb, cc, dd] = [1, 2, 3];\n  let [ee, ff, gg] = [1, 2, 3];\n  let [hh, ii, jj] = [1, 2, 3];\n  let [kk, ll, mm] = [1, 2, 3];\n  let [nn, oo, pp] = [1, 2, 3];\n  let [qq, rr, ss] = [1, 2, 3];\n  let [tt, uu, vv] = [1, 2, 3];\n  let [ww, xx, yy] = [1, 2, 3];\n  let [zz, aa, bb] = [1, 2, 3];\n  let [ccc, ddd, eee] = [1, 2, 3];\n  let [fff, ggg, hhh] = [1, 2, 3];\n  let [iii, jjj, kkk] = [1, 2, 3];\n  let [lll, mmm, nnn] = [1, 2, 3];\n  let [ooo, ppp, qqq] = [1, 2, 3];\n  let [rrr, sss, ttt] = [1, 2, 3];\n  let [ttt, uuu, vvv] = [1, 2, 3];\n  let [vvv, www, xxx] = [1, 2, 3];\n  let [xxx, yyy, zzz] = [1, 2, 3];\n  let [zzz, aaa, bbb] = [1, 2, 3];\n  let [ccc, ddd, eee] = [1, 2, 3];\n  let [fff, ggg, hhh] = [1, 2, 3];\n  let [iii, jjj, kkk] = [1, 2, 3];\n  let [lll, mmm, nnn] = [1, 2, 3];\n  let [ooo, ppp, qqq] = [1, 2, 3];\n  let [rrr, sss, ttt] = [1, 2, 3];\n  let [ttt, uuu, vvv] = [1, 2, 3];\n  let [vvv, www, xxx] = [1, 2, 3];\n  let [xxx, yyy, zzz] = [1, 2, 3];\n  let [zzz, aaa, bbb] = [1, 2, 3];\n  let [ccc, ddd, eee] = [1, 2, 3];\n  let [fff, ggg, hhh] = [1, 2, 3];\n  let [iii, jjj, kkk] = [1, 2, 3];\n  let [lll, mmm, nnn] = [1, 2, 3];\n  let [ooo, ppp, qqq] = [1, 2, 3];\n  let [rrr, sss, ttt] = [1, 2, 3];\n  let [ttt, uuu, vvv] = [1, 2, 3];\n  let [vvv, www, xxx] = [1, 2, 3];\n  let [xxx, yyy, zzz] = [1, 2, 3];\n  let [zzz, aaa, bbb] = [1, 2, 3];\n  let [ccc, ddd, eee] = [1, 2, 3];\n  let [fff, ggg, hhh] = [1, 2, 3];\n  let [iii, jjj, kkk] = [1, 2, 3];\n  let [lll, mmm, nnn] = [1, 2, 3];\n  let [ooo, ppp, qqq] = [1, 2, 3];\n  let [rrr, sss, ttt] = [1, 2, 3];\n  let [ttt, uuu, vvv] = [1, 2, 3];\n  let [vvv, www, xxx] = [1, 2, 3];\n  let [xxx, yyy, zzz] = [1, 2, 3];\n  let [zzz, aaa, bbb] = [1, 2, 3];\n  let [ccc, ddd, eee] = [1, 2, 3];\n  let [fff, ggg, hhh] = [1, 2, 3];\n  let [iii, jjj, kkk] = [1, 2, 3];\n  let [lll, mmm, nnn] = [1, 2, 3];\n  let [ooo, ppp, qqq] = [1, 2, 3];\n  let [rrr, sss, ttt] = [1, 2, 3];\n  let [ttt, uuu, vvv] = [1, 2, 3];\n  let [vv", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const d = n.toString().split('').map(d => parseInt(d, 10));\n  return d.reduce((a, b) => a * b, 1);\n};\n\nmodule.exports = digits;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const brackets = ['[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += Math.pow(lst[i], 2);\n    i++;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isLetter &&!isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isLetter && isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  return isLetter && isNotALetter &&!isDigit;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigitOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isSpace = /[\\s]/.test(lastChar);\n  return isLetter && isNotALetter &&!isDigit &&!isSpace;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigitOrSpaceOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isSpace = /[\\s]/.test(lastChar);\n  return isLetter && isNotALetter &&!isDigit &&!isSpace &&!isSpace;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsNotALetter,\n  checkIfLastCharIsNotALetterOrDigit,\n  checkIfLastCharIsNotALetterOrDigitOrSpace,\n  checkIfLastCharIsNotALetterOrDigitOrSpaceOrSpace\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let result = -1;\n  while (i < j) {\n    if (arr[i] <= arr[j]) {\n      k++;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  result = k;\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const lstLen = lst.length;\n  const lstMax = lst.reduce((max, num) => {\n    return num > max? num : max;\n  }, -Infinity);\n  const lstMin = lst.reduce((min, num) => {\n    return num < min? num : min;\n  }, Infinity);\n  return [lstMax, lstMin];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b && a === c) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b && a === c && a === d) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareFive = (a, b, c, d, e) => {\n  if (a === b && a === c && a === d && a === e) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if (a === b && a === c && a === d && a === e && a === f) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\" && typeof f === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\" && typeof f === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (a === b && a === c && a === d && a === e && a === f && a === g) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\" && typeof f === \"number\" && typeof g === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\" && typeof f === \"string\" && typeof g === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareEight = (a, b, c, d, e, f, g, h) => {\n  if (a === b && a === c && a === d && a === e && a === f && a === g && a === h) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\" && typeof f === \"number\" && typeof g === \"number\" && typeof h === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\" && typeof f === \"string\" && typeof g === \"string\" && typeof h === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareNine = (a, b, c, d, e, f, g, h, i) => {\n  if (a === b && a === c && a === d && a === e && a === f && a === g && a === h && a === i) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\" &&", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The special factorial of a negative number is undefined.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [string]\n  let current = string\n  while (current.length > 0) {\n    prefixes.push(current)\n    current = current.substr(0, current.length - 1)\n  }\n  return prefixes\n}\n\n/*\n  Return list of all suffixes from longer to shorter of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.substr(current.length - 1, current.length)\n  }\n  return suffixes\n}\n\n/*\n  Return list of all combinations of the input string\n  >>> allCombinations('abc')\n  ['abc', 'bac', 'cab', 'bca', 'cba']\n  */\nconst allCombinations = (string) => {\n  let combinations = []\n  let current = string\n  while (current.length > 0) {\n    combinations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  return combinations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations2 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations3 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations4 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations5 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations6 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations7 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations8 = (string) => {\n  let permutations = []\n  let current = string\n  while (current.length > 0) {\n    permutations.push(current)\n    current = current.substr(1, current.length - 1)\n  }\n  permutations.push(current)\n  return permutations\n}\n\n/*\n  Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bca', 'cab', 'cba", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\nconst getAllWords = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i]);\n  }\n  return words;\n}\n\nconst getAllWordsWithSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i]);\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpaces = (text) => {\n  let words = [];\n  let wordsArr = text.split(\" \");\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(fixSpaces(wordsArr[i]));\n  }\n  return words;\n}\n\nconst getAllWordsWithSpacesAndFixSpacesAndRemoveAllSpacesAndRemoveAllSpacesAndRemoveAllSpacesAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = false;\n  let file_name_check_length = 0;\n  let file_name_check_substring = '';\n  let file_name_check_substring_length = 0;\n  let file_name_check_substring_start = 0;\n  let file_name_check_substring_end = 0;\n  let file_name_check_substring_end_length = 0;\n  let file_name_check_substring_end_length_check = 0;\n  let file_name_check_substring_end_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length = 0;\n  let file_name_check_substring_end_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_length_check_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = Math.max(...words.slice(0, i).map(x => Math.sqrt(x)));\n    const newWord = words.slice(0, i).join('');\n    result.push(word);\n    result.push(newWord);\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  if (x.length!== n.length) return false;\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i]!== n[i]) return false;\n    result.push(x[i]);\n  }\n  return result;\n};\n\nconst isFraction = (x) => {\n  return x.length === 2 && x[0]!== 0 && x[1]!== 0;\n};\n\nconst isValid = (x) => {\n  return isFraction(x) && simplify(x, x).length === 1;\n};\n\nconst isValidFraction = (x) => {\n  return isFraction(x) && simplify(x, x).length === 2;\n};\n\nconst isValidFraction2 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 3;\n};\n\nconst isValidFraction3 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 4;\n};\n\nconst isValidFraction4 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 5;\n};\n\nconst isValidFraction5 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 6;\n};\n\nconst isValidFraction6 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 7;\n};\n\nconst isValidFraction7 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 8;\n};\n\nconst isValidFraction8 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 9;\n};\n\nconst isValidFraction9 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 10;\n};\n\nconst isValidFraction10 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 11;\n};\n\nconst isValidFraction11 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 12;\n};\n\nconst isValidFraction12 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 13;\n};\n\nconst isValidFraction13 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 14;\n};\n\nconst isValidFraction14 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 15;\n};\n\nconst isValidFraction15 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 16;\n};\n\nconst isValidFraction16 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 17;\n};\n\nconst isValidFraction17 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 18;\n};\n\nconst isValidFraction18 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 19;\n};\n\nconst isValidFraction19 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 20;\n};\n\nconst isValidFraction20 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 21;\n};\n\nconst isValidFraction21 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 22;\n};\n\nconst isValidFraction22 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 23;\n};\n\nconst isValidFraction23 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 24;\n};\n\nconst isValidFraction24 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 25;\n};\n\nconst isValidFraction25 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 26;\n};\n\nconst isValidFraction26 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 27;\n};\n\nconst isValidFraction27 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 28;\n};\n\nconst isValidFraction28 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 29;\n};\n\nconst isValidFraction29 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 30;\n};\n\nconst isValidFraction30 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 31;\n};\n\nconst isValidFraction31 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 32;\n};\n\nconst isValidFraction32 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 33;\n};\n\nconst isValidFraction33 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 34;\n};\n\nconst isValidFraction34 = (x) => {\n  return isFraction(x) && simplify(x, x).length === 35;\n};\n\nconst isValidFraction35 = (x) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 10 === nums[i] % 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    const [i, j, k] = [...acc.slice(0, 3),...acc.slice(3, 6),...acc.slice(6, 9)];\n    const sum = i + j + k;\n    if (sum % 3 === 0) {\n      return [...acc, curr];\n    }\n    return acc;\n  }, [...a.slice(0, 3), 0]);\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit1 = planets[i].split(\" \");\n    const orbit2 = planets[i].split(\" \");\n    const distance = getDistance(planet1, planet2);\n    if (distance < orbit1[0].length && distance < orbit2[0].length) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n};\n\nconst getDistance = (planet1, planet2) => {\n  const distance = Math.sqrt(Math.pow(planet1.split(\" \")[0].length, 2) + Math.pow(planet2.split(\" \")[0].length, 2));\n  return distance;\n};\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0\n  let sortedLst = []\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length\n    sortedLst.push(lst[i])\n  }\n  return sortedLst.sort((a, b) => {\n    return a.length - b.length\n  })\n}\n\nconst list_sort = (lst) => {\n  let sortedLst = sortedListSum(lst)\n  return sortedLst\n}\n\nmodule.exports = {\n  list_sort\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n\n/*\n  Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += i +''\n  }\n  return s\n}\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(xOrY(n, x, y));\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let score = [];\n  let guesses = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let extension_name_length = 0;\n  let extension_name_index = 0;\n  let extension_name_index_length = 0;\n  let extension_name_index_index = 0;\n  let extension_name_index_index_length = 0;\n  let extension_name_index_index_index = 0;\n  let extension_name_index_index_index_length = 0;\n  let extension_name_index_index_index_index = 0;\n  let extension_name_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let aa = 0;\n    let bb = 0;\n    let cc = 0;\n    let dd = 0;\n    let ee = 0;\n    let ff = 0;\n    let gg = 0;\n    let hh = 0;\n    let ii = 0;\n    let jj = 0;\n    let kk = 0;\n    let ll = 0;\n    let mm = 0;\n    let nn = 0;\n    let oo = 0;\n    let pp = 0;\n    let qq = 0;\n    let rr = 0;\n    let ss = 0;\n    let tt = 0;\n    let uu = 0;\n    let vv = 0;\n    let ww = 0;\n    let xx = 0;\n    let yy = 0;\n    let zz = 0;\n    let aaa = 0;\n    let bbb = 0;\n    let ccc = 0;\n    let ddd = 0;\n    let eee = 0;\n    let fff = 0;\n    let ggg = 0;\n    let hhh = 0;\n    let iii = 0;\n    let jjj = 0;\n    let kkk = 0;\n    let lll = 0;\n    let mmm = 0;\n    let nnn = 0;\n    let ooo = 0;\n    let ppp = 0;\n    let qqq = 0;\n    let rrr = 0;\n    let sss = 0;\n    let ttt = 0;\n    let uuu = 0;\n    let vvv = 0;\n    let wwww = 0;\n    let xxx = 0;\n    let yyy = 0;\n    let zzz = 0;\n    let aaaa = 0;\n    let bbbb = 0;\n    let cccc = 0;\n    let dddd = 0;\n    let eeee = 0;\n    let ffff = 0;\n    let gggg = 0;\n    let hhhh = 0;\n    let iiiii = 0;\n    let jjjj = 0;\n    let kkkk = 0;\n    let llll = 0;\n    let mmmm = 0;\n    let nnnn = 0;\n    let oooo = 0;\n    let pppp = 0;\n    let qqqq = 0;\n    let rrrr = 0;\n    let ssss = 0;\n    let tttt = 0;\n    let uuuu = 0;\n    let vvvv = 0;\n    let wwwww = 0;\n    let xxxx = 0;\n    let yyyy = 0;\n    let zzzz = 0;\n    let aaaaa = 0;\n    let bbbbb = 0;\n    let ccccc = 0;\n    let ddddd = 0;\n    let eeeee = 0;\n    let fffff = 0;\n    let ggggg = 0;\n    let hhhhh = 0;\n    let iiiiii = 0;\n    let jjjjj = 0;\n    let kkkkk = 0;\n    let lllll = 0;\n    let mmmmm = 0;\n    let nnnnn = 0;\n    let ooooo = 0;\n    let ppppp = 0;\n    let qqqqq = 0;\n    let rrrrr = 0;\n    let sssss = 0;\n    let ttttt = 0;\n    let uuuuu = 0;\n    let vvvvv = 0;\n    let wwwwww = 0;\n    let xxxxxx = 0;\n    let yyyyyy = 0;\n    let zzzzzz = 0;\n    let aaaaaa = 0;\n    let bbbbbb = 0;\n    let cccccc = 0;\n    let dddddd = 0;\n    let eeeeee = 0;\n    let ffffff = 0;\n    let gggggg = 0;\n    let hhhhhh = 0;\n    let iiiiiiia = 0;\n    let jjjjjja = 0;\n    let kkkkkka = 0;\n    let lllllll = 0;\n    let mmmmmm = 0;\n    let nnnnnn = 0;\n    let ooooooo = 0;\n    let ppppppp = 0;\n    let qqqqqqq = 0;\n    let rrrrrrr = 0;\n    let sssssss = 0;\n    let ttttttt = 0;\n    let uuuuuuu = 0;\n    let vvvvvvv = 0;\n    let wwwwwwww = 0;\n    let xxxxxxxx = 0;\n    let yyyyyyyy = 0;\n    let zzzzzzzz = 0;\n    let aaaaaaaa = 0;\n    let bbbbbbbb = 0;\n    let cccccccc = 0;\n    let dddddddd = 0;\n    let eeeeeeee = 0;\n    let ffffffff = 0;\n    let gggggggg = 0;\n    let hhhhhhhh = 0;\n    let iiiiiiiiia = 0;\n    let jjjjjja = 0;\n    let kkkkkka = 0;\n    let lllllll = 0;\n    let mmmmmm = 0;\n    let nnnnnn = 0;\n    let ooooooo = 0;\n    let ppppppp = 0;\n    let qqqqqqq", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = [\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX', 'XL', 'XLI', 'XLII', 'XLIII', 'XLIV', 'XLV', 'XLVI', 'XLVII', 'XLVIII', 'XLIX', 'L', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LVI', 'LVI', 'LVII', 'LVIII', 'LIX', 'XC', 'XCI', 'XCII', 'XCIII', 'XCIV', 'XCV', 'XCVI', 'XCVII', 'XCVIII', 'XCIX', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVI', 'CVII', 'CVIII', 'CIX', 'CD', 'CDI', 'CDII', 'CDIII', 'CDIV', 'CDV', 'CDVI', 'CDVII', 'CDVIII', 'CDIX', 'CM', 'MI', 'MII', 'MIII', 'MIV', 'MV', 'MVI', 'MVII', 'MVIII', 'MIX', 'MX', 'LX', 'LIX', 'LIIX', 'LIIIX', 'LIVX', 'LVX', 'LVIIX', 'LVIIIX', 'LIX', 'CMX', 'CMXX', 'CMXXX', 'CMXXXX', 'CMXXXXX', 'CMXXXXXX', 'XCMM', 'XCMMX', 'XCMMXX', 'XCMMXXX', 'XCMMXXXX', 'XCMMXXXXX', 'XCMMXXXXXX', 'CDM', 'CDMX', 'CDMXX', 'CDMXXX', 'CDMXXXX', 'CDMXXXXX', 'CDMXXXXXX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'XCMM', 'XCMMX', 'XCMMXX', 'XCMMXXX', 'XCMMXXXX', 'XCMMXXXXX', 'XCMMXXXXXX', 'CDL', 'CDLI', 'CDLII', 'CDLIII', 'CDLIV', 'CDLV', 'CDLVI', 'CDLVII', 'CDLVIII', 'CDLIX', 'XDL', 'XDI', 'XDI', 'XDII', 'XDIII', 'XDIV', 'XDV', 'XDVI', 'XDVII', 'XDVIII', 'XDIX', 'XDLX', 'LXLI', 'LXLI', 'LXLII', 'LXLIII', 'LXLIV', 'LXLV', 'LXLVI', 'LXLVII', 'LXLVIII', 'LXLIX', 'XCL', 'XCI', 'XCII', 'XCIII', 'XCIV', 'XCV', 'XCVI', 'XCVII', 'XCVIII', 'XCIX', 'XDL', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI', 'XDI',", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ca = Math.abs(c - a);\n  if (ab + bc > ca) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = rightAngleTriangle;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, []);\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"nameofstring\" findMax([\"name\", \"enam\", \"games\"]) === \"nameenamgames\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMaxLowercase = (words) => {\n  const max = words.map(word => word.toLowerCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxUppercase = (words) => {\n  const max = words.map(word => word.toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) => {\n  const max = words.map(word => word.toLowerCase().toUpperCase());\n  return max;\n};\n\n/*Write a function that accepts a string and returns the string with all characters in lowercase and uppercase.\nfindMax([\"name\", \"of\", \"string\"]) === \"NAMEOFSTRING\" findMax([\"name\", \"enam\", \"games\"]) === \"NAMEENAMGAMES\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AAAAAAA\" */ const findMaxLowerUppercase = (words) =>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [0, 0];\n  }\n\n  const total = number - need;\n  const left = remaining - need;\n\n  return [total, left];\n};\n\nexport default eat;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let distinctChars = [];\n  let char;\n  let i;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (distinctChars.indexOf(char) === -1) {\n      distinctChars.push(char);\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let index = 0;\n  while (index < operand.length) {\n    let op = operator[index];\n    let op1 = operand[index];\n    let op2 = operand[index + 1];\n    if (op === '+') {\n      result += op1 + op2;\n    } else if (op === '-') {\n      result += op1 - op2;\n    } else if (op === '*') {\n      result += op1 * op2;\n    } else if (op === '/') {\n      result += op1 / op2;\n    } else if (op === '//') {\n      result += op1 // op2;\n    } else if (op === '^') {\n      result += Math.pow(op1, op2);\n    }\n    index += 2;\n  }\n  return result;\n};\n\nconst doAlgebraTest = (operator, operand) => {\n  let result = doAlgebra(operator, operand);\n  console.log(`${operator} ${operand} = ${result}`);\n};\n\ndoAlgebraTest('+', [2, 3, 4, 5]);\ndoAlgebraTest('-', [2, 3, 4, 5]);\ndoAlgebraTest('*', [2, 3, 4, 5]);\ndoAlgebraTest('/', [2, 3, 4, 5]);\ndoAlgebraTest('//', [2, 3, 4, 5]);\ndoAlgebraTest('^', [2, 3, 4, 5]);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else if (s.length === 1) {\n    result = s.toUpperCase();\n  } else {\n    let i = 0;\n    while (i < s.length) {\n      if (s[i].toUpperCase() === s[i]) {\n        result = result.replace(s[i], s[i].toLowerCase());\n      } else {\n        result = result.replace(s[i], s[i].toUpperCase());\n      }\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  while (a <= b) {\n    result.push(a);\n    a++;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split(' ');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i];\n    if (music_string_array_item.length === 0) {\n      continue;\n    }\n    let music_string_array_item_array = music_string_array_item.split('|');\n    let music_string_array_item_array_length = music_string_array_item_array.length;\n    for (let j = 0; j < music_string_array_item_array_length; j++) {\n      let music_string_array_item_array_item = music_string_array_item_array[j];\n      if (music_string_array_item_array_item.length === 0) {\n        continue;\n      }\n      let music_string_array_item_array_item_array = music_string_array_item_array_item.split('o');\n      let music_string_array_item_array_item_array_length = music_string_array_item_array_item_array.length;\n      for (let k = 0; k < music_string_array_item_array_item_array_length; k++) {\n        let music_string_array_item_array_item_array_item = music_string_array_item_array_item_array[k];\n        if (music_string_array_item_array_item_array_item.length === 0) {\n          continue;\n        }\n        let music_string_array_item_array_item_array_item_array = music_string_array_item_array_item_array_item.split('o');\n        let music_string_array_item_array_item_array_item_array_length = music_string_array_item_array_item_array_item_array.length;\n        for (let l = 0; l < music_string_array_item_array_item_array_length; l++) {\n          let music_string_array_item_array_item_array_item_array_item = music_string_array_item_array_item_array_item_array[l];\n          if (music_string_array_item_array_item_array_item_array_item.length === 0) {\n            continue;\n          }\n          let music_string_array_item_array_item_array_item_array_item_array = music_string_array_item_array_item_array_item_array_item.split('o');\n          let music_string_array_item_array_item_array_item_array_item_array_length = music_string_array_item_array_item_array_item_array_item_array.length;\n          for (let m = 0; m < music_string_array_item_array_item_array_item_array_length; m++) {\n            let music_string_array_item_array_item_array_item_array_item_array_item = music_string_array_item_array_item_array_item_array_item_array[m];\n            if (music_string_array_item_array_item_array_item_array_item_array_item.length === 0) {\n              continue;\n            }\n            let music_string_array_item_array_item_array_item_array_item_array_item_array = music_string_array_item_array_item_array_item_array_item_array_item_array[m];\n            let music_string_array_item_array_item_array_item_array_item_array_item_array_length = music_string_array_item_array_item_array_item_array_item_array_item_array.length;\n            for (let n = 0; n < music_string_array_item_array_item_array_item_array_item_array_length; n++) {\n              let music_string_array_item_array_item_array_item_array_item_array_item_array_item = music_string_array_item_array_item_array_item_array_item_array_item_array[n];\n              if (music_string_array_item_array_item_array_item_array_item_array_item_array_item.length === 0) {\n                continue;\n              }\n              let music_string_array_item_array_item_array_item_array_item_array_item_array_item_array_length = music_string_array_item_array_item_array_item_array_item_array_item_array_item_array.length;\n              for (let o = 0; o < music_string_array_item_array_item_array_item_array_item_array_item_array_length; o++) {\n                let music_string_array_item_array_item_array_item_array_item_array_item_array_item_array_item = music_string_array_item_array_item_array_item_array_item_array_item_array_item_array[o];\n                if (music_string_array_item_array_item_array_item_array_item_array_item_array_item_array_item.length === 0) {\n                  continue;\n                }\n                let music_string_array_item_array_item_array_item_array_item_array_item_array_item_array_item_array_item_array_length = music_string_array_item_array_item_array_item_array_item_array_item_array_item_array_item_array.length;\n                for (let p = 0; p < music_string_array_item_array_item_array_item_array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (maxLength < substring.length) {\n        maxLength = substring.length;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return maxLength;\n};\n\n/* Finds the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 0) {\n    return number;\n  }\n  return 0.0;\n};\n\nmodule.exports = {\n  truncateNumber\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit10 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 / number);\n  });\n  return result;\n};\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit11 = (numbers) => {\n  const result = numbers.map((number) => {\n    return number * (1.0 /", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter gives list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter gives list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter gives list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter gives list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter gives list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns true if the given string is empty\n  >>> isEmpty('abc')\n  false\n  >>> isEmpty('')\n  true\n  >>> isEmpty(null)\n  true\n  */\nconst isEmpty = (string) => {\n  if (string === null || string === undefined) {\n    return true;\n  }\n  return string.length === 0;\n};\n\n/*\n  Returns true if the given string is not empty\n  >>> isNotEmpty('abc')\n  true\n  >>> isNotEmpty('')\n  false\n  >>> isNotEmpty(null)\n  false\n  */\nconst isNotEmpty = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.length!== 0;\n};\n\n/*\n  Returns true if the given string is a number\n  >>> isNumber('abc')\n  false\n  >>> isNumber('123')\n  true\n  >>> isNumber(null)\n  false\n  */\nconst isNumber = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return!isNaN(parseFloat(string)) && isFinite(string);\n};\n\n/*\n  Returns true if the given string is a boolean\n  >>> isBoolean('abc')\n  false\n  >>> isBoolean('true')\n  true\n  >>> isBoolean(null)\n  false\n  */\nconst isBoolean = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string === 'true' || string === 'false';\n};\n\n/*\n  Returns true if the given string is a date\n  >>> isDate('abc')\n  false\n  >>> isDate('2015-01-01')\n  true\n  >>> isDate(null)\n  false\n  */\nconst isDate = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a time\n  >>> isTime('abc')\n  false\n  >>> isTime('2015-01-01 12:00:00')\n  true\n  >>> isTime(null)\n  false\n  */\nconst isTime = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a date and time\n  >>> isDateTime('abc')\n  false\n  >>> isDateTime('2015-01-01 12:00:00')\n  true\n  >>> isDateTime(null)\n  false\n  */\nconst isDateTime = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a datetime\n  >>> isDatetime('abc')\n  false\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime(null)\n  false\n  */\nconst isDatetime = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a datetime\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  >>> isDatetime('2015-01-01 12:00:00')\n  true\n  */\nconst isDatetime2 = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a time\n  >>> isTime('abc')\n  false\n  >>> isTime('2015-01-01 12:00:00')\n  true\n  >>> isTime(null)\n  false\n  */\nconst isTime2 = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a date and time\n  >>> isDateTime('abc')\n  false\n  >>> isDateTime('2015-01-01 12:00:00')\n  true\n  >>> isDateTime(null)\n  false\n  */\nconst isDateTime2 = (string) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if the given string is a dat", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const d = n\n  while (d % 2 == 0) {\n    d /= 2\n  }\n  while (d % 5 == 0) {\n    d /= 5\n  }\n  while (d % 3 == 0) {\n    d /= 3\n  }\n  while (d % 7 == 0) {\n    d /= 7\n  }\n  while (d % 11 == 0) {\n    d /= 11\n  }\n  while (d % 13 == 0) {\n    d /= 13\n  }\n  while (d % 17 == 0) {\n    d /= 17\n  }\n  while (d % 19 == 0) {\n    d /= 19\n  }\n  while (d % 23 == 0) {\n    d /= 23\n  }\n  while (d % 29 == 0) {\n    d /= 29\n  }\n  while (d % 31 == 0) {\n    d /= 31\n  }\n  while (d % 37 == 0) {\n    d /= 37\n  }\n  while (d % 41 == 0) {\n    d /= 41\n  }\n  while (d % 43 == 0) {\n    d /= 43\n  }\n  while (d % 47 == 0) {\n    d /= 47\n  }\n  while (d % 53 == 0) {\n    d /= 53\n  }\n  while (d % 59 == 0) {\n    d /= 59\n  }\n  while (d % 61 == 0) {\n    d /= 61\n  }\n  while (d % 67 == 0) {\n    d /= 67\n  }\n  while (d % 71 == 0) {\n    d /= 71\n  }\n  while (d % 73 == 0) {\n    d /= 73\n  }\n  while (d % 79 == 0) {\n    d /= 79\n  }\n  while (d % 83 == 0) {\n    d /= 83\n  }\n  while (d % 89 == 0) {\n    d /= 89\n  }\n  while (d % 97 == 0) {\n    d /= 97\n  }\n  while (d % 101 == 0) {\n    d /= 101\n  }\n  while (d % 103 == 0) {\n    d /= 103\n  }\n  while (d % 107 == 0) {\n    d /= 107\n  }\n  while (d % 109 == 0) {\n    d /= 109\n  }\n  while (d % 113 == 0) {\n    d /= 113\n  }\n  while (d % 127 == 0) {\n    d /= 127\n  }\n  while (d % 131 == 0) {\n    d /= 131\n  }\n  while (d % 137 == 0) {\n    d /= 137\n  }\n  while (d % 139 == 0) {\n    d /= 139\n  }\n  while (d % 149 == 0) {\n    d /= 149\n  }\n  while (d % 151 == 0) {\n    d /= 151\n  }\n  while (d % 157 == 0) {\n    d /= 157\n  }\n  while (d % 163 == 0) {\n    d /= 163\n  }\n  while (d % 167 == 0) {\n    d /= 167\n  }\n  while (d % 173 == 0) {\n    d /= 173\n  }\n  while (d % 179 == 0) {\n    d /= 179\n  }\n  while (d % 181 == 0) {\n    d /= 181\n  }\n  while (d % 191 == 0) {\n    d /= 191\n  }\n  while (d % 193 == 0) {\n    d /= 193\n  }\n  while (d % 197 == 0) {\n    d /= 197\n  }\n  while (d % 199 == 0) {\n    d /= 199\n  }\n  while (d % 211 == 0) {\n    d /= 211\n  }\n  while (d % 223 == 0) {\n    d /= 223\n  }\n  while (d % 227 == 0) {\n    d /= 227\n  }\n  while (d % 229 == 0) {\n    d /= 229\n  }\n  while (d % 233 == 0) {\n    d /= 233\n  }\n  while (d % 239 == 0) {\n    d /= 239\n  }\n  while (d % 241 == 0) {\n    d /= 241\n  }\n  while (d % 251 == 0) {\n    d /= 251\n  }\n  while (d % 257 == 0) {\n    d /= 257\n  }\n  while (d % 263 == 0) {\n    d /= 263\n  }\n  while (d % 269 == 0) {\n    d /= 269\n  }\n  while (d % 271 == 0) {\n    d /= 271\n  }\n  while (d % 277 == 0) {\n    d /= 277\n  }\n  while (d % 281 == 0) {\n    d /= 281\n  }\n  while (d % 283 == 0) {\n    d /= 283\n  }\n  while (d % 293 == 0) {\n    d /= 293\n  }\n  while (d % 307 == 0) {\n    d /= 307\n  }\n  while (d % 311 == 0) {\n    d /= 311\n  }\n  while (d % 313 == 0) {\n    d /= 313\n  }\n  while (d % 317 == 0) {\n    d /= 317\n  }\n  while (d % 331 == 0) {\n    d /= 331\n  }\n  while (d % 337 == 0) {\n    d /= 337\n  }\n  while (d % 347 == 0) {\n    d /= 347\n  }\n  while (d % 349 == 0) {\n    d /= 349\n  }\n  while (d % 353 == 0) {\n    d /= 353\n  }\n  while (d % 359 == 0) {\n    d /= 359\n  }\n  while (d % 367 == 0) {\n    d /= 367\n  }\n  while (d % 373", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst primeFactors = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors2 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors3 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors4 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors5 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors6 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors7 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors8 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors9 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors10 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors11 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors12 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors13 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors14 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors15 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors16 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors17 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors18 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors19 = (n) => {\n  let factors = primeFactors(n);\n  let i = 0;\n  while (factors[i]!== n) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFactors20 = (n) => {\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === numbers.length || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCaseAll = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAll('Hello')\n  'HELLO'\n  */\nconst flipCaseAllExcept = (string, except) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExcept('Hello', 'o')\n  'HELLO'\n  */\nconst flipCaseAllExceptAll = (string, except) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExceptAll('Hello', 'o')\n  'HELLO'\n  */\nconst flipCaseAllExceptAllExcept = (string, except, exceptExcept) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).filter((letter) => exceptExcept.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExceptAllExcept('Hello', 'o', 'o')\n  'HELLO'\n  */\nconst flipCaseAllExceptAllExceptAll = (string, except, exceptExcept, exceptExceptExcept) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).filter((letter) => exceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExcept.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExceptAllExceptAll('Hello', 'o', 'o', 'o')\n  'HELLO'\n  */\nconst flipCaseAllExceptAllExceptAllExcept = (string, except, exceptExcept, exceptExceptExcept, exceptExceptExceptExcept) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).filter((letter) => exceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExceptExcept.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExceptAllExceptAllExcept('Hello', 'o', 'o', 'o', 'o', 'o', 'o')\n  'HELLO'\n  */\nconst flipCaseAllExceptAllExceptAllExceptAll = (string, except, exceptExcept, exceptExceptExcept, exceptExceptExceptExcept, exceptExceptExceptExceptExcept) => {\n  return string.toLowerCase().split('').filter((letter) => except.indexOf(letter) === -1).filter((letter) => exceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExceptExcept.indexOf(letter) === -1).filter((letter) => exceptExceptExceptExceptExcept.indexOf(letter) === -1).map((letter) => letter.toUpperCase());\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllExceptAllExceptAllExceptAll('Hello', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Convert a string to a camel case string\n  >>> camelCase('hello world')\n  'helloWorld'\n  */\nconst camelCase = (string) => {\n  return string.replace(/[-_\\s]+(.)?/g, (match, char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Convert a string to a snake case string\n  >>> snakeCase('hello_world')\n  'helloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/[-_\\s]+/g, '_');\n};\n\n/*\n  Convert a string to a kebab case string\n  >>> kebabCase('hello_world')\n  'hello-world'\n  */\nconst kebabCase = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase2 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase3 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase4 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase5 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase6 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase7 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase8 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase9 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase10 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase11 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase12 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase13 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase14 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase15 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase16 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase17 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello-world')\n  'hello-world'\n  */\nconst dashCase18 = (string) => {\n  return string.replace(/[-_\\s]+/g, '-');\n};\n\n/*\n  Convert a string to a dash case string\n  >>> dashCase('hello", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].startsWith(prefix)? [strings[0]] : [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a gives suffix.\n  * @param {Array} strings\n  * @param {String} suffix\n  * @returns {Array}\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].endsWith(suffix)? [strings[0]] : [];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByContains = (strings, string) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].includes(string)? [strings[0]] : [];\n  }\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].match(regex)? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotContains = (strings, string) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(string, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(string, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(regex, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(regex, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotContainsRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(regex, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(regex, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotRegexRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(regex, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(regex, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotRegexContains = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(regex, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(regex, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotRegexContainsRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].replace(regex, '').length === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.replace(regex, '').length === 0);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings\n  * @param {String} string\n  * @returns {Array}\n  */\nconst filterByNotRegexContainsNotRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero2 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero3 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero4 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero5 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero6 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero7 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero8 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero9 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero10 = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\n/*\n  You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task is to detect if at any point the balance of accounts falls", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, 5, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) => x >= 0);\n};\n\n/*Return only even numbers in the list.\n  >>> getEven([-1, 2, -4, 5, 6])\n  [2, 4]\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, 5, 9]\n  */\nconst getEven = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n\n/*Return only odd numbers in the list.\n  >>> getOdd([-1, 2, -4, 5, 6])\n  [-1, -3, -5]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-3, -5, -9]\n  */\nconst getOdd = (l) => {\n  return l.filter((x) => x % 2!== 0);\n};\n\n/*Return only the sum of all numbers in the list.\n  >>> getSum([-1, 2, -4, 5, 6])\n  6\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  10\n  */\nconst getSum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*Return the product of all numbers in the list.\n  >>> getProduct([-1, 2, -4, 5, 6])\n  6\n  >>> getProduct([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getProduct = (l) => {\n  return l.reduce((a, b) => a * b);\n};\n\n/*Return the average of all numbers in the list.\n  >>> getAverage([-1, 2, -4, 5, 6])\n  -1.3333333333333333\n  >>> getAverage([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1.3333333333333333\n  */\nconst getAverage = (l) => {\n  return l.reduce((a, b) => a + b) / l.length;\n};\n\n/*Return the median of all numbers in the list.\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -1\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst getMedian = (l) => {\n  return l.reduce((a, b) => a + b) / 2;\n};\n\n/*Return the mode of all numbers in the list.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMode = (l) => {\n  return l.reduce((a, b) => {\n    if (a === b) {\n      return a;\n    }\n    return a;\n  });\n};\n\n/*Return the mode of all numbers in the list.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMode = (l) => {\n  return l.reduce((a, b) => {\n    if (a === b) {\n      return a;\n    }\n    return a;\n  });\n};\n\n/*Return the mode of all numbers in the list.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMode = (l) => {\n  return l.reduce((a, b) => {\n    if (a === b) {\n      return a;\n    }\n    return a;\n  });\n};\n\n/*Return the mode of all numbers in the list.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMode = (l) => {\n  return l.reduce((a, b) => {\n    if (a === b) {\n      return a;\n    }\n    return a;\n  });\n};\n\n/*Return the mode of all numbers in the list.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = xs.reduce((prev, item, index) => { return Math.max(prev, item);\n }, 0);\n  const min = xs.reduce((prev, item, index) => { return Math.min(prev, item);\n }, 0);\n  const mid = (max + min) / 2;\n  const x = (max - min) / 2;\n  const y = poly(xs, x);\n  const z = poly(xs, mid);\n  const w = poly(xs, x + x);\n  const p = poly(xs, mid + x);\n  const q = poly(xs, mid + x + x);\n  const r = poly(xs, mid + x + x + x);\n  const s = poly(xs, mid + x + x + x + x);\n  const t = poly(xs, mid + x + x + x + x + x);\n  const u = poly(xs, mid + x + x + x + x + x + x);\n  const v = poly(xs, mid + x + x + x + x + x + x + x);\n  const w = poly(xs, mid + x + x + x + x + x + x + x + x);\n  const zz = poly(xs, mid + x + x + x + x + x + x + x + x + x);\n  const zzz = poly(xs, mid + x + x + x + x + x + x + x + x + x + x + x);\n  const zzzz = poly(xs, mid + x + x + x + x + x + x + x + x + x + x + x + x + x);\n  const zzzzz = poly(xs, mid + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x);\n  const zzzzzz = poly(xs, mid + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let l200 = [];\n  let l201 = [];\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    lst.push(l[j]);\n    j++;\n  }\n  return lst;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 10) {\n    return n;\n  }\n  if (n % 10 === 7) {\n    return fizzBuzz(n / 10) + 1;\n  }\n  if (n % 13 === 11) {\n    return fizzBuzz(n / 13) + 2;\n  }\n  return fizzBuzz(n / 13) + 3;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice(0);\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = l.slice(0);\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = l.slice(0);\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEven = (l) => {\n  let l2 = l.slice(0);\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let l2 = l.slice(0);\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvenOddOdd = (l) => {\n  let l2 = l.slice(0);\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvenOddOddOdd = (l) => {\n  let l2 = l.slice(0);\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic2 functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic3 functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic4 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic4 functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic5 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic5 functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    throw new Error('PrimeFib: n must be greater than 1');\n  }\n  let fib = 1;\n  let prime = true;\n  while (prime) {\n    fib = fib * (n - 1) + 1;\n    prime = isPrime(fib);\n  }\n  return fib;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      sum = 0;\n      count = 0;\n    } else if (l[i] === 1) {\n      sum += l[i];\n      count++;\n    } else {\n      sum += l[i];\n      if (l[i] === sum) {\n        count++;\n      }\n    }\n  }\n  return count === 3 && sum === 0;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision = (n) => {\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) === 1) {\n          collision++;\n        }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    result", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      sum += l[i];\n      i++;\n      j++;\n    } else {\n      if (sum === 0) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  base numbers was greater than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\n/*\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h) => {\n  if (a < 2) {\n    throw new Error('Triangle area must be greater than 1.');\n  }\n  return a * h / 2;\n};\n\n/**\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  2\n  */\nconst triangleArea = (a, h)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Empty list');\n  }\n  const sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n  } else {\n    return sorted[sorted.length / 2];\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n\n  return first === last && isPalindrome(text.substring(1, text.length - 1));\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error(`${n} is not in range [0, ${p}]`)\n  return Math.pow(n, 1 / p) % p\n}\n\n/*Return the number of digits in the number.\n  >>> digits(0)\n  0\n  >>> digits(1)\n  1\n  >>> digits(2)\n  2\n  >>> digits(3)\n  3\n  >>> digits(4)\n  4\n  >>> digits(5)\n  5\n  >>> digits(6)\n  6\n  >>> digits(7)\n  7\n  >>> digits(8)\n  8\n  >>> digits(9)\n  9\n  >>> digits(10)\n  10\n  >>> digits(11)\n  11\n  >>> digits(12)\n  12\n  >>> digits(13)\n  13\n  >>> digits(14)\n  14\n  >>> digits(15)\n  15\n  >>> digits(16)\n  16\n  >>> digits(17)\n  17\n  >>> digits(18)\n  18\n  >>> digits(19)\n  19\n  >>> digits(20)\n  20\n  >>> digits(21)\n  21\n  >>> digits(22)\n  22\n  >>> digits(23)\n  23\n  >>> digits(24)\n  24\n  >>> digits(25)\n  25\n  >>> digits(26)\n  26\n  >>> digits(27)\n  27\n  >>> digits(28)\n  28\n  >>> digits(29)\n  29\n  >>> digits(30)\n  30\n  >>> digits(31)\n  31\n  >>> digits(32)\n  32\n  >>> digits(33)\n  33\n  >>> digits(34)\n  34\n  >>> digits(35)\n  35\n  >>> digits(36)\n  36\n  >>> digits(37)\n  37\n  >>> digits(38)\n  38\n  >>> digits(39)\n  39\n  >>> digits(40)\n  40\n  >>> digits(41)\n  41\n  >>> digits(42)\n  42\n  >>> digits(43)\n  43\n  >>> digits(44)\n  44\n  >>> digits(45)\n  45\n  >>> digits(46)\n  46\n  >>> digits(47)\n  47\n  >>> digits(48)\n  48\n  >>> digits(49)\n  49\n  >>> digits(50)\n  50\n  >>> digits(51)\n  51\n  >>> digits(52)\n  52\n  >>> digits(53)\n  53\n  >>> digits(54)\n  54\n  >>> digits(55)\n  55\n  >>> digits(56)\n  56\n  >>> digits(57)\n  57\n  >>> digits(58)\n  58\n  >>> digits(59)\n  59\n  >>> digits(60)\n  60\n  >>> digits(61)\n  61\n  >>> digits(62)\n  62\n  >>> digits(63)\n  63\n  >>> digits(64)\n  64\n  >>> digits(65)\n  65\n  >>> digits(66)\n  66\n  >>> digits(67)\n  67\n  >>> digits(68)\n  68\n  >>> digits(69)\n  69\n  >>> digits(70)\n  70\n  >>> digits(71)\n  71\n  >>> digits(72)\n  72\n  >>> digits(73)\n  73\n  >>> digits(74)\n  74\n  >>> digits(75)\n  75\n  >>> digits(76)\n  76\n  >>> digits(77)\n  77\n  >>> digits(78)\n  78\n  >>> digits(79)\n  79\n  >>> digits(80)\n  80\n  >>> digits(81)\n  81\n  >>> digits(82)\n  82\n  >>> digits(83)\n  83\n  >>> digits(84)\n  84\n  >>> digits(85)\n  85\n  >>> digits(86)\n  86\n  >>> digits(87)\n  87\n  >>> digits(88)\n  88\n  >>> digits(89)\n  89\n  >>> digits(90)\n  90\n  >>> digits(91)\n  91\n  >>> digits(92)\n  92\n  >>> digits(93)\n  93\n  >>> digits(94)\n  94\n  >>> digits(95)\n  95\n  >>> digits(96)\n  96\n  >>> digits(97)\n  97\n  >>> digits(98)\n  98\n  >>> digits(99)\n  99\n  >>> digits(100)\n  100\n  >>> digits(101)\n  101\n  >>> digits(102)\n  102\n  >>> digits(103)\n  103\n  >>> digits(104)\n  104\n  >>> digits(105)\n  105\n  >>> digits(106)\n  106\n  >>> digits(107)\n  107\n  >>> digits(108)\n  108\n  >>> digits(109)\n  109\n  >>> digits(110)\n  110\n  >>> digits(111)\n  111\n  >>> digits(112)\n  112\n  >>> digits(113)\n  113\n  >>> digits(114)\n  114\n  >>> digits(115)\n  115\n  >>> digits(116)\n  116\n  >>> digits(117)\n  117\n  >>> digits(118)\n  118\n  >>> digits(119)\n  119\n  >>> digits(120)\n  120\n  >>> digits(121)\n  121\n  >>> digits(122)\n  122\n  >>> digits(123)\n  123\n  >>> digits(124)\n  124\n  >>> digits(125)\n  125\n  >>> digits(126)\n  126\n  >>> digits(127)\n  127\n  >>> digits(128)\n  128\n  >>> digits(129)\n  129\n  >>> digits(130)\n  130\n  >>> digits(131)\n  131\n  >>> digits(132)\n  132\n  >>> digits(133)\n  133\n  >>> digits(134)\n  134\n  >>> digits(135)\n  135\n  >>> digits(136)\n  136\n  >>> digits(137)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  const current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array_string = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return vowels.includes(result)? result : result.toLowerCase();\n};\n\nmodule.exports = {\n  removeVowels\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  aboveThreshold,\n  belowThreshold\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) return n;\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_rec", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (closingBrackets.indexOf(openingBrackets[i]) === -1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common_elements = [];\n  const l1_length = l1.length;\n  const l2_length = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1_length && j < l2_length) {\n    if (l1[i] === l2[j]) {\n      common_elements.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common_elements;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    throw new Error('n must be greater than 1')\n  }\n  if (n % 2 === 0) {\n    return 2\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.split(' ');\n  const max_nesting = groups.reduce((acc, group) => {\n    const nested_parens = group.match(/\\(([^()]+)\\)/g);\n    return nested_parens? nested_parens.length + acc : acc;\n  }, 0);\n  return groups.map((group) => {\n    return max_nesting - group.match(/\\(([^()]+)\\)/g).length;\n  });\n};\n\nmodule.exports = {\n  parseNestedParens\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsCount = 0;\n  let bracketsIndex = 0;\n  let bracketsLength = brackets.length;\n  let bracketsIndexLength = brackets.length;\n  let bracketsIndexes = [];\n  let bracketsIndexesLength = 0;\n  let bracketsIndexesIndex = 0;\n  let bracketsIndexesIndexLength = 0;\n  let bracketsIndexesIndexes = [];\n  let bracketsIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let bracketsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.slice(0);\n  const xs3 = xs2.slice(0);\n  const xs4 = xs3.slice(0);\n  const xs5 = xs4.slice(0);\n  const xs6 = xs5.slice(0);\n  const xs7 = xs6.slice(0);\n  const xs8 = xs7.slice(0);\n  const xs9 = xs8.slice(0);\n  const xs10 = xs9.slice(0);\n  const xs11 = xs10.slice(0);\n  const xs12 = xs11.slice(0);\n  const xs13 = xs12.slice(0);\n  const xs14 = xs13.slice(0);\n  const xs15 = xs14.slice(0);\n  const xs16 = xs15.slice(0);\n  const xs17 = xs16.slice(0);\n  const xs18 = xs17.slice(0);\n  const xs19 = xs18.slice(0);\n  const xs20 = xs19.slice(0);\n  const xs21 = xs20.slice(0);\n  const xs22 = xs21.slice(0);\n  const xs23 = xs22.slice(0);\n  const xs24 = xs23.slice(0);\n  const xs25 = xs24.slice(0);\n  const xs26 = xs25.slice(0);\n  const xs27 = xs26.slice(0);\n  const xs28 = xs27.slice(0);\n  const xs29 = xs28.slice(0);\n  const xs30 = xs29.slice(0);\n  const xs31 = xs30.slice(0);\n  const xs32 = xs31.slice(0);\n  const xs33 = xs32.slice(0);\n  const xs34 = xs33.slice(0);\n  const xs35 = xs34.slice(0);\n  const xs36 = xs35.slice(0);\n  const xs37 = xs36.slice(0);\n  const xs38 = xs37.slice(0);\n  const xs39 = xs38.slice(0);\n  const xs40 = xs39.slice(0);\n  const xs41 = xs40.slice(0);\n  const xs42 = xs41.slice(0);\n  const xs43 = xs42.slice(0);\n  const xs44 = xs43.slice(0);\n  const xs45 = xs44.slice(0);\n  const xs46 = xs45.slice(0);\n  const xs47 = xs46.slice(0);\n  const xs48 = xs47.slice(0);\n  const xs49 = xs48.slice(0);\n  const xs50 = xs49.slice(0);\n  const xs51 = xs50.slice(0);\n  const xs52 = xs51.slice(0);\n  const xs53 = xs52.slice(0);\n  const xs54 = xs53.slice(0);\n  const xs55 = xs54.slice(0);\n  const xs56 = xs55.slice(0);\n  const xs57 = xs56.slice(0);\n  const xs58 = xs57.slice(0);\n  const xs59 = xs58.slice(0);\n  const xs60 = xs59.slice(0);\n  const xs61 = xs60.slice(0);\n  const xs62 = xs61.slice(0);\n  const xs63 = xs62.slice(0);\n  const xs64 = xs63.slice(0);\n  const xs65 = xs64.slice(0);\n  const xs66 = xs65.slice(0);\n  const xs67 = xs66.slice(0);\n  const xs68 = xs67.slice(0);\n  const xs69 = xs68.slice(0);\n  const xs70 = xs69.slice(0);\n  const xs71 = xs70.slice(0);\n  const xs72 = xs71.slice(0);\n  const xs73 = xs72.slice(0);\n  const xs74 = xs73.slice(0);\n  const xs75 = xs74.slice(0);\n  const xs76 = xs75.slice(0);\n  const xs77 = xs76.slice(0);\n  const xs78 = xs77.slice(0);\n  const xs79 = xs78.slice(0);\n  const xs80 = xs79.slice(0);\n  const xs81 = xs80.slice(0);\n  const xs82 = xs81.slice(0);\n  const xs83 = xs82.slice(0);\n  const xs84 = xs83.slice(0);\n  const xs85 = xs84.slice(0);\n  const xs86 = xs85.slice(0);\n  const xs87 = xs86.slice(0);\n  const xs88 = xs87.slice(0);\n  const xs89 = xs88.slice(0);\n  const xs90 = xs89.slice(0);\n  const xs91 = xs90.slice(0);\n  const xs92 = xs91.slice(0);\n  const xs93 = xs92.slice(0);\n  const xs94 = xs93.slice(0);\n  const xs95 = xs94.slice(0);\n  const xs96 = xs95.slice(0);\n  const xs97 = x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 0;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y') {\n      if (i === 0 || i === s.length - 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all lowercase, false otherwise. Examples:\n  >>> isLowercase(\"Hello\")\n  true\n  >>> isLowercase(\"Hello World\")\n  false\n  >>> isLowercase(\"Hello World!\")\n  true\n*/\nconst isLowercase = (s) => {\n  return s.toLowerCase() === s;\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all uppercase, false otherwise. Examples:\n  >>> isUppercase(\"Hello\")\n  false\n  >>> isUppercase(\"Hello World\")\n  true\n  >>> isUppercase(\"Hello World!\")\n  false\n*/\nconst isUppercase = (s) => {\n  return s.toUpperCase() === s;\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all digits, false otherwise. Examples:\n  >>> isDigit(\"Hello\")\n  false\n  >>> isDigit(\"Hello World\")\n  false\n  >>> isDigit(\"Hello World!\")\n  true\n*/\nconst isDigit = (s) => {\n  return /^\\d+$/.test(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters, false otherwise. Examples:\n  >>> isLetter(\"Hello\")\n  false\n  >>> isLetter(\"Hello World\")\n  true\n  >>> isLetter(\"Hello World!\")\n  false\n*/\nconst isLetter = (s) => {\n  return /^[a-zA-Z]+$/.test(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers, false otherwise. Examples:\n  >>> isLetterAndDigit(\"Hello\")\n  false\n  >>> isLetterAndDigit(\"Hello World\")\n  false\n  >>> isLetterAndDigit(\"Hello World!\")\n  true\n*/\nconst isLetterAndDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all lowercase, false otherwise. Examples:\n  >>> isAllLettersDigitsAndLowercase(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndLowercase(\"Hello World\")\n  false\n  >>> isAllLettersDigitsAndLowercase(\"Hello World!\")\n  true\n*/\nconst isAllLettersDigitsAndLowercase = (s) => {\n  return isLetterAndDigit(s) && isLowercase(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all uppercase, false otherwise. Examples:\n  >>> isAllLettersDigitsAndUppercase(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndUppercase(\"Hello World\")\n  false\n  >>> isAllLettersDigitsAndUppercase(\"Hello World!\")\n  true\n*/\nconst isAllLettersDigitsAndUppercase = (s) => {\n  return isLetterAndDigit(s) && isUppercase(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all digits, false otherwise. Examples:\n  >>> isAllLettersDigitsAndDigits(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndDigits(\"Hello World\")\n  false\n  >>> isAllLettersDigitsAndDigits(\"Hello World!\")\n  true\n*/\nconst isAllLettersDigitsAndDigits = (s) => {\n  return isLetterAndDigit(s) && isDigit(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all letters and numbers, false otherwise. Examples:\n  >>> isAllLettersDigitsAndLettersAndDigits(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndLettersAndDigits(\"Hello World\")\n  false\n  >>> isAllLettersDigitsAndLettersAndDigits(\"Hello World!\")\n  true\n*/\nconst isAllLettersDigitsAndLettersAndDigits = (s) => {\n  return isLetterAndDigit(s) && isLetterAndDigit(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all letters and numbers and the string is all lowercase, false otherwise. Examples:\n  >>> isAllLettersDigitsAndLettersAndDigitsAndLowercase(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndLettersAndDigitsAndLowercase(\"Hello World\")\n  false\n  >>> isAllLettersDigitsAndLettersAndDigitsAndLowercase(\"Hello World!\")\n  true\n*/\nconst isAllLettersDigitsAndLettersAndDigitsAndLowercase = (s) => {\n  return isAllLettersDigitsAndLettersAndDigits(s) && isLowercase(s);\n};\n\n/*\nWrite a function that takes a string and returns true if the string is all letters and numbers and the string is all letters and numbers and the string is all uppercase, false otherwise. Examples:\n  >>> isAllLettersDigitsAndLettersAndDigitsAndUppercase(\"Hello\")\n  false\n  >>> isAllLettersDigitsAndLettersAndDig", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  let i = 0;\n  while (i < shift) {\n    result = result * 10 + x % 10;\n    x = x / 10;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst stringToNumber = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 10 + str.charCodeAt(i++);\n  }\n  return result;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @returns {string}\n */\nconst numberToString = (num) => {\n  let result = \"\";\n  while (num > 0) {\n    result = num % 10 + result;\n    num = num / 10;\n  }\n  return result;\n};\n\n/**\n * Convert a number to a hex string.\n * @param {number} num\n * @returns {string}\n */\nconst numberToHex = (num) => {\n  let result = \"\";\n  while (num > 0) {\n    result = num % 16 + result;\n    num = num / 16;\n  }\n  return result;\n};\n\n/**\n * Convert a number to a binary string.\n * @param {number} num\n * @returns {string}\n */\nconst numberToBinary = (num) => {\n  let result = \"\";\n  while (num > 0) {\n    result = num % 2 + result;\n    num = num / 2;\n  }\n  return result;\n};\n\n/**\n * Convert a number to a base-64 string.\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase64 = (num) => {\n  let result = \"\";\n  while (num > 0) {\n    result = numberToBase64Table[num % 64] + result;\n    num = num / 64;\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber2 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber3 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber4 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber5 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber6 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber7 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber8 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number.\n * @param {string} str\n * @returns {number}\n */\nconst base64ToNumber9 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result = result * 64 + base64ToNumberTable[str.charCodeAt(i++)];\n  }\n  return result;\n};\n\n/**\n * Convert a base-64 string to a number", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) > 57? s.charCodeAt(i) - 87 : s.charCodeAt(i) + 87;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      res.push([arr[i], i]);\n    }\n  }\n  return res;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => a > b? a : b, -1);\n  const max_index = lst.reduce((a, b) => a > b? a : b, -1);\n  const max_index_index = lst.reduce((a, b) => a > b? a : b, -1);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n    if (lst[i] > max_index) {\n      max_index_index = i;\n    }\n  }\n  if (max_index_index === -1) {\n    return -1;\n  }\n  return max_index_index;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByNotRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.match(regex));\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByNotSubstring,\n  filterByRegex,\n  filterByNotRegex\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  return result;\n};\n\nmodule.exports = strangeSortList;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea19 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea20 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea21 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea22 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea23 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea24 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea25 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea26 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea27 = (a, b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const max = q.reduce((a, b) => a + b, 0);\n  return q.reduce((a, b) => a + b, 0) <= w && q.reduce((a, b) => a + b, 0) === max;\n};\n\nmodule.exports = {\n  willItFly,\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopy2 = arrCopy.slice();\n  let arrCopy3 = arrCopy.slice();\n  let arrCopy4 = arrCopy.slice();\n  let arrCopy5 = arrCopy.slice();\n  let arrCopy6 = arrCopy.slice();\n  let arrCopy7 = arrCopy.slice();\n  let arrCopy8 = arrCopy.slice();\n  let arrCopy9 = arrCopy.slice();\n  let arrCopy10 = arrCopy.slice();\n  let arrCopy11 = arrCopy.slice();\n  let arrCopy12 = arrCopy.slice();\n  let arrCopy13 = arrCopy.slice();\n  let arrCopy14 = arrCopy.slice();\n  let arrCopy15 = arrCopy.slice();\n  let arrCopy16 = arrCopy.slice();\n  let arrCopy17 = arrCopy.slice();\n  let arrCopy18 = arrCopy.slice();\n  let arrCopy19 = arrCopy.slice();\n  let arrCopy20 = arrCopy.slice();\n  let arrCopy21 = arrCopy.slice();\n  let arrCopy22 = arrCopy.slice();\n  let arrCopy23 = arrCopy.slice();\n  let arrCopy24 = arrCopy.slice();\n  let arrCopy25 = arrCopy.slice();\n  let arrCopy26 = arrCopy.slice();\n  let arrCopy27 = arrCopy.slice();\n  let arrCopy28 = arrCopy.slice();\n  let arrCopy29 = arrCopy.slice();\n  let arrCopy30 = arrCopy.slice();\n  let arrCopy31 = arrCopy.slice();\n  let arrCopy32 = arrCopy.slice();\n  let arrCopy33 = arrCopy.slice();\n  let arrCopy34 = arrCopy.slice();\n  let arrCopy35 = arrCopy.slice();\n  let arrCopy36 = arrCopy.slice();\n  let arrCopy37 = arrCopy.slice();\n  let arrCopy38 = arrCopy.slice();\n  let arrCopy39 = arrCopy.slice();\n  let arrCopy40 = arrCopy.slice();\n  let arrCopy41 = arrCopy.slice();\n  let arrCopy42 = arrCopy.slice();\n  let arrCopy43 = arrCopy.slice();\n  let arrCopy44 = arrCopy.slice();\n  let arrCopy45 = arrCopy.slice();\n  let arrCopy46 = arrCopy.slice();\n  let arrCopy47 = arrCopy.slice();\n  let arrCopy48 = arrCopy.slice();\n  let arrCopy49 = arrCopy.slice();\n  let arrCopy50 = arrCopy.slice();\n  let arrCopy51 = arrCopy.slice();\n  let arrCopy52 = arrCopy.slice();\n  let arrCopy53 = arrCopy.slice();\n  let arrCopy54 = arrCopy.slice();\n  let arrCopy55 = arrCopy.slice();\n  let arrCopy56 = arrCopy.slice();\n  let arrCopy57 = arrCopy.slice();\n  let arrCopy58 = arrCopy.slice();\n  let arrCopy59 = arrCopy.slice();\n  let arrCopy60 = arrCopy.slice();\n  let arrCopy61 = arrCopy.slice();\n  let arrCopy62 = arrCopy.slice();\n  let arrCopy63 = arrCopy.slice();\n  let arrCopy64 = arrCopy.slice();\n  let arrCopy65 = arrCopy.slice();\n  let arrCopy66 = arrCopy.slice();\n  let arrCopy67 = arrCopy.slice();\n  let arrCopy68 = arrCopy.slice();\n  let arrCopy69 = arrCopy.slice();\n  let arrCopy70 = arrCopy.slice();\n  let arrCopy71 = arrCopy.slice();\n  let arrCopy72 = arrCopy.slice();\n  let arrCopy73 = arrCopy.slice();\n  let arrCopy74 = arrCopy.slice();\n  let arrCopy75 = arrCopy.slice();\n  let arrCopy76 = arrCopy.slice();\n  let arrCopy77 = arrCopy.slice();\n  let arrCopy78 = arrCopy.slice();\n  let arrCopy79 = arrCopy.slice();\n  let arrCopy80 = arrCopy.slice();\n  let arrCopy81 = arrCopy.slice();\n  let arrCopy82 = arrCopy.slice();\n  let arrCopy83 = arrCopy.slice();\n  let arrCopy84 = arrCopy.slice();\n  let arrCopy85 = arrCopy.slice();\n  let arrCopy86 = arrCopy.slice();\n  let arrCopy87 = arrCopy.slice();\n  let arrCopy88 = arrCopy.slice();\n  let arrCopy89 = arrCopy.slice();\n  let arrCopy90 = arrCopy.slice();\n  let arrCopy91 = arrCopy.slice();\n  let arrCopy92 = arrCopy.slice();\n  let arrCopy93 = arrCopy.slice();\n  let arrCopy94 = arrCopy.slice();\n  let arrCopy95 = arrCopy.slice();\n  let arrCopy96 = arrCopy.slice();\n  let arrCopy97 = arrCopy.slice();\n  let arrCopy98 = arrCopy.slice();\n  let arrCopy99 = arrCopy.slice();\n  let arrCopy100 = arrCopy.slice();\n  let arrCopy101 = arrCopy.slice();\n  let arrCopy102 = arrCopy.slice();\n  let arrCopy103 = arrCopy.slice();\n  let arrCopy104 = arrCopy.slice();\n  let arrCopy105 = arrCopy.slice();\n  let arrCopy106 = arrCopy.slice();\n  let arrCopy107 = arrCopy.slice();\n  let arrCopy108 = arrCopy.slice();\n  let arrCopy109 = arrCopy.slice();\n  let arrCopy110 = arrCopy.slice();\n  let arrCopy111 = arrCopy.slice();\n  let arrCopy112 = arrCopy.slice();\n  let arrCopy113 = arrCopy.slice();\n  let arrCopy114 = arrCopy.slice();\n  let arrCopy115 = arrCopy.slice();\n  let arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Index = 0;\n  const lst2Index = 0;\n  const result = [];\n  while (lst1Index < lst1Length && lst2Index < lst2Length) {\n    if (lst1[lst1Index] < lst2[lst2Index]) {\n      result.push(lst1[lst1Index]);\n      lst1Index++;\n    } else if (lst1[lst1Index] > lst2[lst2Index]) {\n      result.push(lst2[lst2Index]);\n      lst2Index++;\n    } else {\n      result.push(lst1[lst1Index]);\n      lst1Index++;\n      lst2Index++;\n    }\n  }\n  while (lst1Index < lst1Length) {\n    result.push(lst1[lst1Index]);\n    lst1Index++;\n  }\n  while (lst2Index < lst2Length) {\n    result.push(lst2[lst2Index]);\n    lst2Index++;\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower2(x, n);\n};\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower3(x, n);\n};\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower4(x, n);\n};\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower5(x, n);\n};\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower6(x, n);\n};\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower7(x, n);\n};\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower8(x, n);\n};\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower9(x, n);\n};\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower10(x, n);\n};\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower11(x, n);\n};\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower12(x, n);\n};\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower13(x, n);\n};\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower14(x, n);\n};\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower15(x, n);\n};\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower16(x, n);\n};\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower17(x, n);\n};\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 0) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let nums = num.split('');\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      result += parseInt(num, 10);\n    } else {\n      result += parseInt(num.substr(0, num.length - 1), 10);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime2 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime3 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime4 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime5 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime6 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime7 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime8 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime9 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime10 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime11 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime12 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime13 = (num) => {\n  let isPrime = true;\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst isPrime14 = (num) => {\n  let isPrime = true;\n  let sqrt = Math", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryNumber = \"\";\n  let binaryNumberLength = 0;\n  let binaryNumberIndex = 0;\n  let binaryNumberIndex2 = 0;\n  let binaryNumberIndex3 = 0;\n  let binaryNumberIndex4 = 0;\n  let binaryNumberIndex5 = 0;\n  let binaryNumberIndex6 = 0;\n  let binaryNumberIndex7 = 0;\n  let binaryNumberIndex8 = 0;\n  let binaryNumberIndex9 = 0;\n  let binaryNumberIndex10 = 0;\n  let binaryNumberIndex11 = 0;\n  let binaryNumberIndex12 = 0;\n  let binaryNumberIndex13 = 0;\n  let binaryNumberIndex14 = 0;\n  let binaryNumberIndex15 = 0;\n  let binaryNumberIndex16 = 0;\n  let binaryNumberIndex17 = 0;\n  let binaryNumberIndex18 = 0;\n  let binaryNumberIndex19 = 0;\n  let binaryNumberIndex20 = 0;\n  let binaryNumberIndex21 = 0;\n  let binaryNumberIndex22 = 0;\n  let binaryNumberIndex23 = 0;\n  let binaryNumberIndex24 = 0;\n  let binaryNumberIndex25 = 0;\n  let binaryNumberIndex26 = 0;\n  let binaryNumberIndex27 = 0;\n  let binaryNumberIndex28 = 0;\n  let binaryNumberIndex29 = 0;\n  let binaryNumberIndex30 = 0;\n  let binaryNumberIndex31 = 0;\n  let binaryNumberIndex32 = 0;\n  let binaryNumberIndex33 = 0;\n  let binaryNumberIndex34 = 0;\n  let binaryNumberIndex35 = 0;\n  let binaryNumberIndex36 = 0;\n  let binaryNumberIndex37 = 0;\n  let binaryNumberIndex38 = 0;\n  let binaryNumberIndex39 = 0;\n  let binaryNumberIndex40 = 0;\n  let binaryNumberIndex41 = 0;\n  let binaryNumberIndex42 = 0;\n  let binaryNumberIndex43 = 0;\n  let binaryNumberIndex44 = 0;\n  let binaryNumberIndex45 = 0;\n  let binaryNumberIndex46 = 0;\n  let binaryNumberIndex47 = 0;\n  let binaryNumberIndex48 = 0;\n  let binaryNumberIndex49 = 0;\n  let binaryNumberIndex50 = 0;\n  let binaryNumberIndex51 = 0;\n  let binaryNumberIndex52 = 0;\n  let binaryNumberIndex53 = 0;\n  let binaryNumberIndex54 = 0;\n  let binaryNumberIndex55 = 0;\n  let binaryNumberIndex56 = 0;\n  let binaryNumberIndex57 = 0;\n  let binaryNumberIndex58 = 0;\n  let binaryNumberIndex59 = 0;\n  let binaryNumberIndex60 = 0;\n  let binaryNumberIndex61 = 0;\n  let binaryNumberIndex62 = 0;\n  let binaryNumberIndex63 = 0;\n  let binaryNumberIndex64 = 0;\n  let binaryNumberIndex65 = 0;\n  let binaryNumberIndex66 = 0;\n  let binaryNumberIndex67 = 0;\n  let binaryNumberIndex68 = 0;\n  let binaryNumberIndex69 = 0;\n  let binaryNumberIndex70 = 0;\n  let binaryNumberIndex71 = 0;\n  let binaryNumberIndex72 = 0;\n  let binaryNumberIndex73 = 0;\n  let binaryNumberIndex74 = 0;\n  let binaryNumberIndex75 = 0;\n  let binaryNumberIndex76 = 0;\n  let binaryNumberIndex77 = 0;\n  let binaryNumberIndex78 = 0;\n  let binaryNumberIndex79 = 0;\n  let binaryNumberIndex80 = 0;\n  let binaryNumberIndex81 = 0;\n  let binaryNumberIndex82 = 0;\n  let binaryNumberIndex83 = 0;\n  let binaryNumberIndex84 = 0;\n  let binaryNumberIndex85 = 0;\n  let binaryNumberIndex86 = 0;\n  let binaryNumberIndex87 = 0;\n  let binaryNumberIndex88 = 0;\n  let binaryNumberIndex89 = 0;\n  let binaryNumberIndex90 = 0;\n  let binaryNumberIndex91 = 0;\n  let binaryNumberIndex92 = 0;\n  let binaryNumberIndex93 = 0;\n  let binaryNumberIndex94 = 0;\n  let binaryNumberIndex95 = 0;\n  let binaryNumberIndex96 = 0;\n  let binaryNumberIndex97 = 0;\n  let binaryNumberIndex98 = 0;\n  let binaryNumberIndex99 = 0;\n  let binaryNumberIndex100 = 0;\n  let binaryNumberIndex101 = 0;\n  let binaryNumberIndex102 = 0;\n  let binaryNumberIndex103 = 0;\n  let binaryNumberIndex104 = 0;\n  let binaryNumberIndex105 = 0;\n  let binaryNumberIndex106 = 0;\n  let binaryNumberIndex107 = 0;\n  let binaryNumberIndex108 = 0;\n  let binaryNumberIndex109 = 0;\n  let binaryNumberIndex110 = 0;\n  let binaryNumberIndex111 = 0;\n  let binaryNumberIndex112 = 0;\n  let binaryNumberIndex113 = 0;\n  let binaryNumberIndex114 = 0;\n  let binaryNumberIndex115 = 0;\n  let binaryNumberIndex116 = 0;\n  let binaryNumberIndex117 = 0;\n  let binaryNumberIndex118 = 0;\n  let binaryNumberIndex119 = 0;\n  let binaryNumberIndex120 = 0;\n  let binaryNumberIndex121 = 0;\n  let binaryNumberIndex122 = 0;\n  let binaryNumberIndex123 = 0;\n  let binaryNumberIndex124 = 0;\n  let binaryNumberIndex125 = 0;\n  let binaryNumberIndex126 = 0;\n  let binaryNumberIndex127 = 0;\n  let binaryNumberIndex128 = 0;\n  let binaryNumberIndex129 = 0;\n  let binaryNumberIndex130 = 0;\n  let binaryNumberIndex131 = 0;\n  let binaryNumberIndex132 = 0;\n  let binaryNumberIndex133 = 0;\n  let binaryNumberIndex134 = 0;\n  let binaryNumberIndex135 = 0;\n  let binaryNumberIndex136 = 0;\n  let binaryNumber", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  */\nconst sumProduct2 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct3 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct4 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct5 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct6 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct7 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct8 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct9 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct10 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct11 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct12 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct13 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct14 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct15 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct16 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct17 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct18 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct19 = (numbers, int) => {\n  const sum = 0,\n    product = 1;\n  for (let i = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let map = {};\n  let len = str.length;\n  let i = 0;\n  while (i < len) {\n    let curr = str[i];\n    if (map[curr]) {\n      return false;\n    }\n    map[curr] = true;\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = 'A';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeList = [];\n  let gradeListLength = 0;\n  let gradeListLength2 = 0;\n  let gradeListLength3 = 0;\n  let gradeListLength4 = 0;\n  let gradeListLength5 = 0;\n  let gradeListLength6 = 0;\n  let gradeListLength7 = 0;\n  let gradeListLength8 = 0;\n  let gradeListLength9 = 0;\n  let gradeListLength10 = 0;\n  let gradeListLength11 = 0;\n  let gradeListLength12 = 0;\n  let gradeListLength13 = 0;\n  let gradeListLength14 = 0;\n  let gradeListLength15 = 0;\n  let gradeListLength16 = 0;\n  let gradeListLength17 = 0;\n  let gradeListLength18 = 0;\n  let gradeListLength19 = 0;\n  let gradeListLength20 = 0;\n  let gradeListLength21 = 0;\n  let gradeListLength22 = 0;\n  let gradeListLength23 = 0;\n  let gradeListLength24 = 0;\n  let gradeListLength25 = 0;\n  let gradeListLength26 = 0;\n  let gradeListLength27 = 0;\n  let gradeListLength28 = 0;\n  let gradeListLength29 = 0;\n  let gradeListLength30 = 0;\n  let gradeListLength31 = 0;\n  let gradeListLength32 = 0;\n  let gradeListLength33 = 0;\n  let gradeListLength34 = 0;\n  let gradeListLength35 = 0;\n  let gradeListLength36 = 0;\n  let gradeListLength37 = 0;\n  let gradeListLength38 = 0;\n  let gradeListLength39 = 0;\n  let gradeListLength40 = 0;\n  let gradeListLength41 = 0;\n  let gradeListLength42 = 0;\n  let gradeListLength43 = 0;\n  let gradeListLength44 = 0;\n  let gradeListLength45 = 0;\n  let gradeListLength46 = 0;\n  let gradeListLength47 = 0;\n  let gradeListLength48 = 0;\n  let gradeListLength49 = 0;\n  let gradeListLength50 = 0;\n  let gradeListLength51 = 0;\n  let gradeListLength52 = 0;\n  let gradeListLength53 = 0;\n  let gradeListLength54 = 0;\n  let gradeListLength55 = 0;\n  let gradeListLength56 = 0;\n  let gradeListLength57 = 0;\n  let gradeListLength58 = 0;\n  let gradeListLength59 = 0;\n  let gradeListLength60 = 0;\n  let gradeListLength61 = 0;\n  let gradeListLength62 = 0;\n  let gradeListLength63 = 0;\n  let gradeListLength64 = 0;\n  let gradeListLength65 = 0;\n  let gradeListLength66 = 0;\n  let gradeListLength67 = 0;\n  let gradeListLength68 = 0;\n  let gradeListLength69 = 0;\n  let gradeListLength70 = 0;\n  let gradeListLength71 = 0;\n  let gradeListLength72 = 0;\n  let gradeListLength73 = 0;\n  let gradeListLength74 = 0;\n  let gradeListLength75 = 0;\n  let gradeListLength76 = 0;\n  let gradeListLength77 = 0;\n  let gradeListLength78 = 0;\n  let gradeListLength79 = 0;\n  let gradeListLength80 = 0;\n  let gradeListLength81 = 0;\n  let gradeListLength82 = 0;\n  let gradeListLength83 = 0;\n  let gradeListLength84 = 0;\n  let gradeListLength85 = 0;\n  let gradeListLength86 = 0;\n  let gradeListLength87 = 0;\n  let gradeListLength88 = 0;\n  let gradeListLength89 = 0;\n  let gradeListLength90 = 0;\n  let gradeListLength91 = 0;\n  let gradeListLength92 = 0;\n  let gradeListLength93 = 0;\n  let gradeListLength94 = 0;\n  let gradeListLength95 = 0;\n  let gradeListLength96 = 0;\n  let gradeListLength97 = 0;\n  let gradeListLength98 = 0;\n  let gradeListLength99 = 0;\n  let gradeListLength100 = 0;\n  let gradeListLength101 = 0;\n  let gradeListLength102 = 0;\n  let gradeListLength103 = 0;\n  let gradeListLength104 = 0;\n  let gradeListLength105 = 0;\n  let gradeListLength106 = 0;\n  let gradeListLength107 = 0;\n  let gradeListLength108 = 0;\n  let gradeListLength109 = 0;\n  let gradeListLength110 = 0;\n  let gradeListLength111 = 0;\n  let gradeListLength112 = 0;\n  let gradeListLength113 = 0;\n  let gradeListLength114 = 0;\n  let gradeListLength115 = 0;\n  let gradeListLength116 = 0;\n  let gradeListLength117 = 0;\n  let gradeListLength118 = 0;\n  let gradeListLength119 = 0;\n  let gradeListLength120 = 0;\n  let gradeListLength121 = 0;\n  let gradeListLength122 = 0;\n  let gradeListLength123 = 0;\n  let gradeListLength124 = 0;\n  let gradeListLength125 = 0;\n  let gradeListLength126 = 0;\n  let gradeListLength127 = 0;\n  let gradeListLength128 = 0;\n  let gradeListLength129 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  let isPrime = true;\n  let i = 2;\n  while (i <= string.length) {\n    if (string.length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 2. */ const startsTwoEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 2) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 3. */ const startsThreeEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 3) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 4. */ const startsFourEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 4) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 5. */ const startsFiveEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 5) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 6. */ const startsSixEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 6) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 7. */ const startsSevenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 7) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 8. */ const startsEightEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 8) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 9. */ const startsNineEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 9) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 10. */ const startsTenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 10) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 11. */ const startsElevenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 11) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 12. */ const startsTwelveEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 12) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 13. */ const startsThirteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 13) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 14. */ const startsFourteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 14) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 15. */ const startsFifteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 15) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 16. */ const startsSixteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 16)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add2 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add3 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add4 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add5 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add6 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add7 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add8 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add9 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add10 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add11 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add12 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add13 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add14 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add15 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add16 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add17 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add18 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add19 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add20 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add21 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add22 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add23 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add24 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add25 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add26 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nconst add27 = (l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let sorted = [];\n  let sortedByCol = [];\n  let sortedByRow = [];\n  let sortedByRowCol = [];\n  let sortedByColRow = [];\n  let sortedByColRowCol = [];\n  let sortedByRowColRow = [];\n  let sortedByRowColRowCol = [];\n  let sortedByRowColRowColCol = [];\n  let sortedByRowColRowColColCol = [];\n  let sortedByRowColRowColColColCol = [];\n  let sortedByRowColRowColColColColCol = [];\n  let sortedByRowColRowColColColColColCol = [];\n  let sortedByRowColRowColColColColColCol = [];\n  let sortedByRowColRowColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];\n  let sortedByRowColRowColColColColColColColCol = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  let sortedArrayLength = sortedArray.length;\n  let sum = 0;\n  let index = 0;\n  let index2 = 0;\n  let index3 = 0;\n  let index4 = 0;\n  let index5 = 0;\n  let index6 = 0;\n  let index7 = 0;\n  let index8 = 0;\n  let index9 = 0;\n  let index10 = 0;\n  let index11 = 0;\n  let index12 = 0;\n  let index13 = 0;\n  let index14 = 0;\n  let index15 = 0;\n  let index16 = 0;\n  let index17 = 0;\n  let index18 = 0;\n  let index19 = 0;\n  let index20 = 0;\n  let index21 = 0;\n  let index22 = 0;\n  let index23 = 0;\n  let index24 = 0;\n  let index25 = 0;\n  let index26 = 0;\n  let index27 = 0;\n  let index28 = 0;\n  let index29 = 0;\n  let index30 = 0;\n  let index31 = 0;\n  let index32 = 0;\n  let index33 = 0;\n  let index34 = 0;\n  let index35 = 0;\n  let index36 = 0;\n  let index37 = 0;\n  let index38 = 0;\n  let index39 = 0;\n  let index40 = 0;\n  let index41 = 0;\n  let index42 = 0;\n  let index43 = 0;\n  let index44 = 0;\n  let index45 = 0;\n  let index46 = 0;\n  let index47 = 0;\n  let index48 = 0;\n  let index49 = 0;\n  let index50 = 0;\n  let index51 = 0;\n  let index52 = 0;\n  let index53 = 0;\n  let index54 = 0;\n  let index55 = 0;\n  let index56 = 0;\n  let index57 = 0;\n  let index58 = 0;\n  let index59 = 0;\n  let index60 = 0;\n  let index61 = 0;\n  let index62 = 0;\n  let index63 = 0;\n  let index64 = 0;\n  let index65 = 0;\n  let index66 = 0;\n  let index67 = 0;\n  let index68 = 0;\n  let index69 = 0;\n  let index70 = 0;\n  let index71 = 0;\n  let index72 = 0;\n  let index73 = 0;\n  let index74 = 0;\n  let index75 = 0;\n  let index76 = 0;\n  let index77 = 0;\n  let index78 = 0;\n  let index79 = 0;\n  let index80 = 0;\n  let index81 = 0;\n  let index82 = 0;\n  let index83 = 0;\n  let index84 = 0;\n  let index85 = 0;\n  let index86 = 0;\n  let index87 = 0;\n  let index88 = 0;\n  let index89 = 0;\n  let index90 = 0;\n  let index91 = 0;\n  let index92 = 0;\n  let index93 = 0;\n  let index94 = 0;\n  let index95 = 0;\n  let index96 = 0;\n  let index97 = 0;\n  let index98 = 0;\n  let index99 = 0;\n  let index100 = 0;\n  let index101 = 0;\n  let index102 = 0;\n  let index103 = 0;\n  let index104 = 0;\n  let index105 = 0;\n  let index106 = 0;\n  let index107 = 0;\n  let index108 = 0;\n  let index109 = 0;\n  let index110 = 0;\n  let index111 = 0;\n  let index112 = 0;\n  let index113 = 0;\n  let index114 = 0;\n  let index115 = 0;\n  let index116 = 0;\n  let index117 = 0;\n  let index118 = 0;\n  let index119 = 0;\n  let index120 = 0;\n  let index121 = 0;\n  let index122 = 0;\n  let index123 = 0;\n  let index124 = 0;\n  let index125 = 0;\n  let index126 = 0;\n  let index127 = 0;\n  let index128 = 0;\n  let index129 = 0;\n  let index130 = 0;\n  let index131 = 0;\n  let index132 = 0;\n  let index133 = 0;\n  let index134 = 0;\n  let index135 = 0;\n  let index136 = 0;\n  let index137 = 0;\n  let index138 = 0;\n  let index139 = 0;\n  let index140 = 0;\n  let index141 = 0;\n  let index142 = 0;\n  let index143 = 0;\n  let index144 = 0;\n  let index145 = 0;\n  let index146 = 0;\n  let index147 = 0;\n  let index148 = 0;\n  let index149 = 0;\n  let index150 = 0;\n  let index151 = 0;\n  let index152 = 0;\n  let index153 = 0;\n  let index154 = 0;\n  let index155 = 0;\n  let index156 = 0;\n  let index157 = 0;\n  let index158 = 0;\n  let index159 = 0;\n  let index160 = 0;\n  let index161 = 0;\n  let index162 = 0;\n  let index163 = 0;\n  let index164 = 0;\n  let index165 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt6 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt7 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt8 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt9 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt10 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt11 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt12 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt13 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i);\n    let n = c % 26;\n    n = n + 26;\n    result = result + String.fromCharCode(n);\n    i++;\n  }\n  return result;\n};\n\nconst encrypt14 = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str.charCodeAt(i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingMin = (numbers) => {\n  const min = numbers[0];\n  const minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(minIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling sum elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 5, 5, 7, 7]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers[0];\n  const sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum > numbers.length) {\n      sum = numbers.length;\n    }\n    if (sumIndex < sum) {\n      sumIndex = sum;\n    }\n  }\n  return numbers.slice(sumIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling average elements finds until gives moment in the sequences.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4]\n  */\nconst rollingAverage = (numbers) => {\n  const sum = numbers[0];\n  const sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum > numbers.length) {\n      sum = numbers.length;\n    }\n    if (sumIndex < sum) {\n      sumIndex = sum;\n    }\n  }\n  return numbers.slice(sumIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling median elements finds until gives moment in the sequences.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const median = numbers[0];\n  const medianIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < median) {\n      median = numbers[i];\n      medianIndex = i;\n    }\n  }\n  return numbers.slice(medianIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling mode elements finds until gives moment in the sequences.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingMode = (numbers) => {\n  const mode = numbers[0];\n  const modeIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      modeIndex = i;\n    }\n  }\n  return numbers.slice(modeIndex);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 1, 1, 1, 1, 1]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  const mean = rollingMean(numbers);\n  const standardDeviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    standardDeviation += Math.pow(numbers[i] - mean, 2);\n  }\n  standardDeviation = Math.sqrt(standardDeviation / numbers.length);\n  return numbers.slice(0);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling variance elements finds until gives moment in the sequences.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 1, 1, 1, 1, 1]\n  */\nconst rollingVariance = (numbers) => {\n  const mean = rollingMean(numbers);\n  const variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  variance = Math.sqrt(variance / numbers.length);\n  return numbers.slice(0);\n};\n\n/*\n  From a gives list of integers, generating a list of rolling variance elements finds until gives moment in the sequences.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 1, 1, 1, 1, 1]\n  */\nconst rollingVariance = (numbers) => {\n  const mean = rollingMean(numbers);\n  const variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  variance = Math.sqrt(variance / numbers.length);\n  return numbers.slice(0);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconst test = (lst) => {\n  console.log(nextSmallest(lst));\n};\n\ntest([1, 2, 3, 4, 5]);\ntest([5, 1, 4, 3, 2]);\ntest([]);\ntest([1, 1]);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[.?!]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0 && words[i].match(/^[a-zA-Z]+$/)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes a number and returns the sum of the number and the number itself.\n  Examples\n  sum(5) ➞ 10\n  sum(3) ➞ 6\n  sum(-2) ➞ -4\n  sum(3.6) ➞ 7.2\n  */\nconst sum = (x) => x + x;\n\n/* Create a function that takes a number and returns the difference of the number and the number itself.\n  Examples\n  diff(5) ➞ 4\n  diff(3) ➞ 2\n  diff(-2) ➞ 2\n  diff(3.6) ➞ 2.6\n  */\nconst diff = (x) => x - x;\n\n/* Create a function that takes a number and returns the product of the number and the number itself.\n  Examples\n  product(5) ➞ 25\n  product(3) ➞ 9\n  product(-2) ➞ -4\n  product(3.6) ➞ 9.6\n  */\nconst product = (x) => x * x;\n\n/* Create a function that takes a number and returns the quotient of the number and the number itself.\n  Examples\n  quotient(5) ➞ 1\n  quotient(3) ➞ 1\n  quotient(-2) ➞ -1\n  quotient(3.6) ➞ 0.6\n  */\nconst quotient = (x) => x / x;\n\n/* Create a function that takes a number and returns the remainder of the number and the number itself.\n  Examples\n  remainder(5) ➞ 0\n  remainder(3) ➞ 0\n  remainder(-2) ➞ -2\n  remainder(3.6) ➞ 0.6\n  */\nconst remainder = (x) => x % x;\n\n/* Create a function that takes a number and returns the absolute value of the number.\n  Examples\n  abs(5) ➞ 5\n  abs(-5) ➞ 5\n  abs(3.6) ➞ 3.6\n  */\nconst abs = (x) => Math.abs(x);\n\n/* Create a function that takes a number and returns the sign of the number.\n  Examples\n  sign(5) ➞ 1\n  sign(-5) ➞ -1\n  sign(3.6) ➞ 1\n  */\nconst sign = (x) => x < 0? -1 : 1;\n\n/* Create a function that takes a number and returns the square of the number.\n  Examples\n  square(5) ➞ 25\n  square(-5) ➞ -25\n  square(3.6) ➞ 9.36\n  */\nconst square = (x) => x * x;\n\n/* Create a function that takes a number and returns the cube of the number.\n  Examples\n  cube(5) ➞ 125\n  cube(-5) ➞ -125\n  cube(3.6) ➞ 9.36\n  */\nconst cube = (x) => x * x * x;\n\n/* Create a function that takes a number and returns the sine of the number.\n  Examples\n  sin(5) ➞ 5.26\n  sin(-5) ➞ -5.26\n  sin(3.6) ➞ 3.14\n  */\nconst sin = (x) => Math.sin(x);\n\n/* Create a function that takes a number and returns the cosine of the number.\n  Examples\n  cos(5) ➞ 1\n  cos(-5) ➞ -1\n  cos(3.6) ➞ 0.98\n  */\nconst cos = (x) => Math.cos(x);\n\n/* Create a function that takes a number and returns the tangent of the number.\n  Examples\n  tan(5) ➞ 0.996\n  tan(-5) ➞ -0.996\n  tan(3.6) ➞ 0.98\n  */\nconst tan = (x) => Math.tan(x);\n\n/* Create a function that takes a number and returns the arc sine of the number.\n  Examples\n  asin(5) ➞ 5.26\n  asin(-5) ➞ -5.26\n  asin(3.6) ➞ 3.14\n  */\nconst asin = (x) => Math.asin(x);\n\n/* Create a function that takes a number and returns the arc cosine of the number.\n  Examples\n  acos(5) ➞ 5.26\n  acos(-5) ➞ -5.26\n  acos(3.6) ➞ 3.14\n  */\nconst acos = (x) => Math.acos(x);\n\n/* Create a function that takes a number and returns the arc tangent of the number.\n  Examples\n  atan(5) ➞ 5.26\n  atan(-5) ➞ -5.26\n  atan(3.6) ➞ 3.14\n  */\nconst atan = (x) => Math.atan(x);\n\n/* Create a function that takes a number and returns the arc tangent of the number.\n  Examples\n  atan2(5, 3) ➞ 1.57\n  atan2(-5, 3) ➞ -1.57\n  atan2(3.6, 2) ➞ 1.14\n  */\nconst atan2 = (x, y) => Math.atan2(x, y);\n\n/* Create a function that takes a number and returns the hyperbolic sine of the number.\n  Examples\n  sinh(5) ➞ 5.26\n  sinh(-5) ➞ -5.26\n  sinh(3.6) ➞ 3.14\n  */\nconst sinh = (x) => Math.sinh(x);\n\n/* Create a function that takes a number and", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const encoded = message.split('').map((letter) => letters.indexOf(letter)!== -1? letter.toUpperCase() : letter.toLowerCase());\n  return encoded.join('');\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let res = 0;\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_index_prime = 0;\n  let max_prime_index_prime_prime = 0;\n  let max_prime_index_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const keysLength = keys.length;\n  let isAllString = true;\n  let isAllUpperCase = true;\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (typeof value!== \"string\") {\n      isAllString = false;\n    }\n    if (typeof value!== \"string\") {\n      isAllUpperCase = false;\n    }\n  }\n  return isAllString && isAllUpperCase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) {\n    throw new Error('n must be non-negative');\n  }\n  let result = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_2 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_3 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_4 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_5 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_6 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_7 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_8 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_9 = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_sum = 0;\n  let b_sum = 0;\n  for (let i = 0; i < a_len; i++) {\n    a_sum += parseInt(a_[i]);\n  }\n  for (let i = 0; i < b_len; i++) {\n    b_sum += parseInt(b_[i]);\n  }\n  return a_sum * b_sum;\n};\n\nconst multiply_10 = (a, b) => {\n  let a_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let diff2 = Math.abs(value - closest);\n  if (diff2 < diff) {\n    closest = value;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
